
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00027000 <_vector_table>:
   27000:	c0 64 00 20 f5 8f 03 00 95 56 04 00 c9 8f 03 00     .d. .....V......
   27010:	c9 8f 03 00 c9 8f 03 00 c9 8f 03 00 00 00 00 00     ................
	...
   2702c:	31 8c 03 00 c9 8f 03 00 00 00 00 00 d9 8b 03 00     1...............
   2703c:	c9 8f 03 00                                         ....

00027040 <_irq_vector_table>:
   27040:	e1 8c 03 00 ab 7d 04 00 e1 8c 03 00 e1 8c 03 00     .....}..........
   27050:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   27060:	59 7d 04 00 e1 8c 03 00 e1 8c 03 00 91 7d 04 00     Y}...........}..
   27070:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   27080:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   27090:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270a0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270b0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270c0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270d0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270e0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................
   270f0:	e1 8c 03 00 e1 8c 03 00 e1 8c 03 00 e1 8c 03 00     ................

Disassembly of section text:

00027100 <__aeabi_ldivmod>:
   27100:	b97b      	cbnz	r3, 27122 <__aeabi_ldivmod+0x22>
   27102:	b972      	cbnz	r2, 27122 <__aeabi_ldivmod+0x22>
   27104:	2900      	cmp	r1, #0
   27106:	bfbe      	ittt	lt
   27108:	2000      	movlt	r0, #0
   2710a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   2710e:	e006      	blt.n	2711e <__aeabi_ldivmod+0x1e>
   27110:	bf08      	it	eq
   27112:	2800      	cmpeq	r0, #0
   27114:	bf1c      	itt	ne
   27116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   2711a:	f04f 30ff 	movne.w	r0, #4294967295
   2711e:	f000 b857 	b.w	271d0 <__aeabi_idiv0>
   27122:	f1ad 0c08 	sub.w	ip, sp, #8
   27126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2712a:	2900      	cmp	r1, #0
   2712c:	db09      	blt.n	27142 <__aeabi_ldivmod+0x42>
   2712e:	2b00      	cmp	r3, #0
   27130:	db1a      	blt.n	27168 <__aeabi_ldivmod+0x68>
   27132:	f00c f8ff 	bl	33334 <__udivmoddi4>
   27136:	f8dd e004 	ldr.w	lr, [sp, #4]
   2713a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2713e:	b004      	add	sp, #16
   27140:	4770      	bx	lr
   27142:	4240      	negs	r0, r0
   27144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27148:	2b00      	cmp	r3, #0
   2714a:	db1b      	blt.n	27184 <__aeabi_ldivmod+0x84>
   2714c:	f00c f8f2 	bl	33334 <__udivmoddi4>
   27150:	f8dd e004 	ldr.w	lr, [sp, #4]
   27154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27158:	b004      	add	sp, #16
   2715a:	4240      	negs	r0, r0
   2715c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27160:	4252      	negs	r2, r2
   27162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   27166:	4770      	bx	lr
   27168:	4252      	negs	r2, r2
   2716a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2716e:	f00c f8e1 	bl	33334 <__udivmoddi4>
   27172:	f8dd e004 	ldr.w	lr, [sp, #4]
   27176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2717a:	b004      	add	sp, #16
   2717c:	4240      	negs	r0, r0
   2717e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27182:	4770      	bx	lr
   27184:	4252      	negs	r2, r2
   27186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2718a:	f00c f8d3 	bl	33334 <__udivmoddi4>
   2718e:	f8dd e004 	ldr.w	lr, [sp, #4]
   27192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27196:	b004      	add	sp, #16
   27198:	4252      	negs	r2, r2
   2719a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2719e:	4770      	bx	lr

000271a0 <__aeabi_uldivmod>:
   271a0:	b953      	cbnz	r3, 271b8 <__aeabi_uldivmod+0x18>
   271a2:	b94a      	cbnz	r2, 271b8 <__aeabi_uldivmod+0x18>
   271a4:	2900      	cmp	r1, #0
   271a6:	bf08      	it	eq
   271a8:	2800      	cmpeq	r0, #0
   271aa:	bf1c      	itt	ne
   271ac:	f04f 31ff 	movne.w	r1, #4294967295
   271b0:	f04f 30ff 	movne.w	r0, #4294967295
   271b4:	f000 b80c 	b.w	271d0 <__aeabi_idiv0>
   271b8:	f1ad 0c08 	sub.w	ip, sp, #8
   271bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   271c0:	f00c f8b8 	bl	33334 <__udivmoddi4>
   271c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   271c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   271cc:	b004      	add	sp, #16
   271ce:	4770      	bx	lr

000271d0 <__aeabi_idiv0>:
   271d0:	4770      	bx	lr
   271d2:	bf00      	nop

000271d4 <ocrypto_bigint_add256>:
   271d4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   271d8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   271dc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   271e0:	185b      	adds	r3, r3, r1
   271e2:	eb54 040c 	adcs.w	r4, r4, ip
   271e6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   271ea:	414d      	adcs	r5, r1
   271ec:	eb56 060c 	adcs.w	r6, r6, ip
   271f0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   271f4:	414f      	adcs	r7, r1
   271f6:	eb58 080c 	adcs.w	r8, r8, ip
   271fa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   271fe:	eb59 0901 	adcs.w	r9, r9, r1
   27202:	eb5a 0a0c 	adcs.w	sl, sl, ip
   27206:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   2720a:	4180      	sbcs	r0, r0
   2720c:	3001      	adds	r0, #1
   2720e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   27212:	4770      	bx	lr

00027214 <ocrypto_bigint_sub256>:
   27214:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   27218:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   2721c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   27220:	1a5b      	subs	r3, r3, r1
   27222:	eb74 040c 	sbcs.w	r4, r4, ip
   27226:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   2722a:	418d      	sbcs	r5, r1
   2722c:	eb76 060c 	sbcs.w	r6, r6, ip
   27230:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   27234:	418f      	sbcs	r7, r1
   27236:	eb78 080c 	sbcs.w	r8, r8, ip
   2723a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   2723e:	eb79 0901 	sbcs.w	r9, r9, r1
   27242:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   27246:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   2724a:	4180      	sbcs	r0, r0
   2724c:	4240      	negs	r0, r0
   2724e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   27252:	4770      	bx	lr

00027254 <ocrypto_bigint_cadd256>:
   27254:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   27258:	4252      	negs	r2, r2
   2725a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   2725e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   27262:	4017      	ands	r7, r2
   27264:	19db      	adds	r3, r3, r7
   27266:	ea18 0802 	ands.w	r8, r8, r2
   2726a:	eb54 0408 	adcs.w	r4, r4, r8
   2726e:	ea19 0902 	ands.w	r9, r9, r2
   27272:	eb55 0509 	adcs.w	r5, r5, r9
   27276:	ea1a 0a02 	ands.w	sl, sl, r2
   2727a:	eb56 060a 	adcs.w	r6, r6, sl
   2727e:	c078      	stmia	r0!, {r3, r4, r5, r6}
   27280:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   27284:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   27288:	4017      	ands	r7, r2
   2728a:	417b      	adcs	r3, r7
   2728c:	ea18 0802 	ands.w	r8, r8, r2
   27290:	eb54 0408 	adcs.w	r4, r4, r8
   27294:	ea19 0902 	ands.w	r9, r9, r2
   27298:	eb55 0509 	adcs.w	r5, r5, r9
   2729c:	ea1a 0a02 	ands.w	sl, sl, r2
   272a0:	eb56 060a 	adcs.w	r6, r6, sl
   272a4:	c078      	stmia	r0!, {r3, r4, r5, r6}
   272a6:	4180      	sbcs	r0, r0
   272a8:	3001      	adds	r0, #1
   272aa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   272ae:	4770      	bx	lr

000272b0 <ocrypto_bigint_csub256>:
   272b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   272b4:	4252      	negs	r2, r2
   272b6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   272ba:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   272be:	4017      	ands	r7, r2
   272c0:	1bdb      	subs	r3, r3, r7
   272c2:	ea18 0802 	ands.w	r8, r8, r2
   272c6:	eb74 0408 	sbcs.w	r4, r4, r8
   272ca:	ea19 0902 	ands.w	r9, r9, r2
   272ce:	eb75 0509 	sbcs.w	r5, r5, r9
   272d2:	ea1a 0a02 	ands.w	sl, sl, r2
   272d6:	eb76 060a 	sbcs.w	r6, r6, sl
   272da:	c078      	stmia	r0!, {r3, r4, r5, r6}
   272dc:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   272e0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   272e4:	4017      	ands	r7, r2
   272e6:	41bb      	sbcs	r3, r7
   272e8:	ea18 0802 	ands.w	r8, r8, r2
   272ec:	eb74 0408 	sbcs.w	r4, r4, r8
   272f0:	ea19 0902 	ands.w	r9, r9, r2
   272f4:	eb75 0509 	sbcs.w	r5, r5, r9
   272f8:	ea1a 0a02 	ands.w	sl, sl, r2
   272fc:	eb76 060a 	sbcs.w	r6, r6, sl
   27300:	c078      	stmia	r0!, {r3, r4, r5, r6}
   27302:	4180      	sbcs	r0, r0
   27304:	4240      	negs	r0, r0
   27306:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   2730a:	4770      	bx	lr

0002730c <ocrypto_bigint_cswap256>:
   2730c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   27310:	4252      	negs	r2, r2
   27312:	f04f 0804 	mov.w	r8, #4

00027316 <cswap256_loop>:
   27316:	e890 0030 	ldmia.w	r0, {r4, r5}
   2731a:	e891 00c0 	ldmia.w	r1, {r6, r7}
   2731e:	1ba3      	subs	r3, r4, r6
   27320:	4013      	ands	r3, r2
   27322:	1ae4      	subs	r4, r4, r3
   27324:	18f6      	adds	r6, r6, r3
   27326:	1beb      	subs	r3, r5, r7
   27328:	4013      	ands	r3, r2
   2732a:	1aed      	subs	r5, r5, r3
   2732c:	18ff      	adds	r7, r7, r3
   2732e:	c030      	stmia	r0!, {r4, r5}
   27330:	c1c0      	stmia	r1!, {r6, r7}
   27332:	f1b8 0801 	subs.w	r8, r8, #1
   27336:	d1ee      	bne.n	27316 <cswap256_loop>
   27338:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   2733c:	4770      	bx	lr
   2733e:	bf00      	nop

00027340 <ocrypto_mul256_noframe>:
   27340:	b500      	push	{lr}
   27342:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
   27346:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
   2734a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
   2734e:	b402      	push	{r1}
   27350:	fba7 5102 	umull	r5, r1, r7, r2
   27354:	950a      	str	r5, [sp, #40]	; 0x28
   27356:	fba8 0b02 	umull	r0, fp, r8, r2
   2735a:	fbe7 1063 	umaal	r1, r0, r7, r3
   2735e:	fbe9 b062 	umaal	fp, r0, r9, r2
   27362:	910b      	str	r1, [sp, #44]	; 0x2c
   27364:	fba8 5103 	umull	r5, r1, r8, r3
   27368:	fbea 0162 	umaal	r0, r1, sl, r2
   2736c:	fbe7 b564 	umaal	fp, r5, r7, r4
   27370:	fbe7 0566 	umaal	r0, r5, r7, r6
   27374:	fbe8 1566 	umaal	r1, r5, r8, r6
   27378:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   2737c:	fba9 b603 	umull	fp, r6, r9, r3
   27380:	fbea 1663 	umaal	r1, r6, sl, r3
   27384:	fbec 5663 	umaal	r5, r6, ip, r3
   27388:	fbe8 0b64 	umaal	r0, fp, r8, r4
   2738c:	fbe9 1b64 	umaal	r1, fp, r9, r4
   27390:	fbea 5b64 	umaal	r5, fp, sl, r4
   27394:	fbec 6b64 	umaal	r6, fp, ip, r4
   27398:	900d      	str	r0, [sp, #52]	; 0x34
   2739a:	fbac 3002 	umull	r3, r0, ip, r2
   2739e:	9c05      	ldr	r4, [sp, #20]
   273a0:	fbee 5062 	umaal	r5, r0, lr, r2
   273a4:	fbe9 6064 	umaal	r6, r0, r9, r4
   273a8:	fbea b064 	umaal	fp, r0, sl, r4
   273ac:	fbe7 3164 	umaal	r3, r1, r7, r4
   273b0:	fbe8 5164 	umaal	r5, r1, r8, r4
   273b4:	9c06      	ldr	r4, [sp, #24]
   273b6:	fbe8 6164 	umaal	r6, r1, r8, r4
   273ba:	fbe9 b164 	umaal	fp, r1, r9, r4
   273be:	fbea 0164 	umaal	r0, r1, sl, r4
   273c2:	930e      	str	r3, [sp, #56]	; 0x38
   273c4:	fba7 3204 	umull	r3, r2, r7, r4
   273c8:	9c07      	ldr	r4, [sp, #28]
   273ca:	fbe7 6264 	umaal	r6, r2, r7, r4
   273ce:	fbe8 b264 	umaal	fp, r2, r8, r4
   273d2:	fbe9 0264 	umaal	r0, r2, r9, r4
   273d6:	fbea 1264 	umaal	r1, r2, sl, r4
   273da:	9c04      	ldr	r4, [sp, #16]
   273dc:	fbe9 5364 	umaal	r5, r3, r9, r4
   273e0:	fbea 6364 	umaal	r6, r3, sl, r4
   273e4:	9c08      	ldr	r4, [sp, #32]
   273e6:	fbe7 b364 	umaal	fp, r3, r7, r4
   273ea:	fbe8 0364 	umaal	r0, r3, r8, r4
   273ee:	fbe9 1364 	umaal	r1, r3, r9, r4
   273f2:	fbea 2364 	umaal	r2, r3, sl, r4
   273f6:	950f      	str	r5, [sp, #60]	; 0x3c
   273f8:	f85d 9b04 	ldr.w	r9, [sp], #4
   273fc:	e899 0600 	ldmia.w	r9, {r9, sl}
   27400:	f8dd 8000 	ldr.w	r8, [sp]
   27404:	fba9 5408 	umull	r5, r4, r9, r8
   27408:	fbea b468 	umaal	fp, r4, sl, r8
   2740c:	f8dd 8010 	ldr.w	r8, [sp, #16]
   27410:	fbec 0468 	umaal	r0, r4, ip, r8
   27414:	fbee 1468 	umaal	r1, r4, lr, r8
   27418:	fbe9 2468 	umaal	r2, r4, r9, r8
   2741c:	fbea 3468 	umaal	r3, r4, sl, r8
   27420:	f8dd 8004 	ldr.w	r8, [sp, #4]
   27424:	fbee 6568 	umaal	r6, r5, lr, r8
   27428:	fbe9 b568 	umaal	fp, r5, r9, r8
   2742c:	fbea 0568 	umaal	r0, r5, sl, r8
   27430:	f8dd 8014 	ldr.w	r8, [sp, #20]
   27434:	fbec 1568 	umaal	r1, r5, ip, r8
   27438:	fbee 2568 	umaal	r2, r5, lr, r8
   2743c:	fbe9 3568 	umaal	r3, r5, r9, r8
   27440:	fbea 4568 	umaal	r4, r5, sl, r8
   27444:	960f      	str	r6, [sp, #60]	; 0x3c
   27446:	f8dd 8008 	ldr.w	r8, [sp, #8]
   2744a:	fbae 7608 	umull	r7, r6, lr, r8
   2744e:	fbe9 0668 	umaal	r0, r6, r9, r8
   27452:	fbea 1668 	umaal	r1, r6, sl, r8
   27456:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2745a:	fbec 2668 	umaal	r2, r6, ip, r8
   2745e:	fbee 3668 	umaal	r3, r6, lr, r8
   27462:	fbe9 4668 	umaal	r4, r6, r9, r8
   27466:	fbea 5668 	umaal	r5, r6, sl, r8
   2746a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2746e:	fbec b768 	umaal	fp, r7, ip, r8
   27472:	fbee 0768 	umaal	r0, r7, lr, r8
   27476:	fbe9 1768 	umaal	r1, r7, r9, r8
   2747a:	fbea 2768 	umaal	r2, r7, sl, r8
   2747e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   27482:	fbec 3768 	umaal	r3, r7, ip, r8
   27486:	fbee 4768 	umaal	r4, r7, lr, r8
   2748a:	fbe9 5768 	umaal	r5, r7, r9, r8
   2748e:	fbea 6768 	umaal	r6, r7, sl, r8
   27492:	b008      	add	sp, #32
   27494:	bd00      	pop	{pc}
   27496:	bf00      	nop

00027498 <ocrypto_bigint_mul256>:
   27498:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2749c:	b087      	sub	sp, #28
   2749e:	f7ff ff4f 	bl	27340 <ocrypto_mul256_noframe>
   274a2:	f8dd 801c 	ldr.w	r8, [sp, #28]
   274a6:	f108 0820 	add.w	r8, r8, #32
   274aa:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
   274ae:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
   274b0:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
   274b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000274b8 <ocrypto_sqr256_noframe>:
   274b8:	b500      	push	{lr}
   274ba:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
   274be:	fba3 5203 	umull	r5, r2, r3, r3
   274c2:	9501      	str	r5, [sp, #4]
   274c4:	fba3 0104 	umull	r0, r1, r3, r4
   274c8:	fbe3 2064 	umaal	r2, r0, r3, r4
   274cc:	fbe3 1067 	umaal	r1, r0, r3, r7
   274d0:	9202      	str	r2, [sp, #8]
   274d2:	fba3 5207 	umull	r5, r2, r3, r7
   274d6:	fbe3 0268 	umaal	r0, r2, r3, r8
   274da:	fbe4 1564 	umaal	r1, r5, r4, r4
   274de:	fbe3 0568 	umaal	r0, r5, r3, r8
   274e2:	fbe3 2569 	umaal	r2, r5, r3, r9
   274e6:	9103      	str	r1, [sp, #12]
   274e8:	fba4 b607 	umull	fp, r6, r4, r7
   274ec:	fbe3 2669 	umaal	r2, r6, r3, r9
   274f0:	fbe3 566a 	umaal	r5, r6, r3, sl
   274f4:	fbe4 0b67 	umaal	r0, fp, r4, r7
   274f8:	fbe4 2b68 	umaal	r2, fp, r4, r8
   274fc:	fbe3 5b6a 	umaal	r5, fp, r3, sl
   27500:	fbe3 6b6c 	umaal	r6, fp, r3, ip
   27504:	9004      	str	r0, [sp, #16]
   27506:	fba4 1008 	umull	r1, r0, r4, r8
   2750a:	fbe4 5069 	umaal	r5, r0, r4, r9
   2750e:	fbe3 606c 	umaal	r6, r0, r3, ip
   27512:	fbe3 b06e 	umaal	fp, r0, r3, lr
   27516:	fbe7 2167 	umaal	r2, r1, r7, r7
   2751a:	fbe4 5169 	umaal	r5, r1, r4, r9
   2751e:	fbe4 616a 	umaal	r6, r1, r4, sl
   27522:	fbe3 b16e 	umaal	fp, r1, r3, lr
   27526:	fbe4 016e 	umaal	r0, r1, r4, lr
   2752a:	9205      	str	r2, [sp, #20]
   2752c:	fba7 3208 	umull	r3, r2, r7, r8
   27530:	fbe4 626a 	umaal	r6, r2, r4, sl
   27534:	fbe4 b26c 	umaal	fp, r2, r4, ip
   27538:	fbe4 026e 	umaal	r0, r2, r4, lr
   2753c:	fbe7 126e 	umaal	r1, r2, r7, lr
   27540:	fbe7 5368 	umaal	r5, r3, r7, r8
   27544:	fbe7 6369 	umaal	r6, r3, r7, r9
   27548:	fbe4 b36c 	umaal	fp, r3, r4, ip
   2754c:	fbe7 036c 	umaal	r0, r3, r7, ip
   27550:	fbe7 136e 	umaal	r1, r3, r7, lr
   27554:	fbe8 236e 	umaal	r2, r3, r8, lr
   27558:	9506      	str	r5, [sp, #24]
   2755a:	fba7 5409 	umull	r5, r4, r7, r9
   2755e:	fbe7 b46a 	umaal	fp, r4, r7, sl
   27562:	fbe7 046c 	umaal	r0, r4, r7, ip
   27566:	fbe8 146c 	umaal	r1, r4, r8, ip
   2756a:	fbe8 246e 	umaal	r2, r4, r8, lr
   2756e:	fbe9 346e 	umaal	r3, r4, r9, lr
   27572:	fbe8 6568 	umaal	r6, r5, r8, r8
   27576:	fbe7 b56a 	umaal	fp, r5, r7, sl
   2757a:	fbe8 056a 	umaal	r0, r5, r8, sl
   2757e:	fbe8 156c 	umaal	r1, r5, r8, ip
   27582:	fbe9 256c 	umaal	r2, r5, r9, ip
   27586:	fbe9 356e 	umaal	r3, r5, r9, lr
   2758a:	fbea 456e 	umaal	r4, r5, sl, lr
   2758e:	9607      	str	r6, [sp, #28]
   27590:	fba8 7609 	umull	r7, r6, r8, r9
   27594:	fbe8 066a 	umaal	r0, r6, r8, sl
   27598:	fbe9 166a 	umaal	r1, r6, r9, sl
   2759c:	fbe9 266c 	umaal	r2, r6, r9, ip
   275a0:	fbea 366c 	umaal	r3, r6, sl, ip
   275a4:	fbea 466e 	umaal	r4, r6, sl, lr
   275a8:	fbec 566e 	umaal	r5, r6, ip, lr
   275ac:	fbe8 b769 	umaal	fp, r7, r8, r9
   275b0:	fbe9 0769 	umaal	r0, r7, r9, r9
   275b4:	fbe9 176a 	umaal	r1, r7, r9, sl
   275b8:	fbea 276a 	umaal	r2, r7, sl, sl
   275bc:	fbea 376c 	umaal	r3, r7, sl, ip
   275c0:	fbec 476c 	umaal	r4, r7, ip, ip
   275c4:	fbec 576e 	umaal	r5, r7, ip, lr
   275c8:	fbee 676e 	umaal	r6, r7, lr, lr
   275cc:	bd00      	pop	{pc}
   275ce:	bf00      	nop

000275d0 <ocrypto_bigint_sqr256>:
   275d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275d4:	b087      	sub	sp, #28
   275d6:	f7ff ff6f 	bl	274b8 <ocrypto_sqr256_noframe>
   275da:	f8dd 801c 	ldr.w	r8, [sp, #28]
   275de:	f108 0820 	add.w	r8, r8, #32
   275e2:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
   275e6:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
   275e8:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
   275ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000275f0 <ocrypto_constant_time_equal>:
   275f0:	b430      	push	{r4, r5}
   275f2:	f04f 0300 	mov.w	r3, #0

000275f6 <constant_time_equal_loop>:
   275f6:	f810 4b01 	ldrb.w	r4, [r0], #1
   275fa:	f811 5b01 	ldrb.w	r5, [r1], #1
   275fe:	3a01      	subs	r2, #1
   27600:	ea84 0405 	eor.w	r4, r4, r5
   27604:	ea43 0304 	orr.w	r3, r3, r4
   27608:	d1f5      	bne.n	275f6 <constant_time_equal_loop>
   2760a:	f1a3 0301 	sub.w	r3, r3, #1
   2760e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   27612:	bc30      	pop	{r4, r5}
   27614:	4770      	bx	lr
   27616:	bf00      	nop

00027618 <ocrypto_constant_time_is_zero>:
   27618:	f04f 0300 	mov.w	r3, #0

0002761c <constant_time_is_zero_loop>:
   2761c:	f810 2b01 	ldrb.w	r2, [r0], #1
   27620:	3901      	subs	r1, #1
   27622:	ea43 0302 	orr.w	r3, r3, r2
   27626:	d1f9      	bne.n	2761c <constant_time_is_zero_loop>
   27628:	f1a3 0301 	sub.w	r3, r3, #1
   2762c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   27630:	4770      	bx	lr
   27632:	bf00      	nop

00027634 <ocrypto_constant_time_xor>:
   27634:	b430      	push	{r4, r5}

00027636 <constant_time_xor_loop>:
   27636:	f811 4b01 	ldrb.w	r4, [r1], #1
   2763a:	f812 5b01 	ldrb.w	r5, [r2], #1
   2763e:	406c      	eors	r4, r5
   27640:	f800 4b01 	strb.w	r4, [r0], #1
   27644:	3b01      	subs	r3, #1
   27646:	d1f6      	bne.n	27636 <constant_time_xor_loop>
   27648:	bc30      	pop	{r4, r5}
   2764a:	4770      	bx	lr

0002764c <ocrypto_mod_p256_add>:
   2764c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   27650:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   27654:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   27658:	185b      	adds	r3, r3, r1
   2765a:	eb54 040c 	adcs.w	r4, r4, ip
   2765e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   27662:	414d      	adcs	r5, r1
   27664:	eb56 060c 	adcs.w	r6, r6, ip
   27668:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   2766c:	414f      	adcs	r7, r1
   2766e:	eb58 080c 	adcs.w	r8, r8, ip
   27672:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   27676:	eb59 0901 	adcs.w	r9, r9, r1
   2767a:	eb5a 0a0c 	adcs.w	sl, sl, ip
   2767e:	4189      	sbcs	r1, r1
   27680:	f1b3 33ff 	subs.w	r3, r3, #4294967295
   27684:	f174 34ff 	sbcs.w	r4, r4, #4294967295
   27688:	f175 35ff 	sbcs.w	r5, r5, #4294967295
   2768c:	f176 0600 	sbcs.w	r6, r6, #0
   27690:	f177 0700 	sbcs.w	r7, r7, #0
   27694:	f178 0800 	sbcs.w	r8, r8, #0
   27698:	f179 0901 	sbcs.w	r9, r9, #1
   2769c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
   276a0:	f151 0100 	adcs.w	r1, r1, #0
   276a4:	185b      	adds	r3, r3, r1
   276a6:	414c      	adcs	r4, r1
   276a8:	414d      	adcs	r5, r1
   276aa:	f156 0600 	adcs.w	r6, r6, #0
   276ae:	f157 0700 	adcs.w	r7, r7, #0
   276b2:	f158 0800 	adcs.w	r8, r8, #0
   276b6:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
   276ba:	eb5a 0a01 	adcs.w	sl, sl, r1
   276be:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   276c2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   276c6:	4770      	bx	lr

000276c8 <ocrypto_mod_p256_sub>:
   276c8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   276cc:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   276d0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   276d4:	1a5b      	subs	r3, r3, r1
   276d6:	eb74 040c 	sbcs.w	r4, r4, ip
   276da:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   276de:	418d      	sbcs	r5, r1
   276e0:	eb76 060c 	sbcs.w	r6, r6, ip
   276e4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   276e8:	418f      	sbcs	r7, r1
   276ea:	eb78 080c 	sbcs.w	r8, r8, ip
   276ee:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   276f2:	eb79 0901 	sbcs.w	r9, r9, r1
   276f6:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   276fa:	4189      	sbcs	r1, r1
   276fc:	185b      	adds	r3, r3, r1
   276fe:	414c      	adcs	r4, r1
   27700:	414d      	adcs	r5, r1
   27702:	f156 0600 	adcs.w	r6, r6, #0
   27706:	f157 0700 	adcs.w	r7, r7, #0
   2770a:	f158 0800 	adcs.w	r8, r8, #0
   2770e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
   27712:	eb5a 0a01 	adcs.w	sl, sl, r1
   27716:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   2771a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   2771e:	4770      	bx	lr

00027720 <mul_reduce>:
   27720:	eb18 0804 	adds.w	r8, r8, r4
   27724:	eb59 0905 	adcs.w	r9, r9, r5
   27728:	eb5a 0a06 	adcs.w	sl, sl, r6
   2772c:	eb5b 0b07 	adcs.w	fp, fp, r7
   27730:	f05f 0c00 	movs.w	ip, #0
   27734:	f14c 0c00 	adc.w	ip, ip, #0
   27738:	eb18 0805 	adds.w	r8, r8, r5
   2773c:	eb59 0906 	adcs.w	r9, r9, r6
   27740:	eb5a 0a07 	adcs.w	sl, sl, r7
   27744:	eb5b 0b07 	adcs.w	fp, fp, r7
   27748:	eb50 000c 	adcs.w	r0, r0, ip
   2774c:	f05f 0c00 	movs.w	ip, #0
   27750:	eb51 010c 	adcs.w	r1, r1, ip
   27754:	eb52 020c 	adcs.w	r2, r2, ip
   27758:	4163      	adcs	r3, r4
   2775a:	f14c 0c00 	adc.w	ip, ip, #0
   2775e:	ebb8 0807 	subs.w	r8, r8, r7
   27762:	f179 0900 	sbcs.w	r9, r9, #0
   27766:	f17a 0a00 	sbcs.w	sl, sl, #0
   2776a:	eb7b 0b04 	sbcs.w	fp, fp, r4
   2776e:	41a8      	sbcs	r0, r5
   27770:	41b1      	sbcs	r1, r6
   27772:	41a2      	sbcs	r2, r4
   27774:	41b3      	sbcs	r3, r6
   27776:	f16c 0c00 	sbc.w	ip, ip, #0
   2777a:	ebbb 0b05 	subs.w	fp, fp, r5
   2777e:	41b0      	sbcs	r0, r6
   27780:	41b9      	sbcs	r1, r7
   27782:	41aa      	sbcs	r2, r5
   27784:	41bb      	sbcs	r3, r7
   27786:	f16c 0c00 	sbc.w	ip, ip, #0
   2778a:	f04c 0601 	orr.w	r6, ip, #1
   2778e:	f08c 0702 	eor.w	r7, ip, #2
   27792:	eb18 0806 	adds.w	r8, r8, r6
   27796:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
   2779a:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
   2779e:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
   277a2:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
   277a6:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
   277aa:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
   277ae:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
   277b2:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
   277b6:	eb18 000c 	adds.w	r0, r8, ip
   277ba:	eb59 010c 	adcs.w	r1, r9, ip
   277be:	eb5a 020c 	adcs.w	r2, sl, ip
   277c2:	f15b 0300 	adcs.w	r3, fp, #0
   277c6:	f154 0400 	adcs.w	r4, r4, #0
   277ca:	f155 0500 	adcs.w	r5, r5, #0
   277ce:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
   277d2:	eb57 070c 	adcs.w	r7, r7, ip
   277d6:	4770      	bx	lr

000277d8 <ocrypto_mod_p256_mul>:
   277d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277dc:	b087      	sub	sp, #28
   277de:	f7ff fdaf 	bl	27340 <ocrypto_mul256_noframe>
   277e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   277e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   277ea:	f8dd a018 	ldr.w	sl, [sp, #24]
   277ee:	f7ff ff97 	bl	27720 <mul_reduce>
   277f2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
   277f6:	f7ff ff93 	bl	27720 <mul_reduce>
   277fa:	b003      	add	sp, #12
   277fc:	f85d 8b04 	ldr.w	r8, [sp], #4
   27800:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
   27804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027808 <ocrypto_mod_p256_sqr>:
   27808:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2780c:	b087      	sub	sp, #28
   2780e:	f7ff fe53 	bl	274b8 <ocrypto_sqr256_noframe>
   27812:	f8dd 8010 	ldr.w	r8, [sp, #16]
   27816:	f8dd 9014 	ldr.w	r9, [sp, #20]
   2781a:	f8dd a018 	ldr.w	sl, [sp, #24]
   2781e:	f7ff ff7f 	bl	27720 <mul_reduce>
   27822:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
   27826:	f7ff ff7b 	bl	27720 <mul_reduce>
   2782a:	b003      	add	sp, #12
   2782c:	f85d 8b04 	ldr.w	r8, [sp], #4
   27830:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
   27834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2783a:	4c14      	ldr	r4, [pc, #80]	; (2788c <ocrypto_mod_p256_sqr+0x84>)
   2783c:	7a20      	ldrb	r0, [r4, #8]
   2783e:	f88d 0001 	strb.w	r0, [sp, #1]
   27842:	79e0      	ldrb	r0, [r4, #7]
   27844:	f88d 0000 	strb.w	r0, [sp]
   27848:	79a0      	ldrb	r0, [r4, #6]
   2784a:	f8ad 0004 	strh.w	r0, [sp, #4]
   2784e:	7960      	ldrb	r0, [r4, #5]
   27850:	f8ad 0002 	strh.w	r0, [sp, #2]
   27854:	4668      	mov	r0, sp
   27856:	f006 f9d5 	bl	2dc04 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
   2785a:	b108      	cbz	r0, 27860 <ocrypto_mod_p256_sqr+0x58>
   2785c:	21ad      	movs	r1, #173	; 0xad
   2785e:	e010      	b.n	27882 <ocrypto_mod_p256_sqr+0x7a>
   27860:	68e0      	ldr	r0, [r4, #12]
   27862:	9002      	str	r0, [sp, #8]
   27864:	a802      	add	r0, sp, #8
   27866:	f006 f9e3 	bl	2dc30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
   2786a:	b108      	cbz	r0, 27870 <ocrypto_mod_p256_sqr+0x68>
   2786c:	21b1      	movs	r1, #177	; 0xb1
   2786e:	e008      	b.n	27882 <ocrypto_mod_p256_sqr+0x7a>
   27870:	4807      	ldr	r0, [pc, #28]	; (27890 <ocrypto_mod_p256_sqr+0x88>)
   27872:	6800      	ldr	r0, [r0, #0]
   27874:	9003      	str	r0, [sp, #12]
   27876:	a803      	add	r0, sp, #12
   27878:	f00f f861 	bl	3693e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   2787c:	2800      	cmp	r0, #0
   2787e:	d003      	beq.n	27888 <ocrypto_mod_p256_sqr+0x80>
   27880:	21b5      	movs	r1, #181	; 0xb5
   27882:	2003      	movs	r0, #3
   27884:	f000 f8e4 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27888:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   2788a:	0000      	.short	0x0000
   2788c:	20001088 	.word	0x20001088
   27890:	00027b58 	.word	0x00027b58

00027894 <sdc_build_revision_get>:
   27894:	b510      	push	{r4, lr}
   27896:	b128      	cbz	r0, 278a4 <sdc_build_revision_get+0x10>
   27898:	2214      	movs	r2, #20
   2789a:	4904      	ldr	r1, [pc, #16]	; (278ac <sdc_build_revision_get+0x18>)
   2789c:	f00f fe8f 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   278a0:	2000      	movs	r0, #0
   278a2:	bd10      	pop	{r4, pc}
   278a4:	f06f 0015 	mvn.w	r0, #21
   278a8:	bd10      	pop	{r4, pc}
   278aa:	0000      	.short	0x0000
   278ac:	00027b80 	.word	0x00027b80

000278b0 <sdc_cfg_set>:
   278b0:	b570      	push	{r4, r5, r6, lr}
   278b2:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   278b6:	bb78      	cbnz	r0, 27918 <sdc_cfg_set+0x68>
   278b8:	4c22      	ldr	r4, [pc, #136]	; (27944 <sdc_cfg_set+0x94>)
   278ba:	7860      	ldrb	r0, [r4, #1]
   278bc:	b108      	cbz	r0, 278c2 <sdc_cfg_set+0x12>
   278be:	11a8      	asrs	r0, r5, #6
   278c0:	bd70      	pop	{r4, r5, r6, pc}
   278c2:	b1f9      	cbz	r1, 27904 <sdc_cfg_set+0x54>
   278c4:	f06f 0015 	mvn.w	r0, #21
   278c8:	2a00      	cmp	r2, #0
   278ca:	d0f9      	beq.n	278c0 <sdc_cfg_set+0x10>
   278cc:	4b1e      	ldr	r3, [pc, #120]	; (27948 <sdc_cfg_set+0x98>)
   278ce:	1e89      	subs	r1, r1, #2
   278d0:	2907      	cmp	r1, #7
   278d2:	d231      	bcs.n	27938 <sdc_cfg_set+0x88>
   278d4:	e8df f001 	tbb	[pc, r1]
   278d8:	1a170704 	.word	0x1a170704
   278dc:	00211d30 	.word	0x00211d30
   278e0:	7810      	ldrb	r0, [r2, #0]
   278e2:	7058      	strb	r0, [r3, #1]
   278e4:	e01d      	b.n	27922 <sdc_cfg_set+0x72>
   278e6:	7891      	ldrb	r1, [r2, #2]
   278e8:	2900      	cmp	r1, #0
   278ea:	d0e9      	beq.n	278c0 <sdc_cfg_set+0x10>
   278ec:	78d1      	ldrb	r1, [r2, #3]
   278ee:	2900      	cmp	r1, #0
   278f0:	d0e6      	beq.n	278c0 <sdc_cfg_set+0x10>
   278f2:	7811      	ldrb	r1, [r2, #0]
   278f4:	291b      	cmp	r1, #27
   278f6:	d3e3      	bcc.n	278c0 <sdc_cfg_set+0x10>
   278f8:	7851      	ldrb	r1, [r2, #1]
   278fa:	291b      	cmp	r1, #27
   278fc:	d3e0      	bcc.n	278c0 <sdc_cfg_set+0x10>
   278fe:	6810      	ldr	r0, [r2, #0]
   27900:	f8c3 0005 	str.w	r0, [r3, #5]
   27904:	e00d      	b.n	27922 <sdc_cfg_set+0x72>
   27906:	6810      	ldr	r0, [r2, #0]
   27908:	60d8      	str	r0, [r3, #12]
   2790a:	e00a      	b.n	27922 <sdc_cfg_set+0x72>
   2790c:	7810      	ldrb	r0, [r2, #0]
   2790e:	7098      	strb	r0, [r3, #2]
   27910:	e007      	b.n	27922 <sdc_cfg_set+0x72>
   27912:	8810      	ldrh	r0, [r2, #0]
   27914:	8258      	strh	r0, [r3, #18]
   27916:	e004      	b.n	27922 <sdc_cfg_set+0x72>
   27918:	e00e      	b.n	27938 <sdc_cfg_set+0x88>
   2791a:	8811      	ldrh	r1, [r2, #0]
   2791c:	29ff      	cmp	r1, #255	; 0xff
   2791e:	d8cf      	bhi.n	278c0 <sdc_cfg_set+0x10>
   27920:	7519      	strb	r1, [r3, #20]
   27922:	2201      	movs	r2, #1
   27924:	4908      	ldr	r1, [pc, #32]	; (27948 <sdc_cfg_set+0x98>)
   27926:	2000      	movs	r0, #0
   27928:	f00b fe54 	bl	335d4 <__udivmoddi4+0x2a0>
   2792c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   27930:	db04      	blt.n	2793c <sdc_cfg_set+0x8c>
   27932:	f06f 000b 	mvn.w	r0, #11
   27936:	bd70      	pop	{r4, r5, r6, pc}
   27938:	4628      	mov	r0, r5
   2793a:	bd70      	pop	{r4, r5, r6, pc}
   2793c:	2101      	movs	r1, #1
   2793e:	70a1      	strb	r1, [r4, #2]
   27940:	bd70      	pop	{r4, r5, r6, pc}
   27942:	0000      	.short	0x0000
   27944:	20000040 	.word	0x20000040
   27948:	20001088 	.word	0x20001088

0002794c <sdc_disable>:
   2794c:	b510      	push	{r4, lr}
   2794e:	4c07      	ldr	r4, [pc, #28]	; (2796c <sdc_disable+0x20>)
   27950:	7860      	ldrb	r0, [r4, #1]
   27952:	b120      	cbz	r0, 2795e <sdc_disable+0x12>
   27954:	f006 fc52 	bl	2e1fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   27958:	7820      	ldrb	r0, [r4, #0]
   2795a:	f00b fc0b 	bl	33174 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
   2795e:	f000 fe4d 	bl	285fc <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
   27962:	f000 ff25 	bl	287b0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
   27966:	2000      	movs	r0, #0
   27968:	7060      	strb	r0, [r4, #1]
   2796a:	bd10      	pop	{r4, pc}
   2796c:	20000040 	.word	0x20000040

00027970 <sdc_enable>:
   27970:	b570      	push	{r4, r5, r6, lr}
   27972:	460c      	mov	r4, r1
   27974:	0005      	movs	r5, r0
   27976:	d002      	beq.n	2797e <sdc_enable+0xe>
   27978:	b10c      	cbz	r4, 2797e <sdc_enable+0xe>
   2797a:	0760      	lsls	r0, r4, #29
   2797c:	d002      	beq.n	27984 <sdc_enable+0x14>
   2797e:	f06f 0015 	mvn.w	r0, #21
   27982:	bd70      	pop	{r4, r5, r6, pc}
   27984:	f000 f922 	bl	27bcc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
   27988:	b1a8      	cbz	r0, 279b6 <sdc_enable+0x46>
   2798a:	4628      	mov	r0, r5
   2798c:	f00b fbb8 	bl	33100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   27990:	4d0a      	ldr	r5, [pc, #40]	; (279bc <sdc_enable+0x4c>)
   27992:	2200      	movs	r2, #0
   27994:	490a      	ldr	r1, [pc, #40]	; (279c0 <sdc_enable+0x50>)
   27996:	7028      	strb	r0, [r5, #0]
   27998:	4620      	mov	r0, r4
   2799a:	f00b fe1b 	bl	335d4 <__udivmoddi4+0x2a0>
   2799e:	f00f fbd6 	bl	3714e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
   279a2:	2100      	movs	r1, #0
   279a4:	7828      	ldrb	r0, [r5, #0]
   279a6:	f006 fc13 	bl	2e1d0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
   279aa:	f7ff ff45 	bl	27838 <ocrypto_mod_p256_sqr+0x30>
   279ae:	2001      	movs	r0, #1
   279b0:	7068      	strb	r0, [r5, #1]
   279b2:	2000      	movs	r0, #0
   279b4:	bd70      	pop	{r4, r5, r6, pc}
   279b6:	f04f 30ff 	mov.w	r0, #4294967295
   279ba:	bd70      	pop	{r4, r5, r6, pc}
   279bc:	20000040 	.word	0x20000040
   279c0:	20001088 	.word	0x20001088

000279c4 <sdc_init>:
   279c4:	b530      	push	{r4, r5, lr}
   279c6:	b089      	sub	sp, #36	; 0x24
   279c8:	0004      	movs	r4, r0
   279ca:	d00c      	beq.n	279e6 <sdc_init+0x22>
   279cc:	f00b fb40 	bl	33050 <mpsl_is_initialized>
   279d0:	f04f 35ff 	mov.w	r5, #4294967295
   279d4:	b120      	cbz	r0, 279e0 <sdc_init+0x1c>
   279d6:	f00b f9d3 	bl	32d80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   279da:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   279de:	d905      	bls.n	279ec <sdc_init+0x28>
   279e0:	4628      	mov	r0, r5
   279e2:	b009      	add	sp, #36	; 0x24
   279e4:	bd30      	pop	{r4, r5, pc}
   279e6:	f06f 0015 	mvn.w	r0, #21
   279ea:	e7fa      	b.n	279e2 <sdc_init+0x1e>
   279ec:	4d13      	ldr	r5, [pc, #76]	; (27a3c <sdc_init+0x78>)
   279ee:	4814      	ldr	r0, [pc, #80]	; (27a40 <sdc_init+0x7c>)
   279f0:	606c      	str	r4, [r5, #4]
   279f2:	f000 fa07 	bl	27e04 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
   279f6:	2000      	movs	r0, #0
   279f8:	7068      	strb	r0, [r5, #1]
   279fa:	70a8      	strb	r0, [r5, #2]
   279fc:	4601      	mov	r1, r0
   279fe:	2224      	movs	r2, #36	; 0x24
   27a00:	4668      	mov	r0, sp
   27a02:	f00f fe56 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   27a06:	2224      	movs	r2, #36	; 0x24
   27a08:	490e      	ldr	r1, [pc, #56]	; (27a44 <sdc_init+0x80>)
   27a0a:	4668      	mov	r0, sp
   27a0c:	f00f fdd7 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   27a10:	2224      	movs	r2, #36	; 0x24
   27a12:	4669      	mov	r1, sp
   27a14:	480c      	ldr	r0, [pc, #48]	; (27a48 <sdc_init+0x84>)
   27a16:	f00f fdd2 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   27a1a:	f3ef 8410 	mrs	r4, PRIMASK
   27a1e:	b672      	cpsid	i
   27a20:	f000 fdfa 	bl	28618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
   27a24:	4809      	ldr	r0, [pc, #36]	; (27a4c <sdc_init+0x88>)
   27a26:	f000 fecf 	bl	287c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
   27a2a:	b118      	cbz	r0, 27a34 <sdc_init+0x70>
   27a2c:	21cb      	movs	r1, #203	; 0xcb
   27a2e:	2003      	movs	r0, #3
   27a30:	f000 f80e 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27a34:	b904      	cbnz	r4, 27a38 <sdc_init+0x74>
   27a36:	b662      	cpsie	i
   27a38:	2000      	movs	r0, #0
   27a3a:	e7d2      	b.n	279e2 <sdc_init+0x1e>
   27a3c:	20000040 	.word	0x20000040
   27a40:	00027839 	.word	0x00027839
   27a44:	00027b5c 	.word	0x00027b5c
   27a48:	20001088 	.word	0x20001088
   27a4c:	00027bf9 	.word	0x00027bf9

00027a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
   27a50:	b50e      	push	{r1, r2, r3, lr}
   27a52:	b672      	cpsid	i
   27a54:	4a15      	ldr	r2, [pc, #84]	; (27aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
   27a56:	6855      	ldr	r5, [r2, #4]
   27a58:	b1dd      	cbz	r5, 27a92 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
   27a5a:	2200      	movs	r2, #0
   27a5c:	4603      	mov	r3, r0
   27a5e:	466e      	mov	r6, sp
   27a60:	240a      	movs	r4, #10
   27a62:	e003      	b.n	27a6c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
   27a64:	fbb0 f0f4 	udiv	r0, r0, r4
   27a68:	1c52      	adds	r2, r2, #1
   27a6a:	b2d2      	uxtb	r2, r2
   27a6c:	2800      	cmp	r0, #0
   27a6e:	d1f9      	bne.n	27a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
   27a70:	54b0      	strb	r0, [r6, r2]
   27a72:	e00a      	b.n	27a8a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
   27a74:	b2d8      	uxtb	r0, r3
   27a76:	fbb0 f7f4 	udiv	r7, r0, r4
   27a7a:	fbb3 f3f4 	udiv	r3, r3, r4
   27a7e:	fb04 0017 	mls	r0, r4, r7, r0
   27a82:	1e52      	subs	r2, r2, #1
   27a84:	b2d2      	uxtb	r2, r2
   27a86:	3030      	adds	r0, #48	; 0x30
   27a88:	54b0      	strb	r0, [r6, r2]
   27a8a:	2a00      	cmp	r2, #0
   27a8c:	d1f2      	bne.n	27a74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
   27a8e:	4630      	mov	r0, r6
   27a90:	47a8      	blx	r5
   27a92:	f3bf 8f4f 	dsb	sy
   27a96:	4806      	ldr	r0, [pc, #24]	; (27ab0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
   27a98:	6801      	ldr	r1, [r0, #0]
   27a9a:	4a06      	ldr	r2, [pc, #24]	; (27ab4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
   27a9c:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   27aa0:	4311      	orrs	r1, r2
   27aa2:	6001      	str	r1, [r0, #0]
   27aa4:	f3bf 8f4f 	dsb	sy
   27aa8:	bf00      	nop
   27aaa:	e7fd      	b.n	27aa8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
   27aac:	20000040 	.word	0x20000040
   27ab0:	e000ed0c 	.word	0xe000ed0c
   27ab4:	05fa0004 	.word	0x05fa0004

00027ab8 <sdc_support_adv>:
   27ab8:	4806      	ldr	r0, [pc, #24]	; (27ad4 <sdc_support_adv+0x1c>)
   27aba:	b510      	push	{r4, lr}
   27abc:	7881      	ldrb	r1, [r0, #2]
   27abe:	7840      	ldrb	r0, [r0, #1]
   27ac0:	4301      	orrs	r1, r0
   27ac2:	d002      	beq.n	27aca <sdc_support_adv+0x12>
   27ac4:	f04f 30ff 	mov.w	r0, #4294967295
   27ac8:	bd10      	pop	{r4, pc}
   27aca:	f006 fba7 	bl	2e21c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
   27ace:	2000      	movs	r0, #0
   27ad0:	bd10      	pop	{r4, pc}
   27ad2:	0000      	.short	0x0000
   27ad4:	20000040 	.word	0x20000040

00027ad8 <sdc_support_dle_peripheral>:
   27ad8:	4806      	ldr	r0, [pc, #24]	; (27af4 <sdc_support_dle_peripheral+0x1c>)
   27ada:	b510      	push	{r4, lr}
   27adc:	7881      	ldrb	r1, [r0, #2]
   27ade:	7840      	ldrb	r0, [r0, #1]
   27ae0:	4301      	orrs	r1, r0
   27ae2:	d002      	beq.n	27aea <sdc_support_dle_peripheral+0x12>
   27ae4:	f04f 30ff 	mov.w	r0, #4294967295
   27ae8:	bd10      	pop	{r4, pc}
   27aea:	f006 f9bf 	bl	2de6c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
   27aee:	2000      	movs	r0, #0
   27af0:	bd10      	pop	{r4, pc}
   27af2:	0000      	.short	0x0000
   27af4:	20000040 	.word	0x20000040

00027af8 <sdc_support_le_2m_phy>:
   27af8:	4806      	ldr	r0, [pc, #24]	; (27b14 <sdc_support_le_2m_phy+0x1c>)
   27afa:	b510      	push	{r4, lr}
   27afc:	7881      	ldrb	r1, [r0, #2]
   27afe:	7840      	ldrb	r0, [r0, #1]
   27b00:	4301      	orrs	r1, r0
   27b02:	d002      	beq.n	27b0a <sdc_support_le_2m_phy+0x12>
   27b04:	f04f 30ff 	mov.w	r0, #4294967295
   27b08:	bd10      	pop	{r4, pc}
   27b0a:	f00f f8bc 	bl	36c86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
   27b0e:	2000      	movs	r0, #0
   27b10:	bd10      	pop	{r4, pc}
   27b12:	0000      	.short	0x0000
   27b14:	20000040 	.word	0x20000040

00027b18 <sdc_support_peripheral>:
   27b18:	4806      	ldr	r0, [pc, #24]	; (27b34 <sdc_support_peripheral+0x1c>)
   27b1a:	b510      	push	{r4, lr}
   27b1c:	7881      	ldrb	r1, [r0, #2]
   27b1e:	7840      	ldrb	r0, [r0, #1]
   27b20:	4301      	orrs	r1, r0
   27b22:	d002      	beq.n	27b2a <sdc_support_peripheral+0x12>
   27b24:	f04f 30ff 	mov.w	r0, #4294967295
   27b28:	bd10      	pop	{r4, pc}
   27b2a:	f006 fb89 	bl	2e240 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
   27b2e:	2000      	movs	r0, #0
   27b30:	bd10      	pop	{r4, pc}
   27b32:	0000      	.short	0x0000
   27b34:	20000040 	.word	0x20000040

00027b38 <sdc_support_phy_update_peripheral>:
   27b38:	4806      	ldr	r0, [pc, #24]	; (27b54 <sdc_support_phy_update_peripheral+0x1c>)
   27b3a:	b510      	push	{r4, lr}
   27b3c:	7881      	ldrb	r1, [r0, #2]
   27b3e:	7840      	ldrb	r0, [r0, #1]
   27b40:	4301      	orrs	r1, r0
   27b42:	d002      	beq.n	27b4a <sdc_support_phy_update_peripheral+0x12>
   27b44:	f04f 30ff 	mov.w	r0, #4294967295
   27b48:	bd10      	pop	{r4, pc}
   27b4a:	f00f f8b0 	bl	36cae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
   27b4e:	2000      	movs	r0, #0
   27b50:	bd10      	pop	{r4, pc}
   27b52:	0000      	.short	0x0000
   27b54:	20000040 	.word	0x20000040
   27b58:	00000001 	.word	0x00000001
   27b5c:	00010100 	.word	0x00010100
   27b60:	031b1b00 	.word	0x031b1b00
   27b64:	00000002 	.word	0x00000002
   27b68:	00001d4c 	.word	0x00001d4c
   27b6c:	001f0000 	.word	0x001f0000
   27b70:	00000008 	.word	0x00000008
	...
   27b80:	c12e7ee0 	.word	0xc12e7ee0
   27b84:	2385055e 	.word	0x2385055e
   27b88:	fadc1546 	.word	0xfadc1546
   27b8c:	707d298e 	.word	0x707d298e
   27b90:	fca59310 	.word	0xfca59310

00027b94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
   27b94:	4a05      	ldr	r2, [pc, #20]	; (27bac <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
   27b96:	b510      	push	{r4, lr}
   27b98:	6852      	ldr	r2, [r2, #4]
   27b9a:	b112      	cbz	r2, 27ba2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
   27b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27ba0:	4710      	bx	r2
   27ba2:	2192      	movs	r1, #146	; 0x92
   27ba4:	2004      	movs	r0, #4
   27ba6:	f7ff ff53 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27baa:	0000      	.short	0x0000
   27bac:	200010ac 	.word	0x200010ac

00027bb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
   27bb0:	4a05      	ldr	r2, [pc, #20]	; (27bc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
   27bb2:	b510      	push	{r4, lr}
   27bb4:	6892      	ldr	r2, [r2, #8]
   27bb6:	b112      	cbz	r2, 27bbe <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
   27bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27bbc:	4710      	bx	r2
   27bbe:	2198      	movs	r1, #152	; 0x98
   27bc0:	2004      	movs	r0, #4
   27bc2:	f7ff ff45 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27bc6:	0000      	.short	0x0000
   27bc8:	200010ac 	.word	0x200010ac

00027bcc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
   27bcc:	4805      	ldr	r0, [pc, #20]	; (27be4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
   27bce:	6801      	ldr	r1, [r0, #0]
   27bd0:	b129      	cbz	r1, 27bde <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   27bd2:	6841      	ldr	r1, [r0, #4]
   27bd4:	b119      	cbz	r1, 27bde <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   27bd6:	6880      	ldr	r0, [r0, #8]
   27bd8:	b108      	cbz	r0, 27bde <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
   27bda:	2001      	movs	r0, #1
   27bdc:	4770      	bx	lr
   27bde:	2000      	movs	r0, #0
   27be0:	4770      	bx	lr
   27be2:	0000      	.short	0x0000
   27be4:	200010ac 	.word	0x200010ac

00027be8 <sdc_rand_source_register>:
   27be8:	4902      	ldr	r1, [pc, #8]	; (27bf4 <sdc_rand_source_register+0xc>)
   27bea:	c80d      	ldmia	r0, {r0, r2, r3}
   27bec:	e881 000d 	stmia.w	r1, {r0, r2, r3}
   27bf0:	2000      	movs	r0, #0
   27bf2:	4770      	bx	lr
   27bf4:	200010ac 	.word	0x200010ac

00027bf8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
   27bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bfa:	4c12      	ldr	r4, [pc, #72]	; (27c44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
   27bfc:	2600      	movs	r6, #0
   27bfe:	6825      	ldr	r5, [r4, #0]
   27c00:	e011      	b.n	27c26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   27c02:	9800      	ldr	r0, [sp, #0]
   27c04:	2802      	cmp	r0, #2
   27c06:	d002      	beq.n	27c0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
   27c08:	2803      	cmp	r0, #3
   27c0a:	d10c      	bne.n	27c26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
   27c0c:	e006      	b.n	27c1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
   27c0e:	6820      	ldr	r0, [r4, #0]
   27c10:	b110      	cbz	r0, 27c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
   27c12:	2000      	movs	r0, #0
   27c14:	6026      	str	r6, [r4, #0]
   27c16:	e005      	b.n	27c24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
   27c18:	2128      	movs	r1, #40	; 0x28
   27c1a:	e00c      	b.n	27c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   27c1c:	6820      	ldr	r0, [r4, #0]
   27c1e:	b168      	cbz	r0, 27c3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
   27c20:	2001      	movs	r0, #1
   27c22:	6026      	str	r6, [r4, #0]
   27c24:	47a8      	blx	r5
   27c26:	4668      	mov	r0, sp
   27c28:	f000 fd94 	bl	28754 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
   27c2c:	2800      	cmp	r0, #0
   27c2e:	d0e8      	beq.n	27c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
   27c30:	2805      	cmp	r0, #5
   27c32:	d005      	beq.n	27c40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
   27c34:	2135      	movs	r1, #53	; 0x35
   27c36:	2004      	movs	r0, #4
   27c38:	f7ff ff0a 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27c3c:	212d      	movs	r1, #45	; 0x2d
   27c3e:	e7fa      	b.n	27c36 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
   27c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c42:	0000      	.short	0x0000
   27c44:	20000048 	.word	0x20000048

00027c48 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
   27c48:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   27c4c:	4e28      	ldr	r6, [pc, #160]	; (27cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
   27c4e:	4605      	mov	r5, r0
   27c50:	1d00      	adds	r0, r0, #4
   27c52:	f106 0744 	add.w	r7, r6, #68	; 0x44
   27c56:	6030      	str	r0, [r6, #0]
   27c58:	7838      	ldrb	r0, [r7, #0]
   27c5a:	b158      	cbz	r0, 27c74 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
   27c5c:	78ba      	ldrb	r2, [r7, #2]
   27c5e:	463c      	mov	r4, r7
   27c60:	1c79      	adds	r1, r7, #1
   27c62:	4628      	mov	r0, r5
   27c64:	1c92      	adds	r2, r2, #2
   27c66:	f00f fcaa 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   27c6a:	2000      	movs	r0, #0
   27c6c:	7020      	strb	r0, [r4, #0]
   27c6e:	2004      	movs	r0, #4
   27c70:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   27c74:	481e      	ldr	r0, [pc, #120]	; (27cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
   27c76:	f001 fe5f 	bl	29938 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
   27c7a:	4604      	mov	r4, r0
   27c7c:	2802      	cmp	r0, #2
   27c7e:	d004      	beq.n	27c8a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
   27c80:	2c04      	cmp	r4, #4
   27c82:	d007      	beq.n	27c94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
   27c84:	2c08      	cmp	r4, #8
   27c86:	d02c      	beq.n	27ce2 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
   27c88:	e02f      	b.n	27cea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
   27c8a:	4919      	ldr	r1, [pc, #100]	; (27cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
   27c8c:	4628      	mov	r0, r5
   27c8e:	f00b fd49 	bl	33724 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
   27c92:	e02a      	b.n	27cea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
   27c94:	7830      	ldrb	r0, [r6, #0]
   27c96:	2808      	cmp	r0, #8
   27c98:	d104      	bne.n	27ca4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
   27c9a:	2105      	movs	r1, #5
   27c9c:	203e      	movs	r0, #62	; 0x3e
   27c9e:	f00b fd13 	bl	336c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
   27ca2:	b150      	cbz	r0, 27cba <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
   27ca4:	4912      	ldr	r1, [pc, #72]	; (27cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
   27ca6:	4628      	mov	r0, r5
   27ca8:	f00b fda1 	bl	337ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
   27cac:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   27cb0:	d30e      	bcc.n	27cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
   27cb2:	21c7      	movs	r1, #199	; 0xc7
   27cb4:	2008      	movs	r0, #8
   27cb6:	f7ff fecb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27cba:	88b0      	ldrh	r0, [r6, #4]
   27cbc:	f8ad 0000 	strh.w	r0, [sp]
   27cc0:	a901      	add	r1, sp, #4
   27cc2:	4668      	mov	r0, sp
   27cc4:	f00b ffff 	bl	33cc6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   27cc8:	2800      	cmp	r0, #0
   27cca:	d0c5      	beq.n	27c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   27ccc:	21a8      	movs	r1, #168	; 0xa8
   27cce:	e7f1      	b.n	27cb4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
   27cd0:	2800      	cmp	r0, #0
   27cd2:	d0c1      	beq.n	27c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   27cd4:	78a9      	ldrb	r1, [r5, #2]
   27cd6:	7828      	ldrb	r0, [r5, #0]
   27cd8:	f00b fcf6 	bl	336c8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
   27cdc:	2800      	cmp	r0, #0
   27cde:	d0bb      	beq.n	27c58 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
   27ce0:	e003      	b.n	27cea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
   27ce2:	4903      	ldr	r1, [pc, #12]	; (27cf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
   27ce4:	4628      	mov	r0, r5
   27ce6:	f00b fd4b 	bl	33780 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
   27cea:	4620      	mov	r0, r4
   27cec:	e7c0      	b.n	27c70 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
   27cee:	0000      	.short	0x0000
   27cf0:	200010b8 	.word	0x200010b8
   27cf4:	b570      	push	{r4, r5, r6, lr}
   27cf6:	780a      	ldrb	r2, [r1, #0]
   27cf8:	7082      	strb	r2, [r0, #2]
   27cfa:	b33a      	cbz	r2, 27d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
   27cfc:	2a01      	cmp	r2, #1
   27cfe:	d825      	bhi.n	27d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
   27d00:	2313      	movs	r3, #19
   27d02:	7003      	strb	r3, [r0, #0]
   27d04:	2300      	movs	r3, #0
   27d06:	e00a      	b.n	27d1e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
   27d08:	eb01 0443 	add.w	r4, r1, r3, lsl #1
   27d0c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
   27d10:	78a6      	ldrb	r6, [r4, #2]
   27d12:	70ee      	strb	r6, [r5, #3]
   27d14:	8864      	ldrh	r4, [r4, #2]
   27d16:	0a24      	lsrs	r4, r4, #8
   27d18:	1c5b      	adds	r3, r3, #1
   27d1a:	712c      	strb	r4, [r5, #4]
   27d1c:	b2db      	uxtb	r3, r3
   27d1e:	4293      	cmp	r3, r2
   27d20:	d3f2      	bcc.n	27d08 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
   27d22:	2300      	movs	r3, #0
   27d24:	e00b      	b.n	27d3e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
   27d26:	bf00      	nop
   27d28:	eb01 0543 	add.w	r5, r1, r3, lsl #1
   27d2c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
   27d30:	792e      	ldrb	r6, [r5, #4]
   27d32:	7166      	strb	r6, [r4, #5]
   27d34:	88ad      	ldrh	r5, [r5, #4]
   27d36:	0a2d      	lsrs	r5, r5, #8
   27d38:	1c5b      	adds	r3, r3, #1
   27d3a:	71a5      	strb	r5, [r4, #6]
   27d3c:	b2db      	uxtb	r3, r3
   27d3e:	4293      	cmp	r3, r2
   27d40:	d3f2      	bcc.n	27d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
   27d42:	2101      	movs	r1, #1
   27d44:	eb01 0082 	add.w	r0, r1, r2, lsl #2
   27d48:	b2c0      	uxtb	r0, r0
   27d4a:	bd70      	pop	{r4, r5, r6, pc}
   27d4c:	2000      	movs	r0, #0
   27d4e:	bd70      	pop	{r4, r5, r6, pc}

00027d50 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
   27d50:	2840      	cmp	r0, #64	; 0x40
   27d52:	d203      	bcs.n	27d5c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
   27d54:	1e40      	subs	r0, r0, #1
   27d56:	b2c1      	uxtb	r1, r0
   27d58:	4805      	ldr	r0, [pc, #20]	; (27d70 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
   27d5a:	e005      	b.n	27d68 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
   27d5c:	28ff      	cmp	r0, #255	; 0xff
   27d5e:	d005      	beq.n	27d6c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
   27d60:	3840      	subs	r0, #64	; 0x40
   27d62:	b2c1      	uxtb	r1, r0
   27d64:	4802      	ldr	r0, [pc, #8]	; (27d70 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
   27d66:	3008      	adds	r0, #8
   27d68:	f00b bf40 	b.w	33bec <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
   27d6c:	2001      	movs	r0, #1
   27d6e:	4770      	bx	lr
   27d70:	2000004c 	.word	0x2000004c

00027d74 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
   27d74:	1e40      	subs	r0, r0, #1
   27d76:	b2c1      	uxtb	r1, r0
   27d78:	4801      	ldr	r0, [pc, #4]	; (27d80 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
   27d7a:	f00b bf37 	b.w	33bec <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
   27d7e:	0000      	.short	0x0000
   27d80:	2000005c 	.word	0x2000005c

00027d84 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
   27d84:	4902      	ldr	r1, [pc, #8]	; (27d90 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
   27d86:	6802      	ldr	r2, [r0, #0]
   27d88:	610a      	str	r2, [r1, #16]
   27d8a:	6840      	ldr	r0, [r0, #4]
   27d8c:	6148      	str	r0, [r1, #20]
   27d8e:	4770      	bx	lr
   27d90:	2000004c 	.word	0x2000004c

00027d94 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
   27d94:	4905      	ldr	r1, [pc, #20]	; (27dac <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
   27d96:	6802      	ldr	r2, [r0, #0]
   27d98:	600a      	str	r2, [r1, #0]
   27d9a:	6840      	ldr	r0, [r0, #4]
   27d9c:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
   27da0:	600a      	str	r2, [r1, #0]
   27da2:	4a03      	ldr	r2, [pc, #12]	; (27db0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
   27da4:	4310      	orrs	r0, r2
   27da6:	6048      	str	r0, [r1, #4]
   27da8:	4770      	bx	lr
   27daa:	0000      	.short	0x0000
   27dac:	2000004c 	.word	0x2000004c
   27db0:	024007f8 	.word	0x024007f8

00027db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
   27db4:	4902      	ldr	r1, [pc, #8]	; (27dc0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
   27db6:	6802      	ldr	r2, [r0, #0]
   27db8:	608a      	str	r2, [r1, #8]
   27dba:	6840      	ldr	r0, [r0, #4]
   27dbc:	60c8      	str	r0, [r1, #12]
   27dbe:	4770      	bx	lr
   27dc0:	2000004c 	.word	0x2000004c

00027dc4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
   27dc4:	4807      	ldr	r0, [pc, #28]	; (27de4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
   27dc6:	f04f 31ff 	mov.w	r1, #4294967295
   27dca:	2200      	movs	r2, #0
   27dcc:	6001      	str	r1, [r0, #0]
   27dce:	0cc9      	lsrs	r1, r1, #19
   27dd0:	6041      	str	r1, [r0, #4]
   27dd2:	f100 0108 	add.w	r1, r0, #8
   27dd6:	201f      	movs	r0, #31
   27dd8:	600a      	str	r2, [r1, #0]
   27dda:	604a      	str	r2, [r1, #4]
   27ddc:	3108      	adds	r1, #8
   27dde:	e9c1 0200 	strd	r0, r2, [r1]
   27de2:	4770      	bx	lr
   27de4:	2000004c 	.word	0x2000004c

00027de8 <sdc_hci_cmd_cb_reset>:
   27de8:	b510      	push	{r4, lr}
   27dea:	f7ff ffeb 	bl	27dc4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
   27dee:	f00e febe 	bl	36b6e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
   27df2:	4604      	mov	r4, r0
   27df4:	4802      	ldr	r0, [pc, #8]	; (27e00 <sdc_hci_cmd_cb_reset+0x18>)
   27df6:	6800      	ldr	r0, [r0, #0]
   27df8:	b100      	cbz	r0, 27dfc <sdc_hci_cmd_cb_reset+0x14>
   27dfa:	4780      	blx	r0
   27dfc:	4620      	mov	r0, r4
   27dfe:	bd10      	pop	{r4, pc}
   27e00:	20000064 	.word	0x20000064

00027e04 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
   27e04:	4901      	ldr	r1, [pc, #4]	; (27e0c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
   27e06:	6008      	str	r0, [r1, #0]
   27e08:	4770      	bx	lr
   27e0a:	0000      	.short	0x0000
   27e0c:	20000064 	.word	0x20000064

00027e10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
   27e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e14:	4604      	mov	r4, r0
   27e16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   27e1a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
   27e1e:	4d1f      	ldr	r5, [pc, #124]	; (27e9c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
   27e20:	4e1e      	ldr	r6, [pc, #120]	; (27e9c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
   27e22:	3d10      	subs	r5, #16
   27e24:	2210      	movs	r2, #16
   27e26:	2100      	movs	r1, #0
   27e28:	4620      	mov	r0, r4
   27e2a:	f00f fc42 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   27e2e:	2210      	movs	r2, #16
   27e30:	2100      	movs	r1, #0
   27e32:	f104 0010 	add.w	r0, r4, #16
   27e36:	f00f fc3c 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   27e3a:	6828      	ldr	r0, [r5, #0]
   27e3c:	1c40      	adds	r0, r0, #1
   27e3e:	d108      	bne.n	27e52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
   27e40:	6868      	ldr	r0, [r5, #4]
   27e42:	1c40      	adds	r0, r0, #1
   27e44:	d105      	bne.n	27e52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
   27e46:	68a8      	ldr	r0, [r5, #8]
   27e48:	1c40      	adds	r0, r0, #1
   27e4a:	d102      	bne.n	27e52 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
   27e4c:	68e8      	ldr	r0, [r5, #12]
   27e4e:	1c40      	adds	r0, r0, #1
   27e50:	d007      	beq.n	27e62 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
   27e52:	6828      	ldr	r0, [r5, #0]
   27e54:	686a      	ldr	r2, [r5, #4]
   27e56:	68a9      	ldr	r1, [r5, #8]
   27e58:	68eb      	ldr	r3, [r5, #12]
   27e5a:	6120      	str	r0, [r4, #16]
   27e5c:	6162      	str	r2, [r4, #20]
   27e5e:	61a1      	str	r1, [r4, #24]
   27e60:	61e3      	str	r3, [r4, #28]
   27e62:	2000      	movs	r0, #0
   27e64:	f000 fd84 	bl	28970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   27e68:	4387      	bics	r7, r0
   27e6a:	07f8      	lsls	r0, r7, #31
   27e6c:	d113      	bne.n	27e96 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
   27e6e:	6830      	ldr	r0, [r6, #0]
   27e70:	1c40      	adds	r0, r0, #1
   27e72:	d108      	bne.n	27e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
   27e74:	6870      	ldr	r0, [r6, #4]
   27e76:	1c40      	adds	r0, r0, #1
   27e78:	d105      	bne.n	27e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
   27e7a:	68b0      	ldr	r0, [r6, #8]
   27e7c:	1c40      	adds	r0, r0, #1
   27e7e:	d102      	bne.n	27e86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
   27e80:	68f0      	ldr	r0, [r6, #12]
   27e82:	1c40      	adds	r0, r0, #1
   27e84:	d007      	beq.n	27e96 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
   27e86:	6832      	ldr	r2, [r6, #0]
   27e88:	6870      	ldr	r0, [r6, #4]
   27e8a:	68b1      	ldr	r1, [r6, #8]
   27e8c:	68f3      	ldr	r3, [r6, #12]
   27e8e:	6022      	str	r2, [r4, #0]
   27e90:	6060      	str	r0, [r4, #4]
   27e92:	60a1      	str	r1, [r4, #8]
   27e94:	60e3      	str	r3, [r4, #12]
   27e96:	2000      	movs	r0, #0
   27e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27e9c:	10000090 	.word	0x10000090

00027ea0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
   27ea0:	b538      	push	{r3, r4, r5, lr}
   27ea2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   27ea6:	4604      	mov	r4, r0
   27ea8:	4822      	ldr	r0, [pc, #136]	; (27f34 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
   27eaa:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
   27eae:	4d21      	ldr	r5, [pc, #132]	; (27f34 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
   27eb0:	6802      	ldr	r2, [r0, #0]
   27eb2:	3d14      	subs	r5, #20
   27eb4:	1c52      	adds	r2, r2, #1
   27eb6:	d104      	bne.n	27ec2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
   27eb8:	6842      	ldr	r2, [r0, #4]
   27eba:	43d2      	mvns	r2, r2
   27ebc:	0412      	lsls	r2, r2, #16
   27ebe:	0c12      	lsrs	r2, r2, #16
   27ec0:	d035      	beq.n	27f2e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
   27ec2:	07c9      	lsls	r1, r1, #31
   27ec4:	d033      	beq.n	27f2e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
   27ec6:	6801      	ldr	r1, [r0, #0]
   27ec8:	6840      	ldr	r0, [r0, #4]
   27eca:	f8ad 0000 	strh.w	r0, [sp]
   27ece:	f8c4 1001 	str.w	r1, [r4, #1]
   27ed2:	f8bd 0000 	ldrh.w	r0, [sp]
   27ed6:	f8a4 0005 	strh.w	r0, [r4, #5]
   27eda:	79a0      	ldrb	r0, [r4, #6]
   27edc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   27ee0:	71a0      	strb	r0, [r4, #6]
   27ee2:	6828      	ldr	r0, [r5, #0]
   27ee4:	1c40      	adds	r0, r0, #1
   27ee6:	d00c      	beq.n	27f02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
   27ee8:	6868      	ldr	r0, [r5, #4]
   27eea:	1c40      	adds	r0, r0, #1
   27eec:	d009      	beq.n	27f02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
   27eee:	68a8      	ldr	r0, [r5, #8]
   27ef0:	1c40      	adds	r0, r0, #1
   27ef2:	d006      	beq.n	27f02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
   27ef4:	68e8      	ldr	r0, [r5, #12]
   27ef6:	1c40      	adds	r0, r0, #1
   27ef8:	d003      	beq.n	27f02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
   27efa:	2000      	movs	r0, #0
   27efc:	f000 fd38 	bl	28970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
   27f00:	b140      	cbz	r0, 27f14 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
   27f02:	2210      	movs	r2, #16
   27f04:	2100      	movs	r1, #0
   27f06:	1de0      	adds	r0, r4, #7
   27f08:	f00f fbd3 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   27f0c:	2001      	movs	r0, #1
   27f0e:	7020      	strb	r0, [r4, #0]
   27f10:	2000      	movs	r0, #0
   27f12:	bd38      	pop	{r3, r4, r5, pc}
   27f14:	682a      	ldr	r2, [r5, #0]
   27f16:	6869      	ldr	r1, [r5, #4]
   27f18:	68a8      	ldr	r0, [r5, #8]
   27f1a:	68eb      	ldr	r3, [r5, #12]
   27f1c:	f8c4 2007 	str.w	r2, [r4, #7]
   27f20:	f8c4 100b 	str.w	r1, [r4, #11]
   27f24:	f8c4 000f 	str.w	r0, [r4, #15]
   27f28:	f8c4 3013 	str.w	r3, [r4, #19]
   27f2c:	e7ee      	b.n	27f0c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
   27f2e:	2000      	movs	r0, #0
   27f30:	e7ed      	b.n	27f0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
   27f32:	0000      	.short	0x0000
   27f34:	100000a4 	.word	0x100000a4

00027f38 <sdc_hci_cmd_vs_zephyr_read_version_info>:
   27f38:	2102      	movs	r1, #2
   27f3a:	8001      	strh	r1, [r0, #0]
   27f3c:	8041      	strh	r1, [r0, #2]
   27f3e:	2100      	movs	r1, #0
   27f40:	7101      	strb	r1, [r0, #4]
   27f42:	21e0      	movs	r1, #224	; 0xe0
   27f44:	7141      	strb	r1, [r0, #5]
   27f46:	f642 617e 	movw	r1, #11902	; 0x2e7e
   27f4a:	80c1      	strh	r1, [r0, #6]
   27f4c:	4901      	ldr	r1, [pc, #4]	; (27f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
   27f4e:	6081      	str	r1, [r0, #8]
   27f50:	2000      	movs	r0, #0
   27f52:	4770      	bx	lr
   27f54:	85055ec1 	.word	0x85055ec1
   27f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f5c:	798c      	ldrb	r4, [r1, #6]
   27f5e:	f8dd e018 	ldr.w	lr, [sp, #24]
   27f62:	2c08      	cmp	r4, #8
   27f64:	d901      	bls.n	27f6a <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
   27f66:	21db      	movs	r1, #219	; 0xdb
   27f68:	e02c      	b.n	27fc4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
   27f6a:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 28010 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
   27f6e:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
   27f72:	b10d      	cbz	r5, 27f78 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
   27f74:	21dc      	movs	r1, #220	; 0xdc
   27f76:	e025      	b.n	27fc4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
   27f78:	79cd      	ldrb	r5, [r1, #7]
   27f7a:	2d00      	cmp	r5, #0
   27f7c:	d045      	beq.n	2800a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
   27f7e:	006f      	lsls	r7, r5, #1
   27f80:	370a      	adds	r7, #10
   27f82:	681d      	ldr	r5, [r3, #0]
   27f84:	2c02      	cmp	r4, #2
   27f86:	443d      	add	r5, r7
   27f88:	d901      	bls.n	27f8e <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
   27f8a:	4626      	mov	r6, r4
   27f8c:	e001      	b.n	27f92 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
   27f8e:	f04f 0602 	mov.w	r6, #2
   27f92:	442e      	add	r6, r5
   27f94:	f1a6 0601 	sub.w	r6, r6, #1
   27f98:	d901      	bls.n	27f9e <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
   27f9a:	4625      	mov	r5, r4
   27f9c:	e001      	b.n	27fa2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
   27f9e:	f04f 0502 	mov.w	r5, #2
   27fa2:	f1a5 0501 	sub.w	r5, r5, #1
   27fa6:	ea26 0605 	bic.w	r6, r6, r5
   27faa:	888d      	ldrh	r5, [r1, #4]
   27fac:	4425      	add	r5, r4
   27fae:	f1a4 0401 	sub.w	r4, r4, #1
   27fb2:	f1a5 0501 	sub.w	r5, r5, #1
   27fb6:	ea25 0504 	bic.w	r5, r5, r4
   27fba:	f64f 74ff 	movw	r4, #65535	; 0xffff
   27fbe:	42a5      	cmp	r5, r4
   27fc0:	d303      	bcc.n	27fca <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
   27fc2:	21e7      	movs	r1, #231	; 0xe7
   27fc4:	2017      	movs	r0, #23
   27fc6:	f7ff fd43 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   27fca:	f1be 0f00 	cmp.w	lr, #0
   27fce:	d118      	bne.n	28002 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
   27fd0:	1bf4      	subs	r4, r6, r7
   27fd2:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
   27fd6:	8025      	strh	r5, [r4, #0]
   27fd8:	79c8      	ldrb	r0, [r1, #7]
   27fda:	70a0      	strb	r0, [r4, #2]
   27fdc:	2001      	movs	r0, #1
   27fde:	70e0      	strb	r0, [r4, #3]
   27fe0:	7122      	strb	r2, [r4, #4]
   27fe2:	6808      	ldr	r0, [r1, #0]
   27fe4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   27fe8:	0c00      	lsrs	r0, r0, #16
   27fea:	80e0      	strh	r0, [r4, #6]
   27fec:	8808      	ldrh	r0, [r1, #0]
   27fee:	8120      	strh	r0, [r4, #8]
   27ff0:	2000      	movs	r0, #0
   27ff2:	e003      	b.n	27ffc <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
   27ff4:	eb04 0740 	add.w	r7, r4, r0, lsl #1
   27ff8:	1c40      	adds	r0, r0, #1
   27ffa:	817a      	strh	r2, [r7, #10]
   27ffc:	79cf      	ldrb	r7, [r1, #7]
   27ffe:	4287      	cmp	r7, r0
   28000:	d8f8      	bhi.n	27ff4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
   28002:	79c8      	ldrb	r0, [r1, #7]
   28004:	fb00 6005 	mla	r0, r0, r5, r6
   28008:	6018      	str	r0, [r3, #0]
   2800a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2800e:	0000      	.short	0x0000
   28010:	20000068 	.word	0x20000068
   28014:	b530      	push	{r4, r5, lr}
   28016:	4603      	mov	r3, r0
   28018:	ea4f 0002 	mov.w	r0, r2
   2801c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
   28020:	8964      	ldrh	r4, [r4, #10]
   28022:	428c      	cmp	r4, r1
   28024:	d009      	beq.n	2803a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
   28026:	789c      	ldrb	r4, [r3, #2]
   28028:	1c40      	adds	r0, r0, #1
   2802a:	fbb0 f5f4 	udiv	r5, r0, r4
   2802e:	fb04 0015 	mls	r0, r4, r5, r0
   28032:	b2c0      	uxtb	r0, r0
   28034:	4290      	cmp	r0, r2
   28036:	d1f1      	bne.n	2801c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
   28038:	20ff      	movs	r0, #255	; 0xff
   2803a:	bd30      	pop	{r4, r5, pc}

0002803c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
   2803c:	b570      	push	{r4, r5, r6, lr}
   2803e:	4605      	mov	r5, r0
   28040:	4819      	ldr	r0, [pc, #100]	; (280a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
   28042:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   28046:	b364      	cbz	r4, 280a2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
   28048:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
   2804c:	d304      	bcc.n	28058 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
   2804e:	f240 2125 	movw	r1, #549	; 0x225
   28052:	2017      	movs	r0, #23
   28054:	f7ff fcfc 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28058:	4629      	mov	r1, r5
   2805a:	4620      	mov	r0, r4
   2805c:	f00c f8d4 	bl	34208 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
   28060:	4601      	mov	r1, r0
   28062:	28ff      	cmp	r0, #255	; 0xff
   28064:	d004      	beq.n	28070 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
   28066:	4620      	mov	r0, r4
   28068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2806c:	f00c b8e0 	b.w	34230 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
   28070:	78a0      	ldrb	r0, [r4, #2]
   28072:	fbb5 f1f0 	udiv	r1, r5, r0
   28076:	fb00 5011 	mls	r0, r0, r1, r5
   2807a:	b2c6      	uxtb	r6, r0
   2807c:	4632      	mov	r2, r6
   2807e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
   28082:	4620      	mov	r0, r4
   28084:	f7ff ffc6 	bl	28014 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
   28088:	4602      	mov	r2, r0
   2808a:	28ff      	cmp	r0, #255	; 0xff
   2808c:	d009      	beq.n	280a2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
   2808e:	42b2      	cmp	r2, r6
   28090:	d001      	beq.n	28096 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
   28092:	2000      	movs	r0, #0
   28094:	70e0      	strb	r0, [r4, #3]
   28096:	4629      	mov	r1, r5
   28098:	4620      	mov	r0, r4
   2809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2809e:	f00c b8ad 	b.w	341fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
   280a2:	2000      	movs	r0, #0
   280a4:	bd70      	pop	{r4, r5, r6, pc}
   280a6:	0000      	.short	0x0000
   280a8:	20000068 	.word	0x20000068

000280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
   280ac:	4a08      	ldr	r2, [pc, #32]	; (280d0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
   280ae:	b510      	push	{r4, lr}
   280b0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
   280b4:	4601      	mov	r1, r0
   280b6:	4620      	mov	r0, r4
   280b8:	f00c f8a6 	bl	34208 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
   280bc:	4601      	mov	r1, r0
   280be:	28ff      	cmp	r0, #255	; 0xff
   280c0:	d004      	beq.n	280cc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
   280c2:	4620      	mov	r0, r4
   280c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   280c8:	f00c b8b2 	b.w	34230 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
   280cc:	2000      	movs	r0, #0
   280ce:	bd10      	pop	{r4, pc}
   280d0:	20000068 	.word	0x20000068

000280d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
   280d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   280d6:	b089      	sub	sp, #36	; 0x24
   280d8:	0004      	movs	r4, r0
   280da:	460e      	mov	r6, r1
   280dc:	9406      	str	r4, [sp, #24]
   280de:	d007      	beq.n	280f0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
   280e0:	2500      	movs	r5, #0
   280e2:	0760      	lsls	r0, r4, #29
   280e4:	d006      	beq.n	280f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
   280e6:	f240 1119 	movw	r1, #281	; 0x119
   280ea:	2017      	movs	r0, #23
   280ec:	f7ff fcb0 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   280f0:	2501      	movs	r5, #1
   280f2:	e7f6      	b.n	280e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
   280f4:	4814      	ldr	r0, [pc, #80]	; (28148 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
   280f6:	2200      	movs	r2, #0
   280f8:	4f14      	ldr	r7, [pc, #80]	; (2814c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
   280fa:	6002      	str	r2, [r0, #0]
   280fc:	6042      	str	r2, [r0, #4]
   280fe:	e9d7 1000 	ldrd	r1, r0, [r7]
   28102:	f896 c000 	ldrb.w	ip, [r6]
   28106:	68bb      	ldr	r3, [r7, #8]
   28108:	f36c 601f 	bfi	r0, ip, #24, #8
   2810c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   28110:	e9cd 5100 	strd	r5, r1, [sp]
   28114:	ab06      	add	r3, sp, #24
   28116:	a901      	add	r1, sp, #4
   28118:	4610      	mov	r0, r2
   2811a:	f7ff ff1d 	bl	27f58 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
   2811e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
   28122:	7873      	ldrb	r3, [r6, #1]
   28124:	697a      	ldr	r2, [r7, #20]
   28126:	f363 601f 	bfi	r0, r3, #24, #8
   2812a:	e9cd 0202 	strd	r0, r2, [sp, #8]
   2812e:	e9cd 5100 	strd	r5, r1, [sp]
   28132:	ab06      	add	r3, sp, #24
   28134:	2200      	movs	r2, #0
   28136:	a901      	add	r1, sp, #4
   28138:	2001      	movs	r0, #1
   2813a:	f7ff ff0d 	bl	27f58 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
   2813e:	9806      	ldr	r0, [sp, #24]
   28140:	b009      	add	sp, #36	; 0x24
   28142:	1b00      	subs	r0, r0, r4
   28144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28146:	0000      	.short	0x0000
   28148:	20000068 	.word	0x20000068
   2814c:	0002823c 	.word	0x0002823c

00028150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
   28150:	b510      	push	{r4, lr}
   28152:	4604      	mov	r4, r0
   28154:	7980      	ldrb	r0, [r0, #6]
   28156:	490e      	ldr	r1, [pc, #56]	; (28190 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
   28158:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   2815c:	b1a8      	cbz	r0, 2818a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
   2815e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   28162:	79e1      	ldrb	r1, [r4, #7]
   28164:	7882      	ldrb	r2, [r0, #2]
   28166:	4291      	cmp	r1, r2
   28168:	d20f      	bcs.n	2818a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
   2816a:	1c4a      	adds	r2, r1, #1
   2816c:	71e2      	strb	r2, [r4, #7]
   2816e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   28172:	8952      	ldrh	r2, [r2, #10]
   28174:	429a      	cmp	r2, r3
   28176:	d0f4      	beq.n	28162 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
   28178:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   2817c:	8952      	ldrh	r2, [r2, #10]
   2817e:	80a2      	strh	r2, [r4, #4]
   28180:	f00c f856 	bl	34230 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
   28184:	6020      	str	r0, [r4, #0]
   28186:	2000      	movs	r0, #0
   28188:	bd10      	pop	{r4, pc}
   2818a:	2005      	movs	r0, #5
   2818c:	bd10      	pop	{r4, pc}
   2818e:	0000      	.short	0x0000
   28190:	20000068 	.word	0x20000068

00028194 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
   28194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28198:	4607      	mov	r7, r0
   2819a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2819e:	8038      	strh	r0, [r7, #0]
   281a0:	4812      	ldr	r0, [pc, #72]	; (281ec <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
   281a2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   281a6:	b1ec      	cbz	r4, 281e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
   281a8:	78a5      	ldrb	r5, [r4, #2]
   281aa:	7920      	ldrb	r0, [r4, #4]
   281ac:	fbb0 f1f5 	udiv	r1, r0, r5
   281b0:	fb05 0611 	mls	r6, r5, r1, r0
   281b4:	4632      	mov	r2, r6
   281b6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
   281ba:	4620      	mov	r0, r4
   281bc:	f7ff ff2a 	bl	28014 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
   281c0:	4602      	mov	r2, r0
   281c2:	28ff      	cmp	r0, #255	; 0xff
   281c4:	d00e      	beq.n	281e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
   281c6:	1ba8      	subs	r0, r5, r6
   281c8:	4410      	add	r0, r2
   281ca:	fbb0 f1f5 	udiv	r1, r0, r5
   281ce:	fb05 0011 	mls	r0, r5, r1, r0
   281d2:	7921      	ldrb	r1, [r4, #4]
   281d4:	4408      	add	r0, r1
   281d6:	b281      	uxth	r1, r0
   281d8:	8039      	strh	r1, [r7, #0]
   281da:	4620      	mov	r0, r4
   281dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   281e0:	f00c b80c 	b.w	341fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
   281e4:	2000      	movs	r0, #0
   281e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281ea:	0000      	.short	0x0000
   281ec:	20000068 	.word	0x20000068

000281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
   281f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281f4:	4606      	mov	r6, r0
   281f6:	4810      	ldr	r0, [pc, #64]	; (28238 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
   281f8:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   281fc:	4631      	mov	r1, r6
   281fe:	4628      	mov	r0, r5
   28200:	f00c f802 	bl	34208 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
   28204:	4604      	mov	r4, r0
   28206:	28ff      	cmp	r0, #255	; 0xff
   28208:	d012      	beq.n	28230 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
   2820a:	f8d5 0006 	ldr.w	r0, [r5, #6]
   2820e:	4621      	mov	r1, r4
   28210:	ea4f 4730 	mov.w	r7, r0, ror #16
   28214:	4628      	mov	r0, r5
   28216:	f00c f80b 	bl	34230 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
   2821a:	4601      	mov	r1, r0
   2821c:	4630      	mov	r0, r6
   2821e:	47b8      	blx	r7
   28220:	eb05 0144 	add.w	r1, r5, r4, lsl #1
   28224:	f64f 70f0 	movw	r0, #65520	; 0xfff0
   28228:	8148      	strh	r0, [r1, #10]
   2822a:	2000      	movs	r0, #0
   2822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28230:	f243 0002 	movw	r0, #12290	; 0x3002
   28234:	e7fa      	b.n	2822c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
   28236:	0000      	.short	0x0000
   28238:	20000068 	.word	0x20000068
   2823c:	00036023 	.word	0x00036023
   28240:	000802f8 	.word	0x000802f8
   28244:	00000000 	.word	0x00000000
   28248:	000355f9 	.word	0x000355f9
   2824c:	00080118 	.word	0x00080118
   28250:	00000000 	.word	0x00000000

00028254 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
   28254:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28258:	4c24      	ldr	r4, [pc, #144]	; (282ec <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
   2825a:	4606      	mov	r6, r0
   2825c:	b081      	sub	sp, #4
   2825e:	6820      	ldr	r0, [r4, #0]
   28260:	469a      	mov	sl, r3
   28262:	4693      	mov	fp, r2
   28264:	b158      	cbz	r0, 2827e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
   28266:	7a01      	ldrb	r1, [r0, #8]
   28268:	42b1      	cmp	r1, r6
   2826a:	d903      	bls.n	28274 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
   2826c:	6840      	ldr	r0, [r0, #4]
   2826e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   28272:	b140      	cbz	r0, 28286 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
   28274:	f243 0002 	movw	r0, #12290	; 0x3002
   28278:	b005      	add	sp, #20
   2827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2827e:	21a5      	movs	r1, #165	; 0xa5
   28280:	2018      	movs	r0, #24
   28282:	f7ff fbe5 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28286:	4619      	mov	r1, r3
   28288:	9802      	ldr	r0, [sp, #8]
   2828a:	f00c f80c 	bl	342a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   2828e:	4680      	mov	r8, r0
   28290:	4658      	mov	r0, fp
   28292:	990e      	ldr	r1, [sp, #56]	; 0x38
   28294:	f00b fffd 	bl	34292 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   28298:	4605      	mov	r5, r0
   2829a:	eb08 0005 	add.w	r0, r8, r5
   2829e:	1d00      	adds	r0, r0, #4
   282a0:	b287      	uxth	r7, r0
   282a2:	6820      	ldr	r0, [r4, #0]
   282a4:	46a1      	mov	r9, r4
   282a6:	4639      	mov	r1, r7
   282a8:	6800      	ldr	r0, [r0, #0]
   282aa:	f00b ff42 	bl	34132 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
   282ae:	0004      	movs	r4, r0
   282b0:	d01a      	beq.n	282e8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
   282b2:	8067      	strh	r7, [r4, #2]
   282b4:	8025      	strh	r5, [r4, #0]
   282b6:	4629      	mov	r1, r5
   282b8:	1d20      	adds	r0, r4, #4
   282ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   282bc:	4607      	mov	r7, r0
   282be:	465a      	mov	r2, fp
   282c0:	2309      	movs	r3, #9
   282c2:	9500      	str	r5, [sp, #0]
   282c4:	f00b feaf 	bl	34026 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   282c8:	8820      	ldrh	r0, [r4, #0]
   282ca:	4641      	mov	r1, r8
   282cc:	4438      	add	r0, r7
   282ce:	230a      	movs	r3, #10
   282d0:	9a02      	ldr	r2, [sp, #8]
   282d2:	f8cd a000 	str.w	sl, [sp]
   282d6:	f00b fea6 	bl	34026 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
   282da:	f8d9 0000 	ldr.w	r0, [r9]
   282de:	6840      	ldr	r0, [r0, #4]
   282e0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
   282e4:	2000      	movs	r0, #0
   282e6:	e7c7      	b.n	28278 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   282e8:	2004      	movs	r0, #4
   282ea:	e7c5      	b.n	28278 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
   282ec:	20000070 	.word	0x20000070

000282f0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
   282f0:	b570      	push	{r4, r5, r6, lr}
   282f2:	4c14      	ldr	r4, [pc, #80]	; (28344 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
   282f4:	6823      	ldr	r3, [r4, #0]
   282f6:	b18b      	cbz	r3, 2831c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
   282f8:	7a19      	ldrb	r1, [r3, #8]
   282fa:	4281      	cmp	r1, r0
   282fc:	d912      	bls.n	28324 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   282fe:	685a      	ldr	r2, [r3, #4]
   28300:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   28304:	b171      	cbz	r1, 28324 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
   28306:	2500      	movs	r5, #0
   28308:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   2830c:	884a      	ldrh	r2, [r1, #2]
   2830e:	6818      	ldr	r0, [r3, #0]
   28310:	f00b ff67 	bl	341e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
   28314:	6821      	ldr	r1, [r4, #0]
   28316:	2000      	movs	r0, #0
   28318:	7a0a      	ldrb	r2, [r1, #8]
   2831a:	e00c      	b.n	28336 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
   2831c:	21c6      	movs	r1, #198	; 0xc6
   2831e:	2018      	movs	r0, #24
   28320:	f7ff fb96 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28324:	f243 0002 	movw	r0, #12290	; 0x3002
   28328:	bd70      	pop	{r4, r5, r6, pc}
   2832a:	684b      	ldr	r3, [r1, #4]
   2832c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   28330:	b933      	cbnz	r3, 28340 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
   28332:	1c40      	adds	r0, r0, #1
   28334:	b2c0      	uxtb	r0, r0
   28336:	4282      	cmp	r2, r0
   28338:	d8f7      	bhi.n	2832a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
   2833a:	6808      	ldr	r0, [r1, #0]
   2833c:	f00b ff46 	bl	341cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
   28340:	2000      	movs	r0, #0
   28342:	bd70      	pop	{r4, r5, r6, pc}
   28344:	20000070 	.word	0x20000070

00028348 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
   28348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2834c:	460d      	mov	r5, r1
   2834e:	0004      	movs	r4, r0
   28350:	4690      	mov	r8, r2
   28352:	f04f 0600 	mov.w	r6, #0
   28356:	d006      	beq.n	28366 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
   28358:	2700      	movs	r7, #0
   2835a:	07a0      	lsls	r0, r4, #30
   2835c:	d005      	beq.n	2836a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
   2835e:	2186      	movs	r1, #134	; 0x86
   28360:	2018      	movs	r0, #24
   28362:	f7ff fb75 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28366:	2701      	movs	r7, #1
   28368:	e7f7      	b.n	2835a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
   2836a:	b1cd      	cbz	r5, 283a0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
   2836c:	4611      	mov	r1, r2
   2836e:	2000      	movs	r0, #0
   28370:	f00b ff10 	bl	34194 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   28374:	300c      	adds	r0, #12
   28376:	eb00 0685 	add.w	r6, r0, r5, lsl #2
   2837a:	b98f      	cbnz	r7, 283a0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
   2837c:	4f0a      	ldr	r7, [pc, #40]	; (283a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
   2837e:	f104 000c 	add.w	r0, r4, #12
   28382:	00aa      	lsls	r2, r5, #2
   28384:	603c      	str	r4, [r7, #0]
   28386:	7225      	strb	r5, [r4, #8]
   28388:	6060      	str	r0, [r4, #4]
   2838a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   2838e:	6020      	str	r0, [r4, #0]
   28390:	2100      	movs	r1, #0
   28392:	6860      	ldr	r0, [r4, #4]
   28394:	f00f f98d 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   28398:	4641      	mov	r1, r8
   2839a:	6838      	ldr	r0, [r7, #0]
   2839c:	f00b fefa 	bl	34194 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
   283a0:	4630      	mov	r0, r6
   283a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   283a6:	0000      	.short	0x0000
   283a8:	20000070 	.word	0x20000070

000283ac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
   283ac:	b570      	push	{r4, r5, r6, lr}
   283ae:	4d08      	ldr	r5, [pc, #32]	; (283d0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
   283b0:	6828      	ldr	r0, [r5, #0]
   283b2:	2800      	cmp	r0, #0
   283b4:	d00a      	beq.n	283cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
   283b6:	2400      	movs	r4, #0
   283b8:	e004      	b.n	283c4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
   283ba:	4620      	mov	r0, r4
   283bc:	f7ff ff98 	bl	282f0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   283c0:	1c64      	adds	r4, r4, #1
   283c2:	b2e4      	uxtb	r4, r4
   283c4:	6828      	ldr	r0, [r5, #0]
   283c6:	7a00      	ldrb	r0, [r0, #8]
   283c8:	42a0      	cmp	r0, r4
   283ca:	d8f6      	bhi.n	283ba <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
   283cc:	bd70      	pop	{r4, r5, r6, pc}
   283ce:	0000      	.short	0x0000
   283d0:	20000070 	.word	0x20000070

000283d4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
   283d4:	4909      	ldr	r1, [pc, #36]	; (283fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
   283d6:	b510      	push	{r4, lr}
   283d8:	4602      	mov	r2, r0
   283da:	6809      	ldr	r1, [r1, #0]
   283dc:	2000      	movs	r0, #0
   283de:	b149      	cbz	r1, 283f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
   283e0:	7a0b      	ldrb	r3, [r1, #8]
   283e2:	4293      	cmp	r3, r2
   283e4:	d905      	bls.n	283f2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   283e6:	6849      	ldr	r1, [r1, #4]
   283e8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   283ec:	2900      	cmp	r1, #0
   283ee:	d000      	beq.n	283f2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
   283f0:	1d08      	adds	r0, r1, #4
   283f2:	bd10      	pop	{r4, pc}
   283f4:	21ec      	movs	r1, #236	; 0xec
   283f6:	2018      	movs	r0, #24
   283f8:	f7ff fb2a 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   283fc:	20000070 	.word	0x20000070

00028400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
   28400:	490a      	ldr	r1, [pc, #40]	; (2842c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
   28402:	b510      	push	{r4, lr}
   28404:	4602      	mov	r2, r0
   28406:	6809      	ldr	r1, [r1, #0]
   28408:	2000      	movs	r0, #0
   2840a:	b159      	cbz	r1, 28424 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
   2840c:	7a0b      	ldrb	r3, [r1, #8]
   2840e:	4293      	cmp	r3, r2
   28410:	d907      	bls.n	28422 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   28412:	6849      	ldr	r1, [r1, #4]
   28414:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   28418:	2900      	cmp	r1, #0
   2841a:	d002      	beq.n	28422 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
   2841c:	f831 0b04 	ldrh.w	r0, [r1], #4
   28420:	4408      	add	r0, r1
   28422:	bd10      	pop	{r4, pc}
   28424:	21fa      	movs	r1, #250	; 0xfa
   28426:	2018      	movs	r0, #24
   28428:	f7ff fb12 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2842c:	20000070 	.word	0x20000070
   28430:	b570      	push	{r4, r5, r6, lr}
   28432:	4b1e      	ldr	r3, [pc, #120]	; (284ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
   28434:	6845      	ldr	r5, [r0, #4]
   28436:	4604      	mov	r4, r0
   28438:	2200      	movs	r2, #0
   2843a:	b1a1      	cbz	r1, 28466 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
   2843c:	2001      	movs	r0, #1
   2843e:	7060      	strb	r0, [r4, #1]
   28440:	8858      	ldrh	r0, [r3, #2]
   28442:	0881      	lsrs	r1, r0, #2
   28444:	f05f 0000 	movs.w	r0, #0
   28448:	eb04 0340 	add.w	r3, r4, r0, lsl #1
   2844c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
   28450:	831a      	strh	r2, [r3, #24]
   28452:	8419      	strh	r1, [r3, #32]
   28454:	fb00 5301 	mla	r3, r0, r1, r5
   28458:	6073      	str	r3, [r6, #4]
   2845a:	1823      	adds	r3, r4, r0
   2845c:	1c40      	adds	r0, r0, #1
   2845e:	751a      	strb	r2, [r3, #20]
   28460:	2804      	cmp	r0, #4
   28462:	d3f1      	bcc.n	28448 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
   28464:	bd70      	pop	{r4, r5, r6, pc}
   28466:	7062      	strb	r2, [r4, #1]
   28468:	f05f 0000 	movs.w	r0, #0
   2846c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   28470:	830a      	strh	r2, [r1, #24]
   28472:	840a      	strh	r2, [r1, #32]
   28474:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   28478:	604a      	str	r2, [r1, #4]
   2847a:	1821      	adds	r1, r4, r0
   2847c:	1c40      	adds	r0, r0, #1
   2847e:	750a      	strb	r2, [r1, #20]
   28480:	2804      	cmp	r0, #4
   28482:	d3f3      	bcc.n	2846c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
   28484:	8858      	ldrh	r0, [r3, #2]
   28486:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   2848a:	d201      	bcs.n	28490 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
   2848c:	0846      	lsrs	r6, r0, #1
   2848e:	e000      	b.n	28492 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
   28490:	26ff      	movs	r6, #255	; 0xff
   28492:	f00b ff7c 	bl	3438e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
   28496:	6065      	str	r5, [r4, #4]
   28498:	8420      	strh	r0, [r4, #32]
   2849a:	1829      	adds	r1, r5, r0
   2849c:	60a1      	str	r1, [r4, #8]
   2849e:	8466      	strh	r6, [r4, #34]	; 0x22
   284a0:	60e5      	str	r5, [r4, #12]
   284a2:	84a0      	strh	r0, [r4, #36]	; 0x24
   284a4:	6121      	str	r1, [r4, #16]
   284a6:	84e6      	strh	r6, [r4, #38]	; 0x26
   284a8:	bd70      	pop	{r4, r5, r6, pc}
   284aa:	0000      	.short	0x0000
   284ac:	20000074 	.word	0x20000074

000284b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
   284b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284b4:	b158      	cbz	r0, 284ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
   284b6:	2500      	movs	r5, #0
   284b8:	4411      	add	r1, r2
   284ba:	4e24      	ldr	r6, [pc, #144]	; (2854c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
   284bc:	b2cc      	uxtb	r4, r1
   284be:	2700      	movs	r7, #0
   284c0:	7034      	strb	r4, [r6, #0]
   284c2:	0781      	lsls	r1, r0, #30
   284c4:	d005      	beq.n	284d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
   284c6:	214e      	movs	r1, #78	; 0x4e
   284c8:	2009      	movs	r0, #9
   284ca:	f7ff fac1 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   284ce:	2501      	movs	r5, #1
   284d0:	e7f2      	b.n	284b8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
   284d2:	2b1f      	cmp	r3, #31
   284d4:	d804      	bhi.n	284e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
   284d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   284da:	ea01 0183 	and.w	r1, r1, r3, lsl #2
   284de:	e009      	b.n	284f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
   284e0:	0059      	lsls	r1, r3, #1
   284e2:	2bff      	cmp	r3, #255	; 0xff
   284e4:	d90c      	bls.n	28500 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
   284e6:	f103 02ff 	add.w	r2, r3, #255	; 0xff
   284ea:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   284ee:	d200      	bcs.n	284f2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
   284f0:	4611      	mov	r1, r2
   284f2:	b289      	uxth	r1, r1
   284f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   284f8:	1cc9      	adds	r1, r1, #3
   284fa:	4011      	ands	r1, r2
   284fc:	b135      	cbz	r5, 2850c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
   284fe:	e007      	b.n	28510 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
   28500:	227c      	movs	r2, #124	; 0x7c
   28502:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   28506:	d3f4      	bcc.n	284f2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
   28508:	217c      	movs	r1, #124	; 0x7c
   2850a:	e7f2      	b.n	284f2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
   2850c:	6070      	str	r0, [r6, #4]
   2850e:	8071      	strh	r1, [r6, #2]
   28510:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   28514:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
   28518:	2200      	movs	r2, #0
   2851a:	6876      	ldr	r6, [r6, #4]
   2851c:	f04f 0c01 	mov.w	ip, #1
   28520:	e00d      	b.n	2853e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
   28522:	b94d      	cbnz	r5, 28538 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
   28524:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   28528:	eb00 0e03 	add.w	lr, r0, r3
   2852c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
   28530:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
   28534:	f8c7 e004 	str.w	lr, [r7, #4]
   28538:	1c52      	adds	r2, r2, #1
   2853a:	440b      	add	r3, r1
   2853c:	b2d2      	uxtb	r2, r2
   2853e:	42a2      	cmp	r2, r4
   28540:	d3ef      	bcc.n	28522 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
   28542:	1ddb      	adds	r3, r3, #7
   28544:	f023 0007 	bic.w	r0, r3, #7
   28548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2854c:	20000074 	.word	0x20000074

00028550 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
   28550:	b570      	push	{r4, r5, r6, lr}
   28552:	4a10      	ldr	r2, [pc, #64]	; (28594 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
   28554:	2000      	movs	r0, #0
   28556:	6851      	ldr	r1, [r2, #4]
   28558:	7812      	ldrb	r2, [r2, #0]
   2855a:	e014      	b.n	28586 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
   2855c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   28560:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
   28564:	b16b      	cbz	r3, 28582 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
   28566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2856a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
   2856e:	d00c      	beq.n	2858a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
   28570:	2500      	movs	r5, #0
   28572:	70a5      	strb	r5, [r4, #2]
   28574:	2101      	movs	r1, #1
   28576:	4620      	mov	r0, r4
   28578:	f7ff ff5a 	bl	28430 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   2857c:	7025      	strb	r5, [r4, #0]
   2857e:	4620      	mov	r0, r4
   28580:	bd70      	pop	{r4, r5, r6, pc}
   28582:	1c40      	adds	r0, r0, #1
   28584:	b2c0      	uxtb	r0, r0
   28586:	4290      	cmp	r0, r2
   28588:	d3e8      	bcc.n	2855c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
   2858a:	21a9      	movs	r1, #169	; 0xa9
   2858c:	2009      	movs	r0, #9
   2858e:	f7ff fa5f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28592:	0000      	.short	0x0000
   28594:	20000074 	.word	0x20000074

00028598 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
   28598:	4804      	ldr	r0, [pc, #16]	; (285ac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
   2859a:	b510      	push	{r4, lr}
   2859c:	8840      	ldrh	r0, [r0, #2]
   2859e:	0884      	lsrs	r4, r0, #2
   285a0:	f00b fef5 	bl	3438e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
   285a4:	4284      	cmp	r4, r0
   285a6:	d300      	bcc.n	285aa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
   285a8:	4620      	mov	r0, r4
   285aa:	bd10      	pop	{r4, pc}
   285ac:	20000074 	.word	0x20000074
   285b0:	b530      	push	{r4, r5, lr}
   285b2:	490d      	ldr	r1, [pc, #52]	; (285e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
   285b4:	2001      	movs	r0, #1
   285b6:	6048      	str	r0, [r1, #4]
   285b8:	1e82      	subs	r2, r0, #2
   285ba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   285be:	490b      	ldr	r1, [pc, #44]	; (285ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
   285c0:	6088      	str	r0, [r1, #8]
   285c2:	2300      	movs	r3, #0
   285c4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
   285c8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   285cc:	4c08      	ldr	r4, [pc, #32]	; (285f0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
   285ce:	6023      	str	r3, [r4, #0]
   285d0:	1d25      	adds	r5, r4, #4
   285d2:	6028      	str	r0, [r5, #0]
   285d4:	6088      	str	r0, [r1, #8]
   285d6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   285da:	6023      	str	r3, [r4, #0]
   285dc:	6028      	str	r0, [r5, #0]
   285de:	4906      	ldr	r1, [pc, #24]	; (285f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
   285e0:	4804      	ldr	r0, [pc, #16]	; (285f4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
   285e2:	6008      	str	r0, [r1, #0]
   285e4:	bd30      	pop	{r4, r5, pc}
   285e6:	0000      	.short	0x0000
   285e8:	4000e000 	.word	0x4000e000
   285ec:	4000f000 	.word	0x4000f000
   285f0:	4000f500 	.word	0x4000f500
   285f4:	3ff60000 	.word	0x3ff60000
   285f8:	4001f508 	.word	0x4001f508

000285fc <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
   285fc:	b510      	push	{r4, lr}
   285fe:	f7ff ffd7 	bl	285b0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   28602:	f00b ff9b 	bl	3453c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
   28606:	4903      	ldr	r1, [pc, #12]	; (28614 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
   28608:	4801      	ldr	r0, [pc, #4]	; (28610 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
   2860a:	6008      	str	r0, [r1, #0]
   2860c:	bd10      	pop	{r4, pc}
   2860e:	0000      	.short	0x0000
   28610:	3ff60000 	.word	0x3ff60000
   28614:	4001f508 	.word	0x4001f508

00028618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
   28618:	b510      	push	{r4, lr}
   2861a:	f7ff ffc9 	bl	285b0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
   2861e:	f00b ff8d 	bl	3453c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
   28622:	f000 f887 	bl	28734 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
   28626:	4905      	ldr	r1, [pc, #20]	; (2863c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
   28628:	4803      	ldr	r0, [pc, #12]	; (28638 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
   2862a:	6008      	str	r0, [r1, #0]
   2862c:	f000 f8b8 	bl	287a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
   28630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28634:	f000 b8dc 	b.w	287f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
   28638:	3ff60000 	.word	0x3ff60000
   2863c:	4001f508 	.word	0x4001f508
   28640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28644:	4682      	mov	sl, r0
   28646:	4838      	ldr	r0, [pc, #224]	; (28728 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
   28648:	f00e fec8 	bl	373dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   2864c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 28728 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
   28650:	b128      	cbz	r0, 2865e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
   28652:	2601      	movs	r6, #1
   28654:	f10b 0001 	add.w	r0, fp, #1
   28658:	21ff      	movs	r1, #255	; 0xff
   2865a:	7001      	strb	r1, [r0, #0]
   2865c:	e000      	b.n	28660 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
   2865e:	2600      	movs	r6, #0
   28660:	f44f 7580 	mov.w	r5, #256	; 0x100
   28664:	4c31      	ldr	r4, [pc, #196]	; (2872c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
   28666:	f04f 0800 	mov.w	r8, #0
   2866a:	1d2f      	adds	r7, r5, #4
   2866c:	2101      	movs	r1, #1
   2866e:	6061      	str	r1, [r4, #4]
   28670:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   28674:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   28678:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
   2867c:	6021      	str	r1, [r4, #0]
   2867e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 28730 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
   28682:	e01c      	b.n	286be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
   28684:	f8d9 0000 	ldr.w	r0, [r9]
   28688:	06c0      	lsls	r0, r0, #27
   2868a:	d518      	bpl.n	286be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
   2868c:	200e      	movs	r0, #14
   2868e:	f00b ff64 	bl	3455a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
   28692:	f3ef 8010 	mrs	r0, PRIMASK
   28696:	9000      	str	r0, [sp, #0]
   28698:	b672      	cpsid	i
   2869a:	2103      	movs	r1, #3
   2869c:	4620      	mov	r0, r4
   2869e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
   286a2:	4629      	mov	r1, r5
   286a4:	f00b ff66 	bl	34574 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   286a8:	b930      	cbnz	r0, 286b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
   286aa:	4639      	mov	r1, r7
   286ac:	4620      	mov	r0, r4
   286ae:	f00b ff61 	bl	34574 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   286b2:	b908      	cbnz	r0, 286b8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
   286b4:	f00e ff29 	bl	3750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   286b8:	9800      	ldr	r0, [sp, #0]
   286ba:	b900      	cbnz	r0, 286be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
   286bc:	b662      	cpsie	i
   286be:	4629      	mov	r1, r5
   286c0:	4620      	mov	r0, r4
   286c2:	f00b ff57 	bl	34574 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   286c6:	b928      	cbnz	r0, 286d4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
   286c8:	4639      	mov	r1, r7
   286ca:	4620      	mov	r0, r4
   286cc:	f00b ff52 	bl	34574 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   286d0:	2800      	cmp	r0, #0
   286d2:	d0d7      	beq.n	28684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
   286d4:	4639      	mov	r1, r7
   286d6:	4620      	mov	r0, r4
   286d8:	f00b ff4c 	bl	34574 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
   286dc:	2800      	cmp	r0, #0
   286de:	d1c5      	bne.n	2866c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
   286e0:	bb06      	cbnz	r6, 28724 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
   286e2:	f89b 1001 	ldrb.w	r1, [fp, #1]
   286e6:	f88d 1000 	strb.w	r1, [sp]
   286ea:	9900      	ldr	r1, [sp, #0]
   286ec:	9100      	str	r1, [sp, #0]
   286ee:	f89d 1000 	ldrb.w	r1, [sp]
   286f2:	b109      	cbz	r1, 286f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
   286f4:	2501      	movs	r5, #1
   286f6:	e000      	b.n	286fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
   286f8:	2500      	movs	r5, #0
   286fa:	f10b 0001 	add.w	r0, fp, #1
   286fe:	f880 8000 	strb.w	r8, [r0]
   28702:	2003      	movs	r0, #3
   28704:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   28708:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
   2870c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   28710:	200e      	movs	r0, #14
   28712:	f00b ff22 	bl	3455a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
   28716:	4804      	ldr	r0, [pc, #16]	; (28728 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
   28718:	f00e fe77 	bl	3740a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   2871c:	b115      	cbz	r5, 28724 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
   2871e:	2011      	movs	r0, #17
   28720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28724:	2000      	movs	r0, #0
   28726:	e7fb      	b.n	28720 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
   28728:	20000360 	.word	0x20000360
   2872c:	4000e000 	.word	0x4000e000
   28730:	e000ed10 	.word	0xe000ed10

00028734 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
   28734:	b510      	push	{r4, lr}
   28736:	4806      	ldr	r0, [pc, #24]	; (28750 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
   28738:	f00e fe63 	bl	37402 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   2873c:	b118      	cbz	r0, 28746 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
   2873e:	2130      	movs	r1, #48	; 0x30
   28740:	201d      	movs	r0, #29
   28742:	f7ff f985 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28746:	4802      	ldr	r0, [pc, #8]	; (28750 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
   28748:	2100      	movs	r1, #0
   2874a:	7041      	strb	r1, [r0, #1]
   2874c:	bd10      	pop	{r4, pc}
   2874e:	0000      	.short	0x0000
   28750:	20000360 	.word	0x20000360

00028754 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
   28754:	b570      	push	{r4, r5, r6, lr}
   28756:	4911      	ldr	r1, [pc, #68]	; (2879c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
   28758:	680a      	ldr	r2, [r1, #0]
   2875a:	b1ea      	cbz	r2, 28798 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
   2875c:	2300      	movs	r3, #0
   2875e:	461d      	mov	r5, r3
   28760:	2401      	movs	r4, #1
   28762:	684a      	ldr	r2, [r1, #4]
   28764:	1c52      	adds	r2, r2, #1
   28766:	604a      	str	r2, [r1, #4]
   28768:	2a09      	cmp	r2, #9
   2876a:	d300      	bcc.n	2876e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
   2876c:	604d      	str	r5, [r1, #4]
   2876e:	790e      	ldrb	r6, [r1, #4]
   28770:	fa04 f206 	lsl.w	r2, r4, r6
   28774:	680e      	ldr	r6, [r1, #0]
   28776:	4216      	tst	r6, r2
   28778:	d00b      	beq.n	28792 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
   2877a:	f3ef 8310 	mrs	r3, PRIMASK
   2877e:	b672      	cpsid	i
   28780:	680c      	ldr	r4, [r1, #0]
   28782:	4394      	bics	r4, r2
   28784:	600c      	str	r4, [r1, #0]
   28786:	b903      	cbnz	r3, 2878a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
   28788:	b662      	cpsie	i
   2878a:	6849      	ldr	r1, [r1, #4]
   2878c:	6001      	str	r1, [r0, #0]
   2878e:	2000      	movs	r0, #0
   28790:	bd70      	pop	{r4, r5, r6, pc}
   28792:	1c5b      	adds	r3, r3, #1
   28794:	2b09      	cmp	r3, #9
   28796:	d3e4      	bcc.n	28762 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
   28798:	2005      	movs	r0, #5
   2879a:	bd70      	pop	{r4, r5, r6, pc}
   2879c:	2000007c 	.word	0x2000007c

000287a0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
   287a0:	4802      	ldr	r0, [pc, #8]	; (287ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
   287a2:	2100      	movs	r1, #0
   287a4:	6001      	str	r1, [r0, #0]
   287a6:	6041      	str	r1, [r0, #4]
   287a8:	4770      	bx	lr
   287aa:	0000      	.short	0x0000
   287ac:	2000007c 	.word	0x2000007c

000287b0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
   287b0:	b510      	push	{r4, lr}
   287b2:	4c04      	ldr	r4, [pc, #16]	; (287c4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
   287b4:	7820      	ldrb	r0, [r4, #0]
   287b6:	28ff      	cmp	r0, #255	; 0xff
   287b8:	d003      	beq.n	287c2 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
   287ba:	f00a fcdb 	bl	33174 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
   287be:	20ff      	movs	r0, #255	; 0xff
   287c0:	7020      	strb	r0, [r4, #0]
   287c2:	bd10      	pop	{r4, pc}
   287c4:	20000000 	.word	0x20000000

000287c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
   287c8:	b510      	push	{r4, lr}
   287ca:	4c08      	ldr	r4, [pc, #32]	; (287ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
   287cc:	7861      	ldrb	r1, [r4, #1]
   287ce:	b109      	cbz	r1, 287d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
   287d0:	200f      	movs	r0, #15
   287d2:	bd10      	pop	{r4, pc}
   287d4:	f00a fc94 	bl	33100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   287d8:	7020      	strb	r0, [r4, #0]
   287da:	28ff      	cmp	r0, #255	; 0xff
   287dc:	d001      	beq.n	287e2 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
   287de:	2000      	movs	r0, #0
   287e0:	bd10      	pop	{r4, pc}
   287e2:	2173      	movs	r1, #115	; 0x73
   287e4:	201f      	movs	r0, #31
   287e6:	f7ff f933 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   287ea:	0000      	.short	0x0000
   287ec:	20000000 	.word	0x20000000

000287f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
   287f0:	4901      	ldr	r1, [pc, #4]	; (287f8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
   287f2:	2000      	movs	r0, #0
   287f4:	7048      	strb	r0, [r1, #1]
   287f6:	4770      	bx	lr
   287f8:	20000000 	.word	0x20000000

000287fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
   287fc:	4806      	ldr	r0, [pc, #24]	; (28818 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
   287fe:	4a07      	ldr	r2, [pc, #28]	; (2881c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
   28800:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   28802:	8852      	ldrh	r2, [r2, #2]
   28804:	4291      	cmp	r1, r2
   28806:	d104      	bne.n	28812 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   28808:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
   2880c:	b108      	cbz	r0, 28812 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
   2880e:	2000      	movs	r0, #0
   28810:	4770      	bx	lr
   28812:	2001      	movs	r0, #1
   28814:	4770      	bx	lr
   28816:	0000      	.short	0x0000
   28818:	200012d8 	.word	0x200012d8
   2881c:	20000354 	.word	0x20000354

00028820 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
   28820:	4901      	ldr	r1, [pc, #4]	; (28828 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
   28822:	8048      	strh	r0, [r1, #2]
   28824:	4770      	bx	lr
   28826:	0000      	.short	0x0000
   28828:	20000354 	.word	0x20000354

0002882c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
   2882c:	4808      	ldr	r0, [pc, #32]	; (28850 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
   2882e:	4a09      	ldr	r2, [pc, #36]	; (28854 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
   28830:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   28832:	8852      	ldrh	r2, [r2, #2]
   28834:	4291      	cmp	r1, r2
   28836:	d109      	bne.n	2884c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   28838:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2883c:	8481      	strh	r1, [r0, #36]	; 0x24
   2883e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   28842:	b119      	cbz	r1, 2884c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
   28844:	2100      	movs	r1, #0
   28846:	7001      	strb	r1, [r0, #0]
   28848:	2001      	movs	r0, #1
   2884a:	4770      	bx	lr
   2884c:	2000      	movs	r0, #0
   2884e:	4770      	bx	lr
   28850:	200012d8 	.word	0x200012d8
   28854:	20000354 	.word	0x20000354

00028858 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
   28858:	4807      	ldr	r0, [pc, #28]	; (28878 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   2885a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
   2885e:	2901      	cmp	r1, #1
   28860:	d007      	beq.n	28872 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
   28862:	2101      	movs	r1, #1
   28864:	7001      	strb	r1, [r0, #0]
   28866:	4805      	ldr	r0, [pc, #20]	; (2887c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
   28868:	4903      	ldr	r1, [pc, #12]	; (28878 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
   2886a:	8800      	ldrh	r0, [r0, #0]
   2886c:	8488      	strh	r0, [r1, #36]	; 0x24
   2886e:	2001      	movs	r0, #1
   28870:	4770      	bx	lr
   28872:	2000      	movs	r0, #0
   28874:	4770      	bx	lr
   28876:	0000      	.short	0x0000
   28878:	200012d8 	.word	0x200012d8
   2887c:	20000354 	.word	0x20000354

00028880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
   28880:	4906      	ldr	r1, [pc, #24]	; (2889c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
   28882:	4b07      	ldr	r3, [pc, #28]	; (288a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
   28884:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   28886:	885b      	ldrh	r3, [r3, #2]
   28888:	429a      	cmp	r2, r3
   2888a:	d105      	bne.n	28898 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   2888c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   28890:	b112      	cbz	r2, 28898 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
   28892:	6001      	str	r1, [r0, #0]
   28894:	2001      	movs	r0, #1
   28896:	4770      	bx	lr
   28898:	2000      	movs	r0, #0
   2889a:	4770      	bx	lr
   2889c:	200012d8 	.word	0x200012d8
   288a0:	20000354 	.word	0x20000354

000288a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
   288a4:	4909      	ldr	r1, [pc, #36]	; (288cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   288a6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   288a8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
   288ac:	3bff      	subs	r3, #255	; 0xff
   288ae:	d002      	beq.n	288b6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
   288b0:	2100      	movs	r1, #0
   288b2:	6001      	str	r1, [r0, #0]
   288b4:	e007      	b.n	288c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   288b6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
   288ba:	4904      	ldr	r1, [pc, #16]	; (288cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
   288bc:	2a01      	cmp	r2, #1
   288be:	d002      	beq.n	288c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
   288c0:	6001      	str	r1, [r0, #0]
   288c2:	2001      	movs	r0, #1
   288c4:	4770      	bx	lr
   288c6:	2000      	movs	r0, #0
   288c8:	4770      	bx	lr
   288ca:	0000      	.short	0x0000
   288cc:	200012d8 	.word	0x200012d8

000288d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
   288d0:	4901      	ldr	r1, [pc, #4]	; (288d8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
   288d2:	8008      	strh	r0, [r1, #0]
   288d4:	4770      	bx	lr
   288d6:	0000      	.short	0x0000
   288d8:	20000354 	.word	0x20000354

000288dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
   288dc:	4905      	ldr	r1, [pc, #20]	; (288f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
   288de:	2000      	movs	r0, #0
   288e0:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   288e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   288e8:	8488      	strh	r0, [r1, #36]	; 0x24
   288ea:	4903      	ldr	r1, [pc, #12]	; (288f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
   288ec:	8008      	strh	r0, [r1, #0]
   288ee:	8048      	strh	r0, [r1, #2]
   288f0:	4770      	bx	lr
   288f2:	0000      	.short	0x0000
   288f4:	200012d8 	.word	0x200012d8
   288f8:	20000354 	.word	0x20000354
   288fc:	4905      	ldr	r1, [pc, #20]	; (28914 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
   288fe:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   28900:	4282      	cmp	r2, r0
   28902:	d105      	bne.n	28910 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
   28904:	2000      	movs	r0, #0
   28906:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
   2890a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2890e:	8488      	strh	r0, [r1, #36]	; 0x24
   28910:	4770      	bx	lr
   28912:	0000      	.short	0x0000
   28914:	200012d8 	.word	0x200012d8

00028918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
   28918:	4a0a      	ldr	r2, [pc, #40]	; (28944 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
   2891a:	b110      	cbz	r0, 28922 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
   2891c:	2801      	cmp	r0, #1
   2891e:	d007      	beq.n	28930 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
   28920:	e00e      	b.n	28940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   28922:	7850      	ldrb	r0, [r2, #1]
   28924:	b160      	cbz	r0, 28940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   28926:	f8d2 0002 	ldr.w	r0, [r2, #2]
   2892a:	6008      	str	r0, [r1, #0]
   2892c:	88d0      	ldrh	r0, [r2, #6]
   2892e:	e004      	b.n	2893a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
   28930:	7810      	ldrb	r0, [r2, #0]
   28932:	b128      	cbz	r0, 28940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
   28934:	6890      	ldr	r0, [r2, #8]
   28936:	6008      	str	r0, [r1, #0]
   28938:	8990      	ldrh	r0, [r2, #12]
   2893a:	8088      	strh	r0, [r1, #4]
   2893c:	2001      	movs	r0, #1
   2893e:	4770      	bx	lr
   28940:	2000      	movs	r0, #0
   28942:	4770      	bx	lr
   28944:	20000362 	.word	0x20000362

00028948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
   28948:	4a08      	ldr	r2, [pc, #32]	; (2896c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
   2894a:	2301      	movs	r3, #1
   2894c:	b138      	cbz	r0, 2895e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
   2894e:	2801      	cmp	r0, #1
   28950:	d104      	bne.n	2895c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
   28952:	7013      	strb	r3, [r2, #0]
   28954:	6808      	ldr	r0, [r1, #0]
   28956:	6090      	str	r0, [r2, #8]
   28958:	8888      	ldrh	r0, [r1, #4]
   2895a:	8190      	strh	r0, [r2, #12]
   2895c:	4770      	bx	lr
   2895e:	7053      	strb	r3, [r2, #1]
   28960:	6808      	ldr	r0, [r1, #0]
   28962:	f8c2 0002 	str.w	r0, [r2, #2]
   28966:	8888      	ldrh	r0, [r1, #4]
   28968:	80d0      	strh	r0, [r2, #6]
   2896a:	4770      	bx	lr
   2896c:	20000362 	.word	0x20000362

00028970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
   28970:	4906      	ldr	r1, [pc, #24]	; (2898c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
   28972:	b110      	cbz	r0, 2897a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
   28974:	2801      	cmp	r0, #1
   28976:	d002      	beq.n	2897e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
   28978:	e005      	b.n	28986 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   2897a:	7848      	ldrb	r0, [r1, #1]
   2897c:	e000      	b.n	28980 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
   2897e:	7808      	ldrb	r0, [r1, #0]
   28980:	b108      	cbz	r0, 28986 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
   28982:	2001      	movs	r0, #1
   28984:	4770      	bx	lr
   28986:	2000      	movs	r0, #0
   28988:	4770      	bx	lr
   2898a:	0000      	.short	0x0000
   2898c:	20000362 	.word	0x20000362

00028990 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
   28990:	4901      	ldr	r1, [pc, #4]	; (28998 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
   28992:	7708      	strb	r0, [r1, #28]
   28994:	4770      	bx	lr
   28996:	0000      	.short	0x0000
   28998:	20000b9a 	.word	0x20000b9a

0002899c <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
   2899c:	4801      	ldr	r0, [pc, #4]	; (289a4 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
   2899e:	7880      	ldrb	r0, [r0, #2]
   289a0:	4770      	bx	lr
   289a2:	0000      	.short	0x0000
   289a4:	20000084 	.word	0x20000084

000289a8 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
   289a8:	4801      	ldr	r0, [pc, #4]	; (289b0 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
   289aa:	78c0      	ldrb	r0, [r0, #3]
   289ac:	4770      	bx	lr
   289ae:	0000      	.short	0x0000
   289b0:	20000084 	.word	0x20000084

000289b4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
   289b4:	b570      	push	{r4, r5, r6, lr}
   289b6:	460c      	mov	r4, r1
   289b8:	4605      	mov	r5, r0
   289ba:	f000 f91f 	bl	28bfc <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   289be:	b118      	cbz	r0, 289c8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
   289c0:	21d0      	movs	r1, #208	; 0xd0
   289c2:	2027      	movs	r0, #39	; 0x27
   289c4:	f7ff f844 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   289c8:	4803      	ldr	r0, [pc, #12]	; (289d8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
   289ca:	2101      	movs	r1, #1
   289cc:	f00c f9e5 	bl	34d9a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   289d0:	4802      	ldr	r0, [pc, #8]	; (289dc <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
   289d2:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
   289d6:	bd70      	pop	{r4, r5, r6, pc}
   289d8:	20000b78 	.word	0x20000b78
   289dc:	20000084 	.word	0x20000084

000289e0 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
   289e0:	4901      	ldr	r1, [pc, #4]	; (289e8 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
   289e2:	2001      	movs	r0, #1
   289e4:	7148      	strb	r0, [r1, #5]
   289e6:	4770      	bx	lr
   289e8:	20000084 	.word	0x20000084

000289ec <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
   289ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289f0:	4d5b      	ldr	r5, [pc, #364]	; (28b60 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
   289f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   289f4:	782e      	ldrb	r6, [r5, #0]
   289f6:	2e00      	cmp	r6, #0
   289f8:	d16b      	bne.n	28ad2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
   289fa:	2a00      	cmp	r2, #0
   289fc:	d069      	beq.n	28ad2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
   289fe:	2b00      	cmp	r3, #0
   28a00:	d067      	beq.n	28ad2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
   28a02:	2c00      	cmp	r4, #0
   28a04:	d065      	beq.n	28ad2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
   28a06:	f105 0614 	add.w	r6, r5, #20
   28a0a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
   28a0e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
   28a12:	2700      	movs	r7, #0
   28a14:	716f      	strb	r7, [r5, #5]
   28a16:	712f      	strb	r7, [r5, #4]
   28a18:	70af      	strb	r7, [r5, #2]
   28a1a:	706f      	strb	r7, [r5, #1]
   28a1c:	70ef      	strb	r7, [r5, #3]
   28a1e:	81af      	strh	r7, [r5, #12]
   28a20:	81ef      	strh	r7, [r5, #14]
   28a22:	f000 f92f 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   28a26:	4606      	mov	r6, r0
   28a28:	f000 f926 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   28a2c:	4604      	mov	r4, r0
   28a2e:	f006 f8c3 	bl	2ebb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   28a32:	f005 fe1b 	bl	2e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   28a36:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
   28a3a:	f006 f941 	bl	2ecc0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   28a3e:	69e0      	ldr	r0, [r4, #28]
   28a40:	f006 fa24 	bl	2ee8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   28a44:	6960      	ldr	r0, [r4, #20]
   28a46:	f006 fa17 	bl	2ee78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   28a4a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   28a4e:	f006 fa4d 	bl	2eeec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   28a52:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   28a56:	6840      	ldr	r0, [r0, #4]
   28a58:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
   28a5c:	b108      	cbz	r0, 28a62 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
   28a5e:	f006 f825 	bl	2eaac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
   28a62:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   28a66:	2001      	movs	r0, #1
   28a68:	f005 ff64 	bl	2e934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   28a6c:	2800      	cmp	r0, #0
   28a6e:	d070      	beq.n	28b52 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
   28a70:	483c      	ldr	r0, [pc, #240]	; (28b64 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
   28a72:	f005 ffcb 	bl	2ea0c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   28a76:	8820      	ldrh	r0, [r4, #0]
   28a78:	f7ff fcc2 	bl	28400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   28a7c:	6368      	str	r0, [r5, #52]	; 0x34
   28a7e:	8820      	ldrh	r0, [r4, #0]
   28a80:	f7ff fca8 	bl	283d4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   28a84:	f106 0288 	add.w	r2, r6, #136	; 0x88
   28a88:	63a8      	str	r0, [r5, #56]	; 0x38
   28a8a:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
   28a8e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 28b68 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
   28a92:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
   28a96:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
   28a9a:	f8c9 2019 	str.w	r2, [r9, #25]
   28a9e:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
   28aa2:	f8c9 101d 	str.w	r1, [r9, #29]
   28aa6:	f000 f925 	bl	28cf4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
   28aaa:	4601      	mov	r1, r0
   28aac:	8f20      	ldrh	r0, [r4, #56]	; 0x38
   28aae:	f00b fec9 	bl	34844 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   28ab2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   28ab4:	4281      	cmp	r1, r0
   28ab6:	d200      	bcs.n	28aba <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
   28ab8:	4608      	mov	r0, r1
   28aba:	71a8      	strb	r0, [r5, #6]
   28abc:	46a8      	mov	r8, r5
   28abe:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   28ac2:	46ba      	mov	sl, r7
   28ac4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
   28ac6:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
   28aca:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
   28acc:	2908      	cmp	r1, #8
   28ace:	d104      	bne.n	28ada <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
   28ad0:	e002      	b.n	28ad8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
   28ad2:	f240 1145 	movw	r1, #325	; 0x145
   28ad6:	e040      	b.n	28b5a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
   28ad8:	2104      	movs	r1, #4
   28ada:	f00b feb3 	bl	34844 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   28ade:	b90f      	cbnz	r7, 28ae4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
   28ae0:	1d00      	adds	r0, r0, #4
   28ae2:	b280      	uxth	r0, r0
   28ae4:	4285      	cmp	r5, r0
   28ae6:	d200      	bcs.n	28aea <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
   28ae8:	4628      	mov	r0, r5
   28aea:	b2c5      	uxtb	r5, r0
   28aec:	f888 5007 	strb.w	r5, [r8, #7]
   28af0:	f888 5008 	strb.w	r5, [r8, #8]
   28af4:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
   28af8:	46d0      	mov	r8, sl
   28afa:	b190      	cbz	r0, 28b22 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
   28afc:	2701      	movs	r7, #1
   28afe:	f889 7018 	strb.w	r7, [r9, #24]
   28b02:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
   28b06:	e9c9 1204 	strd	r1, r2, [r9, #16]
   28b0a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   28b0e:	f00b fdbd 	bl	3468c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
   28b12:	4603      	mov	r3, r0
   28b14:	462a      	mov	r2, r5
   28b16:	4914      	ldr	r1, [pc, #80]	; (28b68 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
   28b18:	4638      	mov	r0, r7
   28b1a:	f8cd 8000 	str.w	r8, [sp]
   28b1e:	f005 fd11 	bl	2e544 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   28b22:	2001      	movs	r0, #1
   28b24:	f000 fb46 	bl	291b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
   28b28:	4810      	ldr	r0, [pc, #64]	; (28b6c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
   28b2a:	6800      	ldr	r0, [r0, #0]
   28b2c:	2803      	cmp	r0, #3
   28b2e:	d012      	beq.n	28b56 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
   28b30:	280b      	cmp	r0, #11
   28b32:	d010      	beq.n	28b56 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
   28b34:	480c      	ldr	r0, [pc, #48]	; (28b68 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
   28b36:	220e      	movs	r2, #14
   28b38:	2100      	movs	r1, #0
   28b3a:	304a      	adds	r0, #74	; 0x4a
   28b3c:	f00e fdb9 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   28b40:	4809      	ldr	r0, [pc, #36]	; (28b68 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
   28b42:	8ab1      	ldrh	r1, [r6, #20]
   28b44:	304a      	adds	r0, #74	; 0x4a
   28b46:	8041      	strh	r1, [r0, #2]
   28b48:	8821      	ldrh	r1, [r4, #0]
   28b4a:	8001      	strh	r1, [r0, #0]
   28b4c:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
   28b50:	7101      	strb	r1, [r0, #4]
   28b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b56:	f240 2102 	movw	r1, #514	; 0x202
   28b5a:	2027      	movs	r0, #39	; 0x27
   28b5c:	f7fe ff78 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28b60:	20000084 	.word	0x20000084
   28b64:	000293b8 	.word	0x000293b8
   28b68:	20000b50 	.word	0x20000b50
   28b6c:	40001550 	.word	0x40001550

00028b70 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
   28b70:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   28b74:	4688      	mov	r8, r1
   28b76:	4607      	mov	r7, r0
   28b78:	f000 f884 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   28b7c:	4c1a      	ldr	r4, [pc, #104]	; (28be8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
   28b7e:	4605      	mov	r5, r0
   28b80:	07b8      	lsls	r0, r7, #30
   28b82:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28b84:	784e      	ldrb	r6, [r1, #1]
   28b86:	d516      	bpl.n	28bb6 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
   28b88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28b8a:	b330      	cbz	r0, 28bda <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
   28b8c:	8962      	ldrh	r2, [r4, #10]
   28b8e:	1cd2      	adds	r2, r2, #3
   28b90:	f00e fd15 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   28b94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   28b96:	6260      	str	r0, [r4, #36]	; 0x24
   28b98:	4669      	mov	r1, sp
   28b9a:	aa01      	add	r2, sp, #4
   28b9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   28b9e:	f00b f9bf 	bl	33f20 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
   28ba2:	9800      	ldr	r0, [sp, #0]
   28ba4:	f00b f972 	bl	33e8c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   28ba8:	f8c8 0000 	str.w	r0, [r8]
   28bac:	4631      	mov	r1, r6
   28bae:	2201      	movs	r2, #1
   28bb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   28bb2:	f00b f922 	bl	33dfa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
   28bb6:	07f8      	lsls	r0, r7, #31
   28bb8:	d00d      	beq.n	28bd6 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
   28bba:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
   28bbe:	3518      	adds	r5, #24
   28bc0:	1c40      	adds	r0, r0, #1
   28bc2:	f141 0100 	adc.w	r1, r1, #0
   28bc6:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
   28bca:	f815 0918 	ldrb.w	r0, [r5], #-24
   28bce:	2801      	cmp	r0, #1
   28bd0:	d008      	beq.n	28be4 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
   28bd2:	2001      	movs	r0, #1
   28bd4:	7628      	strb	r0, [r5, #24]
   28bd6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   28bda:	f240 415c 	movw	r1, #1116	; 0x45c
   28bde:	2027      	movs	r0, #39	; 0x27
   28be0:	f7fe ff36 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28be4:	2000      	movs	r0, #0
   28be6:	e7f5      	b.n	28bd4 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
   28be8:	20000084 	.word	0x20000084

00028bec <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
   28bec:	4802      	ldr	r0, [pc, #8]	; (28bf8 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
   28bee:	89c0      	ldrh	r0, [r0, #14]
   28bf0:	f3c0 2080 	ubfx	r0, r0, #10, #1
   28bf4:	4770      	bx	lr
   28bf6:	0000      	.short	0x0000
   28bf8:	20000084 	.word	0x20000084

00028bfc <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
   28bfc:	4804      	ldr	r0, [pc, #16]	; (28c10 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
   28bfe:	7800      	ldrb	r0, [r0, #0]
   28c00:	b108      	cbz	r0, 28c06 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
   28c02:	200c      	movs	r0, #12
   28c04:	4770      	bx	lr
   28c06:	4903      	ldr	r1, [pc, #12]	; (28c14 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
   28c08:	2000      	movs	r0, #0
   28c0a:	7708      	strb	r0, [r1, #28]
   28c0c:	4770      	bx	lr
   28c0e:	0000      	.short	0x0000
   28c10:	20000084 	.word	0x20000084
   28c14:	20000b9a 	.word	0x20000b9a

00028c18 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
   28c18:	480c      	ldr	r0, [pc, #48]	; (28c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
   28c1a:	b510      	push	{r4, lr}
   28c1c:	7801      	ldrb	r1, [r0, #0]
   28c1e:	b149      	cbz	r1, 28c34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
   28c20:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   28c24:	7800      	ldrb	r0, [r0, #0]
   28c26:	2802      	cmp	r0, #2
   28c28:	d008      	beq.n	28c3c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
   28c2a:	f240 211e 	movw	r1, #542	; 0x21e
   28c2e:	2027      	movs	r0, #39	; 0x27
   28c30:	f7fe ff0e 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28c38:	f000 b9ca 	b.w	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   28c3c:	6848      	ldr	r0, [r1, #4]
   28c3e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
   28c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28c46:	f005 bee9 	b.w	2ea1c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
   28c4a:	0000      	.short	0x0000
   28c4c:	20000084 	.word	0x20000084
   28c50:	4608      	mov	r0, r1
   28c52:	2100      	movs	r1, #0
   28c54:	7041      	strb	r1, [r0, #1]
   28c56:	211d      	movs	r1, #29
   28c58:	f800 1b04 	strb.w	r1, [r0], #4
   28c5c:	220e      	movs	r2, #14
   28c5e:	4901      	ldr	r1, [pc, #4]	; (28c64 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
   28c60:	f00e bcad 	b.w	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   28c64:	20000ba8 	.word	0x20000ba8
   28c68:	4a02      	ldr	r2, [pc, #8]	; (28c74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
   28c6a:	8993      	ldrh	r3, [r2, #12]
   28c6c:	4303      	orrs	r3, r0
   28c6e:	8193      	strh	r3, [r2, #12]
   28c70:	6952      	ldr	r2, [r2, #20]
   28c72:	4710      	bx	r2
   28c74:	20000084 	.word	0x20000084
   28c78:	4801      	ldr	r0, [pc, #4]	; (28c80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
   28c7a:	6840      	ldr	r0, [r0, #4]
   28c7c:	4770      	bx	lr
   28c7e:	0000      	.short	0x0000
   28c80:	200000c0 	.word	0x200000c0
   28c84:	4801      	ldr	r0, [pc, #4]	; (28c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
   28c86:	6840      	ldr	r0, [r0, #4]
   28c88:	3080      	adds	r0, #128	; 0x80
   28c8a:	4770      	bx	lr
   28c8c:	200000c0 	.word	0x200000c0
   28c90:	4a01      	ldr	r2, [pc, #4]	; (28c98 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
   28c92:	2100      	movs	r1, #0
   28c94:	6952      	ldr	r2, [r2, #20]
   28c96:	4710      	bx	r2
   28c98:	20000084 	.word	0x20000084
   28c9c:	b570      	push	{r4, r5, r6, lr}
   28c9e:	4605      	mov	r5, r0
   28ca0:	2901      	cmp	r1, #1
   28ca2:	d818      	bhi.n	28cd6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
   28ca4:	4c12      	ldr	r4, [pc, #72]	; (28cf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
   28ca6:	69a1      	ldr	r1, [r4, #24]
   28ca8:	4788      	blx	r1
   28caa:	b1a0      	cbz	r0, 28cd6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
   28cac:	7920      	ldrb	r0, [r4, #4]
   28cae:	b990      	cbnz	r0, 28cd6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
   28cb0:	b9e5      	cbnz	r5, 28cec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
   28cb2:	f104 0010 	add.w	r0, r4, #16
   28cb6:	7801      	ldrb	r1, [r0, #0]
   28cb8:	06c8      	lsls	r0, r1, #27
   28cba:	d405      	bmi.n	28cc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
   28cbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28cbe:	7800      	ldrb	r0, [r0, #0]
   28cc0:	06c0      	lsls	r0, r0, #27
   28cc2:	d401      	bmi.n	28cc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
   28cc4:	2001      	movs	r0, #1
   28cc6:	e000      	b.n	28cca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
   28cc8:	2000      	movs	r0, #0
   28cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   28ccc:	b92a      	cbnz	r2, 28cda <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
   28cce:	8962      	ldrh	r2, [r4, #10]
   28cd0:	b11a      	cbz	r2, 28cda <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
   28cd2:	06c9      	lsls	r1, r1, #27
   28cd4:	d401      	bmi.n	28cda <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
   28cd6:	2001      	movs	r0, #1
   28cd8:	bd70      	pop	{r4, r5, r6, pc}
   28cda:	89a1      	ldrh	r1, [r4, #12]
   28cdc:	078a      	lsls	r2, r1, #30
   28cde:	d503      	bpl.n	28ce8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
   28ce0:	6a22      	ldr	r2, [r4, #32]
   28ce2:	78d2      	ldrb	r2, [r2, #3]
   28ce4:	2a02      	cmp	r2, #2
   28ce6:	d001      	beq.n	28cec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
   28ce8:	4308      	orrs	r0, r1
   28cea:	d1f4      	bne.n	28cd6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
   28cec:	2000      	movs	r0, #0
   28cee:	bd70      	pop	{r4, r5, r6, pc}
   28cf0:	20000084 	.word	0x20000084
   28cf4:	b510      	push	{r4, lr}
   28cf6:	f7ff ffbf 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   28cfa:	4604      	mov	r4, r0
   28cfc:	f7ff ffc2 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   28d00:	4602      	mov	r2, r0
   28d02:	7f41      	ldrb	r1, [r0, #29]
   28d04:	4816      	ldr	r0, [pc, #88]	; (28d60 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
   28d06:	2925      	cmp	r1, #37	; 0x25
   28d08:	d010      	beq.n	28d2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
   28d0a:	2926      	cmp	r1, #38	; 0x26
   28d0c:	d00e      	beq.n	28d2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
   28d0e:	7f92      	ldrb	r2, [r2, #30]
   28d10:	2a25      	cmp	r2, #37	; 0x25
   28d12:	d00b      	beq.n	28d2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
   28d14:	2920      	cmp	r1, #32
   28d16:	d00d      	beq.n	28d34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
   28d18:	2921      	cmp	r1, #33	; 0x21
   28d1a:	d00b      	beq.n	28d34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
   28d1c:	2a23      	cmp	r2, #35	; 0x23
   28d1e:	d00f      	beq.n	28d40 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
   28d20:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   28d24:	2804      	cmp	r0, #4
   28d26:	d100      	bne.n	28d2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
   28d28:	2008      	movs	r0, #8
   28d2a:	bd10      	pop	{r4, pc}
   28d2c:	6840      	ldr	r0, [r0, #4]
   28d2e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
   28d32:	e00e      	b.n	28d52 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
   28d34:	2a23      	cmp	r2, #35	; 0x23
   28d36:	d003      	beq.n	28d40 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
   28d38:	6840      	ldr	r0, [r0, #4]
   28d3a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
   28d3e:	e005      	b.n	28d4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
   28d40:	6841      	ldr	r1, [r0, #4]
   28d42:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
   28d46:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   28d4a:	4008      	ands	r0, r1
   28d4c:	f00b fc94 	bl	34678 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
   28d50:	4601      	mov	r1, r0
   28d52:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   28d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28d5a:	f00b bca5 	b.w	346a8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
   28d5e:	0000      	.short	0x0000
   28d60:	200000c0 	.word	0x200000c0
   28d64:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   28d68:	468b      	mov	fp, r1
   28d6a:	4681      	mov	r9, r0
   28d6c:	f7ff ff8a 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   28d70:	2600      	movs	r6, #0
   28d72:	4c66      	ldr	r4, [pc, #408]	; (28f0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
   28d74:	4607      	mov	r7, r0
   28d76:	f88d 6008 	strb.w	r6, [sp, #8]
   28d7a:	9603      	str	r6, [sp, #12]
   28d7c:	9601      	str	r6, [sp, #4]
   28d7e:	7820      	ldrb	r0, [r4, #0]
   28d80:	4635      	mov	r5, r6
   28d82:	2802      	cmp	r0, #2
   28d84:	d004      	beq.n	28d90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
   28d86:	f240 41df 	movw	r1, #1247	; 0x4df
   28d8a:	2027      	movs	r0, #39	; 0x27
   28d8c:	f7fe fe60 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28d90:	7ba0      	ldrb	r0, [r4, #14]
   28d92:	0640      	lsls	r0, r0, #25
   28d94:	d406      	bmi.n	28da4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
   28d96:	2040      	movs	r0, #64	; 0x40
   28d98:	f7ff ff7a 	bl	28c90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
   28d9c:	89e0      	ldrh	r0, [r4, #14]
   28d9e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   28da2:	81e0      	strh	r0, [r4, #14]
   28da4:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
   28da8:	f1b9 0f00 	cmp.w	r9, #0
   28dac:	d03a      	beq.n	28e24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x20c>
   28dae:	b180      	cbz	r0, 28dd2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
   28db0:	f005 fc96 	bl	2e6e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
   28db4:	f005 fc70 	bl	2e698 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
   28db8:	b958      	cbnz	r0, 28dd2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
   28dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28dbc:	7841      	ldrb	r1, [r0, #1]
   28dbe:	b141      	cbz	r1, 28dd2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
   28dc0:	7800      	ldrb	r0, [r0, #0]
   28dc2:	7e39      	ldrb	r1, [r7, #24]
   28dc4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28dc8:	4288      	cmp	r0, r1
   28dca:	d102      	bne.n	28dd2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
   28dcc:	2001      	movs	r0, #1
   28dce:	7060      	strb	r0, [r4, #1]
   28dd0:	e097      	b.n	28f02 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ea>
   28dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28dd4:	7841      	ldrb	r1, [r0, #1]
   28dd6:	8161      	strh	r1, [r4, #10]
   28dd8:	b121      	cbz	r1, 28de4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
   28dda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   28ddc:	f00b f976 	bl	340cc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
   28de0:	62a0      	str	r0, [r4, #40]	; 0x28
   28de2:	e000      	b.n	28de6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
   28de4:	62a5      	str	r5, [r4, #40]	; 0x28
   28de6:	89e0      	ldrh	r0, [r4, #14]
   28de8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   28dec:	81e0      	strh	r0, [r4, #14]
   28dee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28df0:	7df9      	ldrb	r1, [r7, #23]
   28df2:	7800      	ldrb	r0, [r0, #0]
   28df4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   28df8:	4288      	cmp	r0, r1
   28dfa:	d007      	beq.n	28e0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
   28dfc:	a803      	add	r0, sp, #12
   28dfe:	f000 f98b 	bl	29118 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x500>
   28e02:	89e0      	ldrh	r0, [r4, #14]
   28e04:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28e08:	81e0      	strh	r0, [r4, #14]
   28e0a:	e000      	b.n	28e0e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
   28e0c:	2601      	movs	r6, #1
   28e0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   28e10:	7e39      	ldrb	r1, [r7, #24]
   28e12:	7800      	ldrb	r0, [r0, #0]
   28e14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28e18:	4288      	cmp	r0, r1
   28e1a:	d10d      	bne.n	28e38 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
   28e1c:	a802      	add	r0, sp, #8
   28e1e:	f000 f931 	bl	29084 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x46c>
   28e22:	e009      	b.n	28e38 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
   28e24:	b108      	cbz	r0, 28e2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x212>
   28e26:	f005 fc55 	bl	2e6d4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
   28e2a:	78a0      	ldrb	r0, [r4, #2]
   28e2c:	1c40      	adds	r0, r0, #1
   28e2e:	70a0      	strb	r0, [r4, #2]
   28e30:	89e0      	ldrh	r0, [r4, #14]
   28e32:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   28e36:	81e0      	strh	r0, [r4, #14]
   28e38:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 28f0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>
   28e3c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
   28e40:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
   28e44:	b190      	cbz	r0, 28e6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x254>
   28e46:	f7ff ff17 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   28e4a:	4931      	ldr	r1, [pc, #196]	; (28f10 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
   28e4c:	760d      	strb	r5, [r1, #24]
   28e4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   28e52:	e9c1 2304 	strd	r2, r3, [r1, #16]
   28e56:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   28e5a:	f00b fc17 	bl	3468c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
   28e5e:	4603      	mov	r3, r0
   28e60:	22fb      	movs	r2, #251	; 0xfb
   28e62:	492b      	ldr	r1, [pc, #172]	; (28f10 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
   28e64:	4628      	mov	r0, r5
   28e66:	9500      	str	r5, [sp, #0]
   28e68:	f005 fb6c 	bl	2e544 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   28e6c:	f04f 0800 	mov.w	r8, #0
   28e70:	f1bb 0f00 	cmp.w	fp, #0
   28e74:	d104      	bne.n	28e80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x268>
   28e76:	78a1      	ldrb	r1, [r4, #2]
   28e78:	2001      	movs	r0, #1
   28e7a:	f7ff ff0f 	bl	28c9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
   28e7e:	b120      	cbz	r0, 28e8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x272>
   28e80:	f005 ffe6 	bl	2ee50 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
   28e84:	f04f 0801 	mov.w	r8, #1
   28e88:	e002      	b.n	28e90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x278>
   28e8a:	2000      	movs	r0, #0
   28e8c:	f000 f9d0 	bl	29230 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x618>
   28e90:	f89d 0008 	ldrb.w	r0, [sp, #8]
   28e94:	b118      	cbz	r0, 28e9e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x286>
   28e96:	a901      	add	r1, sp, #4
   28e98:	2002      	movs	r0, #2
   28e9a:	f7ff fe69 	bl	28b70 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
   28e9e:	481c      	ldr	r0, [pc, #112]	; (28f10 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
   28ea0:	8aba      	ldrh	r2, [r7, #20]
   28ea2:	304a      	adds	r0, #74	; 0x4a
   28ea4:	b13e      	cbz	r6, 28eb6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
   28ea6:	b91a      	cbnz	r2, 28eb0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
   28ea8:	88c2      	ldrh	r2, [r0, #6]
   28eaa:	b90a      	cbnz	r2, 28eb0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
   28eac:	8902      	ldrh	r2, [r0, #8]
   28eae:	b112      	cbz	r2, 28eb6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
   28eb0:	8942      	ldrh	r2, [r0, #10]
   28eb2:	1c52      	adds	r2, r2, #1
   28eb4:	8142      	strh	r2, [r0, #10]
   28eb6:	f1b9 0f00 	cmp.w	r9, #0
   28eba:	d004      	beq.n	28ec6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ae>
   28ebc:	88c1      	ldrh	r1, [r0, #6]
   28ebe:	1c49      	adds	r1, r1, #1
   28ec0:	80c1      	strh	r1, [r0, #6]
   28ec2:	70a5      	strb	r5, [r4, #2]
   28ec4:	e002      	b.n	28ecc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b4>
   28ec6:	8901      	ldrh	r1, [r0, #8]
   28ec8:	1c49      	adds	r1, r1, #1
   28eca:	8101      	strh	r1, [r0, #8]
   28ecc:	480f      	ldr	r0, [pc, #60]	; (28f0c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
   28ece:	303c      	adds	r0, #60	; 0x3c
   28ed0:	f001 f8e4 	bl	2a09c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
   28ed4:	9803      	ldr	r0, [sp, #12]
   28ed6:	b140      	cbz	r0, 28eea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d2>
   28ed8:	f00a ffd8 	bl	33e8c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
   28edc:	f8da 1004 	ldr.w	r1, [sl, #4]
   28ee0:	1c40      	adds	r0, r0, #1
   28ee2:	7205      	strb	r5, [r0, #8]
   28ee4:	2208      	movs	r2, #8
   28ee6:	f00b ffdf 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   28eea:	9801      	ldr	r0, [sp, #4]
   28eec:	b130      	cbz	r0, 28efc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2e4>
   28eee:	f8da 1004 	ldr.w	r1, [sl, #4]
   28ef2:	7205      	strb	r5, [r0, #8]
   28ef4:	2210      	movs	r2, #16
   28ef6:	9801      	ldr	r0, [sp, #4]
   28ef8:	f00b ffd6 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   28efc:	f1b8 0f00 	cmp.w	r8, #0
   28f00:	d001      	beq.n	28f06 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ee>
   28f02:	f000 f865 	bl	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   28f06:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   28f0a:	0000      	.short	0x0000
   28f0c:	20000084 	.word	0x20000084
   28f10:	20000b50 	.word	0x20000b50
   28f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28f18:	4688      	mov	r8, r1
   28f1a:	4681      	mov	r9, r0
   28f1c:	f7ff feb2 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   28f20:	4d29      	ldr	r5, [pc, #164]	; (28fc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b0>)
   28f22:	4604      	mov	r4, r0
   28f24:	7828      	ldrb	r0, [r5, #0]
   28f26:	2801      	cmp	r0, #1
   28f28:	d004      	beq.n	28f34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x31c>
   28f2a:	f240 416b 	movw	r1, #1131	; 0x46b
   28f2e:	2027      	movs	r0, #39	; 0x27
   28f30:	f7fe fd8e 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   28f34:	7c20      	ldrb	r0, [r4, #16]
   28f36:	2700      	movs	r7, #0
   28f38:	2601      	movs	r6, #1
   28f3a:	b128      	cbz	r0, 28f48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
   28f3c:	7427      	strb	r7, [r4, #16]
   28f3e:	2100      	movs	r1, #0
   28f40:	2004      	movs	r0, #4
   28f42:	f7ff fe91 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   28f46:	74a6      	strb	r6, [r4, #18]
   28f48:	6a29      	ldr	r1, [r5, #32]
   28f4a:	7808      	ldrb	r0, [r1, #0]
   28f4c:	43c0      	mvns	r0, r0
   28f4e:	0780      	lsls	r0, r0, #30
   28f50:	d109      	bne.n	28f66 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34e>
   28f52:	7da0      	ldrb	r0, [r4, #22]
   28f54:	bb88      	cbnz	r0, 28fba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
   28f56:	2002      	movs	r0, #2
   28f58:	f7ff fe86 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   28f5c:	6a28      	ldr	r0, [r5, #32]
   28f5e:	7800      	ldrb	r0, [r0, #0]
   28f60:	43c0      	mvns	r0, r0
   28f62:	0780      	lsls	r0, r0, #30
   28f64:	d029      	beq.n	28fba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
   28f66:	6a28      	ldr	r0, [r5, #32]
   28f68:	7840      	ldrb	r0, [r0, #1]
   28f6a:	b110      	cbz	r0, 28f72 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35a>
   28f6c:	2002      	movs	r0, #2
   28f6e:	75a0      	strb	r0, [r4, #22]
   28f70:	e000      	b.n	28f74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35c>
   28f72:	75a6      	strb	r6, [r4, #22]
   28f74:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
   28f78:	b198      	cbz	r0, 28fa2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x38a>
   28f7a:	f7ff fe7d 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   28f7e:	4913      	ldr	r1, [pc, #76]	; (28fcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
   28f80:	7a2d      	ldrb	r5, [r5, #8]
   28f82:	760e      	strb	r6, [r1, #24]
   28f84:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
   28f88:	e9c1 2304 	strd	r2, r3, [r1, #16]
   28f8c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   28f90:	f00b fb7c 	bl	3468c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
   28f94:	4603      	mov	r3, r0
   28f96:	462a      	mov	r2, r5
   28f98:	490c      	ldr	r1, [pc, #48]	; (28fcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
   28f9a:	4630      	mov	r0, r6
   28f9c:	9700      	str	r7, [sp, #0]
   28f9e:	f005 fad1 	bl	2e544 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
   28fa2:	ea38 0009 	bics.w	r0, r8, r9
   28fa6:	d004      	beq.n	28fb2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x39a>
   28fa8:	2100      	movs	r1, #0
   28faa:	4608      	mov	r0, r1
   28fac:	f7ff fe76 	bl	28c9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
   28fb0:	b128      	cbz	r0, 28fbe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a6>
   28fb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28fb6:	f000 b80b 	b.w	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   28fba:	2003      	movs	r0, #3
   28fbc:	e7d7      	b.n	28f6e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x356>
   28fbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28fc2:	2000      	movs	r0, #0
   28fc4:	f000 b8f6 	b.w	291b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
   28fc8:	20000084 	.word	0x20000084
   28fcc:	20000b50 	.word	0x20000b50
   28fd0:	b510      	push	{r4, lr}
   28fd2:	f005 fc25 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   28fd6:	f005 fb49 	bl	2e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   28fda:	4c0d      	ldr	r4, [pc, #52]	; (29010 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3f8>)
   28fdc:	89e0      	ldrh	r0, [r4, #14]
   28fde:	f7ff fe57 	bl	28c90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
   28fe2:	480c      	ldr	r0, [pc, #48]	; (29014 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
   28fe4:	7f00      	ldrb	r0, [r0, #28]
   28fe6:	b158      	cbz	r0, 29000 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3e8>
   28fe8:	490a      	ldr	r1, [pc, #40]	; (29014 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
   28fea:	220e      	movs	r2, #14
   28fec:	f101 000e 	add.w	r0, r1, #14
   28ff0:	f00e fae5 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   28ff4:	4807      	ldr	r0, [pc, #28]	; (29014 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
   28ff6:	2202      	movs	r2, #2
   28ff8:	4907      	ldr	r1, [pc, #28]	; (29018 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x400>)
   28ffa:	301d      	adds	r0, #29
   28ffc:	f00b ff68 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   29000:	69e2      	ldr	r2, [r4, #28]
   29002:	7921      	ldrb	r1, [r4, #4]
   29004:	7860      	ldrb	r0, [r4, #1]
   29006:	4790      	blx	r2
   29008:	2000      	movs	r0, #0
   2900a:	7020      	strb	r0, [r4, #0]
   2900c:	bd10      	pop	{r4, pc}
   2900e:	0000      	.short	0x0000
   29010:	20000084 	.word	0x20000084
   29014:	20000b9a 	.word	0x20000b9a
   29018:	00028c51 	.word	0x00028c51
   2901c:	4808      	ldr	r0, [pc, #32]	; (29040 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x428>)
   2901e:	b510      	push	{r4, lr}
   29020:	7800      	ldrb	r0, [r0, #0]
   29022:	2802      	cmp	r0, #2
   29024:	d004      	beq.n	29030 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x418>
   29026:	f240 2149 	movw	r1, #585	; 0x249
   2902a:	2027      	movs	r0, #39	; 0x27
   2902c:	f7fe fd10 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29030:	4904      	ldr	r1, [pc, #16]	; (29044 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x42c>)
   29032:	2001      	movs	r0, #1
   29034:	7308      	strb	r0, [r1, #12]
   29036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2903a:	f7ff bfc9 	b.w	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   2903e:	0000      	.short	0x0000
   29040:	20000084 	.word	0x20000084
   29044:	20000b9a 	.word	0x20000b9a
   29048:	b430      	push	{r4, r5}
   2904a:	4604      	mov	r4, r0
   2904c:	480c      	ldr	r0, [pc, #48]	; (29080 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x468>)
   2904e:	7a00      	ldrb	r0, [r0, #8]
   29050:	b10b      	cbz	r3, 29056 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x43e>
   29052:	1d00      	adds	r0, r0, #4
   29054:	b2c0      	uxtb	r0, r0
   29056:	b93a      	cbnz	r2, 29068 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
   29058:	28ff      	cmp	r0, #255	; 0xff
   2905a:	d105      	bne.n	29068 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
   2905c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
   29060:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   29064:	429a      	cmp	r2, r3
   29066:	d009      	beq.n	2907c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x464>
   29068:	b121      	cbz	r1, 29074 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x45c>
   2906a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
   2906e:	bc30      	pop	{r4, r5}
   29070:	f005 bf12 	b.w	2ee98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   29074:	20ff      	movs	r0, #255	; 0xff
   29076:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   2907a:	e7f8      	b.n	2906e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x456>
   2907c:	bc30      	pop	{r4, r5}
   2907e:	4770      	bx	lr
   29080:	20000084 	.word	0x20000084
   29084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29088:	4607      	mov	r7, r0
   2908a:	f7ff fdfb 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   2908e:	4c21      	ldr	r4, [pc, #132]	; (29114 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4fc>)
   29090:	4605      	mov	r5, r0
   29092:	2601      	movs	r6, #1
   29094:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29096:	7808      	ldrb	r0, [r1, #0]
   29098:	f000 0003 	and.w	r0, r0, #3
   2909c:	2801      	cmp	r0, #1
   2909e:	d00c      	beq.n	290ba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
   290a0:	2802      	cmp	r0, #2
   290a2:	d00a      	beq.n	290ba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
   290a4:	2803      	cmp	r0, #3
   290a6:	d11b      	bne.n	290e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
   290a8:	742e      	strb	r6, [r5, #16]
   290aa:	89e0      	ldrh	r0, [r4, #14]
   290ac:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   290b0:	81e0      	strh	r0, [r4, #14]
   290b2:	2001      	movs	r0, #1
   290b4:	f7ff fdd8 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   290b8:	e012      	b.n	290e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
   290ba:	7848      	ldrb	r0, [r1, #1]
   290bc:	b180      	cbz	r0, 290e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
   290be:	89e1      	ldrh	r1, [r4, #14]
   290c0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   290c4:	81e1      	strh	r1, [r4, #14]
   290c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   290c8:	2900      	cmp	r1, #0
   290ca:	d018      	beq.n	290fe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
   290cc:	28fb      	cmp	r0, #251	; 0xfb
   290ce:	d818      	bhi.n	29102 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4ea>
   290d0:	7960      	ldrb	r0, [r4, #5]
   290d2:	b120      	cbz	r0, 290de <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c6>
   290d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   290d8:	2020      	movs	r0, #32
   290da:	f7ff bdd9 	b.w	28c90 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
   290de:	703e      	strb	r6, [r7, #0]
   290e0:	7e28      	ldrb	r0, [r5, #24]
   290e2:	2801      	cmp	r0, #1
   290e4:	d012      	beq.n	2910c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4f4>
   290e6:	762e      	strb	r6, [r5, #24]
   290e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   290ea:	7840      	ldrb	r0, [r0, #1]
   290ec:	2800      	cmp	r0, #0
   290ee:	d006      	beq.n	290fe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
   290f0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
   290f4:	1c40      	adds	r0, r0, #1
   290f6:	f141 0100 	adc.w	r1, r1, #0
   290fa:	e9c5 0100 	strd	r0, r1, [r5]
   290fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29102:	7920      	ldrb	r0, [r4, #4]
   29104:	f040 0010 	orr.w	r0, r0, #16
   29108:	7120      	strb	r0, [r4, #4]
   2910a:	e7f8      	b.n	290fe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
   2910c:	2000      	movs	r0, #0
   2910e:	7628      	strb	r0, [r5, #24]
   29110:	e7ea      	b.n	290e8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4d0>
   29112:	0000      	.short	0x0000
   29114:	20000084 	.word	0x20000084
   29118:	b570      	push	{r4, r5, r6, lr}
   2911a:	4605      	mov	r5, r0
   2911c:	f7ff fdb2 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   29120:	4604      	mov	r4, r0
   29122:	7d80      	ldrb	r0, [r0, #22]
   29124:	2800      	cmp	r0, #0
   29126:	d02d      	beq.n	29184 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56c>
   29128:	2802      	cmp	r0, #2
   2912a:	d10c      	bne.n	29146 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x52e>
   2912c:	481b      	ldr	r0, [pc, #108]	; (2919c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x584>)
   2912e:	4629      	mov	r1, r5
   29130:	6b40      	ldr	r0, [r0, #52]	; 0x34
   29132:	f00a fe3a 	bl	33daa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
   29136:	b330      	cbz	r0, 29186 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56e>
   29138:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
   2913c:	1c40      	adds	r0, r0, #1
   2913e:	f141 0100 	adc.w	r1, r1, #0
   29142:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
   29146:	2500      	movs	r5, #0
   29148:	75a5      	strb	r5, [r4, #22]
   2914a:	7ca0      	ldrb	r0, [r4, #18]
   2914c:	b120      	cbz	r0, 29158 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x540>
   2914e:	74a5      	strb	r5, [r4, #18]
   29150:	2100      	movs	r1, #0
   29152:	2010      	movs	r0, #16
   29154:	f7ff fd88 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   29158:	7c60      	ldrb	r0, [r4, #17]
   2915a:	b170      	cbz	r0, 2917a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x562>
   2915c:	7465      	strb	r5, [r4, #17]
   2915e:	f7ff fb65 	bl	2882c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   29162:	b198      	cbz	r0, 2918c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x574>
   29164:	2100      	movs	r1, #0
   29166:	2008      	movs	r0, #8
   29168:	f7ff fd7e 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   2916c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
   29170:	1c40      	adds	r0, r0, #1
   29172:	f141 0100 	adc.w	r1, r1, #0
   29176:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
   2917a:	7de0      	ldrb	r0, [r4, #23]
   2917c:	2801      	cmp	r0, #1
   2917e:	d00a      	beq.n	29196 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x57e>
   29180:	2001      	movs	r0, #1
   29182:	75e0      	strb	r0, [r4, #23]
   29184:	bd70      	pop	{r4, r5, r6, pc}
   29186:	f240 31da 	movw	r1, #986	; 0x3da
   2918a:	e001      	b.n	29190 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x578>
   2918c:	f240 31f1 	movw	r1, #1009	; 0x3f1
   29190:	2027      	movs	r0, #39	; 0x27
   29192:	f7fe fc5d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29196:	75e5      	strb	r5, [r4, #23]
   29198:	bd70      	pop	{r4, r5, r6, pc}
   2919a:	0000      	.short	0x0000
   2919c:	20000084 	.word	0x20000084
   291a0:	4803      	ldr	r0, [pc, #12]	; (291b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x598>)
   291a2:	7800      	ldrb	r0, [r0, #0]
   291a4:	2800      	cmp	r0, #0
   291a6:	d001      	beq.n	291ac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x594>
   291a8:	f7ff bf12 	b.w	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   291ac:	4770      	bx	lr
   291ae:	0000      	.short	0x0000
   291b0:	20000084 	.word	0x20000084
   291b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   291b8:	4606      	mov	r6, r0
   291ba:	f7ff fd5d 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   291be:	4680      	mov	r8, r0
   291c0:	f7ff fd60 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   291c4:	4c18      	ldr	r4, [pc, #96]	; (29228 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x610>)
   291c6:	4605      	mov	r5, r0
   291c8:	4632      	mov	r2, r6
   291ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   291cc:	6260      	str	r0, [r4, #36]	; 0x24
   291ce:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   291d2:	2101      	movs	r1, #1
   291d4:	4640      	mov	r0, r8
   291d6:	f7ff ff37 	bl	29048 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
   291da:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
   291de:	2700      	movs	r7, #0
   291e0:	b170      	cbz	r0, 29200 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5e8>
   291e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   291e4:	f005 fd8e 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   291e8:	4810      	ldr	r0, [pc, #64]	; (2922c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x614>)
   291ea:	2101      	movs	r1, #1
   291ec:	7601      	strb	r1, [r0, #24]
   291ee:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
   291f2:	e9c0 1204 	strd	r1, r2, [r0, #16]
   291f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   291f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   291fa:	f005 f9f5 	bl	2e5e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
   291fe:	e004      	b.n	2920a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5f2>
   29200:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29202:	f005 fd7f 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   29206:	f005 fa31 	bl	2e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   2920a:	b916      	cbnz	r6, 29212 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5fa>
   2920c:	4638      	mov	r0, r7
   2920e:	f005 fc29 	bl	2ea64 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   29212:	2100      	movs	r1, #0
   29214:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
   29218:	4608      	mov	r0, r1
   2921a:	f005 fdfb 	bl	2ee14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   2921e:	2002      	movs	r0, #2
   29220:	7020      	strb	r0, [r4, #0]
   29222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29226:	0000      	.short	0x0000
   29228:	20000084 	.word	0x20000084
   2922c:	20000b50 	.word	0x20000b50
   29230:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   29234:	4604      	mov	r4, r0
   29236:	f7ff fd25 	bl	28c84 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
   2923a:	4605      	mov	r5, r0
   2923c:	f7ff fd1c 	bl	28c78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
   29240:	2700      	movs	r7, #0
   29242:	f88d 7000 	strb.w	r7, [sp]
   29246:	4606      	mov	r6, r0
   29248:	f8df 9164 	ldr.w	r9, [pc, #356]	; 293b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x798>
   2924c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   29250:	4622      	mov	r2, r4
   29252:	4639      	mov	r1, r7
   29254:	f7ff fef8 	bl	29048 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
   29258:	7da8      	ldrb	r0, [r5, #22]
   2925a:	f04f 0801 	mov.w	r8, #1
   2925e:	f1a9 0420 	sub.w	r4, r9, #32
   29262:	b140      	cbz	r0, 29276 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x65e>
   29264:	2801      	cmp	r0, #1
   29266:	d020      	beq.n	292aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
   29268:	2802      	cmp	r0, #2
   2926a:	d02f      	beq.n	292cc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6b4>
   2926c:	2803      	cmp	r0, #3
   2926e:	d03b      	beq.n	292e8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d0>
   29270:	f240 21fb 	movw	r1, #763	; 0x2fb
   29274:	e057      	b.n	29326 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
   29276:	79a0      	ldrb	r0, [r4, #6]
   29278:	2150      	movs	r1, #80	; 0x50
   2927a:	f8ad 0004 	strh.w	r0, [sp, #4]
   2927e:	5388      	strh	r0, [r1, r6]
   29280:	4648      	mov	r0, r9
   29282:	f7ff fafd 	bl	28880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   29286:	b130      	cbz	r0, 29296 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x67e>
   29288:	2080      	movs	r0, #128	; 0x80
   2928a:	6a21      	ldr	r1, [r4, #32]
   2928c:	f7ff fcec 	bl	28c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
   29290:	f885 8011 	strb.w	r8, [r5, #17]
   29294:	e02c      	b.n	292f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
   29296:	466a      	mov	r2, sp
   29298:	a901      	add	r1, sp, #4
   2929a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2929c:	f00b fa0e 	bl	346bc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
   292a0:	6220      	str	r0, [r4, #32]
   292a2:	b110      	cbz	r0, 292aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
   292a4:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
   292a8:	b111      	cbz	r1, 292b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x698>
   292aa:	4842      	ldr	r0, [pc, #264]	; (293b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
   292ac:	6220      	str	r0, [r4, #32]
   292ae:	e01f      	b.n	292f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
   292b0:	f89d 1000 	ldrb.w	r1, [sp]
   292b4:	b921      	cbnz	r1, 292c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6a8>
   292b6:	8007      	strh	r7, [r0, #0]
   292b8:	7087      	strb	r7, [r0, #2]
   292ba:	2101      	movs	r1, #1
   292bc:	f00b fd6d 	bl	34d9a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   292c0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   292c4:	6a20      	ldr	r0, [r4, #32]
   292c6:	f00b fcf0 	bl	34caa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
   292ca:	e011      	b.n	292f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
   292cc:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
   292d0:	f8ad 0004 	strh.w	r0, [sp, #4]
   292d4:	466a      	mov	r2, sp
   292d6:	a901      	add	r1, sp, #4
   292d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   292da:	f00b f9ef 	bl	346bc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
   292de:	6220      	str	r0, [r4, #32]
   292e0:	b930      	cbnz	r0, 292f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
   292e2:	f240 21e5 	movw	r1, #741	; 0x2e5
   292e6:	e01e      	b.n	29326 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
   292e8:	4648      	mov	r0, r9
   292ea:	f7ff fac9 	bl	28880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
   292ee:	b1c0      	cbz	r0, 29322 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70a>
   292f0:	6a20      	ldr	r0, [r4, #32]
   292f2:	2308      	movs	r3, #8
   292f4:	7801      	ldrb	r1, [r0, #0]
   292f6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
   292fa:	7001      	strb	r1, [r0, #0]
   292fc:	7dea      	ldrb	r2, [r5, #23]
   292fe:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
   29302:	4311      	orrs	r1, r2
   29304:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   29308:	7001      	strb	r1, [r0, #0]
   2930a:	7e2a      	ldrb	r2, [r5, #24]
   2930c:	2304      	movs	r3, #4
   2930e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
   29312:	4311      	orrs	r1, r2
   29314:	f001 01ef 	and.w	r1, r1, #239	; 0xef
   29318:	7001      	strb	r1, [r0, #0]
   2931a:	43c9      	mvns	r1, r1
   2931c:	0789      	lsls	r1, r1, #30
   2931e:	d005      	beq.n	2932c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x714>
   29320:	e007      	b.n	29332 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x71a>
   29322:	f240 21ee 	movw	r1, #750	; 0x2ee
   29326:	2027      	movs	r0, #39	; 0x27
   29328:	f7fe fb92 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2932c:	78c0      	ldrb	r0, [r0, #3]
   2932e:	2802      	cmp	r0, #2
   29330:	d00f      	beq.n	29352 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
   29332:	6b60      	ldr	r0, [r4, #52]	; 0x34
   29334:	f00a fe37 	bl	33fa6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
   29338:	b108      	cbz	r0, 2933e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x726>
   2933a:	2101      	movs	r1, #1
   2933c:	e00a      	b.n	29354 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
   2933e:	6a20      	ldr	r0, [r4, #32]
   29340:	7800      	ldrb	r0, [r0, #0]
   29342:	43c0      	mvns	r0, r0
   29344:	0780      	lsls	r0, r0, #30
   29346:	d004      	beq.n	29352 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
   29348:	f7ff fa58 	bl	287fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
   2934c:	f080 0101 	eor.w	r1, r0, #1
   29350:	e000      	b.n	29354 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
   29352:	2100      	movs	r1, #0
   29354:	6a20      	ldr	r0, [r4, #32]
   29356:	7802      	ldrb	r2, [r0, #0]
   29358:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   2935c:	7001      	strb	r1, [r0, #0]
   2935e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   29362:	b181      	cbz	r1, 29386 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
   29364:	7841      	ldrb	r1, [r0, #1]
   29366:	b171      	cbz	r1, 29386 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
   29368:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2936a:	f005 fccb 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   2936e:	4811      	ldr	r0, [pc, #68]	; (293b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
   29370:	3828      	subs	r0, #40	; 0x28
   29372:	7607      	strb	r7, [r0, #24]
   29374:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
   29378:	e9c0 1204 	strd	r1, r2, [r0, #16]
   2937c:	6a21      	ldr	r1, [r4, #32]
   2937e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   29380:	f005 f932 	bl	2e5e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
   29384:	e003      	b.n	2938e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x776>
   29386:	f005 fcbd 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   2938a:	f005 f96f 	bl	2e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   2938e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
   29392:	2101      	movs	r1, #1
   29394:	2000      	movs	r0, #0
   29396:	f005 fd3d 	bl	2ee14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   2939a:	f884 8003 	strb.w	r8, [r4, #3]
   2939e:	6a21      	ldr	r1, [r4, #32]
   293a0:	880a      	ldrh	r2, [r1, #0]
   293a2:	8222      	strh	r2, [r4, #16]
   293a4:	7889      	ldrb	r1, [r1, #2]
   293a6:	74a1      	strb	r1, [r4, #18]
   293a8:	f884 8000 	strb.w	r8, [r4]
   293ac:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   293b0:	200000a4 	.word	0x200000a4
   293b4:	20000b78 	.word	0x20000b78
   293b8:	0002901d 	.word	0x0002901d
   293bc:	00028d65 	.word	0x00028d65
   293c0:	00028f15 	.word	0x00028f15
   293c4:	000291a1 	.word	0x000291a1

000293c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
   293c8:	4800      	ldr	r0, [pc, #0]	; (293cc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
   293ca:	4770      	bx	lr
   293cc:	20001488 	.word	0x20001488

000293d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
   293d0:	4904      	ldr	r1, [pc, #16]	; (293e4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
   293d2:	784a      	ldrb	r2, [r1, #1]
   293d4:	4282      	cmp	r2, r0
   293d6:	d903      	bls.n	293e0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
   293d8:	4408      	add	r0, r1
   293da:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
   293de:	4770      	bx	lr
   293e0:	2000      	movs	r0, #0
   293e2:	4770      	bx	lr
   293e4:	200012fe 	.word	0x200012fe

000293e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
   293e8:	4904      	ldr	r1, [pc, #16]	; (293fc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
   293ea:	784a      	ldrb	r2, [r1, #1]
   293ec:	4282      	cmp	r2, r0
   293ee:	d903      	bls.n	293f8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
   293f0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   293f4:	3082      	adds	r0, #130	; 0x82
   293f6:	4770      	bx	lr
   293f8:	2000      	movs	r0, #0
   293fa:	4770      	bx	lr
   293fc:	200012fe 	.word	0x200012fe

00029400 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
   29400:	4a05      	ldr	r2, [pc, #20]	; (29418 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
   29402:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   29406:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2940a:	6802      	ldr	r2, [r0, #0]
   2940c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
   29410:	8880      	ldrh	r0, [r0, #4]
   29412:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
   29416:	4770      	bx	lr
   29418:	200012fe 	.word	0x200012fe

0002941c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
   2941c:	4904      	ldr	r1, [pc, #16]	; (29430 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
   2941e:	784a      	ldrb	r2, [r1, #1]
   29420:	4282      	cmp	r2, r0
   29422:	d903      	bls.n	2942c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
   29424:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   29428:	1c80      	adds	r0, r0, #2
   2942a:	4770      	bx	lr
   2942c:	2000      	movs	r0, #0
   2942e:	4770      	bx	lr
   29430:	200012fe 	.word	0x200012fe

00029434 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
   29434:	b510      	push	{r4, lr}
   29436:	f44f 72c5 	mov.w	r2, #394	; 0x18a
   2943a:	2100      	movs	r1, #0
   2943c:	4805      	ldr	r0, [pc, #20]	; (29454 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
   2943e:	f00e f938 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   29442:	4805      	ldr	r0, [pc, #20]	; (29458 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
   29444:	2100      	movs	r1, #0
   29446:	7001      	strb	r1, [r0, #0]
   29448:	7041      	strb	r1, [r0, #1]
   2944a:	f44f 7161 	mov.w	r1, #900	; 0x384
   2944e:	8041      	strh	r1, [r0, #2]
   29450:	bd10      	pop	{r4, pc}
   29452:	0000      	.short	0x0000
   29454:	200012fe 	.word	0x200012fe
   29458:	20000358 	.word	0x20000358

0002945c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
   2945c:	4b0b      	ldr	r3, [pc, #44]	; (2948c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
   2945e:	b510      	push	{r4, lr}
   29460:	785c      	ldrb	r4, [r3, #1]
   29462:	4284      	cmp	r4, r0
   29464:	d910      	bls.n	29488 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
   29466:	4418      	add	r0, r3
   29468:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
   2946c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   29470:	4418      	add	r0, r3
   29472:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   29476:	700b      	strb	r3, [r1, #0]
   29478:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
   2947c:	6011      	str	r1, [r2, #0]
   2947e:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
   29482:	8090      	strh	r0, [r2, #4]
   29484:	2001      	movs	r0, #1
   29486:	bd10      	pop	{r4, pc}
   29488:	2000      	movs	r0, #0
   2948a:	bd10      	pop	{r4, pc}
   2948c:	200012fe 	.word	0x200012fe

00029490 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
   29490:	4801      	ldr	r0, [pc, #4]	; (29498 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
   29492:	8840      	ldrh	r0, [r0, #2]
   29494:	4770      	bx	lr
   29496:	0000      	.short	0x0000
   29498:	20000358 	.word	0x20000358

0002949c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
   2949c:	4905      	ldr	r1, [pc, #20]	; (294b4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
   2949e:	784a      	ldrb	r2, [r1, #1]
   294a0:	4282      	cmp	r2, r0
   294a2:	d903      	bls.n	294ac <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
   294a4:	4408      	add	r0, r1
   294a6:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
   294aa:	b108      	cbz	r0, 294b0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
   294ac:	2000      	movs	r0, #0
   294ae:	4770      	bx	lr
   294b0:	2001      	movs	r0, #1
   294b2:	4770      	bx	lr
   294b4:	200012fe 	.word	0x200012fe

000294b8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
   294b8:	4901      	ldr	r1, [pc, #4]	; (294c0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
   294ba:	7048      	strb	r0, [r1, #1]
   294bc:	4770      	bx	lr
   294be:	0000      	.short	0x0000
   294c0:	20000358 	.word	0x20000358
   294c4:	4602      	mov	r2, r0
   294c6:	4809      	ldr	r0, [pc, #36]	; (294ec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
   294c8:	b510      	push	{r4, lr}
   294ca:	7800      	ldrb	r0, [r0, #0]
   294cc:	460b      	mov	r3, r1
   294ce:	b158      	cbz	r0, 294e8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
   294d0:	4807      	ldr	r0, [pc, #28]	; (294f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
   294d2:	7841      	ldrb	r1, [r0, #1]
   294d4:	b141      	cbz	r1, 294e8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
   294d6:	b10b      	cbz	r3, 294dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
   294d8:	1c80      	adds	r0, r0, #2
   294da:	e001      	b.n	294e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
   294dc:	4804      	ldr	r0, [pc, #16]	; (294f0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
   294de:	3082      	adds	r0, #130	; 0x82
   294e0:	f004 ff8a 	bl	2e3f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
   294e4:	2001      	movs	r0, #1
   294e6:	bd10      	pop	{r4, pc}
   294e8:	2000      	movs	r0, #0
   294ea:	bd10      	pop	{r4, pc}
   294ec:	20000358 	.word	0x20000358
   294f0:	200012fe 	.word	0x200012fe
   294f4:	4908      	ldr	r1, [pc, #32]	; (29518 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
   294f6:	b510      	push	{r4, lr}
   294f8:	4603      	mov	r3, r0
   294fa:	2000      	movs	r0, #0
   294fc:	784a      	ldrb	r2, [r1, #1]
   294fe:	e006      	b.n	2950e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
   29500:	180c      	adds	r4, r1, r0
   29502:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
   29506:	429c      	cmp	r4, r3
   29508:	d004      	beq.n	29514 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
   2950a:	1c40      	adds	r0, r0, #1
   2950c:	b2c0      	uxtb	r0, r0
   2950e:	4282      	cmp	r2, r0
   29510:	d8f6      	bhi.n	29500 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
   29512:	2008      	movs	r0, #8
   29514:	bd10      	pop	{r4, pc}
   29516:	0000      	.short	0x0000
   29518:	200012fe 	.word	0x200012fe
   2951c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2951e:	4c1a      	ldr	r4, [pc, #104]	; (29588 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
   29520:	4603      	mov	r3, r0
   29522:	2000      	movs	r0, #0
   29524:	7825      	ldrb	r5, [r4, #0]
   29526:	e02b      	b.n	29580 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
   29528:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   2952c:	4422      	add	r2, r4
   2952e:	780f      	ldrb	r7, [r1, #0]
   29530:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
   29534:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
   29538:	ea87 070c 	eor.w	r7, r7, ip
   2953c:	405e      	eors	r6, r3
   2953e:	443e      	add	r6, r7
   29540:	784f      	ldrb	r7, [r1, #1]
   29542:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
   29546:	ea87 070c 	eor.w	r7, r7, ip
   2954a:	443e      	add	r6, r7
   2954c:	788f      	ldrb	r7, [r1, #2]
   2954e:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
   29552:	ea87 070c 	eor.w	r7, r7, ip
   29556:	443e      	add	r6, r7
   29558:	78cf      	ldrb	r7, [r1, #3]
   2955a:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
   2955e:	ea87 070c 	eor.w	r7, r7, ip
   29562:	443e      	add	r6, r7
   29564:	790f      	ldrb	r7, [r1, #4]
   29566:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
   2956a:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
   2956e:	ea87 070c 	eor.w	r7, r7, ip
   29572:	443e      	add	r6, r7
   29574:	794f      	ldrb	r7, [r1, #5]
   29576:	4057      	eors	r7, r2
   29578:	42f7      	cmn	r7, r6
   2957a:	d004      	beq.n	29586 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
   2957c:	1c40      	adds	r0, r0, #1
   2957e:	b2c0      	uxtb	r0, r0
   29580:	4285      	cmp	r5, r0
   29582:	d8d1      	bhi.n	29528 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
   29584:	2008      	movs	r0, #8
   29586:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29588:	200012fe 	.word	0x200012fe

0002958c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
   2958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29590:	4604      	mov	r4, r0
   29592:	f100 0580 	add.w	r5, r0, #128	; 0x80
   29596:	f04f 0901 	mov.w	r9, #1
   2959a:	b171      	cbz	r1, 295ba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
   2959c:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
   295a0:	1e7e      	subs	r6, r7, #1
   295a2:	2901      	cmp	r1, #1
   295a4:	d029      	beq.n	295fa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
   295a6:	2902      	cmp	r1, #2
   295a8:	d04e      	beq.n	29648 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
   295aa:	2903      	cmp	r1, #3
   295ac:	d123      	bne.n	295f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
   295ae:	4639      	mov	r1, r7
   295b0:	4630      	mov	r0, r6
   295b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   295b6:	f00b ba9d 	b.w	34af4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   295ba:	f44f 723e 	mov.w	r2, #760	; 0x2f8
   295be:	2100      	movs	r1, #0
   295c0:	f00e f877 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   295c4:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
   295c8:	4924      	ldr	r1, [pc, #144]	; (2965c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
   295ca:	66e9      	str	r1, [r5, #108]	; 0x6c
   295cc:	4620      	mov	r0, r4
   295ce:	2107      	movs	r1, #7
   295d0:	6729      	str	r1, [r5, #112]	; 0x70
   295d2:	f810 1fec 	ldrb.w	r1, [r0, #236]!
   295d6:	f021 0104 	bic.w	r1, r1, #4
   295da:	7001      	strb	r1, [r0, #0]
   295dc:	20fe      	movs	r0, #254	; 0xfe
   295de:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
   295e2:	207f      	movs	r0, #127	; 0x7f
   295e4:	7668      	strb	r0, [r5, #25]
   295e6:	481e      	ldr	r0, [pc, #120]	; (29660 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
   295e8:	60a8      	str	r0, [r5, #8]
   295ea:	2000      	movs	r0, #0
   295ec:	e9c5 0000 	strd	r0, r0, [r5]
   295f0:	2020      	movs	r0, #32
   295f2:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
   295f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   295fa:	f04f 0800 	mov.w	r8, #0
   295fe:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
   29602:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
   29606:	6921      	ldr	r1, [r4, #16]
   29608:	4816      	ldr	r0, [pc, #88]	; (29664 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
   2960a:	460a      	mov	r2, r1
   2960c:	4408      	add	r0, r1
   2960e:	fbb0 f0f1 	udiv	r0, r0, r1
   29612:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   29616:	f640 30b8 	movw	r0, #3000	; 0xbb8
   2961a:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
   2961e:	8b63      	ldrh	r3, [r4, #26]
   29620:	4628      	mov	r0, r5
   29622:	f000 f821 	bl	29668 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
   29626:	4639      	mov	r1, r7
   29628:	4630      	mov	r0, r6
   2962a:	f00b fa63 	bl	34af4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
   2962e:	f00d ff48 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   29632:	b118      	cbz	r0, 2963c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
   29634:	6960      	ldr	r0, [r4, #20]
   29636:	f000 fbbd 	bl	29db4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
   2963a:	b110      	cbz	r0, 29642 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
   2963c:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
   29640:	e7d9      	b.n	295f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
   29642:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
   29646:	e7d6      	b.n	295f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
   29648:	6901      	ldr	r1, [r0, #16]
   2964a:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
   2964e:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
   29652:	4628      	mov	r0, r5
   29654:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29658:	f000 b806 	b.w	29668 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
   2965c:	c404492f 	.word	0xc404492f
   29660:	fffce000 	.word	0xfffce000
   29664:	01c9c37f 	.word	0x01c9c37f
   29668:	b510      	push	{r4, lr}
   2966a:	2400      	movs	r4, #0
   2966c:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
   29670:	f830 4f50 	ldrh.w	r4, [r0, #80]!
   29674:	434c      	muls	r4, r1
   29676:	fbb4 f4f2 	udiv	r4, r4, r2
   2967a:	f820 4910 	strh.w	r4, [r0], #-16
   2967e:	f240 2471 	movw	r4, #625	; 0x271
   29682:	4363      	muls	r3, r4
   29684:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   29688:	1e5b      	subs	r3, r3, #1
   2968a:	fbb3 f3f2 	udiv	r3, r3, r2
   2968e:	81c3      	strh	r3, [r0, #14]
   29690:	4b09      	ldr	r3, [pc, #36]	; (296b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
   29692:	fbb3 f3f2 	udiv	r3, r3, r2
   29696:	1c5b      	adds	r3, r3, #1
   29698:	8283      	strh	r3, [r0, #20]
   2969a:	8903      	ldrh	r3, [r0, #8]
   2969c:	4363      	muls	r3, r4
   2969e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   296a2:	1e5b      	subs	r3, r3, #1
   296a4:	fbb3 f3f2 	udiv	r3, r3, r2
   296a8:	6043      	str	r3, [r0, #4]
   296aa:	6803      	ldr	r3, [r0, #0]
   296ac:	434b      	muls	r3, r1
   296ae:	fbb3 f1f2 	udiv	r1, r3, r2
   296b2:	6001      	str	r1, [r0, #0]
   296b4:	bd10      	pop	{r4, pc}
   296b6:	0000      	.short	0x0000
   296b8:	02625a00 	.word	0x02625a00

000296bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
   296bc:	4902      	ldr	r1, [pc, #8]	; (296c8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
   296be:	f991 1000 	ldrsb.w	r1, [r1]
   296c2:	f00b b9c8 	b.w	34a56 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
   296c6:	0000      	.short	0x0000
   296c8:	20000370 	.word	0x20000370

000296cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
   296cc:	b508      	push	{r3, lr}
   296ce:	207f      	movs	r0, #127	; 0x7f
   296d0:	f88d 0000 	strb.w	r0, [sp]
   296d4:	4668      	mov	r0, sp
   296d6:	f005 fbc3 	bl	2ee60 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
   296da:	b140      	cbz	r0, 296ee <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
   296dc:	4805      	ldr	r0, [pc, #20]	; (296f4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
   296de:	7840      	ldrb	r0, [r0, #1]
   296e0:	4240      	negs	r0, r0
   296e2:	b241      	sxtb	r1, r0
   296e4:	f99d 0000 	ldrsb.w	r0, [sp]
   296e8:	f00b f9b5 	bl	34a56 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
   296ec:	bd08      	pop	{r3, pc}
   296ee:	f99d 0000 	ldrsb.w	r0, [sp]
   296f2:	bd08      	pop	{r3, pc}
   296f4:	20000370 	.word	0x20000370

000296f8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
   296f8:	4a01      	ldr	r2, [pc, #4]	; (29700 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
   296fa:	7010      	strb	r0, [r2, #0]
   296fc:	7051      	strb	r1, [r2, #1]
   296fe:	4770      	bx	lr
   29700:	20000370 	.word	0x20000370
   29704:	b570      	push	{r4, r5, r6, lr}
   29706:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   2970a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   2970e:	2401      	movs	r4, #1
   29710:	fb03 2101 	mla	r1, r3, r1, r2
   29714:	2225      	movs	r2, #37	; 0x25
   29716:	fbb1 f3f2 	udiv	r3, r1, r2
   2971a:	fb02 1113 	mls	r1, r2, r3, r1
   2971e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
   29722:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
   29726:	f001 0307 	and.w	r3, r1, #7
   2972a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   2972e:	fa04 f303 	lsl.w	r3, r4, r3
   29732:	421a      	tst	r2, r3
   29734:	d004      	beq.n	29740 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
   29736:	bf00      	nop
   29738:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
   2973c:	2000      	movs	r0, #0
   2973e:	bd70      	pop	{r4, r5, r6, pc}
   29740:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
   29744:	fbb1 f3f2 	udiv	r3, r1, r2
   29748:	fb02 1113 	mls	r1, r2, r3, r1
   2974c:	1c49      	adds	r1, r1, #1
   2974e:	b2c9      	uxtb	r1, r1
   29750:	2300      	movs	r3, #0
   29752:	18c5      	adds	r5, r0, r3
   29754:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
   29758:	428a      	cmp	r2, r1
   2975a:	d312      	bcc.n	29782 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
   2975c:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
   29760:	2200      	movs	r2, #0
   29762:	bf00      	nop
   29764:	fa04 f602 	lsl.w	r6, r4, r2
   29768:	4235      	tst	r5, r6
   2976a:	d001      	beq.n	29770 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
   2976c:	1e49      	subs	r1, r1, #1
   2976e:	b2c9      	uxtb	r1, r1
   29770:	b121      	cbz	r1, 2977c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
   29772:	1c52      	adds	r2, r2, #1
   29774:	b2d2      	uxtb	r2, r2
   29776:	2a08      	cmp	r2, #8
   29778:	d3f4      	bcc.n	29764 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
   2977a:	e004      	b.n	29786 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
   2977c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   29780:	e7da      	b.n	29738 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
   29782:	1a89      	subs	r1, r1, r2
   29784:	b2c9      	uxtb	r1, r1
   29786:	1c5b      	adds	r3, r3, #1
   29788:	b2db      	uxtb	r3, r3
   2978a:	2b05      	cmp	r3, #5
   2978c:	d3e1      	bcc.n	29752 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
   2978e:	201f      	movs	r0, #31
   29790:	bd70      	pop	{r4, r5, r6, pc}
   29792:	0000      	movs	r0, r0
   29794:	b570      	push	{r4, r5, r6, lr}
   29796:	1c49      	adds	r1, r1, #1
   29798:	2300      	movs	r3, #0
   2979a:	b2c9      	uxtb	r1, r1
   2979c:	2401      	movs	r4, #1
   2979e:	18c5      	adds	r5, r0, r3
   297a0:	79aa      	ldrb	r2, [r5, #6]
   297a2:	428a      	cmp	r2, r1
   297a4:	d312      	bcc.n	297cc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
   297a6:	f895 5001 	ldrb.w	r5, [r5, #1]
   297aa:	2200      	movs	r2, #0
   297ac:	fa04 f602 	lsl.w	r6, r4, r2
   297b0:	4235      	tst	r5, r6
   297b2:	d001      	beq.n	297b8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
   297b4:	1e49      	subs	r1, r1, #1
   297b6:	b2c9      	uxtb	r1, r1
   297b8:	b121      	cbz	r1, 297c4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
   297ba:	1c52      	adds	r2, r2, #1
   297bc:	b2d2      	uxtb	r2, r2
   297be:	2a08      	cmp	r2, #8
   297c0:	d3f4      	bcc.n	297ac <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
   297c2:	e005      	b.n	297d0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
   297c4:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   297c8:	b2c0      	uxtb	r0, r0
   297ca:	bd70      	pop	{r4, r5, r6, pc}
   297cc:	1a89      	subs	r1, r1, r2
   297ce:	b2c9      	uxtb	r1, r1
   297d0:	1c5b      	adds	r3, r3, #1
   297d2:	b2db      	uxtb	r3, r3
   297d4:	2b05      	cmp	r3, #5
   297d6:	d3e2      	bcc.n	2979e <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
   297d8:	219d      	movs	r1, #157	; 0x9d
   297da:	2046      	movs	r0, #70	; 0x46
   297dc:	f7fe f938 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000297e0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
   297e0:	7841      	ldrb	r1, [r0, #1]
   297e2:	b141      	cbz	r1, 297f6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
   297e4:	78c0      	ldrb	r0, [r0, #3]
   297e6:	282b      	cmp	r0, #43	; 0x2b
   297e8:	d203      	bcs.n	297f2 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
   297ea:	4a04      	ldr	r2, [pc, #16]	; (297fc <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
   297ec:	5c10      	ldrb	r0, [r2, r0]
   297ee:	4288      	cmp	r0, r1
   297f0:	d101      	bne.n	297f6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
   297f2:	2001      	movs	r0, #1
   297f4:	4770      	bx	lr
   297f6:	2000      	movs	r0, #0
   297f8:	4770      	bx	lr
   297fa:	0000      	.short	0x0000
   297fc:	000377fc 	.word	0x000377fc

00029800 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
   29800:	b510      	push	{r4, lr}
   29802:	2201      	movs	r2, #1
   29804:	70c1      	strb	r1, [r0, #3]
   29806:	292b      	cmp	r1, #43	; 0x2b
   29808:	d202      	bcs.n	29810 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
   2980a:	4a06      	ldr	r2, [pc, #24]	; (29824 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
   2980c:	5c52      	ldrb	r2, [r2, r1]
   2980e:	e006      	b.n	2981e <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
   29810:	29ff      	cmp	r1, #255	; 0xff
   29812:	d004      	beq.n	2981e <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
   29814:	f240 4174 	movw	r1, #1140	; 0x474
   29818:	202a      	movs	r0, #42	; 0x2a
   2981a:	f7fe f919 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2981e:	7042      	strb	r2, [r0, #1]
   29820:	bd10      	pop	{r4, pc}
   29822:	0000      	.short	0x0000
   29824:	000377fc 	.word	0x000377fc

00029828 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
   29828:	4904      	ldr	r1, [pc, #16]	; (2983c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
   2982a:	7c89      	ldrb	r1, [r1, #18]
   2982c:	0749      	lsls	r1, r1, #29
   2982e:	d400      	bmi.n	29832 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
   29830:	b108      	cbz	r0, 29836 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
   29832:	2000      	movs	r0, #0
   29834:	4770      	bx	lr
   29836:	2001      	movs	r0, #1
   29838:	4770      	bx	lr
   2983a:	0000      	.short	0x0000
   2983c:	20001200 	.word	0x20001200

00029840 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
   29840:	4803      	ldr	r0, [pc, #12]	; (29850 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
   29842:	7c80      	ldrb	r0, [r0, #18]
   29844:	0780      	lsls	r0, r0, #30
   29846:	d401      	bmi.n	2984c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
   29848:	2001      	movs	r0, #1
   2984a:	4770      	bx	lr
   2984c:	2000      	movs	r0, #0
   2984e:	4770      	bx	lr
   29850:	20001200 	.word	0x20001200

00029854 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
   29854:	4803      	ldr	r0, [pc, #12]	; (29864 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
   29856:	7c80      	ldrb	r0, [r0, #18]
   29858:	07c0      	lsls	r0, r0, #31
   2985a:	d001      	beq.n	29860 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
   2985c:	2000      	movs	r0, #0
   2985e:	4770      	bx	lr
   29860:	2001      	movs	r0, #1
   29862:	4770      	bx	lr
   29864:	20001200 	.word	0x20001200
   29868:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   2986c:	4688      	mov	r8, r1
   2986e:	4699      	mov	r9, r3
   29870:	4615      	mov	r5, r2
   29872:	4604      	mov	r4, r0
   29874:	4669      	mov	r1, sp
   29876:	f00a ff58 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2987a:	bbe0      	cbnz	r0, 298f6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
   2987c:	9e01      	ldr	r6, [sp, #4]
   2987e:	2700      	movs	r7, #0
   29880:	3680      	adds	r6, #128	; 0x80
   29882:	b17d      	cbz	r5, 298a4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
   29884:	4620      	mov	r0, r4
   29886:	f7fe fdbb 	bl	28400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   2988a:	0004      	movs	r4, r0
   2988c:	d00e      	beq.n	298ac <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
   2988e:	4629      	mov	r1, r5
   29890:	f00a fb5b 	bl	33f4a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
   29894:	b118      	cbz	r0, 2989e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
   29896:	491b      	ldr	r1, [pc, #108]	; (29904 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
   29898:	8849      	ldrh	r1, [r1, #2]
   2989a:	42a9      	cmp	r1, r5
   2989c:	d208      	bcs.n	298b0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
   2989e:	2000      	movs	r0, #0
   298a0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   298a4:	2001      	movs	r0, #1
   298a6:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
   298aa:	e024      	b.n	298f6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
   298ac:	2167      	movs	r1, #103	; 0x67
   298ae:	e025      	b.n	298fc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
   298b0:	4601      	mov	r1, r0
   298b2:	aa02      	add	r2, sp, #8
   298b4:	4620      	mov	r0, r4
   298b6:	f00a fb41 	bl	33f3c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   298ba:	9802      	ldr	r0, [sp, #8]
   298bc:	8007      	strh	r7, [r0, #0]
   298be:	7087      	strb	r7, [r0, #2]
   298c0:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   298c4:	b109      	cbz	r1, 298ca <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
   298c6:	f04f 0802 	mov.w	r8, #2
   298ca:	4641      	mov	r1, r8
   298cc:	f00b fa65 	bl	34d9a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   298d0:	9802      	ldr	r0, [sp, #8]
   298d2:	462a      	mov	r2, r5
   298d4:	4649      	mov	r1, r9
   298d6:	1cc0      	adds	r0, r0, #3
   298d8:	f00d fe71 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   298dc:	4620      	mov	r0, r4
   298de:	4629      	mov	r1, r5
   298e0:	f00a faea 	bl	33eb8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
   298e4:	b148      	cbz	r0, 298fa <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
   298e6:	4668      	mov	r0, sp
   298e8:	f00b fab2 	bl	34e50 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   298ec:	9801      	ldr	r0, [sp, #4]
   298ee:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
   298f2:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
   298f6:	2001      	movs	r0, #1
   298f8:	e7d2      	b.n	298a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
   298fa:	217c      	movs	r1, #124	; 0x7c
   298fc:	202b      	movs	r0, #43	; 0x2b
   298fe:	f7fe f8a7 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29902:	0000      	.short	0x0000
   29904:	20001200 	.word	0x20001200

00029908 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
   29908:	4809      	ldr	r0, [pc, #36]	; (29930 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
   2990a:	b082      	sub	sp, #8
   2990c:	7a00      	ldrb	r0, [r0, #8]
   2990e:	f88d 0000 	strb.w	r0, [sp]
   29912:	9800      	ldr	r0, [sp, #0]
   29914:	9000      	str	r0, [sp, #0]
   29916:	f89d 0000 	ldrb.w	r0, [sp]
   2991a:	2800      	cmp	r0, #0
   2991c:	d105      	bne.n	2992a <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
   2991e:	2202      	movs	r2, #2
   29920:	4904      	ldr	r1, [pc, #16]	; (29934 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
   29922:	4803      	ldr	r0, [pc, #12]	; (29930 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
   29924:	b002      	add	sp, #8
   29926:	f00b babf 	b.w	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2992a:	b002      	add	sp, #8
   2992c:	4770      	bx	lr
   2992e:	0000      	.short	0x0000
   29930:	20001218 	.word	0x20001218
   29934:	00034eef 	.word	0x00034eef

00029938 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
   29938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2993c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 29ab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
   29940:	4f5e      	ldr	r7, [pc, #376]	; (29abc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
   29942:	4683      	mov	fp, r0
   29944:	f04f 0a01 	mov.w	sl, #1
   29948:	2600      	movs	r6, #0
   2994a:	6878      	ldr	r0, [r7, #4]
   2994c:	4635      	mov	r5, r6
   2994e:	7a00      	ldrb	r0, [r0, #8]
   29950:	f88d 0000 	strb.w	r0, [sp]
   29954:	9800      	ldr	r0, [sp, #0]
   29956:	9000      	str	r0, [sp, #0]
   29958:	f89d 1000 	ldrb.w	r1, [sp]
   2995c:	2910      	cmp	r1, #16
   2995e:	d106      	bne.n	2996e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
   29960:	f899 1013 	ldrb.w	r1, [r9, #19]
   29964:	b119      	cbz	r1, 2996e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
   29966:	f8b9 0014 	ldrh.w	r0, [r9, #20]
   2996a:	2800      	cmp	r0, #0
   2996c:	d073      	beq.n	29a56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
   2996e:	f88d 6000 	strb.w	r6, [sp]
   29972:	4668      	mov	r0, sp
   29974:	f000 f906 	bl	29b84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
   29978:	f89d 1000 	ldrb.w	r1, [sp]
   2997c:	2900      	cmp	r1, #0
   2997e:	d1f8      	bne.n	29972 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
   29980:	2800      	cmp	r0, #0
   29982:	d068      	beq.n	29a56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
   29984:	4604      	mov	r4, r0
   29986:	7a00      	ldrb	r0, [r0, #8]
   29988:	f88d 0000 	strb.w	r0, [sp]
   2998c:	9800      	ldr	r0, [sp, #0]
   2998e:	9000      	str	r0, [sp, #0]
   29990:	f89d 8000 	ldrb.w	r8, [sp]
   29994:	f104 0008 	add.w	r0, r4, #8
   29998:	2105      	movs	r1, #5
   2999a:	9000      	str	r0, [sp, #0]
   2999c:	7001      	strb	r1, [r0, #0]
   2999e:	4640      	mov	r0, r8
   299a0:	f1b8 0f08 	cmp.w	r8, #8
   299a4:	d042      	beq.n	29a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
   299a6:	dc07      	bgt.n	299b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
   299a8:	2802      	cmp	r0, #2
   299aa:	d00d      	beq.n	299c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
   299ac:	2803      	cmp	r0, #3
   299ae:	d017      	beq.n	299e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
   299b0:	f1b8 0f04 	cmp.w	r8, #4
   299b4:	d105      	bne.n	299c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
   299b6:	e01d      	b.n	299f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
   299b8:	280f      	cmp	r0, #15
   299ba:	d052      	beq.n	29a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
   299bc:	f1b8 0f10 	cmp.w	r8, #16
   299c0:	d059      	beq.n	29a76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
   299c2:	f240 214a 	movw	r1, #586	; 0x24a
   299c6:	e065      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   299c8:	6862      	ldr	r2, [r4, #4]
   299ca:	b132      	cbz	r2, 299da <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
   299cc:	4659      	mov	r1, fp
   299ce:	4620      	mov	r0, r4
   299d0:	4790      	blx	r2
   299d2:	2004      	movs	r0, #4
   299d4:	f360 0507 	bfi	r5, r0, #0, #8
   299d8:	e010      	b.n	299fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
   299da:	f240 11c3 	movw	r1, #451	; 0x1c3
   299de:	e059      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   299e0:	6862      	ldr	r2, [r4, #4]
   299e2:	b122      	cbz	r2, 299ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
   299e4:	4659      	mov	r1, fp
   299e6:	4620      	mov	r0, r4
   299e8:	4790      	blx	r2
   299ea:	4605      	mov	r5, r0
   299ec:	e006      	b.n	299fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
   299ee:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   299f2:	e04f      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   299f4:	6861      	ldr	r1, [r4, #4]
   299f6:	b1b1      	cbz	r1, 29a26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
   299f8:	4620      	mov	r0, r4
   299fa:	4788      	blx	r1
   299fc:	f3c5 2007 	ubfx	r0, r5, #8, #8
   29a00:	2801      	cmp	r0, #1
   29a02:	d04a      	beq.n	29a9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
   29a04:	f3ef 8110 	mrs	r1, PRIMASK
   29a08:	b672      	cpsid	i
   29a0a:	7a20      	ldrb	r0, [r4, #8]
   29a0c:	f88d 0000 	strb.w	r0, [sp]
   29a10:	9800      	ldr	r0, [sp, #0]
   29a12:	9000      	str	r0, [sp, #0]
   29a14:	f89d 0000 	ldrb.w	r0, [sp]
   29a18:	2805      	cmp	r0, #5
   29a1a:	d042      	beq.n	29aa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
   29a1c:	b3b0      	cbz	r0, 29a8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
   29a1e:	f366 0507 	bfi	r5, r6, #0, #8
   29a22:	b3a1      	cbz	r1, 29a8e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
   29a24:	e041      	b.n	29aaa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
   29a26:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
   29a2a:	e033      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   29a2c:	6860      	ldr	r0, [r4, #4]
   29a2e:	465d      	mov	r5, fp
   29a30:	b198      	cbz	r0, 29a5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
   29a32:	8804      	ldrh	r4, [r0, #0]
   29a34:	4620      	mov	r0, r4
   29a36:	f7fe fce3 	bl	28400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   29a3a:	b180      	cbz	r0, 29a5e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
   29a3c:	706e      	strb	r6, [r5, #1]
   29a3e:	210d      	movs	r1, #13
   29a40:	7029      	strb	r1, [r5, #0]
   29a42:	80ec      	strh	r4, [r5, #6]
   29a44:	f8a5 a008 	strh.w	sl, [r5, #8]
   29a48:	f885 a004 	strb.w	sl, [r5, #4]
   29a4c:	4631      	mov	r1, r6
   29a4e:	f00a fb13 	bl	34078 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   29a52:	2004      	movs	r0, #4
   29a54:	613e      	str	r6, [r7, #16]
   29a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a5a:	21e5      	movs	r1, #229	; 0xe5
   29a5c:	e01a      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   29a5e:	21c5      	movs	r1, #197	; 0xc5
   29a60:	e018      	b.n	29a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
   29a62:	f88b 6001 	strb.w	r6, [fp, #1]
   29a66:	2116      	movs	r1, #22
   29a68:	f88b 1000 	strb.w	r1, [fp]
   29a6c:	f8d4 1009 	ldr.w	r1, [r4, #9]
   29a70:	f8cb 1004 	str.w	r1, [fp, #4]
   29a74:	e7ad      	b.n	299d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
   29a76:	4812      	ldr	r0, [pc, #72]	; (29ac0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
   29a78:	6802      	ldr	r2, [r0, #0]
   29a7a:	b122      	cbz	r2, 29a86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
   29a7c:	6860      	ldr	r0, [r4, #4]
   29a7e:	b138      	cbz	r0, 29a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
   29a80:	8800      	ldrh	r0, [r0, #0]
   29a82:	4659      	mov	r1, fp
   29a84:	4790      	blx	r2
   29a86:	2002      	movs	r0, #2
   29a88:	613e      	str	r6, [r7, #16]
   29a8a:	e7e4      	b.n	29a56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
   29a8c:	e009      	b.n	29aa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
   29a8e:	e00b      	b.n	29aa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
   29a90:	f44f 7110 	mov.w	r1, #576	; 0x240
   29a94:	2010      	movs	r0, #16
   29a96:	f7fd ffdb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29a9a:	9800      	ldr	r0, [sp, #0]
   29a9c:	4641      	mov	r1, r8
   29a9e:	7001      	strb	r1, [r0, #0]
   29aa0:	e003      	b.n	29aaa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
   29aa2:	7226      	strb	r6, [r4, #8]
   29aa4:	613e      	str	r6, [r7, #16]
   29aa6:	e7bc      	b.n	29a22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
   29aa8:	b662      	cpsie	i
   29aaa:	f015 0fff 	tst.w	r5, #255	; 0xff
   29aae:	f43f af4c 	beq.w	2994a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
   29ab2:	b2e8      	uxtb	r0, r5
   29ab4:	e7cf      	b.n	29a56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
   29ab6:	0000      	.short	0x0000
   29ab8:	20001200 	.word	0x20001200
   29abc:	2000122c 	.word	0x2000122c
   29ac0:	200000c8 	.word	0x200000c8

00029ac4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
   29ac4:	4901      	ldr	r1, [pc, #4]	; (29acc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
   29ac6:	7008      	strb	r0, [r1, #0]
   29ac8:	f000 b8be 	b.w	29c48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
   29acc:	20000372 	.word	0x20000372

00029ad0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
   29ad0:	4902      	ldr	r1, [pc, #8]	; (29adc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
   29ad2:	4801      	ldr	r0, [pc, #4]	; (29ad8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
   29ad4:	6008      	str	r0, [r1, #0]
   29ad6:	4770      	bx	lr
   29ad8:	00029ae1 	.word	0x00029ae1
   29adc:	200000c8 	.word	0x200000c8
   29ae0:	b538      	push	{r3, r4, r5, lr}
   29ae2:	000d      	movs	r5, r1
   29ae4:	d014      	beq.n	29b10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
   29ae6:	80a8      	strh	r0, [r5, #4]
   29ae8:	2100      	movs	r1, #0
   29aea:	7269      	strb	r1, [r5, #9]
   29aec:	f7fe fc72 	bl	283d4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   29af0:	4604      	mov	r4, r0
   29af2:	f00a fa05 	bl	33f00 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
   29af6:	b170      	cbz	r0, 29b16 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
   29af8:	4601      	mov	r1, r0
   29afa:	466a      	mov	r2, sp
   29afc:	4620      	mov	r0, r4
   29afe:	f00a fa1d 	bl	33f3c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
   29b02:	80e8      	strh	r0, [r5, #6]
   29b04:	b150      	cbz	r0, 29b1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
   29b06:	28fb      	cmp	r0, #251	; 0xfb
   29b08:	d90b      	bls.n	29b22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
   29b0a:	f240 1123 	movw	r1, #291	; 0x123
   29b0e:	e033      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b10:	f240 1113 	movw	r1, #275	; 0x113
   29b14:	e030      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b16:	f44f 718e 	mov.w	r1, #284	; 0x11c
   29b1a:	e02d      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b1c:	f240 1121 	movw	r1, #289	; 0x121
   29b20:	e02a      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b22:	9800      	ldr	r0, [sp, #0]
   29b24:	f00b f8e5 	bl	34cf2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
   29b28:	2801      	cmp	r0, #1
   29b2a:	d004      	beq.n	29b36 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
   29b2c:	2802      	cmp	r0, #2
   29b2e:	d002      	beq.n	29b36 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
   29b30:	f240 1133 	movw	r1, #307	; 0x133
   29b34:	e020      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b36:	7228      	strb	r0, [r5, #8]
   29b38:	6828      	ldr	r0, [r5, #0]
   29b3a:	b1a8      	cbz	r0, 29b68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
   29b3c:	9900      	ldr	r1, [sp, #0]
   29b3e:	88ea      	ldrh	r2, [r5, #6]
   29b40:	1cc9      	adds	r1, r1, #3
   29b42:	f00d fd3c 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   29b46:	4620      	mov	r0, r4
   29b48:	f00a f9a2 	bl	33e90 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
   29b4c:	b178      	cbz	r0, 29b6e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
   29b4e:	4620      	mov	r0, r4
   29b50:	2100      	movs	r1, #0
   29b52:	f00a fa91 	bl	34078 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
   29b56:	b168      	cbz	r0, 29b74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
   29b58:	4809      	ldr	r0, [pc, #36]	; (29b80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
   29b5a:	7cc1      	ldrb	r1, [r0, #19]
   29b5c:	2900      	cmp	r1, #0
   29b5e:	d002      	beq.n	29b66 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
   29b60:	8a81      	ldrh	r1, [r0, #20]
   29b62:	1e49      	subs	r1, r1, #1
   29b64:	8281      	strh	r1, [r0, #20]
   29b66:	bd38      	pop	{r3, r4, r5, pc}
   29b68:	f44f 719d 	mov.w	r1, #314	; 0x13a
   29b6c:	e004      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b6e:	f240 113f 	movw	r1, #319	; 0x13f
   29b72:	e001      	b.n	29b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
   29b74:	f44f 71a2 	mov.w	r1, #324	; 0x144
   29b78:	2010      	movs	r0, #16
   29b7a:	f7fd ff69 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29b7e:	0000      	.short	0x0000
   29b80:	20001200 	.word	0x20001200
   29b84:	b538      	push	{r3, r4, r5, lr}
   29b86:	4603      	mov	r3, r0
   29b88:	4917      	ldr	r1, [pc, #92]	; (29be8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
   29b8a:	2000      	movs	r0, #0
   29b8c:	7018      	strb	r0, [r3, #0]
   29b8e:	6908      	ldr	r0, [r1, #16]
   29b90:	2401      	movs	r4, #1
   29b92:	b140      	cbz	r0, 29ba6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
   29b94:	7a02      	ldrb	r2, [r0, #8]
   29b96:	f88d 2000 	strb.w	r2, [sp]
   29b9a:	9a00      	ldr	r2, [sp, #0]
   29b9c:	9200      	str	r2, [sp, #0]
   29b9e:	f89d 5000 	ldrb.w	r5, [sp]
   29ba2:	2d00      	cmp	r5, #0
   29ba4:	d111      	bne.n	29bca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
   29ba6:	6848      	ldr	r0, [r1, #4]
   29ba8:	7a02      	ldrb	r2, [r0, #8]
   29baa:	f88d 2000 	strb.w	r2, [sp]
   29bae:	9a00      	ldr	r2, [sp, #0]
   29bb0:	9200      	str	r2, [sp, #0]
   29bb2:	f89d 5000 	ldrb.w	r5, [sp]
   29bb6:	2d01      	cmp	r5, #1
   29bb8:	d006      	beq.n	29bc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
   29bba:	f3ef 8210 	mrs	r2, PRIMASK
   29bbe:	b672      	cpsid	i
   29bc0:	6805      	ldr	r5, [r0, #0]
   29bc2:	604d      	str	r5, [r1, #4]
   29bc4:	b112      	cbz	r2, 29bcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
   29bc6:	e002      	b.n	29bce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
   29bc8:	2000      	movs	r0, #0
   29bca:	bd38      	pop	{r3, r4, r5, pc}
   29bcc:	b662      	cpsie	i
   29bce:	7a02      	ldrb	r2, [r0, #8]
   29bd0:	f88d 2000 	strb.w	r2, [sp]
   29bd4:	9a00      	ldr	r2, [sp, #0]
   29bd6:	9200      	str	r2, [sp, #0]
   29bd8:	f89d 5000 	ldrb.w	r5, [sp]
   29bdc:	b10d      	cbz	r5, 29be2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
   29bde:	6108      	str	r0, [r1, #16]
   29be0:	bd38      	pop	{r3, r4, r5, pc}
   29be2:	701c      	strb	r4, [r3, #0]
   29be4:	bd38      	pop	{r3, r4, r5, pc}
   29be6:	0000      	.short	0x0000
   29be8:	2000122c 	.word	0x2000122c
   29bec:	b538      	push	{r3, r4, r5, lr}
   29bee:	b1d0      	cbz	r0, 29c26 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
   29bf0:	6041      	str	r1, [r0, #4]
   29bf2:	f100 0108 	add.w	r1, r0, #8
   29bf6:	700a      	strb	r2, [r1, #0]
   29bf8:	f3ef 8310 	mrs	r3, PRIMASK
   29bfc:	b672      	cpsid	i
   29bfe:	4c10      	ldr	r4, [pc, #64]	; (29c40 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
   29c00:	6004      	str	r4, [r0, #0]
   29c02:	1f21      	subs	r1, r4, #4
   29c04:	684a      	ldr	r2, [r1, #4]
   29c06:	b14a      	cbz	r2, 29c1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
   29c08:	7a12      	ldrb	r2, [r2, #8]
   29c0a:	f88d 2000 	strb.w	r2, [sp]
   29c0e:	9a00      	ldr	r2, [sp, #0]
   29c10:	9200      	str	r2, [sp, #0]
   29c12:	f89d 5000 	ldrb.w	r5, [sp]
   29c16:	2d01      	cmp	r5, #1
   29c18:	d100      	bne.n	29c1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
   29c1a:	600c      	str	r4, [r1, #0]
   29c1c:	680a      	ldr	r2, [r1, #0]
   29c1e:	6010      	str	r0, [r2, #0]
   29c20:	6008      	str	r0, [r1, #0]
   29c22:	b12b      	cbz	r3, 29c30 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
   29c24:	e005      	b.n	29c32 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
   29c26:	f240 2175 	movw	r1, #629	; 0x275
   29c2a:	2010      	movs	r0, #16
   29c2c:	f7fd ff10 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29c30:	b662      	cpsie	i
   29c32:	4804      	ldr	r0, [pc, #16]	; (29c44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
   29c34:	7800      	ldrb	r0, [r0, #0]
   29c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29c3a:	f009 ba7f 	b.w	3313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   29c3e:	0000      	.short	0x0000
   29c40:	20001230 	.word	0x20001230
   29c44:	20000372 	.word	0x20000372
   29c48:	b510      	push	{r4, lr}
   29c4a:	2214      	movs	r2, #20
   29c4c:	2100      	movs	r1, #0
   29c4e:	4808      	ldr	r0, [pc, #32]	; (29c70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
   29c50:	f00d fd2f 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   29c54:	4806      	ldr	r0, [pc, #24]	; (29c70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
   29c56:	2212      	movs	r2, #18
   29c58:	2100      	movs	r1, #0
   29c5a:	3814      	subs	r0, #20
   29c5c:	f00d fd29 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   29c60:	4803      	ldr	r0, [pc, #12]	; (29c70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
   29c62:	2101      	movs	r1, #1
   29c64:	7301      	strb	r1, [r0, #12]
   29c66:	1d01      	adds	r1, r0, #4
   29c68:	6041      	str	r1, [r0, #4]
   29c6a:	6001      	str	r1, [r0, #0]
   29c6c:	bd10      	pop	{r4, pc}
   29c6e:	0000      	.short	0x0000
   29c70:	2000122c 	.word	0x2000122c

00029c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
   29c74:	b4f0      	push	{r4, r5, r6, r7}
   29c76:	8150      	strh	r0, [r2, #10]
   29c78:	890c      	ldrh	r4, [r1, #8]
   29c7a:	8194      	strh	r4, [r2, #12]
   29c7c:	898b      	ldrh	r3, [r1, #12]
   29c7e:	81d3      	strh	r3, [r2, #14]
   29c80:	8948      	ldrh	r0, [r1, #10]
   29c82:	8210      	strh	r0, [r2, #16]
   29c84:	89cd      	ldrh	r5, [r1, #14]
   29c86:	8255      	strh	r5, [r2, #18]
   29c88:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
   29c8a:	42ae      	cmp	r6, r5
   29c8c:	d108      	bne.n	29ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   29c8e:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
   29c90:	4285      	cmp	r5, r0
   29c92:	d105      	bne.n	29ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   29c94:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
   29c96:	429d      	cmp	r5, r3
   29c98:	d102      	bne.n	29ca0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
   29c9a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
   29c9c:	42a3      	cmp	r3, r4
   29c9e:	d001      	beq.n	29ca4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
   29ca0:	2301      	movs	r3, #1
   29ca2:	e000      	b.n	29ca6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
   29ca4:	2300      	movs	r3, #0
   29ca6:	7513      	strb	r3, [r2, #20]
   29ca8:	8548      	strh	r0, [r1, #42]	; 0x2a
   29caa:	8a50      	ldrh	r0, [r2, #18]
   29cac:	85c8      	strh	r0, [r1, #46]	; 0x2e
   29cae:	8990      	ldrh	r0, [r2, #12]
   29cb0:	8588      	strh	r0, [r1, #44]	; 0x2c
   29cb2:	89d0      	ldrh	r0, [r2, #14]
   29cb4:	8608      	strh	r0, [r1, #48]	; 0x30
   29cb6:	bcf0      	pop	{r4, r5, r6, r7}
   29cb8:	4901      	ldr	r1, [pc, #4]	; (29cc0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
   29cba:	4610      	mov	r0, r2
   29cbc:	f00b b8ee 	b.w	34e9c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
   29cc0:	00029ce5 	.word	0x00029ce5

00029cc4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
   29cc4:	8150      	strh	r0, [r2, #10]
   29cc6:	8a88      	ldrh	r0, [r1, #20]
   29cc8:	8190      	strh	r0, [r2, #12]
   29cca:	8ac8      	ldrh	r0, [r1, #22]
   29ccc:	81d0      	strh	r0, [r2, #14]
   29cce:	8b08      	ldrh	r0, [r1, #24]
   29cd0:	8210      	strh	r0, [r2, #16]
   29cd2:	8b48      	ldrh	r0, [r1, #26]
   29cd4:	8250      	strh	r0, [r2, #18]
   29cd6:	4902      	ldr	r1, [pc, #8]	; (29ce0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
   29cd8:	4610      	mov	r0, r2
   29cda:	f00b b8dc 	b.w	34e96 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
   29cde:	0000      	.short	0x0000
   29ce0:	00029d25 	.word	0x00029d25
   29ce4:	b538      	push	{r3, r4, r5, lr}
   29ce6:	f1a0 0418 	sub.w	r4, r0, #24
   29cea:	7d00      	ldrb	r0, [r0, #20]
   29cec:	460d      	mov	r5, r1
   29cee:	f000 0001 	and.w	r0, r0, #1
   29cf2:	f7ff fd99 	bl	29828 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
   29cf6:	2100      	movs	r1, #0
   29cf8:	b108      	cbz	r0, 29cfe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
   29cfa:	9100      	str	r1, [sp, #0]
   29cfc:	e00c      	b.n	29d18 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
   29cfe:	7069      	strb	r1, [r5, #1]
   29d00:	2013      	movs	r0, #19
   29d02:	7028      	strb	r0, [r5, #0]
   29d04:	f854 0f22 	ldr.w	r0, [r4, #34]!
   29d08:	6068      	str	r0, [r5, #4]
   29d0a:	6860      	ldr	r0, [r4, #4]
   29d0c:	60a8      	str	r0, [r5, #8]
   29d0e:	68a0      	ldr	r0, [r4, #8]
   29d10:	60e8      	str	r0, [r5, #12]
   29d12:	4803      	ldr	r0, [pc, #12]	; (29d20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
   29d14:	6840      	ldr	r0, [r0, #4]
   29d16:	9000      	str	r0, [sp, #0]
   29d18:	f8bd 0000 	ldrh.w	r0, [sp]
   29d1c:	bd38      	pop	{r3, r4, r5, pc}
   29d1e:	0000      	.short	0x0000
   29d20:	00029dac 	.word	0x00029dac
   29d24:	b570      	push	{r4, r5, r6, lr}
   29d26:	b086      	sub	sp, #24
   29d28:	460e      	mov	r6, r1
   29d2a:	4604      	mov	r4, r0
   29d2c:	f7ff fd88 	bl	29840 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
   29d30:	2500      	movs	r5, #0
   29d32:	b358      	cbz	r0, 29d8c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
   29d34:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   29d38:	7225      	strb	r5, [r4, #8]
   29d3a:	8804      	ldrh	r4, [r0, #0]
   29d3c:	a903      	add	r1, sp, #12
   29d3e:	4620      	mov	r0, r4
   29d40:	f00c fdc9 	bl	368d6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
   29d44:	b108      	cbz	r0, 29d4a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
   29d46:	21fe      	movs	r1, #254	; 0xfe
   29d48:	e017      	b.n	29d7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
   29d4a:	f8ad 4000 	strh.w	r4, [sp]
   29d4e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   29d52:	f8ad 0002 	strh.w	r0, [sp, #2]
   29d56:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   29d5a:	f8ad 0004 	strh.w	r0, [sp, #4]
   29d5e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   29d62:	f8ad 0006 	strh.w	r0, [sp, #6]
   29d66:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   29d6a:	f8ad 0008 	strh.w	r0, [sp, #8]
   29d6e:	4668      	mov	r0, sp
   29d70:	f00c fded 	bl	3694e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
   29d74:	b120      	cbz	r0, 29d80 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
   29d76:	f240 1107 	movw	r1, #263	; 0x107
   29d7a:	202c      	movs	r0, #44	; 0x2c
   29d7c:	f7fd fe68 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   29d80:	f8cd 5000 	str.w	r5, [sp]
   29d84:	f8bd 0000 	ldrh.w	r0, [sp]
   29d88:	b006      	add	sp, #24
   29d8a:	bd70      	pop	{r4, r5, r6, pc}
   29d8c:	201b      	movs	r0, #27
   29d8e:	7030      	strb	r0, [r6, #0]
   29d90:	7075      	strb	r5, [r6, #1]
   29d92:	f854 0f0a 	ldr.w	r0, [r4, #10]!
   29d96:	6070      	str	r0, [r6, #4]
   29d98:	6860      	ldr	r0, [r4, #4]
   29d9a:	60b0      	str	r0, [r6, #8]
   29d9c:	8920      	ldrh	r0, [r4, #8]
   29d9e:	81b0      	strh	r0, [r6, #12]
   29da0:	4801      	ldr	r0, [pc, #4]	; (29da8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
   29da2:	6800      	ldr	r0, [r0, #0]
   29da4:	9000      	str	r0, [sp, #0]
   29da6:	e7ed      	b.n	29d84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
   29da8:	00029dac 	.word	0x00029dac
   29dac:	00000004 	.word	0x00000004
   29db0:	00000004 	.word	0x00000004

00029db4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
   29db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   29db6:	f06f 021f 	mvn.w	r2, #31
   29dba:	0c01      	lsrs	r1, r0, #16
   29dbc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
   29dc0:	251f      	movs	r5, #31
   29dc2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   29dc6:	3854      	subs	r0, #84	; 0x54
   29dc8:	d00d      	beq.n	29de6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   29dca:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
   29dce:	3855      	subs	r0, #85	; 0x55
   29dd0:	d009      	beq.n	29de6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   29dd2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
   29dd6:	38aa      	subs	r0, #170	; 0xaa
   29dd8:	d005      	beq.n	29de6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   29dda:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
   29dde:	38aa      	subs	r0, #170	; 0xaa
   29de0:	d001      	beq.n	29de6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
   29de2:	2001      	movs	r0, #1
   29de4:	e000      	b.n	29de8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
   29de6:	2000      	movs	r0, #0
   29de8:	2200      	movs	r2, #0
   29dea:	4613      	mov	r3, r2
   29dec:	ea4f 0402 	mov.w	r4, r2
   29df0:	ea82 0701 	eor.w	r7, r2, r1
   29df4:	43ff      	mvns	r7, r7
   29df6:	431f      	orrs	r7, r3
   29df8:	1c7f      	adds	r7, r7, #1
   29dfa:	d00f      	beq.n	29e1c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
   29dfc:	f006 0701 	and.w	r7, r6, #1
   29e00:	0852      	lsrs	r2, r2, #1
   29e02:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
   29e06:	f005 0701 	and.w	r7, r5, #1
   29e0a:	085b      	lsrs	r3, r3, #1
   29e0c:	0876      	lsrs	r6, r6, #1
   29e0e:	086d      	lsrs	r5, r5, #1
   29e10:	1c64      	adds	r4, r4, #1
   29e12:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
   29e16:	2c16      	cmp	r4, #22
   29e18:	d3ea      	bcc.n	29df0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
   29e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29e1c:	2000      	movs	r0, #0
   29e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029e20 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
   29e20:	b510      	push	{r4, lr}
   29e22:	4804      	ldr	r0, [pc, #16]	; (29e34 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
   29e24:	f00b f95b 	bl	350de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
   29e28:	4802      	ldr	r0, [pc, #8]	; (29e34 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
   29e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29e2e:	3008      	adds	r0, #8
   29e30:	f00b b955 	b.w	350de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
   29e34:	200000cc 	.word	0x200000cc

00029e38 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
   29e38:	4801      	ldr	r0, [pc, #4]	; (29e40 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
   29e3a:	f000 b809 	b.w	29e50 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
   29e3e:	0000      	.short	0x0000
   29e40:	200000cc 	.word	0x200000cc

00029e44 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
   29e44:	4801      	ldr	r0, [pc, #4]	; (29e4c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
   29e46:	f000 b803 	b.w	29e50 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
   29e4a:	0000      	.short	0x0000
   29e4c:	200000d4 	.word	0x200000d4
   29e50:	b510      	push	{r4, lr}
   29e52:	e9d0 2100 	ldrd	r2, r1, [r0]
   29e56:	4b09      	ldr	r3, [pc, #36]	; (29e7c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
   29e58:	4c09      	ldr	r4, [pc, #36]	; (29e80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
   29e5a:	4353      	muls	r3, r2
   29e5c:	4354      	muls	r4, r2
   29e5e:	4051      	eors	r1, r2
   29e60:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
   29e64:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
   29e68:	ea4f 41f1 	mov.w	r1, r1, ror #19
   29e6c:	e9c0 2100 	strd	r2, r1, [r0]
   29e70:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
   29e74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29e78:	4618      	mov	r0, r3
   29e7a:	bd10      	pop	{r4, pc}
   29e7c:	c6ef3760 	.word	0xc6ef3760
   29e80:	9e3779bb 	.word	0x9e3779bb

00029e84 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
   29e84:	b570      	push	{r4, r5, r6, lr}
   29e86:	6844      	ldr	r4, [r0, #4]
   29e88:	1d09      	adds	r1, r1, #4
   29e8a:	2500      	movs	r5, #0
   29e8c:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
   29e90:	3480      	adds	r4, #128	; 0x80
   29e92:	07c0      	lsls	r0, r0, #31
   29e94:	d001      	beq.n	29e9a <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
   29e96:	2001      	movs	r0, #1
   29e98:	bd70      	pop	{r4, r5, r6, pc}
   29e9a:	6848      	ldr	r0, [r1, #4]
   29e9c:	6809      	ldr	r1, [r1, #0]
   29e9e:	4b0c      	ldr	r3, [pc, #48]	; (29ed0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
   29ea0:	f641 0207 	movw	r2, #6151	; 0x1807
   29ea4:	4019      	ands	r1, r3
   29ea6:	66e1      	str	r1, [r4, #108]	; 0x6c
   29ea8:	4010      	ands	r0, r2
   29eaa:	6720      	str	r0, [r4, #112]	; 0x70
   29eac:	211b      	movs	r1, #27
   29eae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   29eb2:	f00b fa3a 	bl	3532a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
   29eb6:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
   29eba:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   29ebe:	1c40      	adds	r0, r0, #1
   29ec0:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
   29ec4:	68e0      	ldr	r0, [r4, #12]
   29ec6:	f040 0001 	orr.w	r0, r0, #1
   29eca:	60e0      	str	r0, [r4, #12]
   29ecc:	2000      	movs	r0, #0
   29ece:	bd70      	pop	{r4, r5, r6, pc}
   29ed0:	f704492f 	.word	0xf704492f

00029ed4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
   29ed4:	b510      	push	{r4, lr}
   29ed6:	1d04      	adds	r4, r0, #4
   29ed8:	f004 fa04 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   29edc:	4b03      	ldr	r3, [pc, #12]	; (29eec <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
   29ede:	f641 0207 	movw	r2, #6151	; 0x1807
   29ee2:	4018      	ands	r0, r3
   29ee4:	4011      	ands	r1, r2
   29ee6:	6020      	str	r0, [r4, #0]
   29ee8:	6061      	str	r1, [r4, #4]
   29eea:	bd10      	pop	{r4, pc}
   29eec:	f704492f 	.word	0xf704492f

00029ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
   29ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29ef4:	7803      	ldrb	r3, [r0, #0]
   29ef6:	6840      	ldr	r0, [r0, #4]
   29ef8:	1d0f      	adds	r7, r1, #4
   29efa:	f100 0580 	add.w	r5, r0, #128	; 0x80
   29efe:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
   29f02:	4606      	mov	r6, r0
   29f04:	f04f 0800 	mov.w	r8, #0
   29f08:	7f6a      	ldrb	r2, [r5, #29]
   29f0a:	2107      	movs	r1, #7
   29f0c:	4628      	mov	r0, r5
   29f0e:	f00a fc23 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   29f12:	b1e0      	cbz	r0, 29f4e <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
   29f14:	6839      	ldr	r1, [r7, #0]
   29f16:	4b18      	ldr	r3, [pc, #96]	; (29f78 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
   29f18:	6878      	ldr	r0, [r7, #4]
   29f1a:	4019      	ands	r1, r3
   29f1c:	f641 0207 	movw	r2, #6151	; 0x1807
   29f20:	66e9      	str	r1, [r5, #108]	; 0x6c
   29f22:	4010      	ands	r0, r2
   29f24:	6728      	str	r0, [r5, #112]	; 0x70
   29f26:	211b      	movs	r1, #27
   29f28:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   29f2c:	f00b f9fd 	bl	3532a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
   29f30:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
   29f34:	f885 801d 	strb.w	r8, [r5, #29]
   29f38:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   29f3c:	4640      	mov	r0, r8
   29f3e:	f88d 1000 	strb.w	r1, [sp]
   29f42:	9900      	ldr	r1, [sp, #0]
   29f44:	9100      	str	r1, [sp, #0]
   29f46:	f89d 1000 	ldrb.w	r1, [sp]
   29f4a:	b991      	cbnz	r1, 29f72 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
   29f4c:	e002      	b.n	29f54 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
   29f4e:	2001      	movs	r0, #1
   29f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29f54:	8831      	ldrh	r1, [r6, #0]
   29f56:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
   29f5a:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
   29f5e:	6839      	ldr	r1, [r7, #0]
   29f60:	66e1      	str	r1, [r4, #108]	; 0x6c
   29f62:	6879      	ldr	r1, [r7, #4]
   29f64:	6721      	str	r1, [r4, #112]	; 0x70
   29f66:	2202      	movs	r2, #2
   29f68:	4904      	ldr	r1, [pc, #16]	; (29f7c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
   29f6a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   29f6e:	f00a ff9b 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   29f72:	2000      	movs	r0, #0
   29f74:	e7ec      	b.n	29f50 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
   29f76:	0000      	.short	0x0000
   29f78:	f704492f 	.word	0xf704492f
   29f7c:	00035397 	.word	0x00035397

00029f80 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
   29f80:	b570      	push	{r4, r5, r6, lr}
   29f82:	1d0d      	adds	r5, r1, #4
   29f84:	6844      	ldr	r4, [r0, #4]
   29f86:	f004 f9ad 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   29f8a:	f641 0207 	movw	r2, #6151	; 0x1807
   29f8e:	4b05      	ldr	r3, [pc, #20]	; (29fa4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
   29f90:	4011      	ands	r1, r2
   29f92:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   29f96:	4018      	ands	r0, r3
   29f98:	4002      	ands	r2, r0
   29f9a:	f362 0007 	bfi	r0, r2, #0, #8
   29f9e:	6028      	str	r0, [r5, #0]
   29fa0:	6069      	str	r1, [r5, #4]
   29fa2:	bd70      	pop	{r4, r5, r6, pc}
   29fa4:	f704492f 	.word	0xf704492f

00029fa8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
   29fa8:	6841      	ldr	r1, [r0, #4]
   29faa:	b082      	sub	sp, #8
   29fac:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
   29fb0:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
   29fb4:	f88d 2000 	strb.w	r2, [sp]
   29fb8:	9a00      	ldr	r2, [sp, #0]
   29fba:	9200      	str	r2, [sp, #0]
   29fbc:	f89d 2000 	ldrb.w	r2, [sp]
   29fc0:	2a00      	cmp	r2, #0
   29fc2:	d10b      	bne.n	29fdc <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
   29fc4:	8809      	ldrh	r1, [r1, #0]
   29fc6:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
   29fca:	211a      	movs	r1, #26
   29fcc:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
   29fd0:	2202      	movs	r2, #2
   29fd2:	4903      	ldr	r1, [pc, #12]	; (29fe0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
   29fd4:	3060      	adds	r0, #96	; 0x60
   29fd6:	b002      	add	sp, #8
   29fd8:	f00a bf66 	b.w	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   29fdc:	b002      	add	sp, #8
   29fde:	4770      	bx	lr
   29fe0:	00035397 	.word	0x00035397

00029fe4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
   29fe4:	b570      	push	{r4, r5, r6, lr}
   29fe6:	6844      	ldr	r4, [r0, #4]
   29fe8:	460d      	mov	r5, r1
   29fea:	7803      	ldrb	r3, [r0, #0]
   29fec:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   29ff0:	3480      	adds	r4, #128	; 0x80
   29ff2:	2600      	movs	r6, #0
   29ff4:	2108      	movs	r1, #8
   29ff6:	4620      	mov	r0, r4
   29ff8:	f00a fbae 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   29ffc:	b920      	cbnz	r0, 2a008 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
   29ffe:	7b20      	ldrb	r0, [r4, #12]
   2a000:	0780      	lsls	r0, r0, #30
   2a002:	d501      	bpl.n	2a008 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
   2a004:	2001      	movs	r0, #1
   2a006:	bd70      	pop	{r4, r5, r6, pc}
   2a008:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   2a00c:	0780      	lsls	r0, r0, #30
   2a00e:	d419      	bmi.n	2a044 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
   2a010:	4628      	mov	r0, r5
   2a012:	f00a fedc 	bl	34dce <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
   2a016:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
   2a01a:	f835 0f05 	ldrh.w	r0, [r5, #5]!
   2a01e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
   2a022:	8868      	ldrh	r0, [r5, #2]
   2a024:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
   2a028:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   2a02c:	f040 0002 	orr.w	r0, r0, #2
   2a030:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
   2a034:	07c0      	lsls	r0, r0, #31
   2a036:	d009      	beq.n	2a04c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
   2a038:	2202      	movs	r2, #2
   2a03a:	4911      	ldr	r1, [pc, #68]	; (2a080 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
   2a03c:	f104 005e 	add.w	r0, r4, #94	; 0x5e
   2a040:	f00a ff46 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   2a044:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   2a048:	07c0      	lsls	r0, r0, #31
   2a04a:	d110      	bne.n	2a06e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
   2a04c:	68e0      	ldr	r0, [r4, #12]
   2a04e:	0781      	lsls	r1, r0, #30
   2a050:	d503      	bpl.n	2a05a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
   2a052:	214f      	movs	r1, #79	; 0x4f
   2a054:	2040      	movs	r0, #64	; 0x40
   2a056:	f7fd fcfb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a05a:	f040 0002 	orr.w	r0, r0, #2
   2a05e:	60e0      	str	r0, [r4, #12]
   2a060:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   2a064:	1c40      	adds	r0, r0, #1
   2a066:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
   2a06a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
   2a06e:	7f60      	ldrb	r0, [r4, #29]
   2a070:	2801      	cmp	r0, #1
   2a072:	d102      	bne.n	2a07a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
   2a074:	7766      	strb	r6, [r4, #29]
   2a076:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
   2a07a:	2000      	movs	r0, #0
   2a07c:	bd70      	pop	{r4, r5, r6, pc}
   2a07e:	0000      	.short	0x0000
   2a080:	00035445 	.word	0x00035445

0002a084 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
   2a084:	4a04      	ldr	r2, [pc, #16]	; (2a098 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
   2a086:	6892      	ldr	r2, [r2, #8]
   2a088:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
   2a08c:	434b      	muls	r3, r1
   2a08e:	4342      	muls	r2, r0
   2a090:	eb03 3022 	add.w	r0, r3, r2, asr #12
   2a094:	4770      	bx	lr
   2a096:	0000      	.short	0x0000
   2a098:	200000dc 	.word	0x200000dc

0002a09c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
   2a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a09e:	6844      	ldr	r4, [r0, #4]
   2a0a0:	4606      	mov	r6, r0
   2a0a2:	f104 0580 	add.w	r5, r4, #128	; 0x80
   2a0a6:	f000 f87b 	bl	2a1a0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
   2a0aa:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   2a0ae:	2901      	cmp	r1, #1
   2a0b0:	d11a      	bne.n	2a0e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
   2a0b2:	2800      	cmp	r0, #0
   2a0b4:	d018      	beq.n	2a0e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
   2a0b6:	6870      	ldr	r0, [r6, #4]
   2a0b8:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
   2a0bc:	f88d 1000 	strb.w	r1, [sp]
   2a0c0:	9900      	ldr	r1, [sp, #0]
   2a0c2:	9100      	str	r1, [sp, #0]
   2a0c4:	f89d 1000 	ldrb.w	r1, [sp]
   2a0c8:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   2a0cc:	2900      	cmp	r1, #0
   2a0ce:	d10b      	bne.n	2a0e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
   2a0d0:	8821      	ldrh	r1, [r4, #0]
   2a0d2:	8141      	strh	r1, [r0, #10]
   2a0d4:	7e69      	ldrb	r1, [r5, #25]
   2a0d6:	7301      	strb	r1, [r0, #12]
   2a0d8:	7ea9      	ldrb	r1, [r5, #26]
   2a0da:	7341      	strb	r1, [r0, #13]
   2a0dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a0e0:	2202      	movs	r2, #2
   2a0e2:	4902      	ldr	r1, [pc, #8]	; (2a0ec <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
   2a0e4:	f00a bee0 	b.w	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a0ea:	0000      	.short	0x0000
   2a0ec:	000354cd 	.word	0x000354cd
   2a0f0:	f500 6100 	add.w	r1, r0, #2048	; 0x800
   2a0f4:	4a0d      	ldr	r2, [pc, #52]	; (2a12c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
   2a0f6:	b510      	push	{r4, lr}
   2a0f8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
   2a0fc:	1309      	asrs	r1, r1, #12
   2a0fe:	1300      	asrs	r0, r0, #12
   2a100:	b24b      	sxtb	r3, r1
   2a102:	f992 4000 	ldrsb.w	r4, [r2]
   2a106:	4240      	negs	r0, r0
   2a108:	2100      	movs	r1, #0
   2a10a:	b240      	sxtb	r0, r0
   2a10c:	42a3      	cmp	r3, r4
   2a10e:	da02      	bge.n	2a116 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
   2a110:	f992 1002 	ldrsb.w	r1, [r2, #2]
   2a114:	e005      	b.n	2a122 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
   2a116:	f992 4001 	ldrsb.w	r4, [r2, #1]
   2a11a:	42a3      	cmp	r3, r4
   2a11c:	dd04      	ble.n	2a128 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
   2a11e:	f992 1003 	ldrsb.w	r1, [r2, #3]
   2a122:	4408      	add	r0, r1
   2a124:	f300 0107 	ssat	r1, #8, r0
   2a128:	4608      	mov	r0, r1
   2a12a:	bd10      	pop	{r4, pc}
   2a12c:	200000dc 	.word	0x200000dc
   2a130:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   2a134:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
   2a138:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
   2a13c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   2a140:	f00c f87c 	bl	3623c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
   2a144:	4606      	mov	r6, r0
   2a146:	68a0      	ldr	r0, [r4, #8]
   2a148:	f7ff ffd2 	bl	2a0f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
   2a14c:	0007      	movs	r7, r0
   2a14e:	d021      	beq.n	2a194 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
   2a150:	4620      	mov	r0, r4
   2a152:	f00b f9c3 	bl	354dc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
   2a156:	2800      	cmp	r0, #0
   2a158:	d01c      	beq.n	2a194 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
   2a15a:	8828      	ldrh	r0, [r5, #0]
   2a15c:	4669      	mov	r1, sp
   2a15e:	f00a fae4 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2a162:	b118      	cbz	r0, 2a16c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
   2a164:	2185      	movs	r1, #133	; 0x85
   2a166:	207a      	movs	r0, #122	; 0x7a
   2a168:	f7fd fc72 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a16c:	1c76      	adds	r6, r6, #1
   2a16e:	b2f1      	uxtb	r1, r6
   2a170:	2302      	movs	r3, #2
   2a172:	463a      	mov	r2, r7
   2a174:	4668      	mov	r0, sp
   2a176:	f00c f880 	bl	3627a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
   2a17a:	2800      	cmp	r0, #0
   2a17c:	d10a      	bne.n	2a194 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
   2a17e:	4806      	ldr	r0, [pc, #24]	; (2a198 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
   2a180:	4906      	ldr	r1, [pc, #24]	; (2a19c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
   2a182:	7900      	ldrb	r0, [r0, #4]
   2a184:	fba0 6501 	umull	r6, r5, r0, r1
   2a188:	f00d f887 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2a18c:	1980      	adds	r0, r0, r6
   2a18e:	4169      	adcs	r1, r5
   2a190:	e9c4 0100 	strd	r0, r1, [r4]
   2a194:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   2a198:	200000dc 	.word	0x200000dc
   2a19c:	000f4240 	.word	0x000f4240
   2a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a1a4:	4607      	mov	r7, r0
   2a1a6:	f7ff fa91 	bl	296cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   2a1aa:	687c      	ldr	r4, [r7, #4]
   2a1ac:	4605      	mov	r5, r0
   2a1ae:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
   2a1b2:	3480      	adds	r4, #128	; 0x80
   2a1b4:	287f      	cmp	r0, #127	; 0x7f
   2a1b6:	d042      	beq.n	2a23e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
   2a1b8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   2a1bc:	687e      	ldr	r6, [r7, #4]
   2a1be:	76a0      	strb	r0, [r4, #26]
   2a1c0:	4629      	mov	r1, r5
   2a1c2:	68a0      	ldr	r0, [r4, #8]
   2a1c4:	f7ff ff5e 	bl	2a084 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
   2a1c8:	60a0      	str	r0, [r4, #8]
   2a1ca:	481e      	ldr	r0, [pc, #120]	; (2a244 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
   2a1cc:	7940      	ldrb	r0, [r0, #5]
   2a1ce:	b1c0      	cbz	r0, 2a202 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
   2a1d0:	6878      	ldr	r0, [r7, #4]
   2a1d2:	f100 0880 	add.w	r8, r0, #128	; 0x80
   2a1d6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   2a1da:	f7ff ff89 	bl	2a0f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
   2a1de:	b180      	cbz	r0, 2a202 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
   2a1e0:	4640      	mov	r0, r8
   2a1e2:	f00b f97b 	bl	354dc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
   2a1e6:	b160      	cbz	r0, 2a202 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
   2a1e8:	6878      	ldr	r0, [r7, #4]
   2a1ea:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
   2a1ee:	4607      	mov	r7, r0
   2a1f0:	f004 fca2 	bl	2eb38 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
   2a1f4:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
   2a1f8:	4913      	ldr	r1, [pc, #76]	; (2a248 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
   2a1fa:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
   2a1fe:	f00a fe50 	bl	34ea2 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
   2a202:	f994 001b 	ldrsb.w	r0, [r4, #27]
   2a206:	2100      	movs	r1, #0
   2a208:	1a28      	subs	r0, r5, r0
   2a20a:	d500      	bpl.n	2a20e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
   2a20c:	4240      	negs	r0, r0
   2a20e:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
   2a212:	4282      	cmp	r2, r0
   2a214:	dc10      	bgt.n	2a238 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
   2a216:	2aff      	cmp	r2, #255	; 0xff
   2a218:	d00e      	beq.n	2a238 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
   2a21a:	7f20      	ldrb	r0, [r4, #28]
   2a21c:	1c40      	adds	r0, r0, #1
   2a21e:	b2c0      	uxtb	r0, r0
   2a220:	7720      	strb	r0, [r4, #28]
   2a222:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
   2a226:	4290      	cmp	r0, r2
   2a228:	d802      	bhi.n	2a230 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
   2a22a:	7ee0      	ldrb	r0, [r4, #27]
   2a22c:	287f      	cmp	r0, #127	; 0x7f
   2a22e:	d103      	bne.n	2a238 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
   2a230:	2000      	movs	r0, #0
   2a232:	76e5      	strb	r5, [r4, #27]
   2a234:	7720      	strb	r0, [r4, #28]
   2a236:	2101      	movs	r1, #1
   2a238:	4608      	mov	r0, r1
   2a23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a23e:	2000      	movs	r0, #0
   2a240:	e7fb      	b.n	2a23a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
   2a242:	0000      	.short	0x0000
   2a244:	200000dc 	.word	0x200000dc
   2a248:	0002a131 	.word	0x0002a131

0002a24c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
   2a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a24e:	f00b f961 	bl	35514 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
   2a252:	4604      	mov	r4, r0
   2a254:	460d      	mov	r5, r1
   2a256:	466a      	mov	r2, sp
   2a258:	f000 f862 	bl	2a320 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
   2a25c:	b108      	cbz	r0, 2a262 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
   2a25e:	2001      	movs	r0, #1
   2a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a262:	480f      	ldr	r0, [pc, #60]	; (2a2a0 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
   2a264:	7803      	ldrb	r3, [r0, #0]
   2a266:	7841      	ldrb	r1, [r0, #1]
   2a268:	428b      	cmp	r3, r1
   2a26a:	d101      	bne.n	2a270 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
   2a26c:	2000      	movs	r0, #0
   2a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a270:	461a      	mov	r2, r3
   2a272:	6841      	ldr	r1, [r0, #4]
   2a274:	e008      	b.n	2a288 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
   2a276:	bf00      	nop
   2a278:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
   2a27c:	1e52      	subs	r2, r2, #1
   2a27e:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
   2a282:	e9c6 7c00 	strd	r7, ip, [r6]
   2a286:	b2d2      	uxtb	r2, r2
   2a288:	f89d 6000 	ldrb.w	r6, [sp]
   2a28c:	42b2      	cmp	r2, r6
   2a28e:	d8f3      	bhi.n	2a278 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
   2a290:	b2f2      	uxtb	r2, r6
   2a292:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   2a296:	1c5b      	adds	r3, r3, #1
   2a298:	e9c1 4500 	strd	r4, r5, [r1]
   2a29c:	7003      	strb	r3, [r0, #0]
   2a29e:	e7de      	b.n	2a25e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
   2a2a0:	200000e8 	.word	0x200000e8

0002a2a4 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
   2a2a4:	b510      	push	{r4, lr}
   2a2a6:	0742      	lsls	r2, r0, #29
   2a2a8:	d003      	beq.n	2a2b2 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
   2a2aa:	2163      	movs	r1, #99	; 0x63
   2a2ac:	2048      	movs	r0, #72	; 0x48
   2a2ae:	f7fd fbcf 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a2b2:	b120      	cbz	r0, 2a2be <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
   2a2b4:	4a03      	ldr	r2, [pc, #12]	; (2a2c4 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
   2a2b6:	7051      	strb	r1, [r2, #1]
   2a2b8:	6050      	str	r0, [r2, #4]
   2a2ba:	2000      	movs	r0, #0
   2a2bc:	7010      	strb	r0, [r2, #0]
   2a2be:	00c8      	lsls	r0, r1, #3
   2a2c0:	bd10      	pop	{r4, pc}
   2a2c2:	0000      	.short	0x0000
   2a2c4:	200000e8 	.word	0x200000e8

0002a2c8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
   2a2c8:	b538      	push	{r3, r4, r5, lr}
   2a2ca:	f00b f923 	bl	35514 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
   2a2ce:	466a      	mov	r2, sp
   2a2d0:	f000 f826 	bl	2a320 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
   2a2d4:	2800      	cmp	r0, #0
   2a2d6:	d014      	beq.n	2a302 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
   2a2d8:	4a0a      	ldr	r2, [pc, #40]	; (2a304 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
   2a2da:	7810      	ldrb	r0, [r2, #0]
   2a2dc:	1e40      	subs	r0, r0, #1
   2a2de:	b2c1      	uxtb	r1, r0
   2a2e0:	7011      	strb	r1, [r2, #0]
   2a2e2:	f89d 0000 	ldrb.w	r0, [sp]
   2a2e6:	6852      	ldr	r2, [r2, #4]
   2a2e8:	e008      	b.n	2a2fc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
   2a2ea:	bf00      	nop
   2a2ec:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   2a2f0:	1c40      	adds	r0, r0, #1
   2a2f2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   2a2f6:	e9c3 4500 	strd	r4, r5, [r3]
   2a2fa:	b2c0      	uxtb	r0, r0
   2a2fc:	4288      	cmp	r0, r1
   2a2fe:	d3f5      	bcc.n	2a2ec <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
   2a300:	2001      	movs	r0, #1
   2a302:	bd38      	pop	{r3, r4, r5, pc}
   2a304:	200000e8 	.word	0x200000e8

0002a308 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
   2a308:	4901      	ldr	r1, [pc, #4]	; (2a310 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
   2a30a:	2000      	movs	r0, #0
   2a30c:	7008      	strb	r0, [r1, #0]
   2a30e:	4770      	bx	lr
   2a310:	200000e8 	.word	0x200000e8

0002a314 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
   2a314:	4801      	ldr	r0, [pc, #4]	; (2a31c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
   2a316:	7840      	ldrb	r0, [r0, #1]
   2a318:	4770      	bx	lr
   2a31a:	0000      	.short	0x0000
   2a31c:	200000e8 	.word	0x200000e8
   2a320:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a322:	4d20      	ldr	r5, [pc, #128]	; (2a3a4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
   2a324:	2300      	movs	r3, #0
   2a326:	7013      	strb	r3, [r2, #0]
   2a328:	782b      	ldrb	r3, [r5, #0]
   2a32a:	b323      	cbz	r3, 2a376 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
   2a32c:	2400      	movs	r4, #0
   2a32e:	1e5b      	subs	r3, r3, #1
   2a330:	b2db      	uxtb	r3, r3
   2a332:	f8d5 c004 	ldr.w	ip, [r5, #4]
   2a336:	e00b      	b.n	2a350 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
   2a338:	18e5      	adds	r5, r4, r3
   2a33a:	086d      	lsrs	r5, r5, #1
   2a33c:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
   2a340:	e9d6 7600 	ldrd	r7, r6, [r6]
   2a344:	1a3f      	subs	r7, r7, r0
   2a346:	418e      	sbcs	r6, r1
   2a348:	d201      	bcs.n	2a34e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
   2a34a:	462c      	mov	r4, r5
   2a34c:	e000      	b.n	2a350 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
   2a34e:	462b      	mov	r3, r5
   2a350:	1b1d      	subs	r5, r3, r4
   2a352:	2d01      	cmp	r5, #1
   2a354:	dcf0      	bgt.n	2a338 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
   2a356:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
   2a35a:	e9d6 5600 	ldrd	r5, r6, [r6]
   2a35e:	ea80 0705 	eor.w	r7, r0, r5
   2a362:	ea81 0e06 	eor.w	lr, r1, r6
   2a366:	ea57 070e 	orrs.w	r7, r7, lr
   2a36a:	d005      	beq.n	2a378 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
   2a36c:	1b45      	subs	r5, r0, r5
   2a36e:	eb71 0506 	sbcs.w	r5, r1, r6
   2a372:	d203      	bcs.n	2a37c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
   2a374:	7014      	strb	r4, [r2, #0]
   2a376:	e010      	b.n	2a39a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
   2a378:	7014      	strb	r4, [r2, #0]
   2a37a:	e011      	b.n	2a3a0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
   2a37c:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
   2a380:	e9d5 4500 	ldrd	r4, r5, [r5]
   2a384:	ea80 0604 	eor.w	r6, r0, r4
   2a388:	ea81 0705 	eor.w	r7, r1, r5
   2a38c:	433e      	orrs	r6, r7
   2a38e:	d006      	beq.n	2a39e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
   2a390:	1b00      	subs	r0, r0, r4
   2a392:	41a9      	sbcs	r1, r5
   2a394:	d300      	bcc.n	2a398 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
   2a396:	1c5b      	adds	r3, r3, #1
   2a398:	7013      	strb	r3, [r2, #0]
   2a39a:	2000      	movs	r0, #0
   2a39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a39e:	7013      	strb	r3, [r2, #0]
   2a3a0:	2001      	movs	r0, #1
   2a3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a3a4:	200000e8 	.word	0x200000e8

0002a3a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
   2a3a8:	b570      	push	{r4, r5, r6, lr}
   2a3aa:	4604      	mov	r4, r0
   2a3ac:	7c00      	ldrb	r0, [r0, #16]
   2a3ae:	b300      	cbz	r0, 2a3f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   2a3b0:	2802      	cmp	r0, #2
   2a3b2:	d01e      	beq.n	2a3f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
   2a3b4:	f05f 0001 	movs.w	r0, #1
   2a3b8:	f104 0151 	add.w	r1, r4, #81	; 0x51
   2a3bc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   2a3c0:	460d      	mov	r5, r1
   2a3c2:	b1c0      	cbz	r0, 2a3f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
   2a3c4:	7de0      	ldrb	r0, [r4, #23]
   2a3c6:	b1f0      	cbz	r0, 2a406 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
   2a3c8:	f8d4 0011 	ldr.w	r0, [r4, #17]
   2a3cc:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
   2a3d0:	f8b4 0015 	ldrh.w	r0, [r4, #21]
   2a3d4:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
   2a3d8:	7c20      	ldrb	r0, [r4, #16]
   2a3da:	f00b f8cb 	bl	35574 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
   2a3de:	7620      	strb	r0, [r4, #24]
   2a3e0:	2008      	movs	r0, #8
   2a3e2:	7660      	strb	r0, [r4, #25]
   2a3e4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   2a3e8:	4629      	mov	r1, r5
   2a3ea:	f00b f8af 	bl	3554c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
   2a3ee:	b9a8      	cbnz	r0, 2a41c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
   2a3f0:	e00e      	b.n	2a410 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
   2a3f2:	2000      	movs	r0, #0
   2a3f4:	e7e0      	b.n	2a3b8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
   2a3f6:	2000      	movs	r0, #0
   2a3f8:	f7fe fa8e 	bl	28918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   2a3fc:	2800      	cmp	r0, #0
   2a3fe:	d1eb      	bne.n	2a3d8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
   2a400:	f240 41ba 	movw	r1, #1210	; 0x4ba
   2a404:	e001      	b.n	2a40a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
   2a406:	f240 41be 	movw	r1, #1214	; 0x4be
   2a40a:	202d      	movs	r0, #45	; 0x2d
   2a40c:	f7fd fb20 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a410:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   2a414:	4629      	mov	r1, r5
   2a416:	f00b f8a2 	bl	3555e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
   2a41a:	b100      	cbz	r0, 2a41e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
   2a41c:	2001      	movs	r0, #1
   2a41e:	76a0      	strb	r0, [r4, #26]
   2a420:	7e20      	ldrb	r0, [r4, #24]
   2a422:	b130      	cbz	r0, 2a432 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
   2a424:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
   2a428:	f104 0158 	add.w	r1, r4, #88	; 0x58
   2a42c:	f00a f955 	bl	346da <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   2a430:	7660      	strb	r0, [r4, #25]
   2a432:	f7ff f82d 	bl	29490 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   2a436:	490c      	ldr	r1, [pc, #48]	; (2a468 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
   2a438:	fba0 2301 	umull	r2, r3, r0, r1
   2a43c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2a440:	f00b fa0a 	bl	35858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
   2a444:	2100      	movs	r1, #0
   2a446:	4620      	mov	r0, r4
   2a448:	f00b f9bf 	bl	357ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
   2a44c:	2000      	movs	r0, #0
   2a44e:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
   2a452:	78a0      	ldrb	r0, [r4, #2]
   2a454:	0740      	lsls	r0, r0, #29
   2a456:	d505      	bpl.n	2a464 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
   2a458:	4620      	mov	r0, r4
   2a45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a45e:	2100      	movs	r1, #0
   2a460:	f000 bdf0 	b.w	2b044 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
   2a464:	bd70      	pop	{r4, r5, r6, pc}
   2a466:	0000      	.short	0x0000
   2a468:	000f4240 	.word	0x000f4240

0002a46c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
   2a46c:	b530      	push	{r4, r5, lr}
   2a46e:	460c      	mov	r4, r1
   2a470:	b08d      	sub	sp, #52	; 0x34
   2a472:	4605      	mov	r5, r0
   2a474:	4601      	mov	r1, r0
   2a476:	2224      	movs	r2, #36	; 0x24
   2a478:	a802      	add	r0, sp, #8
   2a47a:	f00d f8a0 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2a47e:	a80b      	add	r0, sp, #44	; 0x2c
   2a480:	f00b fa47 	bl	35912 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
   2a484:	7aa0      	ldrb	r0, [r4, #10]
   2a486:	f88d 0018 	strb.w	r0, [sp, #24]
   2a48a:	7820      	ldrb	r0, [r4, #0]
   2a48c:	f88d 0008 	strb.w	r0, [sp, #8]
   2a490:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   2a494:	f8ad 0000 	strh.w	r0, [sp]
   2a498:	f89d 0000 	ldrb.w	r0, [sp]
   2a49c:	f000 0101 	and.w	r1, r0, #1
   2a4a0:	f3c0 0240 	ubfx	r2, r0, #1, #1
   2a4a4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   2a4a8:	f3c0 0280 	ubfx	r2, r0, #2, #1
   2a4ac:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
   2a4b0:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   2a4b4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
   2a4b8:	f3c0 1200 	ubfx	r2, r0, #4, #1
   2a4bc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   2a4c0:	f3c0 1240 	ubfx	r2, r0, #5, #1
   2a4c4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
   2a4c8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2a4cc:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
   2a4d0:	f8ad 000a 	strh.w	r0, [sp, #10]
   2a4d4:	7d20      	ldrb	r0, [r4, #20]
   2a4d6:	2801      	cmp	r0, #1
   2a4d8:	d006      	beq.n	2a4e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   2a4da:	2802      	cmp	r0, #2
   2a4dc:	d004      	beq.n	2a4e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
   2a4de:	f240 21e9 	movw	r1, #745	; 0x2e9
   2a4e2:	2006      	movs	r0, #6
   2a4e4:	f7fd fab4 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a4e8:	f88d 000c 	strb.w	r0, [sp, #12]
   2a4ec:	7a61      	ldrb	r1, [r4, #9]
   2a4ee:	a80b      	add	r0, sp, #44	; 0x2c
   2a4f0:	f00b f9f6 	bl	358e0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
   2a4f4:	7d20      	ldrb	r0, [r4, #20]
   2a4f6:	2101      	movs	r1, #1
   2a4f8:	2802      	cmp	r0, #2
   2a4fa:	d102      	bne.n	2a502 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
   2a4fc:	7d60      	ldrb	r0, [r4, #21]
   2a4fe:	1c40      	adds	r0, r0, #1
   2a500:	b2c1      	uxtb	r1, r0
   2a502:	7ea0      	ldrb	r0, [r4, #26]
   2a504:	1c40      	adds	r0, r0, #1
   2a506:	b2c2      	uxtb	r2, r0
   2a508:	a80b      	add	r0, sp, #44	; 0x2c
   2a50a:	f00b f9b0 	bl	3586e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
   2a50e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   2a512:	0700      	lsls	r0, r0, #28
   2a514:	d501      	bpl.n	2a51a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
   2a516:	2000      	movs	r0, #0
   2a518:	e020      	b.n	2a55c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
   2a51a:	a80b      	add	r0, sp, #44	; 0x2c
   2a51c:	f00b f9b9 	bl	35892 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   2a520:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   2a524:	2228      	movs	r2, #40	; 0x28
   2a526:	f000 fe31 	bl	2b18c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
   2a52a:	f240 2171 	movw	r1, #625	; 0x271
   2a52e:	f200 20db 	addw	r0, r0, #731	; 0x2db
   2a532:	fbb0 f0f1 	udiv	r0, r0, r1
   2a536:	4348      	muls	r0, r1
   2a538:	f8d4 1002 	ldr.w	r1, [r4, #2]
   2a53c:	f240 2371 	movw	r3, #625	; 0x271
   2a540:	0a0a      	lsrs	r2, r1, #8
   2a542:	f240 2171 	movw	r1, #625	; 0x271
   2a546:	434a      	muls	r2, r1
   2a548:	f8d4 1005 	ldr.w	r1, [r4, #5]
   2a54c:	0a09      	lsrs	r1, r1, #8
   2a54e:	4359      	muls	r1, r3
   2a550:	4290      	cmp	r0, r2
   2a552:	d801      	bhi.n	2a558 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
   2a554:	9204      	str	r2, [sp, #16]
   2a556:	e004      	b.n	2a562 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   2a558:	4288      	cmp	r0, r1
   2a55a:	d801      	bhi.n	2a560 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
   2a55c:	9004      	str	r0, [sp, #16]
   2a55e:	e000      	b.n	2a562 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
   2a560:	9104      	str	r1, [sp, #16]
   2a562:	7ca0      	ldrb	r0, [r4, #18]
   2a564:	f88d 0017 	strb.w	r0, [sp, #23]
   2a568:	7e20      	ldrb	r0, [r4, #24]
   2a56a:	2801      	cmp	r0, #1
   2a56c:	d000      	beq.n	2a570 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
   2a56e:	2000      	movs	r0, #0
   2a570:	f88d 0014 	strb.w	r0, [sp, #20]
   2a574:	6b68      	ldr	r0, [r5, #52]	; 0x34
   2a576:	f009 ff18 	bl	343aa <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
   2a57a:	6b68      	ldr	r0, [r5, #52]	; 0x34
   2a57c:	f009 ffbd 	bl	344fa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
   2a580:	2224      	movs	r2, #36	; 0x24
   2a582:	a902      	add	r1, sp, #8
   2a584:	4628      	mov	r0, r5
   2a586:	f00d f81a 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   2a58a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2a58c:	62a8      	str	r0, [r5, #40]	; 0x28
   2a58e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
   2a592:	85a8      	strh	r0, [r5, #44]	; 0x2c
   2a594:	7ae0      	ldrb	r0, [r4, #11]
   2a596:	b168      	cbz	r0, 2a5b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   2a598:	2802      	cmp	r0, #2
   2a59a:	d00b      	beq.n	2a5b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
   2a59c:	f05f 0001 	movs.w	r0, #1
   2a5a0:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
   2a5a4:	68e0      	ldr	r0, [r4, #12]
   2a5a6:	65a8      	str	r0, [r5, #88]	; 0x58
   2a5a8:	8a20      	ldrh	r0, [r4, #16]
   2a5aa:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
   2a5ae:	b00d      	add	sp, #52	; 0x34
   2a5b0:	2000      	movs	r0, #0
   2a5b2:	bd30      	pop	{r4, r5, pc}
   2a5b4:	2000      	movs	r0, #0
   2a5b6:	e7f3      	b.n	2a5a0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0002a5b8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
   2a5b8:	4a0a      	ldr	r2, [pc, #40]	; (2a5e4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
   2a5ba:	b510      	push	{r4, lr}
   2a5bc:	2100      	movs	r1, #0
   2a5be:	7011      	strb	r1, [r2, #0]
   2a5c0:	4c09      	ldr	r4, [pc, #36]	; (2a5e8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
   2a5c2:	6060      	str	r0, [r4, #4]
   2a5c4:	f000 f822 	bl	2a60c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   2a5c8:	b110      	cbz	r0, 2a5d0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
   2a5ca:	f240 312e 	movw	r1, #814	; 0x32e
   2a5ce:	e004      	b.n	2a5da <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
   2a5d0:	68a0      	ldr	r0, [r4, #8]
   2a5d2:	2800      	cmp	r0, #0
   2a5d4:	d104      	bne.n	2a5e0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
   2a5d6:	f240 3131 	movw	r1, #817	; 0x331
   2a5da:	202d      	movs	r0, #45	; 0x2d
   2a5dc:	f7fd fa38 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a5e0:	bd10      	pop	{r4, pc}
   2a5e2:	0000      	.short	0x0000
   2a5e4:	20001240 	.word	0x20001240
   2a5e8:	200000f0 	.word	0x200000f0

0002a5ec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
   2a5ec:	4902      	ldr	r1, [pc, #8]	; (2a5f8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
   2a5ee:	4801      	ldr	r0, [pc, #4]	; (2a5f4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
   2a5f0:	6088      	str	r0, [r1, #8]
   2a5f2:	4770      	bx	lr
   2a5f4:	0002b174 	.word	0x0002b174
   2a5f8:	200000f0 	.word	0x200000f0

0002a5fc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
   2a5fc:	4902      	ldr	r1, [pc, #8]	; (2a608 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
   2a5fe:	6008      	str	r0, [r1, #0]
   2a600:	6889      	ldr	r1, [r1, #8]
   2a602:	6809      	ldr	r1, [r1, #0]
   2a604:	4708      	bx	r1
   2a606:	0000      	.short	0x0000
   2a608:	200000f0 	.word	0x200000f0

0002a60c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
   2a60c:	4808      	ldr	r0, [pc, #32]	; (2a630 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   2a60e:	b510      	push	{r4, lr}
   2a610:	7800      	ldrb	r0, [r0, #0]
   2a612:	b110      	cbz	r0, 2a61a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
   2a614:	240c      	movs	r4, #12
   2a616:	4620      	mov	r0, r4
   2a618:	bd10      	pop	{r4, pc}
   2a61a:	2400      	movs	r4, #0
   2a61c:	2218      	movs	r2, #24
   2a61e:	4621      	mov	r1, r4
   2a620:	4803      	ldr	r0, [pc, #12]	; (2a630 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
   2a622:	f00d f846 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2a626:	f004 f8d9 	bl	2e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   2a62a:	f003 fefd 	bl	2e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   2a62e:	e7f2      	b.n	2a616 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
   2a630:	20001240 	.word	0x20001240

0002a634 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
   2a634:	4904      	ldr	r1, [pc, #16]	; (2a648 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
   2a636:	b510      	push	{r4, lr}
   2a638:	7809      	ldrb	r1, [r1, #0]
   2a63a:	2901      	cmp	r1, #1
   2a63c:	d101      	bne.n	2a642 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
   2a63e:	f000 fbd5 	bl	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2a642:	2000      	movs	r0, #0
   2a644:	bd10      	pop	{r4, pc}
   2a646:	0000      	.short	0x0000
   2a648:	20001240 	.word	0x20001240

0002a64c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
   2a64c:	4902      	ldr	r1, [pc, #8]	; (2a658 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
   2a64e:	4801      	ldr	r0, [pc, #4]	; (2a654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
   2a650:	6008      	str	r0, [r1, #0]
   2a652:	4770      	bx	lr
   2a654:	0002af19 	.word	0x0002af19
   2a658:	200000fc 	.word	0x200000fc

0002a65c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
   2a65c:	b510      	push	{r4, lr}
   2a65e:	4604      	mov	r4, r0
   2a660:	7880      	ldrb	r0, [r0, #2]
   2a662:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2a666:	b158      	cbz	r0, 2a680 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
   2a668:	233c      	movs	r3, #60	; 0x3c
   2a66a:	22ff      	movs	r2, #255	; 0xff
   2a66c:	4620      	mov	r0, r4
   2a66e:	69e1      	ldr	r1, [r4, #28]
   2a670:	f000 fbe2 	bl	2ae38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
   2a674:	2202      	movs	r2, #2
   2a676:	4904      	ldr	r1, [pc, #16]	; (2a688 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
   2a678:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   2a67c:	f00a fc14 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2a680:	2001      	movs	r0, #1
   2a682:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
   2a686:	bd10      	pop	{r4, pc}
   2a688:	00035763 	.word	0x00035763
   2a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a690:	000f      	movs	r7, r1
   2a692:	4604      	mov	r4, r0
   2a694:	d023      	beq.n	2a6de <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
   2a696:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2a69a:	4605      	mov	r5, r0
   2a69c:	f00b f922 	bl	358e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   2a6a0:	b9b0      	cbnz	r0, 2a6d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
   2a6a2:	78a0      	ldrb	r0, [r4, #2]
   2a6a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2a6a8:	b350      	cbz	r0, 2a700 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
   2a6aa:	4628      	mov	r0, r5
   2a6ac:	f00b f8f1 	bl	35892 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   2a6b0:	4606      	mov	r6, r0
   2a6b2:	4628      	mov	r0, r5
   2a6b4:	f00b f916 	bl	358e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   2a6b8:	1a30      	subs	r0, r6, r0
   2a6ba:	b2c0      	uxtb	r0, r0
   2a6bc:	f00b f967 	bl	3598e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   2a6c0:	4601      	mov	r1, r0
   2a6c2:	4835      	ldr	r0, [pc, #212]	; (2a798 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
   2a6c4:	6842      	ldr	r2, [r0, #4]
   2a6c6:	4411      	add	r1, r2
   2a6c8:	6041      	str	r1, [r0, #4]
   2a6ca:	4628      	mov	r0, r5
   2a6cc:	f00b f928 	bl	35920 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   2a6d0:	4628      	mov	r0, r5
   2a6d2:	f00b f8ea 	bl	358aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   2a6d6:	4601      	mov	r1, r0
   2a6d8:	4620      	mov	r0, r4
   2a6da:	f00b f8b2 	bl	35842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
   2a6de:	4d2f      	ldr	r5, [pc, #188]	; (2a79c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
   2a6e0:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
   2a6e4:	2100      	movs	r1, #0
   2a6e6:	6868      	ldr	r0, [r5, #4]
   2a6e8:	8001      	strh	r1, [r0, #0]
   2a6ea:	f00b f823 	bl	35734 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   2a6ee:	8860      	ldrh	r0, [r4, #2]
   2a6f0:	2813      	cmp	r0, #19
   2a6f2:	d013      	beq.n	2a71c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
   2a6f4:	dc09      	bgt.n	2a70a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
   2a6f6:	2810      	cmp	r0, #16
   2a6f8:	d036      	beq.n	2a768 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
   2a6fa:	2812      	cmp	r0, #18
   2a6fc:	d109      	bne.n	2a712 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
   2a6fe:	e031      	b.n	2a764 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
   2a700:	4620      	mov	r0, r4
   2a702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a706:	f000 bb71 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2a70a:	2815      	cmp	r0, #21
   2a70c:	d00f      	beq.n	2a72e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
   2a70e:	281d      	cmp	r0, #29
   2a710:	d00d      	beq.n	2a72e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
   2a712:	f240 6173 	movw	r1, #1651	; 0x673
   2a716:	202d      	movs	r0, #45	; 0x2d
   2a718:	f7fd f99a 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a71c:	2100      	movs	r1, #0
   2a71e:	6868      	ldr	r0, [r5, #4]
   2a720:	f00a fa40 	bl	34ba4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   2a724:	2101      	movs	r1, #1
   2a726:	6868      	ldr	r0, [r5, #4]
   2a728:	f00b f804 	bl	35734 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   2a72c:	e020      	b.n	2a770 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
   2a72e:	2101      	movs	r1, #1
   2a730:	6868      	ldr	r0, [r5, #4]
   2a732:	f00a fa37 	bl	34ba4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   2a736:	2101      	movs	r1, #1
   2a738:	6868      	ldr	r0, [r5, #4]
   2a73a:	f00a fffb 	bl	35734 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
   2a73e:	b136      	cbz	r6, 2a74e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
   2a740:	f104 015f 	add.w	r1, r4, #95	; 0x5f
   2a744:	6868      	ldr	r0, [r5, #4]
   2a746:	f00a fa48 	bl	34bda <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   2a74a:	2101      	movs	r1, #1
   2a74c:	e006      	b.n	2a75c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
   2a74e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   2a752:	6868      	ldr	r0, [r5, #4]
   2a754:	f00a fa41 	bl	34bda <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   2a758:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
   2a75c:	6868      	ldr	r0, [r5, #4]
   2a75e:	f00a fa42 	bl	34be6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   2a762:	e005      	b.n	2a770 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
   2a764:	2106      	movs	r1, #6
   2a766:	e000      	b.n	2a76a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
   2a768:	2102      	movs	r1, #2
   2a76a:	6868      	ldr	r0, [r5, #4]
   2a76c:	f00a fa1a 	bl	34ba4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   2a770:	4620      	mov	r0, r4
   2a772:	f000 fcdd 	bl	2b130 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
   2a776:	8860      	ldrh	r0, [r4, #2]
   2a778:	281d      	cmp	r0, #29
   2a77a:	d007      	beq.n	2a78c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
   2a77c:	2815      	cmp	r0, #21
   2a77e:	d005      	beq.n	2a78c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
   2a780:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   2a784:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2a786:	6868      	ldr	r0, [r5, #4]
   2a788:	f00a f9fc 	bl	34b84 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
   2a78c:	4639      	mov	r1, r7
   2a78e:	4620      	mov	r0, r4
   2a790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a794:	f000 b9f4 	b.w	2ab80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
   2a798:	20001240 	.word	0x20001240
   2a79c:	200000f0 	.word	0x200000f0
   2a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a7a4:	4d2f      	ldr	r5, [pc, #188]	; (2a864 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
   2a7a6:	4680      	mov	r8, r0
   2a7a8:	7828      	ldrb	r0, [r5, #0]
   2a7aa:	2802      	cmp	r0, #2
   2a7ac:	d005      	beq.n	2a7ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
   2a7ae:	7828      	ldrb	r0, [r5, #0]
   2a7b0:	2803      	cmp	r0, #3
   2a7b2:	d002      	beq.n	2a7ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
   2a7b4:	f640 512d 	movw	r1, #3373	; 0xd2d
   2a7b8:	e02b      	b.n	2a812 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
   2a7ba:	4c2b      	ldr	r4, [pc, #172]	; (2a868 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
   2a7bc:	6826      	ldr	r6, [r4, #0]
   2a7be:	7b30      	ldrb	r0, [r6, #12]
   2a7c0:	b118      	cbz	r0, 2a7ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
   2a7c2:	f7fe ff83 	bl	296cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   2a7c6:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
   2a7ca:	f8d4 c004 	ldr.w	ip, [r4, #4]
   2a7ce:	2700      	movs	r7, #0
   2a7d0:	f1b8 0f00 	cmp.w	r8, #0
   2a7d4:	f89c 0000 	ldrb.w	r0, [ip]
   2a7d8:	f000 060f 	and.w	r6, r0, #15
   2a7dc:	d027      	beq.n	2a82e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
   2a7de:	6821      	ldr	r1, [r4, #0]
   2a7e0:	09c0      	lsrs	r0, r0, #7
   2a7e2:	f101 0351 	add.w	r3, r1, #81	; 0x51
   2a7e6:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   2a7ea:	f10c 0109 	add.w	r1, ip, #9
   2a7ee:	f009 fedc 	bl	345aa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   2a7f2:	b1e0      	cbz	r0, 2a82e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
   2a7f4:	4639      	mov	r1, r7
   2a7f6:	6860      	ldr	r0, [r4, #4]
   2a7f8:	f00a f9b4 	bl	34b64 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
   2a7fc:	b1b8      	cbz	r0, 2a82e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
   2a7fe:	782a      	ldrb	r2, [r5, #0]
   2a800:	6820      	ldr	r0, [r4, #0]
   2a802:	4631      	mov	r1, r6
   2a804:	2a02      	cmp	r2, #2
   2a806:	d007      	beq.n	2a818 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
   2a808:	782a      	ldrb	r2, [r5, #0]
   2a80a:	2a03      	cmp	r2, #3
   2a80c:	d004      	beq.n	2a818 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
   2a80e:	f640 5106 	movw	r1, #3334	; 0xd06
   2a812:	202d      	movs	r0, #45	; 0x2d
   2a814:	f7fd f91c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a818:	68a2      	ldr	r2, [r4, #8]
   2a81a:	782b      	ldrb	r3, [r5, #0]
   2a81c:	6952      	ldr	r2, [r2, #20]
   2a81e:	f06f 0607 	mvn.w	r6, #7
   2a822:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2a826:	58d2      	ldr	r2, [r2, r3]
   2a828:	4790      	blx	r2
   2a82a:	4606      	mov	r6, r0
   2a82c:	e000      	b.n	2a830 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
   2a82e:	2601      	movs	r6, #1
   2a830:	7ba8      	ldrb	r0, [r5, #14]
   2a832:	b118      	cbz	r0, 2a83c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
   2a834:	f003 ffd2 	bl	2e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   2a838:	f003 fdf6 	bl	2e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   2a83c:	2e00      	cmp	r6, #0
   2a83e:	d00f      	beq.n	2a860 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
   2a840:	6820      	ldr	r0, [r4, #0]
   2a842:	f00b f8ba 	bl	359ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   2a846:	b130      	cbz	r0, 2a856 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
   2a848:	f003 ffea 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   2a84c:	68a0      	ldr	r0, [r4, #8]
   2a84e:	6880      	ldr	r0, [r0, #8]
   2a850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a854:	4700      	bx	r0
   2a856:	6820      	ldr	r0, [r4, #0]
   2a858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a85c:	f000 bac6 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2a860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a864:	20001240 	.word	0x20001240
   2a868:	200000f0 	.word	0x200000f0
   2a86c:	b510      	push	{r4, lr}
   2a86e:	2903      	cmp	r1, #3
   2a870:	d002      	beq.n	2a878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
   2a872:	2905      	cmp	r1, #5
   2a874:	d10a      	bne.n	2a88c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
   2a876:	e002      	b.n	2a87e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
   2a878:	f000 fbb2 	bl	2afe0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
   2a87c:	e003      	b.n	2a886 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
   2a87e:	4904      	ldr	r1, [pc, #16]	; (2a890 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
   2a880:	6809      	ldr	r1, [r1, #0]
   2a882:	b109      	cbz	r1, 2a888 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
   2a884:	4788      	blx	r1
   2a886:	b108      	cbz	r0, 2a88c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
   2a888:	2000      	movs	r0, #0
   2a88a:	bd10      	pop	{r4, pc}
   2a88c:	2001      	movs	r0, #1
   2a88e:	bd10      	pop	{r4, pc}
   2a890:	200000fc 	.word	0x200000fc
   2a894:	4a09      	ldr	r2, [pc, #36]	; (2a8bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
   2a896:	0003      	movs	r3, r0
   2a898:	6810      	ldr	r0, [r2, #0]
   2a89a:	d001      	beq.n	2a8a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
   2a89c:	f000 baa6 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2a8a0:	2900      	cmp	r1, #0
   2a8a2:	d009      	beq.n	2a8b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
   2a8a4:	6891      	ldr	r1, [r2, #8]
   2a8a6:	4a06      	ldr	r2, [pc, #24]	; (2a8c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
   2a8a8:	6909      	ldr	r1, [r1, #16]
   2a8aa:	7812      	ldrb	r2, [r2, #0]
   2a8ac:	f06f 030f 	mvn.w	r3, #15
   2a8b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2a8b4:	5889      	ldr	r1, [r1, r2]
   2a8b6:	4708      	bx	r1
   2a8b8:	4770      	bx	lr
   2a8ba:	0000      	.short	0x0000
   2a8bc:	200000f0 	.word	0x200000f0
   2a8c0:	20001240 	.word	0x20001240
   2a8c4:	b570      	push	{r4, r5, r6, lr}
   2a8c6:	4604      	mov	r4, r0
   2a8c8:	8840      	ldrh	r0, [r0, #2]
   2a8ca:	2810      	cmp	r0, #16
   2a8cc:	d019      	beq.n	2a902 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
   2a8ce:	4d10      	ldr	r5, [pc, #64]	; (2a910 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
   2a8d0:	7ba8      	ldrb	r0, [r5, #14]
   2a8d2:	b120      	cbz	r0, 2a8de <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
   2a8d4:	f003 fdc8 	bl	2e468 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
   2a8d8:	2040      	movs	r0, #64	; 0x40
   2a8da:	f003 ff8d 	bl	2e7f8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
   2a8de:	480d      	ldr	r0, [pc, #52]	; (2a914 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
   2a8e0:	6840      	ldr	r0, [r0, #4]
   2a8e2:	f004 fa0f 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   2a8e6:	78a0      	ldrb	r0, [r4, #2]
   2a8e8:	0740      	lsls	r0, r0, #29
   2a8ea:	d404      	bmi.n	2a8f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
   2a8ec:	2100      	movs	r1, #0
   2a8ee:	7922      	ldrb	r2, [r4, #4]
   2a8f0:	4608      	mov	r0, r1
   2a8f2:	f004 fa8f 	bl	2ee14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   2a8f6:	2000      	movs	r0, #0
   2a8f8:	f004 f8b4 	bl	2ea64 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
   2a8fc:	2002      	movs	r0, #2
   2a8fe:	7028      	strb	r0, [r5, #0]
   2a900:	bd70      	pop	{r4, r5, r6, pc}
   2a902:	4620      	mov	r0, r4
   2a904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a908:	2101      	movs	r1, #1
   2a90a:	f7ff bebf 	b.w	2a68c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
   2a90e:	0000      	.short	0x0000
   2a910:	20001240 	.word	0x20001240
   2a914:	200000f0 	.word	0x200000f0
   2a918:	b510      	push	{r4, lr}
   2a91a:	4c12      	ldr	r4, [pc, #72]	; (2a964 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
   2a91c:	6820      	ldr	r0, [r4, #0]
   2a91e:	f000 f825 	bl	2a96c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
   2a922:	6820      	ldr	r0, [r4, #0]
   2a924:	f00b f849 	bl	359ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
   2a928:	2800      	cmp	r0, #0
   2a92a:	6820      	ldr	r0, [r4, #0]
   2a92c:	d00b      	beq.n	2a946 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
   2a92e:	490e      	ldr	r1, [pc, #56]	; (2a968 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
   2a930:	780a      	ldrb	r2, [r1, #0]
   2a932:	2a02      	cmp	r2, #2
   2a934:	d00b      	beq.n	2a94e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
   2a936:	780a      	ldrb	r2, [r1, #0]
   2a938:	2a03      	cmp	r2, #3
   2a93a:	d008      	beq.n	2a94e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
   2a93c:	f640 4137 	movw	r1, #3127	; 0xc37
   2a940:	202d      	movs	r0, #45	; 0x2d
   2a942:	f7fd f885 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2a946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a94a:	f000 ba4f 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2a94e:	68a2      	ldr	r2, [r4, #8]
   2a950:	7809      	ldrb	r1, [r1, #0]
   2a952:	68d2      	ldr	r2, [r2, #12]
   2a954:	f06f 0307 	mvn.w	r3, #7
   2a958:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2a95c:	5851      	ldr	r1, [r2, r1]
   2a95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a962:	4708      	bx	r1
   2a964:	200000f0 	.word	0x200000f0
   2a968:	20001240 	.word	0x20001240
   2a96c:	b510      	push	{r4, lr}
   2a96e:	7b01      	ldrb	r1, [r0, #12]
   2a970:	b121      	cbz	r1, 2a97c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
   2a972:	4604      	mov	r4, r0
   2a974:	f7fe feaa 	bl	296cc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
   2a978:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
   2a97c:	4805      	ldr	r0, [pc, #20]	; (2a994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
   2a97e:	7b80      	ldrb	r0, [r0, #14]
   2a980:	2800      	cmp	r0, #0
   2a982:	d005      	beq.n	2a990 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
   2a984:	f003 ff2a 	bl	2e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   2a988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a98c:	f003 bd4c 	b.w	2e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   2a990:	bd10      	pop	{r4, pc}
   2a992:	0000      	.short	0x0000
   2a994:	20001240 	.word	0x20001240

0002a998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
   2a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a99c:	4d5c      	ldr	r5, [pc, #368]	; (2ab10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
   2a99e:	4604      	mov	r4, r0
   2a9a0:	b086      	sub	sp, #24
   2a9a2:	7828      	ldrb	r0, [r5, #0]
   2a9a4:	bbe8      	cbnz	r0, 2aa22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
   2a9a6:	7820      	ldrb	r0, [r4, #0]
   2a9a8:	28ff      	cmp	r0, #255	; 0xff
   2a9aa:	d04b      	beq.n	2aa44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
   2a9ac:	f04f 0800 	mov.w	r8, #0
   2a9b0:	f8a5 800c 	strh.w	r8, [r5, #12]
   2a9b4:	f8c5 8004 	str.w	r8, [r5, #4]
   2a9b8:	f885 8001 	strb.w	r8, [r5, #1]
   2a9bc:	f885 8002 	strb.w	r8, [r5, #2]
   2a9c0:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
   2a9c4:	4b53      	ldr	r3, [pc, #332]	; (2ab14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
   2a9c6:	4e54      	ldr	r6, [pc, #336]	; (2ab18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
   2a9c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a9ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   2a9ce:	68b0      	ldr	r0, [r6, #8]
   2a9d0:	6840      	ldr	r0, [r0, #4]
   2a9d2:	9003      	str	r0, [sp, #12]
   2a9d4:	4668      	mov	r0, sp
   2a9d6:	f004 f819 	bl	2ea0c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
   2a9da:	f004 f8ed 	bl	2ebb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
   2a9de:	f003 fefd 	bl	2e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   2a9e2:	f003 fd21 	bl	2e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   2a9e6:	484d      	ldr	r0, [pc, #308]	; (2ab1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
   2a9e8:	f004 fa46 	bl	2ee78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
   2a9ec:	484c      	ldr	r0, [pc, #304]	; (2ab20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
   2a9ee:	f004 fa4d 	bl	2ee8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
   2a9f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2a9f6:	4607      	mov	r7, r0
   2a9f8:	f00a ff92 	bl	35920 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
   2a9fc:	4638      	mov	r0, r7
   2a9fe:	f00a ff54 	bl	358aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
   2aa02:	4601      	mov	r1, r0
   2aa04:	4620      	mov	r0, r4
   2aa06:	f00a ff1c 	bl	35842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
   2aa0a:	f994 000e 	ldrsb.w	r0, [r4, #14]
   2aa0e:	f004 f957 	bl	2ecc0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
   2aa12:	7921      	ldrb	r1, [r4, #4]
   2aa14:	2000      	movs	r0, #0
   2aa16:	f003 ff8d 	bl	2e934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
   2aa1a:	2101      	movs	r1, #1
   2aa1c:	60a8      	str	r0, [r5, #8]
   2aa1e:	b1a8      	cbz	r0, 2aa4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
   2aa20:	e000      	b.n	2aa24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
   2aa22:	e00f      	b.n	2aa44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
   2aa24:	f104 0138 	add.w	r1, r4, #56	; 0x38
   2aa28:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2aa2a:	f009 fd2d 	bl	34488 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
   2aa2e:	4607      	mov	r7, r0
   2aa30:	f104 0140 	add.w	r1, r4, #64	; 0x40
   2aa34:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2aa36:	f009 fd2a 	bl	3448e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
   2aa3a:	b14f      	cbz	r7, 2aa50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
   2aa3c:	f894 1020 	ldrb.w	r1, [r4, #32]
   2aa40:	b951      	cbnz	r1, 2aa58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
   2aa42:	e005      	b.n	2aa50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
   2aa44:	200c      	movs	r0, #12
   2aa46:	b006      	add	sp, #24
   2aa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aa4c:	7029      	strb	r1, [r5, #0]
   2aa4e:	e05c      	b.n	2ab0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
   2aa50:	b120      	cbz	r0, 2aa5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
   2aa52:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   2aa56:	b108      	cbz	r0, 2aa5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
   2aa58:	2701      	movs	r7, #1
   2aa5a:	e000      	b.n	2aa5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
   2aa5c:	2700      	movs	r7, #0
   2aa5e:	7ea0      	ldrb	r0, [r4, #26]
   2aa60:	b920      	cbnz	r0, 2aa6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
   2aa62:	7e20      	ldrb	r0, [r4, #24]
   2aa64:	b910      	cbnz	r0, 2aa6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
   2aa66:	78a0      	ldrb	r0, [r4, #2]
   2aa68:	0740      	lsls	r0, r0, #29
   2aa6a:	d523      	bpl.n	2aab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
   2aa6c:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
   2aa70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   2aa74:	4050      	eors	r0, r2
   2aa76:	ea70 0101 	orns	r1, r0, r1
   2aa7a:	d006      	beq.n	2aa8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
   2aa7c:	f00c fc0d 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2aa80:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
   2aa84:	1a80      	subs	r0, r0, r2
   2aa86:	4199      	sbcs	r1, r3
   2aa88:	d200      	bcs.n	2aa8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
   2aa8a:	b19f      	cbz	r7, 2aab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
   2aa8c:	f7fe fd00 	bl	29490 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
   2aa90:	4924      	ldr	r1, [pc, #144]	; (2ab24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
   2aa92:	fba0 2301 	umull	r2, r3, r0, r1
   2aa96:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2aa9a:	f00a fedd 	bl	35858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
   2aa9e:	2101      	movs	r1, #1
   2aaa0:	4620      	mov	r0, r4
   2aaa2:	f00a fe92 	bl	357ca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
   2aaa6:	78a0      	ldrb	r0, [r4, #2]
   2aaa8:	0740      	lsls	r0, r0, #29
   2aaaa:	d503      	bpl.n	2aab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
   2aaac:	2101      	movs	r1, #1
   2aaae:	4620      	mov	r0, r4
   2aab0:	f000 fac8 	bl	2b044 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
   2aab4:	6870      	ldr	r0, [r6, #4]
   2aab6:	1cc0      	adds	r0, r0, #3
   2aab8:	f009 fe02 	bl	346c0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
   2aabc:	73a8      	strb	r0, [r5, #14]
   2aabe:	78a0      	ldrb	r0, [r4, #2]
   2aac0:	07c0      	lsls	r0, r0, #31
   2aac2:	d022      	beq.n	2ab0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
   2aac4:	f8cd 8010 	str.w	r8, [sp, #16]
   2aac8:	20ff      	movs	r0, #255	; 0xff
   2aaca:	f8cd 8014 	str.w	r8, [sp, #20]
   2aace:	73e8      	strb	r0, [r5, #15]
   2aad0:	69e6      	ldr	r6, [r4, #28]
   2aad2:	f106 070a 	add.w	r7, r6, #10
   2aad6:	e013      	b.n	2ab00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
   2aad8:	9c04      	ldr	r4, [sp, #16]
   2aada:	42b4      	cmp	r4, r6
   2aadc:	d010      	beq.n	2ab00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
   2aade:	7a72      	ldrb	r2, [r6, #9]
   2aae0:	7a60      	ldrb	r0, [r4, #9]
   2aae2:	463b      	mov	r3, r7
   2aae4:	f104 010a 	add.w	r1, r4, #10
   2aae8:	f009 fd5f 	bl	345aa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   2aaec:	b140      	cbz	r0, 2ab00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
   2aaee:	78a0      	ldrb	r0, [r4, #2]
   2aaf0:	73e8      	strb	r0, [r5, #15]
   2aaf2:	f8d4 0003 	ldr.w	r0, [r4, #3]
   2aaf6:	6128      	str	r0, [r5, #16]
   2aaf8:	f8b4 0007 	ldrh.w	r0, [r4, #7]
   2aafc:	82a8      	strh	r0, [r5, #20]
   2aafe:	e004      	b.n	2ab0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
   2ab00:	a804      	add	r0, sp, #16
   2ab02:	f7fd fb25 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   2ab06:	2800      	cmp	r0, #0
   2ab08:	d0e6      	beq.n	2aad8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
   2ab0a:	2000      	movs	r0, #0
   2ab0c:	e79b      	b.n	2aa46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
   2ab0e:	0000      	.short	0x0000
   2ab10:	20001240 	.word	0x20001240
   2ab14:	0002b154 	.word	0x0002b154
   2ab18:	200000f0 	.word	0x200000f0
   2ab1c:	8e89bed6 	.word	0x8e89bed6
   2ab20:	00555555 	.word	0x00555555
   2ab24:	000f4240 	.word	0x000f4240
   2ab28:	b510      	push	{r4, lr}
   2ab2a:	4604      	mov	r4, r0
   2ab2c:	f7ff ff34 	bl	2a998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
   2ab30:	2800      	cmp	r0, #0
   2ab32:	d108      	bne.n	2ab46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
   2ab34:	4804      	ldr	r0, [pc, #16]	; (2ab48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
   2ab36:	7800      	ldrb	r0, [r0, #0]
   2ab38:	2801      	cmp	r0, #1
   2ab3a:	d003      	beq.n	2ab44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
   2ab3c:	2100      	movs	r1, #0
   2ab3e:	4620      	mov	r0, r4
   2ab40:	f7ff fda4 	bl	2a68c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
   2ab44:	2000      	movs	r0, #0
   2ab46:	bd10      	pop	{r4, pc}
   2ab48:	20001240 	.word	0x20001240
   2ab4c:	480a      	ldr	r0, [pc, #40]	; (2ab78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
   2ab4e:	b510      	push	{r4, lr}
   2ab50:	490a      	ldr	r1, [pc, #40]	; (2ab7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
   2ab52:	6804      	ldr	r4, [r0, #0]
   2ab54:	7808      	ldrb	r0, [r1, #0]
   2ab56:	2800      	cmp	r0, #0
   2ab58:	d00d      	beq.n	2ab76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
   2ab5a:	7808      	ldrb	r0, [r1, #0]
   2ab5c:	2802      	cmp	r0, #2
   2ab5e:	d002      	beq.n	2ab66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
   2ab60:	7808      	ldrb	r0, [r1, #0]
   2ab62:	2803      	cmp	r0, #3
   2ab64:	d102      	bne.n	2ab6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
   2ab66:	4620      	mov	r0, r4
   2ab68:	f7ff ff00 	bl	2a96c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
   2ab6c:	4620      	mov	r0, r4
   2ab6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ab72:	f000 b93b 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
   2ab76:	bd10      	pop	{r4, pc}
   2ab78:	200000f0 	.word	0x200000f0
   2ab7c:	20001240 	.word	0x20001240
   2ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab84:	4604      	mov	r4, r0
   2ab86:	4829      	ldr	r0, [pc, #164]	; (2ac2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
   2ab88:	460d      	mov	r5, r1
   2ab8a:	6840      	ldr	r0, [r0, #4]
   2ab8c:	f004 f8ba 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   2ab90:	4e27      	ldr	r6, [pc, #156]	; (2ac30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
   2ab92:	2004      	movs	r0, #4
   2ab94:	7030      	strb	r0, [r6, #0]
   2ab96:	b355      	cbz	r5, 2abee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
   2ab98:	8860      	ldrh	r0, [r4, #2]
   2ab9a:	2810      	cmp	r0, #16
   2ab9c:	d023      	beq.n	2abe6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
   2ab9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2aba2:	4680      	mov	r8, r0
   2aba4:	68b5      	ldr	r5, [r6, #8]
   2aba6:	f00a fe74 	bl	35892 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   2abaa:	4607      	mov	r7, r0
   2abac:	4640      	mov	r0, r8
   2abae:	f00a fe99 	bl	358e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
   2abb2:	1a38      	subs	r0, r7, r0
   2abb4:	1e40      	subs	r0, r0, #1
   2abb6:	b2c0      	uxtb	r0, r0
   2abb8:	8861      	ldrh	r1, [r4, #2]
   2abba:	2228      	movs	r2, #40	; 0x28
   2abbc:	f000 fb06 	bl	2b1cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
   2abc0:	4405      	add	r5, r0
   2abc2:	78a0      	ldrb	r0, [r4, #2]
   2abc4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2abc8:	b130      	cbz	r0, 2abd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
   2abca:	6870      	ldr	r0, [r6, #4]
   2abcc:	4405      	add	r5, r0
   2abce:	f00a fee2 	bl	35996 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
   2abd2:	4428      	add	r0, r5
   2abd4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
   2abd8:	7922      	ldrb	r2, [r4, #4]
   2abda:	4629      	mov	r1, r5
   2abdc:	2000      	movs	r0, #0
   2abde:	f004 f8a7 	bl	2ed30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   2abe2:	b920      	cbnz	r0, 2abee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
   2abe4:	e00c      	b.n	2ac00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
   2abe6:	7921      	ldrb	r1, [r4, #4]
   2abe8:	2000      	movs	r0, #0
   2abea:	f003 fe69 	bl	2e8c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
   2abee:	8860      	ldrh	r0, [r4, #2]
   2abf0:	2813      	cmp	r0, #19
   2abf2:	d011      	beq.n	2ac18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   2abf4:	dc07      	bgt.n	2ac06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
   2abf6:	2810      	cmp	r0, #16
   2abf8:	d015      	beq.n	2ac26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
   2abfa:	2812      	cmp	r0, #18
   2abfc:	d107      	bne.n	2ac0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
   2abfe:	e00b      	b.n	2ac18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   2ac00:	f640 51a8 	movw	r1, #3496	; 0xda8
   2ac04:	e005      	b.n	2ac12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
   2ac06:	2815      	cmp	r0, #21
   2ac08:	d006      	beq.n	2ac18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   2ac0a:	281d      	cmp	r0, #29
   2ac0c:	d004      	beq.n	2ac18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
   2ac0e:	f640 51bc 	movw	r1, #3516	; 0xdbc
   2ac12:	202d      	movs	r0, #45	; 0x2d
   2ac14:	f7fc ff1c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ac18:	7922      	ldrb	r2, [r4, #4]
   2ac1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2ac1e:	2101      	movs	r1, #1
   2ac20:	2000      	movs	r0, #0
   2ac22:	f004 b8f7 	b.w	2ee14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
   2ac26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ac2a:	0000      	.short	0x0000
   2ac2c:	200000f0 	.word	0x200000f0
   2ac30:	20001240 	.word	0x20001240
   2ac34:	b538      	push	{r3, r4, r5, lr}
   2ac36:	4604      	mov	r4, r0
   2ac38:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   2ac3c:	460b      	mov	r3, r1
   2ac3e:	f88d 0000 	strb.w	r0, [sp]
   2ac42:	9800      	ldr	r0, [sp, #0]
   2ac44:	9000      	str	r0, [sp, #0]
   2ac46:	f89d 0000 	ldrb.w	r0, [sp]
   2ac4a:	2800      	cmp	r0, #0
   2ac4c:	d13a      	bne.n	2acc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
   2ac4e:	7820      	ldrb	r0, [r4, #0]
   2ac50:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
   2ac54:	2bff      	cmp	r3, #255	; 0xff
   2ac56:	d010      	beq.n	2ac7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
   2ac58:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
   2ac5c:	1e51      	subs	r1, r2, #1
   2ac5e:	4618      	mov	r0, r3
   2ac60:	f7fe fbfc 	bl	2945c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   2ac64:	b130      	cbz	r0, 2ac74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
   2ac66:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
   2ac6a:	f040 0002 	orr.w	r0, r0, #2
   2ac6e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
   2ac72:	e011      	b.n	2ac98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
   2ac74:	f241 0118 	movw	r1, #4120	; 0x1018
   2ac78:	e021      	b.n	2acbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
   2ac7a:	4813      	ldr	r0, [pc, #76]	; (2acc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
   2ac7c:	6840      	ldr	r0, [r0, #4]
   2ac7e:	7801      	ldrb	r1, [r0, #0]
   2ac80:	f3c1 1180 	ubfx	r1, r1, #6, #1
   2ac84:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
   2ac88:	f8d0 1003 	ldr.w	r1, [r0, #3]
   2ac8c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
   2ac90:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   2ac94:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
   2ac98:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   2ac9c:	287f      	cmp	r0, #127	; 0x7f
   2ac9e:	d00c      	beq.n	2acba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
   2aca0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
   2aca4:	207f      	movs	r0, #127	; 0x7f
   2aca6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
   2acaa:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   2acae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2acb2:	2202      	movs	r2, #2
   2acb4:	4905      	ldr	r1, [pc, #20]	; (2accc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
   2acb6:	f00a b8f7 	b.w	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2acba:	f640 616c 	movw	r1, #3692	; 0xe6c
   2acbe:	202d      	movs	r0, #45	; 0x2d
   2acc0:	f7fc fec6 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2acc4:	bd38      	pop	{r3, r4, r5, pc}
   2acc6:	0000      	.short	0x0000
   2acc8:	200000f0 	.word	0x200000f0
   2accc:	000357b3 	.word	0x000357b3
   2acd0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   2acd4:	4616      	mov	r6, r2
   2acd6:	4604      	mov	r4, r0
   2acd8:	2903      	cmp	r1, #3
   2acda:	d004      	beq.n	2ace6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
   2acdc:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
   2ace0:	b108      	cbz	r0, 2ace6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
   2ace2:	2001      	movs	r0, #1
   2ace4:	e000      	b.n	2ace8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
   2ace6:	2000      	movs	r0, #0
   2ace8:	2500      	movs	r5, #0
   2acea:	2903      	cmp	r1, #3
   2acec:	d003      	beq.n	2acf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
   2acee:	2701      	movs	r7, #1
   2acf0:	2905      	cmp	r1, #5
   2acf2:	d005      	beq.n	2ad00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
   2acf4:	e008      	b.n	2ad08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
   2acf6:	78a1      	ldrb	r1, [r4, #2]
   2acf8:	2702      	movs	r7, #2
   2acfa:	f3c1 0140 	ubfx	r1, r1, #1, #1
   2acfe:	e001      	b.n	2ad04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
   2ad00:	78a1      	ldrb	r1, [r4, #2]
   2ad02:	07c9      	lsls	r1, r1, #31
   2ad04:	2900      	cmp	r1, #0
   2ad06:	d06b      	beq.n	2ade0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
   2ad08:	2800      	cmp	r0, #0
   2ad0a:	d169      	bne.n	2ade0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
   2ad0c:	4835      	ldr	r0, [pc, #212]	; (2ade4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
   2ad0e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2ade8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
   2ad12:	7b80      	ldrb	r0, [r0, #14]
   2ad14:	b180      	cbz	r0, 2ad38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
   2ad16:	f009 fcd6 	bl	346c6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
   2ad1a:	7030      	strb	r0, [r6, #0]
   2ad1c:	28ff      	cmp	r0, #255	; 0xff
   2ad1e:	d014      	beq.n	2ad4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
   2ad20:	b2c0      	uxtb	r0, r0
   2ad22:	466a      	mov	r2, sp
   2ad24:	a902      	add	r1, sp, #8
   2ad26:	f7fe fb99 	bl	2945c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   2ad2a:	b148      	cbz	r0, 2ad40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
   2ad2c:	4669      	mov	r1, sp
   2ad2e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2ad32:	f00a fbe8 	bl	35506 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
   2ad36:	4605      	mov	r5, r0
   2ad38:	7830      	ldrb	r0, [r6, #0]
   2ad3a:	28ff      	cmp	r0, #255	; 0xff
   2ad3c:	d005      	beq.n	2ad4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
   2ad3e:	e00d      	b.n	2ad5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
   2ad40:	f640 719b 	movw	r1, #3995	; 0xf9b
   2ad44:	202d      	movs	r0, #45	; 0x2d
   2ad46:	f7fc fe83 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ad4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2ad4e:	f811 0b03 	ldrb.w	r0, [r1], #3
   2ad52:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2ad56:	f00a fbd6 	bl	35506 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
   2ad5a:	4605      	mov	r5, r0
   2ad5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2ad60:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   2ad64:	f104 0358 	add.w	r3, r4, #88	; 0x58
   2ad68:	f811 0b03 	ldrb.w	r0, [r1], #3
   2ad6c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2ad70:	f009 fc1b 	bl	345aa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   2ad74:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2ad78:	4680      	mov	r8, r0
   2ad7a:	f811 0b03 	ldrb.w	r0, [r1], #3
   2ad7e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2ad82:	f009 fcaa 	bl	346da <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   2ad86:	4681      	mov	r9, r0
   2ad88:	f7fe fb88 	bl	2949c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
   2ad8c:	b138      	cbz	r0, 2ad9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
   2ad8e:	4648      	mov	r0, r9
   2ad90:	f7fe fb44 	bl	2941c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   2ad94:	b118      	cbz	r0, 2ad9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
   2ad96:	2110      	movs	r1, #16
   2ad98:	f009 fe4a 	bl	34a30 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   2ad9c:	b138      	cbz	r0, 2adae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
   2ad9e:	2100      	movs	r1, #0
   2ada0:	7830      	ldrb	r0, [r6, #0]
   2ada2:	28ff      	cmp	r0, #255	; 0xff
   2ada4:	d00c      	beq.n	2adc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
   2ada6:	f1b8 0f00 	cmp.w	r8, #0
   2adaa:	d105      	bne.n	2adb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
   2adac:	e001      	b.n	2adb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
   2adae:	2101      	movs	r1, #1
   2adb0:	e7f6      	b.n	2ada0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
   2adb2:	7e62      	ldrb	r2, [r4, #25]
   2adb4:	4282      	cmp	r2, r0
   2adb6:	d101      	bne.n	2adbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
   2adb8:	2001      	movs	r0, #1
   2adba:	e003      	b.n	2adc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
   2adbc:	2000      	movs	r0, #0
   2adbe:	e001      	b.n	2adc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
   2adc0:	ea28 0001 	bic.w	r0, r8, r1
   2adc4:	78a2      	ldrb	r2, [r4, #2]
   2adc6:	0752      	lsls	r2, r2, #29
   2adc8:	d501      	bpl.n	2adce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
   2adca:	b930      	cbnz	r0, 2adda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
   2adcc:	e008      	b.n	2ade0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
   2adce:	b939      	cbnz	r1, 2ade0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
   2add0:	b91d      	cbnz	r5, 2adda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
   2add2:	7be0      	ldrb	r0, [r4, #15]
   2add4:	b108      	cbz	r0, 2adda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
   2add6:	42b8      	cmp	r0, r7
   2add8:	d102      	bne.n	2ade0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
   2adda:	2001      	movs	r0, #1
   2addc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   2ade0:	2000      	movs	r0, #0
   2ade2:	e7fb      	b.n	2addc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
   2ade4:	20001240 	.word	0x20001240
   2ade8:	200000f0 	.word	0x200000f0
   2adec:	b570      	push	{r4, r5, r6, lr}
   2adee:	4604      	mov	r4, r0
   2adf0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
   2adf2:	4d10      	ldr	r5, [pc, #64]	; (2ae34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
   2adf4:	1c40      	adds	r0, r0, #1
   2adf6:	8620      	strh	r0, [r4, #48]	; 0x30
   2adf8:	7ba8      	ldrb	r0, [r5, #14]
   2adfa:	2600      	movs	r6, #0
   2adfc:	b120      	cbz	r0, 2ae08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
   2adfe:	f003 fced 	bl	2e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
   2ae02:	f003 fb11 	bl	2e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
   2ae06:	73ae      	strb	r6, [r5, #14]
   2ae08:	702e      	strb	r6, [r5, #0]
   2ae0a:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
   2ae0e:	b108      	cbz	r0, 2ae14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
   2ae10:	2101      	movs	r1, #1
   2ae12:	e00a      	b.n	2ae2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
   2ae14:	7b60      	ldrb	r0, [r4, #13]
   2ae16:	b138      	cbz	r0, 2ae28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
   2ae18:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   2ae1a:	4288      	cmp	r0, r1
   2ae1c:	d804      	bhi.n	2ae28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
   2ae1e:	2101      	movs	r1, #1
   2ae20:	4620      	mov	r0, r4
   2ae22:	f00a fddc 	bl	359de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   2ae26:	bd70      	pop	{r4, r5, r6, pc}
   2ae28:	2100      	movs	r1, #0
   2ae2a:	4620      	mov	r0, r4
   2ae2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ae30:	f00a bdd5 	b.w	359de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
   2ae34:	20001240 	.word	0x20001240
   2ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae3c:	4604      	mov	r4, r0
   2ae3e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
   2ae42:	8808      	ldrh	r0, [r1, #0]
   2ae44:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
   2ae48:	20ff      	movs	r0, #255	; 0xff
   2ae4a:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
   2ae4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   2ae52:	4616      	mov	r6, r2
   2ae54:	460d      	mov	r5, r1
   2ae56:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
   2ae5a:	2b00      	cmp	r3, #0
   2ae5c:	d14b      	bne.n	2aef6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
   2ae5e:	6928      	ldr	r0, [r5, #16]
   2ae60:	f009 fc74 	bl	3474c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   2ae64:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
   2ae68:	8b28      	ldrh	r0, [r5, #24]
   2ae6a:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
   2ae6e:	8b68      	ldrh	r0, [r5, #26]
   2ae70:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   2ae74:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
   2ae78:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
   2ae7c:	7e20      	ldrb	r0, [r4, #24]
   2ae7e:	f104 0151 	add.w	r1, r4, #81	; 0x51
   2ae82:	460f      	mov	r7, r1
   2ae84:	2500      	movs	r5, #0
   2ae86:	b120      	cbz	r0, 2ae92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
   2ae88:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   2ae8c:	f00a fb67 	bl	3555e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
   2ae90:	b940      	cbnz	r0, 2aea4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
   2ae92:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   2ae96:	b170      	cbz	r0, 2aeb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
   2ae98:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   2ae9c:	4639      	mov	r1, r7
   2ae9e:	f00a fb55 	bl	3554c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
   2aea2:	b140      	cbz	r0, 2aeb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
   2aea4:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
   2aea8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
   2aeac:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
   2aeb0:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
   2aeb4:	e003      	b.n	2aebe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
   2aeb6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   2aeba:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
   2aebe:	4815      	ldr	r0, [pc, #84]	; (2af14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
   2aec0:	2eff      	cmp	r6, #255	; 0xff
   2aec2:	6840      	ldr	r0, [r0, #4]
   2aec4:	7801      	ldrb	r1, [r0, #0]
   2aec6:	f3c1 1180 	ubfx	r1, r1, #6, #1
   2aeca:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
   2aece:	f850 1f03 	ldr.w	r1, [r0, #3]!
   2aed2:	d017      	beq.n	2af04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
   2aed4:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   2aed8:	8880      	ldrh	r0, [r0, #4]
   2aeda:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
   2aede:	f104 027a 	add.w	r2, r4, #122	; 0x7a
   2aee2:	1e51      	subs	r1, r2, #1
   2aee4:	4630      	mov	r0, r6
   2aee6:	f7fe fab9 	bl	2945c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
   2aeea:	b130      	cbz	r0, 2aefa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
   2aeec:	f814 0f79 	ldrb.w	r0, [r4, #121]!
   2aef0:	f040 0002 	orr.w	r0, r0, #2
   2aef4:	7020      	strb	r0, [r4, #0]
   2aef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aefa:	f640 418b 	movw	r1, #3211	; 0xc8b
   2aefe:	202d      	movs	r0, #45	; 0x2d
   2af00:	f7fc fda6 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2af04:	f844 1f7a 	str.w	r1, [r4, #122]!
   2af08:	8880      	ldrh	r0, [r0, #4]
   2af0a:	80a0      	strh	r0, [r4, #4]
   2af0c:	60e5      	str	r5, [r4, #12]
   2af0e:	8225      	strh	r5, [r4, #16]
   2af10:	e7f1      	b.n	2aef6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
   2af12:	0000      	.short	0x0000
   2af14:	200000f0 	.word	0x200000f0
   2af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2af1a:	4604      	mov	r4, r0
   2af1c:	20ff      	movs	r0, #255	; 0xff
   2af1e:	f88d 0000 	strb.w	r0, [sp]
   2af22:	2601      	movs	r6, #1
   2af24:	466a      	mov	r2, sp
   2af26:	2105      	movs	r1, #5
   2af28:	4620      	mov	r0, r4
   2af2a:	f7ff fed1 	bl	2acd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
   2af2e:	b160      	cbz	r0, 2af4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b2>
   2af30:	4d28      	ldr	r5, [pc, #160]	; (2afd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
   2af32:	4f27      	ldr	r7, [pc, #156]	; (2afd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>)
   2af34:	6869      	ldr	r1, [r5, #4]
   2af36:	7bfa      	ldrb	r2, [r7, #15]
   2af38:	f107 0310 	add.w	r3, r7, #16
   2af3c:	f811 0b03 	ldrb.w	r0, [r1], #3
   2af40:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2af44:	f009 fb31 	bl	345aa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
   2af48:	b110      	cbz	r0, 2af50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b8>
   2af4a:	2600      	movs	r6, #0
   2af4c:	4630      	mov	r0, r6
   2af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2af50:	686a      	ldr	r2, [r5, #4]
   2af52:	69e0      	ldr	r0, [r4, #28]
   2af54:	7812      	ldrb	r2, [r2, #0]
   2af56:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
   2af5a:	f3c2 1240 	ubfx	r2, r2, #5, #1
   2af5e:	4011      	ands	r1, r2
   2af60:	7001      	strb	r1, [r0, #0]
   2af62:	2201      	movs	r2, #1
   2af64:	4620      	mov	r0, r4
   2af66:	69e1      	ldr	r1, [r4, #28]
   2af68:	f000 f89a 	bl	2b0a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x708>
   2af6c:	2300      	movs	r3, #0
   2af6e:	f89d 2000 	ldrb.w	r2, [sp]
   2af72:	4620      	mov	r0, r4
   2af74:	69e1      	ldr	r1, [r4, #28]
   2af76:	f7ff ff5f 	bl	2ae38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
   2af7a:	2202      	movs	r2, #2
   2af7c:	4916      	ldr	r1, [pc, #88]	; (2afd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>)
   2af7e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   2af82:	f009 ff91 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2af86:	69e0      	ldr	r0, [r4, #28]
   2af88:	2202      	movs	r2, #2
   2af8a:	8801      	ldrh	r1, [r0, #0]
   2af8c:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
   2af90:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
   2af94:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
   2af98:	4910      	ldr	r1, [pc, #64]	; (2afdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>)
   2af9a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
   2af9e:	f009 ff83 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2afa2:	2100      	movs	r1, #0
   2afa4:	69e0      	ldr	r0, [r4, #28]
   2afa6:	7039      	strb	r1, [r7, #0]
   2afa8:	460a      	mov	r2, r1
   2afaa:	4621      	mov	r1, r4
   2afac:	f000 fa7a 	bl	2b4a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
   2afb0:	6868      	ldr	r0, [r5, #4]
   2afb2:	69e1      	ldr	r1, [r4, #28]
   2afb4:	f8d0 2003 	ldr.w	r2, [r0, #3]
   2afb8:	f841 2f03 	str.w	r2, [r1, #3]!
   2afbc:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   2afc0:	808a      	strh	r2, [r1, #4]
   2afc2:	7800      	ldrb	r0, [r0, #0]
   2afc4:	69e1      	ldr	r1, [r4, #28]
   2afc6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2afca:	7088      	strb	r0, [r1, #2]
   2afcc:	e7be      	b.n	2af4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b4>
   2afce:	0000      	.short	0x0000
   2afd0:	20001240 	.word	0x20001240
   2afd4:	200000f0 	.word	0x200000f0
   2afd8:	00035763 	.word	0x00035763
   2afdc:	00035753 	.word	0x00035753
   2afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2afe2:	4604      	mov	r4, r0
   2afe4:	20ff      	movs	r0, #255	; 0xff
   2afe6:	f88d 0000 	strb.w	r0, [sp]
   2afea:	2501      	movs	r5, #1
   2afec:	466a      	mov	r2, sp
   2afee:	2103      	movs	r1, #3
   2aff0:	4620      	mov	r0, r4
   2aff2:	f7ff fe6d 	bl	2acd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
   2aff6:	b1e8      	cbz	r0, 2b034 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
   2aff8:	7b20      	ldrb	r0, [r4, #12]
   2affa:	b120      	cbz	r0, 2b006 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66e>
   2affc:	f89d 1000 	ldrb.w	r1, [sp]
   2b000:	4620      	mov	r0, r4
   2b002:	f7ff fe17 	bl	2ac34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
   2b006:	4e0d      	ldr	r6, [pc, #52]	; (2b03c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
   2b008:	2100      	movs	r1, #0
   2b00a:	6870      	ldr	r0, [r6, #4]
   2b00c:	8001      	strh	r1, [r0, #0]
   2b00e:	2104      	movs	r1, #4
   2b010:	f009 fdc8 	bl	34ba4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
   2b014:	4620      	mov	r0, r4
   2b016:	f000 f88b 	bl	2b130 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
   2b01a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   2b01e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   2b020:	6870      	ldr	r0, [r6, #4]
   2b022:	f009 fdf6 	bl	34c12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
   2b026:	4906      	ldr	r1, [pc, #24]	; (2b040 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
   2b028:	2005      	movs	r0, #5
   2b02a:	7008      	strb	r0, [r1, #0]
   2b02c:	6870      	ldr	r0, [r6, #4]
   2b02e:	f003 fe69 	bl	2ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
   2b032:	e000      	b.n	2b036 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69e>
   2b034:	2500      	movs	r5, #0
   2b036:	4628      	mov	r0, r5
   2b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b03a:	0000      	.short	0x0000
   2b03c:	200000f0 	.word	0x200000f0
   2b040:	20001240 	.word	0x20001240
   2b044:	b570      	push	{r4, r5, r6, lr}
   2b046:	4604      	mov	r4, r0
   2b048:	460e      	mov	r6, r1
   2b04a:	7e40      	ldrb	r0, [r0, #25]
   2b04c:	f7fe f9e6 	bl	2941c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
   2b050:	0005      	movs	r5, r0
   2b052:	d019      	beq.n	2b088 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
   2b054:	2110      	movs	r1, #16
   2b056:	f009 fceb 	bl	34a30 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
   2b05a:	2800      	cmp	r0, #0
   2b05c:	d114      	bne.n	2b088 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
   2b05e:	2001      	movs	r0, #1
   2b060:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
   2b064:	f104 015f 	add.w	r1, r4, #95	; 0x5f
   2b068:	4632      	mov	r2, r6
   2b06a:	460c      	mov	r4, r1
   2b06c:	4628      	mov	r0, r5
   2b06e:	f009 facc 	bl	3460a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   2b072:	4621      	mov	r1, r4
   2b074:	4c05      	ldr	r4, [pc, #20]	; (2b08c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f4>)
   2b076:	6860      	ldr	r0, [r4, #4]
   2b078:	f009 fdaf 	bl	34bda <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
   2b07c:	6860      	ldr	r0, [r4, #4]
   2b07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b082:	2101      	movs	r1, #1
   2b084:	f009 bdaf 	b.w	34be6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
   2b088:	bd70      	pop	{r4, r5, r6, pc}
   2b08a:	0000      	.short	0x0000
   2b08c:	200000f0 	.word	0x200000f0
   2b090:	4802      	ldr	r0, [pc, #8]	; (2b09c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x704>)
   2b092:	2101      	movs	r1, #1
   2b094:	6800      	ldr	r0, [r0, #0]
   2b096:	f7ff baf9 	b.w	2a68c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
   2b09a:	0000      	.short	0x0000
   2b09c:	200000f0 	.word	0x200000f0
   2b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b0a4:	4e21      	ldr	r6, [pc, #132]	; (2b12c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x794>)
   2b0a6:	4680      	mov	r8, r0
   2b0a8:	460c      	mov	r4, r1
   2b0aa:	6870      	ldr	r0, [r6, #4]
   2b0ac:	4615      	mov	r5, r2
   2b0ae:	f850 1f0f 	ldr.w	r1, [r0, #15]!
   2b0b2:	6161      	str	r1, [r4, #20]
   2b0b4:	6841      	ldr	r1, [r0, #4]
   2b0b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   2b0ba:	61e1      	str	r1, [r4, #28]
   2b0bc:	8940      	ldrh	r0, [r0, #10]
   2b0be:	f009 fb41 	bl	34744 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   2b0c2:	4607      	mov	r7, r0
   2b0c4:	6120      	str	r0, [r4, #16]
   2b0c6:	6870      	ldr	r0, [r6, #4]
   2b0c8:	4639      	mov	r1, r7
   2b0ca:	7d80      	ldrb	r0, [r0, #22]
   2b0cc:	f009 fca7 	bl	34a1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   2b0d0:	84a0      	strh	r0, [r4, #36]	; 0x24
   2b0d2:	6870      	ldr	r0, [r6, #4]
   2b0d4:	4639      	mov	r1, r7
   2b0d6:	f8b0 0017 	ldrh.w	r0, [r0, #23]
   2b0da:	f009 fc9c 	bl	34a16 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   2b0de:	6220      	str	r0, [r4, #32]
   2b0e0:	6870      	ldr	r0, [r6, #4]
   2b0e2:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
   2b0e6:	8321      	strh	r1, [r4, #24]
   2b0e8:	8841      	ldrh	r1, [r0, #2]
   2b0ea:	8361      	strh	r1, [r4, #26]
   2b0ec:	6841      	ldr	r1, [r0, #4]
   2b0ee:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
   2b0f2:	7a01      	ldrb	r1, [r0, #8]
   2b0f4:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
   2b0f8:	7a41      	ldrb	r1, [r0, #9]
   2b0fa:	f001 011f 	and.w	r1, r1, #31
   2b0fe:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
   2b102:	7a40      	ldrb	r0, [r0, #9]
   2b104:	0940      	lsrs	r0, r0, #5
   2b106:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
   2b10a:	f104 0062 	add.w	r0, r4, #98	; 0x62
   2b10e:	7205      	strb	r5, [r0, #8]
   2b110:	7245      	strb	r5, [r0, #9]
   2b112:	21ff      	movs	r1, #255	; 0xff
   2b114:	7281      	strb	r1, [r0, #10]
   2b116:	2100      	movs	r1, #0
   2b118:	3836      	subs	r0, #54	; 0x36
   2b11a:	f009 ff38 	bl	34f8e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
   2b11e:	f998 100e 	ldrsb.w	r1, [r8, #14]
   2b122:	4620      	mov	r0, r4
   2b124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b128:	f009 bbe0 	b.w	348ec <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
   2b12c:	200000f0 	.word	0x200000f0
   2b130:	b570      	push	{r4, r5, r6, lr}
   2b132:	4d07      	ldr	r5, [pc, #28]	; (2b150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b8>)
   2b134:	4604      	mov	r4, r0
   2b136:	f100 0151 	add.w	r1, r0, #81	; 0x51
   2b13a:	6868      	ldr	r0, [r5, #4]
   2b13c:	f009 fd5a 	bl	34bf4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
   2b140:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   2b144:	6868      	ldr	r0, [r5, #4]
   2b146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b14a:	f009 bd59 	b.w	34c00 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
   2b14e:	0000      	.short	0x0000
   2b150:	200000f0 	.word	0x200000f0
   2b154:	0002a919 	.word	0x0002a919
   2b158:	0002a7a1 	.word	0x0002a7a1
   2b15c:	0002a895 	.word	0x0002a895
   2b160:	00000000 	.word	0x00000000
   2b164:	0002a86d 	.word	0x0002a86d
   2b168:	0002a8c5 	.word	0x0002a8c5
   2b16c:	00035747 	.word	0x00035747
   2b170:	0003574d 	.word	0x0003574d
   2b174:	0002ab29 	.word	0x0002ab29
   2b178:	0002ab4d 	.word	0x0002ab4d
   2b17c:	0002b091 	.word	0x0002b091
   2b180:	0002b170 	.word	0x0002b170
   2b184:	0002b168 	.word	0x0002b168
   2b188:	0002b164 	.word	0x0002b164

0002b18c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
   2b18c:	b510      	push	{r4, lr}
   2b18e:	1e42      	subs	r2, r0, #1
   2b190:	2a02      	cmp	r2, #2
   2b192:	d901      	bls.n	2b198 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
   2b194:	21ca      	movs	r1, #202	; 0xca
   2b196:	e009      	b.n	2b1ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
   2b198:	1e40      	subs	r0, r0, #1
   2b19a:	2910      	cmp	r1, #16
   2b19c:	d009      	beq.n	2b1b2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
   2b19e:	2912      	cmp	r1, #18
   2b1a0:	d00c      	beq.n	2b1bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   2b1a2:	2913      	cmp	r1, #19
   2b1a4:	d00a      	beq.n	2b1bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
   2b1a6:	2915      	cmp	r1, #21
   2b1a8:	d005      	beq.n	2b1b6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
   2b1aa:	21d8      	movs	r1, #216	; 0xd8
   2b1ac:	202f      	movs	r0, #47	; 0x2f
   2b1ae:	f7fc fc4f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b1b2:	4905      	ldr	r1, [pc, #20]	; (2b1c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   2b1b4:	e004      	b.n	2b1c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   2b1b6:	4904      	ldr	r1, [pc, #16]	; (2b1c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   2b1b8:	1d89      	adds	r1, r1, #6
   2b1ba:	e001      	b.n	2b1c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
   2b1bc:	4902      	ldr	r1, [pc, #8]	; (2b1c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
   2b1be:	1f89      	subs	r1, r1, #6
   2b1c0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   2b1c4:	bd10      	pop	{r4, pc}
   2b1c6:	0000      	.short	0x0000
   2b1c8:	000359ae 	.word	0x000359ae

0002b1cc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
   2b1cc:	1e42      	subs	r2, r0, #1
   2b1ce:	b510      	push	{r4, lr}
   2b1d0:	b2d2      	uxtb	r2, r2
   2b1d2:	2a01      	cmp	r2, #1
   2b1d4:	d903      	bls.n	2b1de <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   2b1d6:	291d      	cmp	r1, #29
   2b1d8:	d001      	beq.n	2b1de <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
   2b1da:	21ee      	movs	r1, #238	; 0xee
   2b1dc:	e00d      	b.n	2b1fa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
   2b1de:	2913      	cmp	r1, #19
   2b1e0:	d013      	beq.n	2b20a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   2b1e2:	dc04      	bgt.n	2b1ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
   2b1e4:	2910      	cmp	r1, #16
   2b1e6:	d00b      	beq.n	2b200 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
   2b1e8:	2912      	cmp	r1, #18
   2b1ea:	d104      	bne.n	2b1f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
   2b1ec:	e00d      	b.n	2b20a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
   2b1ee:	2915      	cmp	r1, #21
   2b1f0:	d008      	beq.n	2b204 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
   2b1f2:	291d      	cmp	r1, #29
   2b1f4:	d00e      	beq.n	2b214 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
   2b1f6:	f44f 7181 	mov.w	r1, #258	; 0x102
   2b1fa:	202f      	movs	r0, #47	; 0x2f
   2b1fc:	f7fc fc28 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b200:	4807      	ldr	r0, [pc, #28]	; (2b220 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   2b202:	e004      	b.n	2b20e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   2b204:	4806      	ldr	r0, [pc, #24]	; (2b220 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   2b206:	3008      	adds	r0, #8
   2b208:	e001      	b.n	2b20e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
   2b20a:	4805      	ldr	r0, [pc, #20]	; (2b220 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
   2b20c:	1d00      	adds	r0, r0, #4
   2b20e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   2b212:	bd10      	pop	{r4, pc}
   2b214:	f240 315a 	movw	r1, #858	; 0x35a
   2b218:	fb10 f001 	smulbb	r0, r0, r1
   2b21c:	bd10      	pop	{r4, pc}
   2b21e:	0000      	.short	0x0000
   2b220:	0003599c 	.word	0x0003599c

0002b224 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
   2b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b228:	4604      	mov	r4, r0
   2b22a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
   2b22e:	4616      	mov	r6, r2
   2b230:	460f      	mov	r7, r1
   2b232:	2800      	cmp	r0, #0
   2b234:	d15e      	bne.n	2b2f4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
   2b236:	4621      	mov	r1, r4
   2b238:	484d      	ldr	r0, [pc, #308]	; (2b370 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
   2b23a:	f006 fb89 	bl	31950 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
   2b23e:	4605      	mov	r5, r0
   2b240:	2820      	cmp	r0, #32
   2b242:	d057      	beq.n	2b2f4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
   2b244:	2250      	movs	r2, #80	; 0x50
   2b246:	2100      	movs	r1, #0
   2b248:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   2b24c:	f00c fa31 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2b250:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
   2b254:	2501      	movs	r5, #1
   2b256:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
   2b25a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
   2b25e:	b137      	cbz	r7, 2b26e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
   2b260:	f7fe fdf0 	bl	29e44 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   2b264:	f000 0007 	and.w	r0, r0, #7
   2b268:	1c40      	adds	r0, r0, #1
   2b26a:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
   2b26e:	4620      	mov	r0, r4
   2b270:	f00a fd62 	bl	35d38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
   2b274:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
   2b278:	2002      	movs	r0, #2
   2b27a:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
   2b27e:	46a8      	mov	r8, r5
   2b280:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
   2b284:	2500      	movs	r5, #0
   2b286:	f804 5fe8 	strb.w	r5, [r4, #232]!
   2b28a:	f007 fcc7 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2b28e:	4607      	mov	r7, r0
   2b290:	f00b fffa 	bl	37288 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   2b294:	8921      	ldrh	r1, [r4, #8]
   2b296:	3ce8      	subs	r4, #232	; 0xe8
   2b298:	4288      	cmp	r0, r1
   2b29a:	d800      	bhi.n	2b29e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
   2b29c:	4608      	mov	r0, r1
   2b29e:	4438      	add	r0, r7
   2b2a0:	30ce      	adds	r0, #206	; 0xce
   2b2a2:	b287      	uxth	r7, r0
   2b2a4:	4620      	mov	r0, r4
   2b2a6:	f00a fa0d 	bl	356c4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   2b2aa:	b330      	cbz	r0, 2b2fa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
   2b2ac:	f00b ff0e 	bl	370cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   2b2b0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   2b2b4:	b281      	uxth	r1, r0
   2b2b6:	4630      	mov	r0, r6
   2b2b8:	f007 fdd0 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b2bc:	4430      	add	r0, r6
   2b2be:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
   2b2c2:	3490      	adds	r4, #144	; 0x90
   2b2c4:	f00b ffe9 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2b2c8:	19c0      	adds	r0, r0, r7
   2b2ca:	4169      	adcs	r1, r5
   2b2cc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
   2b2d0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
   2b2d4:	f824 5c6e 	strh.w	r5, [r4, #-110]
   2b2d8:	2001      	movs	r0, #1
   2b2da:	f00a fb58 	bl	3598e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
   2b2de:	f200 1015 	addw	r0, r0, #277	; 0x115
   2b2e2:	1a30      	subs	r0, r6, r0
   2b2e4:	6460      	str	r0, [r4, #68]	; 0x44
   2b2e6:	f04f 30ff 	mov.w	r0, #4294967295
   2b2ea:	0841      	lsrs	r1, r0, #1
   2b2ec:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
   2b2f0:	3c90      	subs	r4, #144	; 0x90
   2b2f2:	e025      	b.n	2b340 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
   2b2f4:	200c      	movs	r0, #12
   2b2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b2fa:	2100      	movs	r1, #0
   2b2fc:	4620      	mov	r0, r4
   2b2fe:	f00a fc6f 	bl	35be0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   2b302:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2b374 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
   2b306:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
   2b30a:	2000      	movs	r0, #0
   2b30c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   2b310:	b149      	cbz	r1, 2b326 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
   2b312:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   2b314:	b139      	cbz	r1, 2b326 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
   2b316:	f7fe fd95 	bl	29e44 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
   2b31a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   2b31e:	fbb0 f2f1 	udiv	r2, r0, r1
   2b322:	fb01 0012 	mls	r0, r1, r2, r0
   2b326:	4407      	add	r7, r0
   2b328:	f00b ffb7 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2b32c:	19c0      	adds	r0, r0, r7
   2b32e:	4169      	adcs	r1, r5
   2b330:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
   2b334:	b19e      	cbz	r6, 2b35e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
   2b336:	1980      	adds	r0, r0, r6
   2b338:	eb51 0105 	adcs.w	r1, r1, r5
   2b33c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
   2b340:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   2b344:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   2b348:	f00a fcf4 	bl	35d34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   2b34c:	b158      	cbz	r0, 2b366 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
   2b34e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
   2b352:	2100      	movs	r1, #0
   2b354:	4620      	mov	r0, r4
   2b356:	f00a f9e5 	bl	35724 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   2b35a:	2000      	movs	r0, #0
   2b35c:	e7cb      	b.n	2b2f6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
   2b35e:	f04f 30ff 	mov.w	r0, #4294967295
   2b362:	0841      	lsrs	r1, r0, #1
   2b364:	e7ea      	b.n	2b33c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
   2b366:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   2b36a:	2030      	movs	r0, #48	; 0x30
   2b36c:	f7fc fb70 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b370:	00035e19 	.word	0x00035e19
   2b374:	20000100 	.word	0x20000100

0002b378 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
   2b378:	4901      	ldr	r1, [pc, #4]	; (2b380 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
   2b37a:	8088      	strh	r0, [r1, #4]
   2b37c:	4770      	bx	lr
   2b37e:	0000      	.short	0x0000
   2b380:	20000100 	.word	0x20000100

0002b384 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
   2b384:	4805      	ldr	r0, [pc, #20]	; (2b39c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
   2b386:	2100      	movs	r1, #0
   2b388:	7001      	strb	r1, [r0, #0]
   2b38a:	2201      	movs	r2, #1
   2b38c:	7082      	strb	r2, [r0, #2]
   2b38e:	7041      	strb	r1, [r0, #1]
   2b390:	f242 7110 	movw	r1, #10000	; 0x2710
   2b394:	8081      	strh	r1, [r0, #4]
   2b396:	f000 b803 	b.w	2b3a0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   2b39a:	0000      	.short	0x0000
   2b39c:	20000100 	.word	0x20000100

0002b3a0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
   2b3a0:	b51c      	push	{r2, r3, r4, lr}
   2b3a2:	4909      	ldr	r1, [pc, #36]	; (2b3c8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
   2b3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   2b3a8:	e9cd 0100 	strd	r0, r1, [sp]
   2b3ac:	e002      	b.n	2b3b4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
   2b3ae:	9800      	ldr	r0, [sp, #0]
   2b3b0:	f00a fb29 	bl	35a06 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   2b3b4:	4668      	mov	r0, sp
   2b3b6:	f7fc fecb 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   2b3ba:	2800      	cmp	r0, #0
   2b3bc:	d0f7      	beq.n	2b3ae <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
   2b3be:	f000 f8c7 	bl	2b550 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
   2b3c2:	2000      	movs	r0, #0
   2b3c4:	bd1c      	pop	{r2, r3, r4, pc}
   2b3c6:	0000      	.short	0x0000
   2b3c8:	0002bce8 	.word	0x0002bce8

0002b3cc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
   2b3cc:	4901      	ldr	r1, [pc, #4]	; (2b3d4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
   2b3ce:	7008      	strb	r0, [r1, #0]
   2b3d0:	4770      	bx	lr
   2b3d2:	0000      	.short	0x0000
   2b3d4:	20000100 	.word	0x20000100

0002b3d8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
   2b3d8:	4908      	ldr	r1, [pc, #32]	; (2b3fc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
   2b3da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b3de:	fbb1 f1f2 	udiv	r1, r1, r2
   2b3e2:	b510      	push	{r4, lr}
   2b3e4:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
   2b3e8:	f009 fdea 	bl	34fc0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
   2b3ec:	f640 0148 	movw	r1, #2120	; 0x848
   2b3f0:	4288      	cmp	r0, r1
   2b3f2:	d300      	bcc.n	2b3f6 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
   2b3f4:	4608      	mov	r0, r1
   2b3f6:	b280      	uxth	r0, r0
   2b3f8:	bd10      	pop	{r4, pc}
   2b3fa:	0000      	.short	0x0000
   2b3fc:	0001527d 	.word	0x0001527d

0002b400 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
   2b400:	b510      	push	{r4, lr}
   2b402:	f003 fb93 	bl	2eb2c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   2b406:	4905      	ldr	r1, [pc, #20]	; (2b41c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
   2b408:	688a      	ldr	r2, [r1, #8]
   2b40a:	4290      	cmp	r0, r2
   2b40c:	d801      	bhi.n	2b412 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
   2b40e:	7848      	ldrb	r0, [r1, #1]
   2b410:	b108      	cbz	r0, 2b416 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
   2b412:	2000      	movs	r0, #0
   2b414:	bd10      	pop	{r4, pc}
   2b416:	2001      	movs	r0, #1
   2b418:	bd10      	pop	{r4, pc}
   2b41a:	0000      	.short	0x0000
   2b41c:	20000100 	.word	0x20000100

0002b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
   2b420:	b510      	push	{r4, lr}
   2b422:	4604      	mov	r4, r0
   2b424:	2906      	cmp	r1, #6
   2b426:	d238      	bcs.n	2b49a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
   2b428:	e8df f001 	tbb	[pc, r1]
   2b42c:	14031105 	.word	0x14031105
   2b430:	3215      	.short	0x3215
   2b432:	2100      	movs	r1, #0
   2b434:	e006      	b.n	2b444 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
   2b436:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   2b43a:	b110      	cbz	r0, 2b442 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
   2b43c:	4620      	mov	r0, r4
   2b43e:	f00a fc0c 	bl	35c5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
   2b442:	2101      	movs	r1, #1
   2b444:	4620      	mov	r0, r4
   2b446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b44a:	f000 b97f 	b.w	2b74c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
   2b44e:	2003      	movs	r0, #3
   2b450:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   2b454:	bd10      	pop	{r4, pc}
   2b456:	f003 fb75 	bl	2eb44 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
   2b45a:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
   2b45e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2b462:	f003 fc33 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2b466:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   2b46a:	4288      	cmp	r0, r1
   2b46c:	d904      	bls.n	2b478 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
   2b46e:	f240 31e3 	movw	r1, #995	; 0x3e3
   2b472:	2030      	movs	r0, #48	; 0x30
   2b474:	f7fc faec 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b478:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2b47c:	f003 fc26 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2b480:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   2b484:	1a08      	subs	r0, r1, r0
   2b486:	4906      	ldr	r1, [pc, #24]	; (2b4a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
   2b488:	688a      	ldr	r2, [r1, #8]
   2b48a:	4410      	add	r0, r2
   2b48c:	6088      	str	r0, [r1, #8]
   2b48e:	bd10      	pop	{r4, pc}
   2b490:	4620      	mov	r0, r4
   2b492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b496:	f00a bbcd 	b.w	35c34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
   2b49a:	f240 7199 	movw	r1, #1945	; 0x799
   2b49e:	e7e8      	b.n	2b472 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
   2b4a0:	20000100 	.word	0x20000100

0002b4a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
   2b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b4a8:	460c      	mov	r4, r1
   2b4aa:	4680      	mov	r8, r0
   2b4ac:	b112      	cbz	r2, 2b4b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
   2b4ae:	f240 71c3 	movw	r1, #1987	; 0x7c3
   2b4b2:	e037      	b.n	2b524 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
   2b4b4:	f003 fb3a 	bl	2eb2c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
   2b4b8:	4607      	mov	r7, r0
   2b4ba:	2000      	movs	r0, #0
   2b4bc:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
   2b4c0:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
   2b4c4:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
   2b4c8:	2001      	movs	r0, #1
   2b4ca:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
   2b4ce:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2b4d2:	2101      	movs	r1, #1
   2b4d4:	34c8      	adds	r4, #200	; 0xc8
   2b4d6:	f7fe f859 	bl	2958c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   2b4da:	f854 0f04 	ldr.w	r0, [r4, #4]!
   2b4de:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
   2b4e2:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
   2b4e6:	6821      	ldr	r1, [r4, #0]
   2b4e8:	f814 0c04 	ldrb.w	r0, [r4, #-4]
   2b4ec:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
   2b4f0:	6820      	ldr	r0, [r4, #0]
   2b4f2:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
   2b4f6:	6820      	ldr	r0, [r4, #0]
   2b4f8:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
   2b4fc:	f854 09cc 	ldr.w	r0, [r4], #-204
   2b500:	f00a fd33 	bl	35f6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
   2b504:	b110      	cbz	r0, 2b50c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
   2b506:	f44f 61ea 	mov.w	r1, #1872	; 0x750
   2b50a:	e00b      	b.n	2b524 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
   2b50c:	f00a fb9e 	bl	35c4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
   2b510:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   2b514:	4642      	mov	r2, r8
   2b516:	4906      	ldr	r1, [pc, #24]	; (2b530 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
   2b518:	f006 f8d2 	bl	316c0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
   2b51c:	2800      	cmp	r0, #0
   2b51e:	d104      	bne.n	2b52a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
   2b520:	f240 71ac 	movw	r1, #1964	; 0x7ac
   2b524:	2030      	movs	r0, #48	; 0x30
   2b526:	f7fc fa93 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b52e:	0000      	.short	0x0000
   2b530:	00035e85 	.word	0x00035e85
   2b534:	b510      	push	{r4, lr}
   2b536:	280c      	cmp	r0, #12
   2b538:	d304      	bcc.n	2b544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
   2b53a:	f240 318a 	movw	r1, #906	; 0x38a
   2b53e:	2006      	movs	r0, #6
   2b540:	f7fc fa86 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b544:	4901      	ldr	r1, [pc, #4]	; (2b54c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
   2b546:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
   2b54a:	bd10      	pop	{r4, pc}
   2b54c:	0002bd04 	.word	0x0002bd04
   2b550:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   2b554:	4d16      	ldr	r5, [pc, #88]	; (2b5b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
   2b556:	2001      	movs	r0, #1
   2b558:	7068      	strb	r0, [r5, #1]
   2b55a:	2400      	movs	r4, #0
   2b55c:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2b560:	e00b      	b.n	2b57a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
   2b562:	2100      	movs	r1, #0
   2b564:	f7fc fda2 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2b568:	0007      	movs	r7, r0
   2b56a:	d009      	beq.n	2b580 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
   2b56c:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
   2b570:	f006 f8d6 	bl	31720 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   2b574:	4638      	mov	r0, r7
   2b576:	f00a fc42 	bl	35dfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
   2b57a:	9400      	str	r4, [sp, #0]
   2b57c:	9401      	str	r4, [sp, #4]
   2b57e:	e00e      	b.n	2b59e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
   2b580:	f44f 7191 	mov.w	r1, #290	; 0x122
   2b584:	2030      	movs	r0, #48	; 0x30
   2b586:	f7fc fa63 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b58a:	9800      	ldr	r0, [sp, #0]
   2b58c:	b138      	cbz	r0, 2b59e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
   2b58e:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
   2b592:	2920      	cmp	r1, #32
   2b594:	d003      	beq.n	2b59e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
   2b596:	8800      	ldrh	r0, [r0, #0]
   2b598:	42b0      	cmp	r0, r6
   2b59a:	d1e2      	bne.n	2b562 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
   2b59c:	e004      	b.n	2b5a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
   2b59e:	4668      	mov	r0, sp
   2b5a0:	f7fc fdd6 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   2b5a4:	2800      	cmp	r0, #0
   2b5a6:	d0f0      	beq.n	2b58a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
   2b5a8:	706c      	strb	r4, [r5, #1]
   2b5aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   2b5ae:	0000      	.short	0x0000
   2b5b0:	20000100 	.word	0x20000100
   2b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b5b8:	4604      	mov	r4, r0
   2b5ba:	4839      	ldr	r0, [pc, #228]	; (2b6a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
   2b5bc:	461e      	mov	r6, r3
   2b5be:	4690      	mov	r8, r2
   2b5c0:	7880      	ldrb	r0, [r0, #2]
   2b5c2:	4689      	mov	r9, r1
   2b5c4:	2500      	movs	r5, #0
   2b5c6:	2800      	cmp	r0, #0
   2b5c8:	d063      	beq.n	2b692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
   2b5ca:	f007 fbfd 	bl	32dc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   2b5ce:	b3e0      	cbz	r0, 2b64a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
   2b5d0:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
   2b5d4:	2802      	cmp	r0, #2
   2b5d6:	d35c      	bcc.n	2b692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
   2b5d8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   2b5dc:	2802      	cmp	r0, #2
   2b5de:	d058      	beq.n	2b692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
   2b5e0:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
   2b5e4:	bb88      	cbnz	r0, 2b64a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
   2b5e6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   2b5ea:	f7ff ffa3 	bl	2b534 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   2b5ee:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   2b5f2:	b281      	uxth	r1, r0
   2b5f4:	8031      	strh	r1, [r6, #0]
   2b5f6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   2b5fa:	2700      	movs	r7, #0
   2b5fc:	2801      	cmp	r0, #1
   2b5fe:	d00d      	beq.n	2b61c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
   2b600:	6920      	ldr	r0, [r4, #16]
   2b602:	f007 fc2b 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b606:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
   2b60a:	4442      	add	r2, r8
   2b60c:	eba2 0109 	sub.w	r1, r2, r9
   2b610:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
   2b614:	1a82      	subs	r2, r0, r2
   2b616:	fb01 7502 	mla	r5, r1, r2, r7
   2b61a:	e035      	b.n	2b688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
   2b61c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
   2b620:	2803      	cmp	r0, #3
   2b622:	d039      	beq.n	2b698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
   2b624:	2101      	movs	r1, #1
   2b626:	2000      	movs	r0, #0
   2b628:	f009 f94e 	bl	348c8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   2b62c:	6a21      	ldr	r1, [r4, #32]
   2b62e:	1847      	adds	r7, r0, r1
   2b630:	8831      	ldrh	r1, [r6, #0]
   2b632:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
   2b636:	f007 fc11 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b63a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
   2b63e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
   2b642:	1a82      	subs	r2, r0, r2
   2b644:	fb01 5502 	mla	r5, r1, r2, r5
   2b648:	e000      	b.n	2b64c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
   2b64a:	e022      	b.n	2b692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
   2b64c:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
   2b650:	8831      	ldrh	r1, [r6, #0]
   2b652:	4638      	mov	r0, r7
   2b654:	f007 fc02 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b658:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
   2b65c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
   2b660:	1a41      	subs	r1, r0, r1
   2b662:	440d      	add	r5, r1
   2b664:	8831      	ldrh	r1, [r6, #0]
   2b666:	6920      	ldr	r0, [r4, #16]
   2b668:	f007 fbf8 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b66c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
   2b670:	4442      	add	r2, r8
   2b672:	eba2 0109 	sub.w	r1, r2, r9
   2b676:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
   2b67a:	1a89      	subs	r1, r1, r2
   2b67c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
   2b680:	1a82      	subs	r2, r0, r2
   2b682:	1e49      	subs	r1, r1, #1
   2b684:	fb01 5502 	mla	r5, r1, r2, r5
   2b688:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
   2b68c:	2001      	movs	r0, #1
   2b68e:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
   2b692:	4628      	mov	r0, r5
   2b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b698:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
   2b69c:	e7c6      	b.n	2b62c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
   2b69e:	0000      	.short	0x0000
   2b6a0:	20000100 	.word	0x20000100
   2b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b6a8:	4605      	mov	r5, r0
   2b6aa:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   2b6ae:	2128      	movs	r1, #40	; 0x28
   2b6b0:	f00a fa3c 	bl	35b2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
   2b6b4:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
   2b6b8:	f00b fde6 	bl	37288 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
   2b6bc:	2869      	cmp	r0, #105	; 0x69
   2b6be:	d800      	bhi.n	2b6c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
   2b6c0:	2069      	movs	r0, #105	; 0x69
   2b6c2:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
   2b6c6:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   2b6ca:	692a      	ldr	r2, [r5, #16]
   2b6cc:	440b      	add	r3, r1
   2b6ce:	429a      	cmp	r2, r3
   2b6d0:	d903      	bls.n	2b6da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
   2b6d2:	1a51      	subs	r1, r2, r1
   2b6d4:	1a0c      	subs	r4, r1, r0
   2b6d6:	3469      	adds	r4, #105	; 0x69
   2b6d8:	e000      	b.n	2b6dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
   2b6da:	2400      	movs	r4, #0
   2b6dc:	4f1a      	ldr	r7, [pc, #104]	; (2b748 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
   2b6de:	7838      	ldrb	r0, [r7, #0]
   2b6e0:	b918      	cbnz	r0, 2b6ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
   2b6e2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2b6e4:	42a0      	cmp	r0, r4
   2b6e6:	d800      	bhi.n	2b6ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
   2b6e8:	4604      	mov	r4, r0
   2b6ea:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   2b6ee:	f009 fc72 	bl	34fd6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
   2b6f2:	4606      	mov	r6, r0
   2b6f4:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   2b6f8:	f00a fc2a 	bl	35f50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
   2b6fc:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
   2b700:	4430      	add	r0, r6
   2b702:	1846      	adds	r6, r0, r1
   2b704:	1ba4      	subs	r4, r4, r6
   2b706:	2c00      	cmp	r4, #0
   2b708:	dc00      	bgt.n	2b70c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
   2b70a:	2400      	movs	r4, #0
   2b70c:	2002      	movs	r0, #2
   2b70e:	f005 f8f1 	bl	308f4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
   2b712:	4284      	cmp	r4, r0
   2b714:	d300      	bcc.n	2b718 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
   2b716:	4604      	mov	r4, r0
   2b718:	2102      	movs	r1, #2
   2b71a:	4620      	mov	r0, r4
   2b71c:	f004 fffa 	bl	30714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   2b720:	b900      	cbnz	r0, 2b724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
   2b722:	4426      	add	r6, r4
   2b724:	4642      	mov	r2, r8
   2b726:	4631      	mov	r1, r6
   2b728:	4628      	mov	r0, r5
   2b72a:	f009 fbf5 	bl	34f18 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
   2b72e:	60b8      	str	r0, [r7, #8]
   2b730:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   2b734:	f00a fc0c 	bl	35f50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
   2b738:	1a30      	subs	r0, r6, r0
   2b73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b73e:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
   2b742:	f006 ba05 	b.w	31b50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   2b746:	0000      	.short	0x0000
   2b748:	20000100 	.word	0x20000100
   2b74c:	b538      	push	{r3, r4, r5, lr}
   2b74e:	2500      	movs	r5, #0
   2b750:	4604      	mov	r4, r0
   2b752:	2901      	cmp	r1, #1
   2b754:	d102      	bne.n	2b75c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
   2b756:	4810      	ldr	r0, [pc, #64]	; (2b798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
   2b758:	7840      	ldrb	r0, [r0, #1]
   2b75a:	b170      	cbz	r0, 2b77a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
   2b75c:	2004      	movs	r0, #4
   2b75e:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   2b762:	bf00      	nop
   2b764:	f00a fa72 	bl	35c4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
   2b768:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
   2b76c:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
   2b770:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
   2b774:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
   2b778:	bd38      	pop	{r3, r4, r5, pc}
   2b77a:	9500      	str	r5, [sp, #0]
   2b77c:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
   2b780:	2301      	movs	r3, #1
   2b782:	2200      	movs	r2, #0
   2b784:	4620      	mov	r0, r4
   2b786:	f000 f809 	bl	2b79c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   2b78a:	2800      	cmp	r0, #0
   2b78c:	d0ea      	beq.n	2b764 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
   2b78e:	f240 710e 	movw	r1, #1806	; 0x70e
   2b792:	2030      	movs	r0, #48	; 0x30
   2b794:	f7fc f95c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2b798:	20000100 	.word	0x20000100
   2b79c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b7a0:	b08b      	sub	sp, #44	; 0x2c
   2b7a2:	4604      	mov	r4, r0
   2b7a4:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   2b7a8:	4699      	mov	r9, r3
   2b7aa:	460f      	mov	r7, r1
   2b7ac:	9307      	str	r3, [sp, #28]
   2b7ae:	9005      	str	r0, [sp, #20]
   2b7b0:	f00b fc8c 	bl	370cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   2b7b4:	4605      	mov	r5, r0
   2b7b6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   2b7ba:	f7ff febb 	bl	2b534 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   2b7be:	4428      	add	r0, r5
   2b7c0:	f8ad 0004 	strh.w	r0, [sp, #4]
   2b7c4:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   2b7c8:	280d      	cmp	r0, #13
   2b7ca:	d004      	beq.n	2b7d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
   2b7cc:	2000      	movs	r0, #0
   2b7ce:	9008      	str	r0, [sp, #32]
   2b7d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b7d2:	b110      	cbz	r0, 2b7da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
   2b7d4:	e02e      	b.n	2b834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   2b7d6:	2001      	movs	r0, #1
   2b7d8:	e7f9      	b.n	2b7ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
   2b7da:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   2b7de:	2803      	cmp	r0, #3
   2b7e0:	d128      	bne.n	2b834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   2b7e2:	9808      	ldr	r0, [sp, #32]
   2b7e4:	b330      	cbz	r0, 2b834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   2b7e6:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
   2b7ea:	42b8      	cmp	r0, r7
   2b7ec:	d122      	bne.n	2b834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
   2b7ee:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
   2b7f2:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
   2b7f6:	6920      	ldr	r0, [r4, #16]
   2b7f8:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
   2b7fc:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
   2b800:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
   2b804:	4408      	add	r0, r1
   2b806:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
   2b80a:	4620      	mov	r0, r4
   2b80c:	f000 fa86 	bl	2bd1c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
   2b810:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
   2b814:	6220      	str	r0, [r4, #32]
   2b816:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
   2b81a:	84a0      	strh	r0, [r4, #36]	; 0x24
   2b81c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
   2b820:	6120      	str	r0, [r4, #16]
   2b822:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
   2b826:	8320      	strh	r0, [r4, #24]
   2b828:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
   2b82c:	8360      	strh	r0, [r4, #26]
   2b82e:	2002      	movs	r0, #2
   2b830:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   2b834:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
   2b838:	f504 751e 	add.w	r5, r4, #632	; 0x278
   2b83c:	1a38      	subs	r0, r7, r0
   2b83e:	fa0f fa80 	sxth.w	sl, r0
   2b842:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
   2b846:	1a38      	subs	r0, r7, r0
   2b848:	fa0f f880 	sxth.w	r8, r0
   2b84c:	f1b8 0f00 	cmp.w	r8, #0
   2b850:	da08      	bge.n	2b864 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
   2b852:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   2b856:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
   2b85a:	46d0      	mov	r8, sl
   2b85c:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
   2b860:	2001      	movs	r0, #1
   2b862:	9007      	str	r0, [sp, #28]
   2b864:	ab01      	add	r3, sp, #4
   2b866:	4652      	mov	r2, sl
   2b868:	4641      	mov	r1, r8
   2b86a:	4620      	mov	r0, r4
   2b86c:	f7ff fea2 	bl	2b5b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
   2b870:	9004      	str	r0, [sp, #16]
   2b872:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   2b876:	f8df b334 	ldr.w	fp, [pc, #820]	; 2bbac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
   2b87a:	b140      	cbz	r0, 2b88e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
   2b87c:	2801      	cmp	r0, #1
   2b87e:	d07d      	beq.n	2b97c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
   2b880:	2802      	cmp	r0, #2
   2b882:	d051      	beq.n	2b928 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
   2b884:	2803      	cmp	r0, #3
   2b886:	d07a      	beq.n	2b97e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
   2b888:	f240 518e 	movw	r1, #1422	; 0x58e
   2b88c:	e18a      	b.n	2bba4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
   2b88e:	2101      	movs	r1, #1
   2b890:	2000      	movs	r0, #0
   2b892:	f009 f819 	bl	348c8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
   2b896:	4606      	mov	r6, r0
   2b898:	6a20      	ldr	r0, [r4, #32]
   2b89a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2b89e:	4430      	add	r0, r6
   2b8a0:	f007 fadc 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b8a4:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
   2b8a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2b8ac:	6920      	ldr	r0, [r4, #16]
   2b8ae:	f007 fad5 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b8b2:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
   2b8b6:	a907      	add	r1, sp, #28
   2b8b8:	a806      	add	r0, sp, #24
   2b8ba:	f003 f89f 	bl	2e9fc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
   2b8be:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
   2b8c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2b8c6:	f006 fa15 	bl	31cf4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
   2b8ca:	4682      	mov	sl, r0
   2b8cc:	4620      	mov	r0, r4
   2b8ce:	f00a f9b1 	bl	35c34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
   2b8d2:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2b8d6:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
   2b8da:	f003 fa23 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   2b8de:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   2b8e2:	4401      	add	r1, r0
   2b8e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2b8e8:	fbb1 f0f0 	udiv	r0, r1, r0
   2b8ec:	6a21      	ldr	r1, [r4, #32]
   2b8ee:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
   2b8f2:	4431      	add	r1, r6
   2b8f4:	1a08      	subs	r0, r1, r0
   2b8f6:	1a81      	subs	r1, r0, r2
   2b8f8:	4441      	add	r1, r8
   2b8fa:	3920      	subs	r1, #32
   2b8fc:	eba1 060a 	sub.w	r6, r1, sl
   2b900:	0050      	lsls	r0, r2, #1
   2b902:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   2b904:	3060      	adds	r0, #96	; 0x60
   2b906:	4401      	add	r1, r0
   2b908:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2b90c:	f00a fa00 	bl	35d10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
   2b910:	3022      	adds	r0, #34	; 0x22
   2b912:	f8cb 000c 	str.w	r0, [fp, #12]
   2b916:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   2b91a:	1a30      	subs	r0, r6, r0
   2b91c:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
   2b920:	d258      	bcs.n	2b9d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
   2b922:	f240 5127 	movw	r1, #1319	; 0x527
   2b926:	e13d      	b.n	2bba4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
   2b928:	6a21      	ldr	r1, [r4, #32]
   2b92a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
   2b92e:	4408      	add	r0, r1
   2b930:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2b934:	f007 fa92 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b938:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
   2b93c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2b940:	6920      	ldr	r0, [r4, #16]
   2b942:	f007 fa8b 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   2b946:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
   2b94a:	4620      	mov	r0, r4
   2b94c:	f00a f972 	bl	35c34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
   2b950:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
   2b954:	bb10      	cbnz	r0, 2b99c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
   2b956:	f1b9 0f00 	cmp.w	r9, #0
   2b95a:	d01f      	beq.n	2b99c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
   2b95c:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
   2b960:	4640      	mov	r0, r8
   2b962:	f003 f9df 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   2b966:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   2b96a:	4401      	add	r1, r0
   2b96c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2b970:	fbb1 f0f0 	udiv	r0, r1, r0
   2b974:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
   2b978:	4408      	add	r0, r1
   2b97a:	e001      	b.n	2b980 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
   2b97c:	e02b      	b.n	2b9d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
   2b97e:	e047      	b.n	2ba10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
   2b980:	6a22      	ldr	r2, [r4, #32]
   2b982:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
   2b986:	4411      	add	r1, r2
   2b988:	1a0e      	subs	r6, r1, r0
   2b98a:	4640      	mov	r0, r8
   2b98c:	f003 f99e 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2b990:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   2b994:	1a08      	subs	r0, r1, r0
   2b996:	4406      	add	r6, r0
   2b998:	3e20      	subs	r6, #32
   2b99a:	e006      	b.n	2b9aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
   2b99c:	6a21      	ldr	r1, [r4, #32]
   2b99e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
   2b9a2:	4408      	add	r0, r1
   2b9a4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
   2b9a8:	1a46      	subs	r6, r0, r1
   2b9aa:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
   2b9ae:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
   2b9b2:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
   2b9b6:	fb01 0002 	mla	r0, r1, r2, r0
   2b9ba:	0040      	lsls	r0, r0, #1
   2b9bc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   2b9be:	3060      	adds	r0, #96	; 0x60
   2b9c0:	4401      	add	r1, r0
   2b9c2:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2b9c6:	f00a f9a3 	bl	35d10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
   2b9ca:	f8cb 000c 	str.w	r0, [fp, #12]
   2b9ce:	2001      	movs	r0, #1
   2b9d0:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   2b9d4:	e061      	b.n	2ba9a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
   2b9d6:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
   2b9da:	6920      	ldr	r0, [r4, #16]
   2b9dc:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
   2b9e0:	1a86      	subs	r6, r0, r2
   2b9e2:	eb01 000a 	add.w	r0, r1, sl
   2b9e6:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
   2b9ea:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
   2b9ee:	1a40      	subs	r0, r0, r1
   2b9f0:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
   2b9f4:	1e40      	subs	r0, r0, #1
   2b9f6:	fb0c 3101 	mla	r1, ip, r1, r3
   2b9fa:	fb00 1002 	mla	r0, r0, r2, r1
   2b9fe:	0040      	lsls	r0, r0, #1
   2ba00:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   2ba02:	3060      	adds	r0, #96	; 0x60
   2ba04:	4401      	add	r1, r0
   2ba06:	fb06 f608 	mul.w	r6, r6, r8
   2ba0a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2ba0e:	e040      	b.n	2ba92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
   2ba10:	6920      	ldr	r0, [r4, #16]
   2ba12:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
   2ba16:	fb00 f008 	mul.w	r0, r0, r8
   2ba1a:	fb08 0611 	mls	r6, r8, r1, r0
   2ba1e:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
   2ba22:	2825      	cmp	r0, #37	; 0x25
   2ba24:	d003      	beq.n	2ba2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
   2ba26:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   2ba2a:	2825      	cmp	r0, #37	; 0x25
   2ba2c:	d109      	bne.n	2ba42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
   2ba2e:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
   2ba32:	1a38      	subs	r0, r7, r0
   2ba34:	b200      	sxth	r0, r0
   2ba36:	2800      	cmp	r0, #0
   2ba38:	db03      	blt.n	2ba42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
   2ba3a:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
   2ba3e:	b100      	cbz	r0, 2ba42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
   2ba40:	9005      	str	r0, [sp, #20]
   2ba42:	9807      	ldr	r0, [sp, #28]
   2ba44:	b1d8      	cbz	r0, 2ba7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
   2ba46:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
   2ba4a:	b9c0      	cbnz	r0, 2ba7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
   2ba4c:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   2ba50:	2800      	cmp	r0, #0
   2ba52:	d07d      	beq.n	2bb50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
   2ba54:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2ba58:	f003 f964 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   2ba5c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   2ba60:	4401      	add	r1, r0
   2ba62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2ba66:	fbb1 f0f0 	udiv	r0, r1, r0
   2ba6a:	1a36      	subs	r6, r6, r0
   2ba6c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
   2ba70:	f003 f92c 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2ba74:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   2ba78:	1a08      	subs	r0, r1, r0
   2ba7a:	4406      	add	r6, r0
   2ba7c:	3e20      	subs	r6, #32
   2ba7e:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
   2ba82:	eb01 000a 	add.w	r0, r1, sl
   2ba86:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
   2ba8a:	4348      	muls	r0, r1
   2ba8c:	0041      	lsls	r1, r0, #1
   2ba8e:	3160      	adds	r1, #96	; 0x60
   2ba90:	9805      	ldr	r0, [sp, #20]
   2ba92:	f00a f93d 	bl	35d10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
   2ba96:	f8cb 000c 	str.w	r0, [fp, #12]
   2ba9a:	9804      	ldr	r0, [sp, #16]
   2ba9c:	f8db 200c 	ldr.w	r2, [fp, #12]
   2baa0:	1a31      	subs	r1, r6, r0
   2baa2:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
   2baa6:	6920      	ldr	r0, [r4, #16]
   2baa8:	1b80      	subs	r0, r0, r6
   2baaa:	f2a0 2052 	subw	r0, r0, #594	; 0x252
   2baae:	f8cb 0010 	str.w	r0, [fp, #16]
   2bab2:	4282      	cmp	r2, r0
   2bab4:	d800      	bhi.n	2bab8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
   2bab6:	4610      	mov	r0, r2
   2bab8:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
   2babc:	2600      	movs	r6, #0
   2babe:	702e      	strb	r6, [r5, #0]
   2bac0:	2069      	movs	r0, #105	; 0x69
   2bac2:	8128      	strh	r0, [r5, #8]
   2bac4:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
   2bac8:	1851      	adds	r1, r2, r1
   2baca:	4170      	adcs	r0, r6
   2bacc:	e9c5 1004 	strd	r1, r0, [r5, #16]
   2bad0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2bad4:	f009 fa7f 	bl	34fd6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
   2bad8:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
   2badc:	4408      	add	r0, r1
   2bade:	6068      	str	r0, [r5, #4]
   2bae0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2bae4:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
   2bae8:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
   2baec:	72ae      	strb	r6, [r5, #10]
   2baee:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
   2baf2:	1bc0      	subs	r0, r0, r7
   2baf4:	b200      	sxth	r0, r0
   2baf6:	2800      	cmp	r0, #0
   2baf8:	dd01      	ble.n	2bafe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
   2bafa:	2002      	movs	r0, #2
   2bafc:	72a8      	strb	r0, [r5, #10]
   2bafe:	9808      	ldr	r0, [sp, #32]
   2bb00:	b338      	cbz	r0, 2bb52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
   2bb02:	f1b9 0f00 	cmp.w	r9, #0
   2bb06:	d01c      	beq.n	2bb42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
   2bb08:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
   2bb0c:	b3f1      	cbz	r1, 2bb8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
   2bb0e:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   2bb12:	bf00      	nop
   2bb14:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   2bb18:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
   2bb1c:	1c40      	adds	r0, r0, #1
   2bb1e:	4342      	muls	r2, r0
   2bb20:	428a      	cmp	r2, r1
   2bb22:	d20e      	bcs.n	2bb42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
   2bb24:	7aa8      	ldrb	r0, [r5, #10]
   2bb26:	b160      	cbz	r0, 2bb42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
   2bb28:	72ae      	strb	r6, [r5, #10]
   2bb2a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
   2bb2e:	1c40      	adds	r0, r0, #1
   2bb30:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
   2bb34:	f7fe f980 	bl	29e38 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   2bb38:	f000 0007 	and.w	r0, r0, #7
   2bb3c:	1c40      	adds	r0, r0, #1
   2bb3e:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
   2bb42:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   2bb46:	4629      	mov	r1, r5
   2bb48:	f00a f8f4 	bl	35d34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   2bb4c:	b340      	cbz	r0, 2bba0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
   2bb4e:	e001      	b.n	2bb54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
   2bb50:	e009      	b.n	2bb66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
   2bb52:	e00b      	b.n	2bb6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
   2bb54:	980d      	ldr	r0, [sp, #52]	; 0x34
   2bb56:	f080 0001 	eor.w	r0, r0, #1
   2bb5a:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
   2bb5e:	2000      	movs	r0, #0
   2bb60:	b00f      	add	sp, #60	; 0x3c
   2bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb66:	f240 5179 	movw	r1, #1401	; 0x579
   2bb6a:	e01b      	b.n	2bba4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
   2bb6c:	f1b9 0f00 	cmp.w	r9, #0
   2bb70:	d1ca      	bne.n	2bb08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
   2bb72:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   2bb76:	2800      	cmp	r0, #0
   2bb78:	d0e3      	beq.n	2bb42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
   2bb7a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
   2bb7e:	6920      	ldr	r0, [r4, #16]
   2bb80:	1a41      	subs	r1, r0, r1
   2bb82:	4628      	mov	r0, r5
   2bb84:	f008 feb6 	bl	348f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   2bb88:	0400      	lsls	r0, r0, #16
   2bb8a:	e000      	b.n	2bb8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
   2bb8c:	e006      	b.n	2bb9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
   2bb8e:	0c00      	lsrs	r0, r0, #16
   2bb90:	d0d7      	beq.n	2bb42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
   2bb92:	9918      	ldr	r1, [sp, #96]	; 0x60
   2bb94:	b101      	cbz	r1, 2bb98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
   2bb96:	8008      	strh	r0, [r1, #0]
   2bb98:	2001      	movs	r0, #1
   2bb9a:	e7e1      	b.n	2bb60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
   2bb9c:	2000      	movs	r0, #0
   2bb9e:	e7b9      	b.n	2bb14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
   2bba0:	f240 51d7 	movw	r1, #1495	; 0x5d7
   2bba4:	2030      	movs	r0, #48	; 0x30
   2bba6:	f7fb ff53 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2bbaa:	0000      	.short	0x0000
   2bbac:	20000100 	.word	0x20000100
   2bbb0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   2bbb2:	4604      	mov	r4, r0
   2bbb4:	f00b fb71 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   2bbb8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
   2bbbc:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
   2bbc0:	1ac0      	subs	r0, r0, r3
   2bbc2:	eb61 0102 	sbc.w	r1, r1, r2
   2bbc6:	2200      	movs	r2, #0
   2bbc8:	4613      	mov	r3, r2
   2bbca:	1a12      	subs	r2, r2, r0
   2bbcc:	418b      	sbcs	r3, r1
   2bbce:	db02      	blt.n	2bbd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
   2bbd0:	f240 6154 	movw	r1, #1620	; 0x654
   2bbd4:	e04d      	b.n	2bc72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
   2bbd6:	1c42      	adds	r2, r0, #1
   2bbd8:	f171 0100 	sbcs.w	r1, r1, #0
   2bbdc:	db02      	blt.n	2bbe4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
   2bbde:	f240 6155 	movw	r1, #1621	; 0x655
   2bbe2:	e046      	b.n	2bc72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
   2bbe4:	6922      	ldr	r2, [r4, #16]
   2bbe6:	2100      	movs	r1, #0
   2bbe8:	b10a      	cbz	r2, 2bbee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
   2bbea:	fbb0 f1f2 	udiv	r1, r0, r2
   2bbee:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   2bbf2:	280d      	cmp	r0, #13
   2bbf4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
   2bbf8:	d01b      	beq.n	2bc32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
   2bbfa:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   2bbfe:	1853      	adds	r3, r2, r1
   2bc00:	1ac3      	subs	r3, r0, r3
   2bc02:	b21b      	sxth	r3, r3
   2bc04:	2b00      	cmp	r3, #0
   2bc06:	db01      	blt.n	2bc0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
   2bc08:	1c40      	adds	r0, r0, #1
   2bc0a:	e001      	b.n	2bc10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
   2bc0c:	1c49      	adds	r1, r1, #1
   2bc0e:	1850      	adds	r0, r2, r1
   2bc10:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
   2bc14:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
   2bc18:	f88d 0000 	strb.w	r0, [sp]
   2bc1c:	9800      	ldr	r0, [sp, #0]
   2bc1e:	9000      	str	r0, [sp, #0]
   2bc20:	f89d 0000 	ldrb.w	r0, [sp]
   2bc24:	b940      	cbnz	r0, 2bc38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
   2bc26:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
   2bc2a:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
   2bc2e:	4288      	cmp	r0, r1
   2bc30:	d102      	bne.n	2bc38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
   2bc32:	1c40      	adds	r0, r0, #1
   2bc34:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
   2bc38:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
   2bc3c:	1c40      	adds	r0, r0, #1
   2bc3e:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
   2bc42:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
   2bc46:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
   2bc4a:	1a40      	subs	r0, r0, r1
   2bc4c:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   2bc50:	1e40      	subs	r0, r0, #1
   2bc52:	4408      	add	r0, r1
   2bc54:	b285      	uxth	r5, r0
   2bc56:	e026      	b.n	2bca6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
   2bc58:	a801      	add	r0, sp, #4
   2bc5a:	2300      	movs	r3, #0
   2bc5c:	9000      	str	r0, [sp, #0]
   2bc5e:	461a      	mov	r2, r3
   2bc60:	4620      	mov	r0, r4
   2bc62:	f7ff fd9b 	bl	2b79c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   2bc66:	2800      	cmp	r0, #0
   2bc68:	d03a      	beq.n	2bce0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
   2bc6a:	2801      	cmp	r0, #1
   2bc6c:	d004      	beq.n	2bc78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
   2bc6e:	f240 6194 	movw	r1, #1684	; 0x694
   2bc72:	2030      	movs	r0, #48	; 0x30
   2bc74:	f7fb feec 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2bc78:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
   2bc7c:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
   2bc80:	1a42      	subs	r2, r0, r1
   2bc82:	b212      	sxth	r2, r2
   2bc84:	2a00      	cmp	r2, #0
   2bc86:	da09      	bge.n	2bc9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
   2bc88:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2bc8c:	4402      	add	r2, r0
   2bc8e:	1aaa      	subs	r2, r5, r2
   2bc90:	b212      	sxth	r2, r2
   2bc92:	2a00      	cmp	r2, #0
   2bc94:	da02      	bge.n	2bc9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
   2bc96:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
   2bc9a:	e004      	b.n	2bca6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
   2bc9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2bca0:	4408      	add	r0, r1
   2bca2:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
   2bca6:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
   2bcaa:	1a68      	subs	r0, r5, r1
   2bcac:	b200      	sxth	r0, r0
   2bcae:	2800      	cmp	r0, #0
   2bcb0:	dad2      	bge.n	2bc58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
   2bcb2:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
   2bcb6:	b188      	cbz	r0, 2bcdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
   2bcb8:	f05f 0008 	movs.w	r0, #8
   2bcbc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
   2bcc0:	2202      	movs	r2, #2
   2bcc2:	4908      	ldr	r1, [pc, #32]	; (2bce4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
   2bcc4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   2bcc8:	f009 f8ee 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2bccc:	4620      	mov	r0, r4
   2bcce:	f00a f9c2 	bl	36056 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   2bcd2:	4620      	mov	r0, r4
   2bcd4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   2bcd8:	f00a b891 	b.w	35dfe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
   2bcdc:	203e      	movs	r0, #62	; 0x3e
   2bcde:	e7ed      	b.n	2bcbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
   2bce0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   2bce2:	0000      	.short	0x0000
   2bce4:	00035165 	.word	0x00035165
   2bce8:	00000000 	.word	0x00000000
   2bcec:	00010000 	.word	0x00010000
   2bcf0:	00000000 	.word	0x00000000
   2bcf4:	00010000 	.word	0x00010000
   2bcf8:	00000000 	.word	0x00000000
   2bcfc:	00001e14 	.word	0x00001e14
   2bd00:	00001130 	.word	0x00001130
   2bd04:	00fa01f4 	.word	0x00fa01f4
   2bd08:	00640096 	.word	0x00640096
   2bd0c:	0032004b 	.word	0x0032004b
   2bd10:	0014001e 	.word	0x0014001e
   2bd14:	0005000a 	.word	0x0005000a
   2bd18:	00010002 	.word	0x00010002

0002bd1c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
   2bd1c:	b510      	push	{r4, lr}
   2bd1e:	4604      	mov	r4, r0
   2bd20:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
   2bd24:	6921      	ldr	r1, [r4, #16]
   2bd26:	4288      	cmp	r0, r1
   2bd28:	d109      	bne.n	2bd3e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   2bd2a:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
   2bd2e:	8b22      	ldrh	r2, [r4, #24]
   2bd30:	4291      	cmp	r1, r2
   2bd32:	d104      	bne.n	2bd3e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
   2bd34:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
   2bd38:	8b62      	ldrh	r2, [r4, #26]
   2bd3a:	4291      	cmp	r1, r2
   2bd3c:	d014      	beq.n	2bd68 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
   2bd3e:	8821      	ldrh	r1, [r4, #0]
   2bd40:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
   2bd44:	f008 fd02 	bl	3474c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
   2bd48:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
   2bd4c:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
   2bd50:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
   2bd54:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
   2bd58:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
   2bd5c:	2202      	movs	r2, #2
   2bd5e:	4907      	ldr	r1, [pc, #28]	; (2bd7c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
   2bd60:	f504 70df 	add.w	r0, r4, #446	; 0x1be
   2bd64:	f009 f8b4 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   2bd68:	2102      	movs	r1, #2
   2bd6a:	4620      	mov	r0, r4
   2bd6c:	f7fd fc0e 	bl	2958c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   2bd70:	2000      	movs	r0, #0
   2bd72:	f804 0f9e 	strb.w	r0, [r4, #158]!
   2bd76:	2003      	movs	r0, #3
   2bd78:	70e0      	strb	r0, [r4, #3]
   2bd7a:	bd10      	pop	{r4, pc}
   2bd7c:	000351f3 	.word	0x000351f3

0002bd80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
   2bd80:	4806      	ldr	r0, [pc, #24]	; (2bd9c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
   2bd82:	4905      	ldr	r1, [pc, #20]	; (2bd98 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
   2bd84:	6501      	str	r1, [r0, #80]	; 0x50
   2bd86:	4906      	ldr	r1, [pc, #24]	; (2bda0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
   2bd88:	6541      	str	r1, [r0, #84]	; 0x54
   2bd8a:	4807      	ldr	r0, [pc, #28]	; (2bda8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
   2bd8c:	4905      	ldr	r1, [pc, #20]	; (2bda4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
   2bd8e:	6501      	str	r1, [r0, #80]	; 0x50
   2bd90:	4906      	ldr	r1, [pc, #24]	; (2bdac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
   2bd92:	6541      	str	r1, [r0, #84]	; 0x54
   2bd94:	4770      	bx	lr
   2bd96:	0000      	.short	0x0000
   2bd98:	0002d079 	.word	0x0002d079
   2bd9c:	2000012c 	.word	0x2000012c
   2bda0:	0002d161 	.word	0x0002d161
   2bda4:	00035215 	.word	0x00035215
   2bda8:	200001d8 	.word	0x200001d8
   2bdac:	0002d5b1 	.word	0x0002d5b1

0002bdb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
   2bdb0:	481e      	ldr	r0, [pc, #120]	; (2be2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
   2bdb2:	491d      	ldr	r1, [pc, #116]	; (2be28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
   2bdb4:	6081      	str	r1, [r0, #8]
   2bdb6:	491e      	ldr	r1, [pc, #120]	; (2be30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
   2bdb8:	6041      	str	r1, [r0, #4]
   2bdba:	491e      	ldr	r1, [pc, #120]	; (2be34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
   2bdbc:	6001      	str	r1, [r0, #0]
   2bdbe:	491e      	ldr	r1, [pc, #120]	; (2be38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
   2bdc0:	6281      	str	r1, [r0, #40]	; 0x28
   2bdc2:	491e      	ldr	r1, [pc, #120]	; (2be3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
   2bdc4:	62c1      	str	r1, [r0, #44]	; 0x2c
   2bdc6:	491e      	ldr	r1, [pc, #120]	; (2be40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
   2bdc8:	60c1      	str	r1, [r0, #12]
   2bdca:	491e      	ldr	r1, [pc, #120]	; (2be44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
   2bdcc:	6181      	str	r1, [r0, #24]
   2bdce:	491e      	ldr	r1, [pc, #120]	; (2be48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
   2bdd0:	6301      	str	r1, [r0, #48]	; 0x30
   2bdd2:	491e      	ldr	r1, [pc, #120]	; (2be4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
   2bdd4:	6201      	str	r1, [r0, #32]
   2bdd6:	491e      	ldr	r1, [pc, #120]	; (2be50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
   2bdd8:	64c1      	str	r1, [r0, #76]	; 0x4c
   2bdda:	491e      	ldr	r1, [pc, #120]	; (2be54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
   2bddc:	6481      	str	r1, [r0, #72]	; 0x48
   2bdde:	491e      	ldr	r1, [pc, #120]	; (2be58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
   2bde0:	6441      	str	r1, [r0, #68]	; 0x44
   2bde2:	491e      	ldr	r1, [pc, #120]	; (2be5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
   2bde4:	6341      	str	r1, [r0, #52]	; 0x34
   2bde6:	491e      	ldr	r1, [pc, #120]	; (2be60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
   2bde8:	61c1      	str	r1, [r0, #28]
   2bdea:	491e      	ldr	r1, [pc, #120]	; (2be64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
   2bdec:	6241      	str	r1, [r0, #36]	; 0x24
   2bdee:	481f      	ldr	r0, [pc, #124]	; (2be6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
   2bdf0:	491d      	ldr	r1, [pc, #116]	; (2be68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
   2bdf2:	6081      	str	r1, [r0, #8]
   2bdf4:	491e      	ldr	r1, [pc, #120]	; (2be70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
   2bdf6:	61c1      	str	r1, [r0, #28]
   2bdf8:	491e      	ldr	r1, [pc, #120]	; (2be74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
   2bdfa:	6241      	str	r1, [r0, #36]	; 0x24
   2bdfc:	491e      	ldr	r1, [pc, #120]	; (2be78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
   2bdfe:	62c1      	str	r1, [r0, #44]	; 0x2c
   2be00:	491e      	ldr	r1, [pc, #120]	; (2be7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
   2be02:	6101      	str	r1, [r0, #16]
   2be04:	491e      	ldr	r1, [pc, #120]	; (2be80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
   2be06:	6141      	str	r1, [r0, #20]
   2be08:	491e      	ldr	r1, [pc, #120]	; (2be84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
   2be0a:	6441      	str	r1, [r0, #68]	; 0x44
   2be0c:	491e      	ldr	r1, [pc, #120]	; (2be88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
   2be0e:	6341      	str	r1, [r0, #52]	; 0x34
   2be10:	491e      	ldr	r1, [pc, #120]	; (2be8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
   2be12:	6181      	str	r1, [r0, #24]
   2be14:	491e      	ldr	r1, [pc, #120]	; (2be90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
   2be16:	6301      	str	r1, [r0, #48]	; 0x30
   2be18:	491e      	ldr	r1, [pc, #120]	; (2be94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
   2be1a:	6481      	str	r1, [r0, #72]	; 0x48
   2be1c:	491e      	ldr	r1, [pc, #120]	; (2be98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
   2be1e:	64c1      	str	r1, [r0, #76]	; 0x4c
   2be20:	491e      	ldr	r1, [pc, #120]	; (2be9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
   2be22:	6381      	str	r1, [r0, #56]	; 0x38
   2be24:	4770      	bx	lr
   2be26:	0000      	.short	0x0000
   2be28:	0002d4c5 	.word	0x0002d4c5
   2be2c:	2000012c 	.word	0x2000012c
   2be30:	0002ce61 	.word	0x0002ce61
   2be34:	0002cecd 	.word	0x0002cecd
   2be38:	0002d16d 	.word	0x0002d16d
   2be3c:	000360cf 	.word	0x000360cf
   2be40:	0002cf8d 	.word	0x0002cf8d
   2be44:	0002d49d 	.word	0x0002d49d
   2be48:	0002d55d 	.word	0x0002d55d
   2be4c:	0002d02d 	.word	0x0002d02d
   2be50:	0003540d 	.word	0x0003540d
   2be54:	000353c5 	.word	0x000353c5
   2be58:	0002d415 	.word	0x0002d415
   2be5c:	0002d449 	.word	0x0002d449
   2be60:	0002d4d1 	.word	0x0002d4d1
   2be64:	0002d039 	.word	0x0002d039
   2be68:	000351d5 	.word	0x000351d5
   2be6c:	200001d8 	.word	0x200001d8
   2be70:	0002d69d 	.word	0x0002d69d
   2be74:	0003619d 	.word	0x0003619d
   2be78:	000361a1 	.word	0x000361a1
   2be7c:	00036177 	.word	0x00036177
   2be80:	00036209 	.word	0x00036209
   2be84:	0002d5f1 	.word	0x0002d5f1
   2be88:	000361e7 	.word	0x000361e7
   2be8c:	0002d629 	.word	0x0002d629
   2be90:	00036227 	.word	0x00036227
   2be94:	000353e9 	.word	0x000353e9
   2be98:	00035433 	.word	0x00035433
   2be9c:	00036205 	.word	0x00036205

0002bea0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
   2bea0:	4806      	ldr	r0, [pc, #24]	; (2bebc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
   2bea2:	4905      	ldr	r1, [pc, #20]	; (2beb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
   2bea4:	6581      	str	r1, [r0, #88]	; 0x58
   2bea6:	4906      	ldr	r1, [pc, #24]	; (2bec0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
   2bea8:	6601      	str	r1, [r0, #96]	; 0x60
   2beaa:	4807      	ldr	r0, [pc, #28]	; (2bec8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
   2beac:	4905      	ldr	r1, [pc, #20]	; (2bec4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
   2beae:	6581      	str	r1, [r0, #88]	; 0x58
   2beb0:	4906      	ldr	r1, [pc, #24]	; (2becc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
   2beb2:	65c1      	str	r1, [r0, #92]	; 0x5c
   2beb4:	4770      	bx	lr
   2beb6:	0000      	.short	0x0000
   2beb8:	0002d1bd 	.word	0x0002d1bd
   2bebc:	2000012c 	.word	0x2000012c
   2bec0:	0002d2a1 	.word	0x0002d2a1
   2bec4:	00037101 	.word	0x00037101
   2bec8:	200001d8 	.word	0x200001d8
   2becc:	000361c7 	.word	0x000361c7

0002bed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
   2bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bed2:	4c7c      	ldr	r4, [pc, #496]	; (2c0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
   2bed4:	2101      	movs	r1, #1
   2bed6:	f1a4 0610 	sub.w	r6, r4, #16
   2beda:	7021      	strb	r1, [r4, #0]
   2bedc:	2500      	movs	r5, #0
   2bede:	6060      	str	r0, [r4, #4]
   2bee0:	8075      	strh	r5, [r6, #2]
   2bee2:	7075      	strb	r5, [r6, #1]
   2bee4:	7035      	strb	r5, [r6, #0]
   2bee6:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
   2beea:	8800      	ldrh	r0, [r0, #0]
   2beec:	f7fc fa88 	bl	28400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   2bef0:	b180      	cbz	r0, 2bf14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
   2bef2:	6860      	ldr	r0, [r4, #4]
   2bef4:	8800      	ldrh	r0, [r0, #0]
   2bef6:	f7fc fceb 	bl	288d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
   2befa:	6860      	ldr	r0, [r4, #4]
   2befc:	8800      	ldrh	r0, [r0, #0]
   2befe:	f7fc fc8f 	bl	28820 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
   2bf02:	6860      	ldr	r0, [r4, #4]
   2bf04:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
   2bf08:	b1c9      	cbz	r1, 2bf3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
   2bf0a:	3080      	adds	r0, #128	; 0x80
   2bf0c:	f00a f8b2 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2bf10:	b118      	cbz	r0, 2bf1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
   2bf12:	e014      	b.n	2bf3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
   2bf14:	f640 419f 	movw	r1, #3231	; 0xc9f
   2bf18:	e06c      	b.n	2bff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
   2bf1a:	6860      	ldr	r0, [r4, #4]
   2bf1c:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   2bf20:	f88d 1000 	strb.w	r1, [sp]
   2bf24:	9900      	ldr	r1, [sp, #0]
   2bf26:	9100      	str	r1, [sp, #0]
   2bf28:	f89d 1000 	ldrb.w	r1, [sp]
   2bf2c:	b139      	cbz	r1, 2bf3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
   2bf2e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
   2bf32:	2301      	movs	r3, #1
   2bf34:	4619      	mov	r1, r3
   2bf36:	3080      	adds	r0, #128	; 0x80
   2bf38:	f008 fc0e 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2bf3c:	b180      	cbz	r0, 2bf60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
   2bf3e:	6860      	ldr	r0, [r4, #4]
   2bf40:	3080      	adds	r0, #128	; 0x80
   2bf42:	f00a f897 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2bf46:	b128      	cbz	r0, 2bf54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
   2bf48:	6860      	ldr	r0, [r4, #4]
   2bf4a:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
   2bf4e:	bf00      	nop
   2bf50:	f000 fb84 	bl	2c65c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
   2bf54:	6860      	ldr	r0, [r4, #4]
   2bf56:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
   2bf5a:	b189      	cbz	r1, 2bf80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
   2bf5c:	80b5      	strh	r5, [r6, #4]
   2bf5e:	e01e      	b.n	2bf9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
   2bf60:	6860      	ldr	r0, [r4, #4]
   2bf62:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
   2bf66:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
   2bf6a:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
   2bf6e:	2100      	movs	r1, #0
   2bf70:	2002      	movs	r0, #2
   2bf72:	f000 fe39 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2bf76:	6860      	ldr	r0, [r4, #4]
   2bf78:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
   2bf7c:	2002      	movs	r0, #2
   2bf7e:	e7e7      	b.n	2bf50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
   2bf80:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
   2bf84:	f88d 1000 	strb.w	r1, [sp]
   2bf88:	9900      	ldr	r1, [sp, #0]
   2bf8a:	9100      	str	r1, [sp, #0]
   2bf8c:	f89d 1000 	ldrb.w	r1, [sp]
   2bf90:	b919      	cbnz	r1, 2bf9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
   2bf92:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
   2bf94:	8b02      	ldrh	r2, [r0, #24]
   2bf96:	4291      	cmp	r1, r2
   2bf98:	d800      	bhi.n	2bf9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
   2bf9a:	8b01      	ldrh	r1, [r0, #24]
   2bf9c:	80b1      	strh	r1, [r6, #4]
   2bf9e:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
   2bfa2:	1e49      	subs	r1, r1, #1
   2bfa4:	b28f      	uxth	r7, r1
   2bfa6:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
   2bfaa:	4439      	add	r1, r7
   2bfac:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
   2bfb0:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
   2bfb4:	4439      	add	r1, r7
   2bfb6:	8001      	strh	r1, [r0, #0]
   2bfb8:	f001 fba0 	bl	2d6fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
   2bfbc:	b120      	cbz	r0, 2bfc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
   2bfbe:	6860      	ldr	r0, [r4, #4]
   2bfc0:	f850 1fc0 	ldr.w	r1, [r0, #192]!
   2bfc4:	4439      	add	r1, r7
   2bfc6:	6001      	str	r1, [r0, #0]
   2bfc8:	6861      	ldr	r1, [r4, #4]
   2bfca:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
   2bfce:	2801      	cmp	r0, #1
   2bfd0:	d802      	bhi.n	2bfd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
   2bfd2:	1c40      	adds	r0, r0, #1
   2bfd4:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
   2bfd8:	b10f      	cbz	r7, 2bfde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
   2bfda:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
   2bfde:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
   2bfe2:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
   2bfe6:	f101 0080 	add.w	r0, r1, #128	; 0x80
   2bfea:	f008 fd61 	bl	34ab0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
   2bfee:	b120      	cbz	r0, 2bffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
   2bff0:	f640 41e6 	movw	r1, #3302	; 0xce6
   2bff4:	2031      	movs	r0, #49	; 0x31
   2bff6:	f7fb fd2b 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2bffa:	6860      	ldr	r0, [r4, #4]
   2bffc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2c000:	290a      	cmp	r1, #10
   2c002:	d001      	beq.n	2c008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
   2c004:	290b      	cmp	r1, #11
   2c006:	d119      	bne.n	2c03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   2c008:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
   2c00c:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
   2c010:	1ad2      	subs	r2, r2, r3
   2c012:	b212      	sxth	r2, r2
   2c014:	2a00      	cmp	r2, #0
   2c016:	db11      	blt.n	2c03c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
   2c018:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
   2c01c:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
   2c020:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
   2c024:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
   2c028:	2103      	movs	r1, #3
   2c02a:	f7fd faaf 	bl	2958c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   2c02e:	6860      	ldr	r0, [r4, #4]
   2c030:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
   2c034:	21ff      	movs	r1, #255	; 0xff
   2c036:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
   2c03a:	e026      	b.n	2c08a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   2c03c:	2925      	cmp	r1, #37	; 0x25
   2c03e:	d111      	bne.n	2c064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   2c040:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
   2c044:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
   2c048:	1a89      	subs	r1, r1, r2
   2c04a:	b209      	sxth	r1, r1
   2c04c:	2900      	cmp	r1, #0
   2c04e:	db09      	blt.n	2c064 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
   2c050:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
   2c054:	f000 fe82 	bl	2cd5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   2c058:	2800      	cmp	r0, #0
   2c05a:	6860      	ldr	r0, [r4, #4]
   2c05c:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
   2c060:	d029      	beq.n	2c0b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   2c062:	e012      	b.n	2c08a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   2c064:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
   2c068:	2925      	cmp	r1, #37	; 0x25
   2c06a:	d001      	beq.n	2c070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
   2c06c:	2927      	cmp	r1, #39	; 0x27
   2c06e:	d10c      	bne.n	2c08a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   2c070:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
   2c074:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
   2c078:	1a89      	subs	r1, r1, r2
   2c07a:	b209      	sxth	r1, r1
   2c07c:	2900      	cmp	r1, #0
   2c07e:	db04      	blt.n	2c08a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
   2c080:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
   2c084:	f000 fe6a 	bl	2cd5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
   2c088:	b1a8      	cbz	r0, 2c0b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
   2c08a:	480f      	ldr	r0, [pc, #60]	; (2c0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
   2c08c:	9000      	str	r0, [sp, #0]
   2c08e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   2c092:	4b0e      	ldr	r3, [pc, #56]	; (2c0cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
   2c094:	4a0e      	ldr	r2, [pc, #56]	; (2c0d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
   2c096:	f7fc fca9 	bl	289ec <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
   2c09a:	6860      	ldr	r0, [r4, #4]
   2c09c:	2301      	movs	r3, #1
   2c09e:	2105      	movs	r1, #5
   2c0a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c0a4:	3080      	adds	r0, #128	; 0x80
   2c0a6:	f008 fb57 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c0aa:	2800      	cmp	r0, #0
   2c0ac:	d009      	beq.n	2c0c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
   2c0ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c0b2:	f7fc bc95 	b.w	289e0 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
   2c0b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c0ba:	2100      	movs	r1, #0
   2c0bc:	4608      	mov	r0, r1
   2c0be:	f000 bb9f 	b.w	2c800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
   2c0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c0c4:	20000124 	.word	0x20000124
   2c0c8:	0002c801 	.word	0x0002c801
   2c0cc:	0002c351 	.word	0x0002c351
   2c0d0:	0002cca9 	.word	0x0002cca9
   2c0d4:	491d      	ldr	r1, [pc, #116]	; (2c14c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
   2c0d6:	b508      	push	{r3, lr}
   2c0d8:	6849      	ldr	r1, [r1, #4]
   2c0da:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
   2c0de:	b1c0      	cbz	r0, 2c112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
   2c0e0:	2a11      	cmp	r2, #17
   2c0e2:	d006      	beq.n	2c0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
   2c0e4:	2a15      	cmp	r2, #21
   2c0e6:	d007      	beq.n	2c0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
   2c0e8:	2a16      	cmp	r2, #22
   2c0ea:	d009      	beq.n	2c100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
   2c0ec:	2a1c      	cmp	r2, #28
   2c0ee:	d128      	bne.n	2c142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
   2c0f0:	e009      	b.n	2c106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
   2c0f2:	2101      	movs	r1, #1
   2c0f4:	200b      	movs	r0, #11
   2c0f6:	e008      	b.n	2c10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
   2c0f8:	4814      	ldr	r0, [pc, #80]	; (2c14c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
   2c0fa:	f009 fff4 	bl	360e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
   2c0fe:	e006      	b.n	2c10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
   2c100:	f000 fd90 	bl	2cc24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
   2c104:	e003      	b.n	2c10e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
   2c106:	2101      	movs	r1, #1
   2c108:	2006      	movs	r0, #6
   2c10a:	f000 fd6d 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2c10e:	2001      	movs	r0, #1
   2c110:	bd08      	pop	{r3, pc}
   2c112:	2a22      	cmp	r2, #34	; 0x22
   2c114:	d004      	beq.n	2c120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
   2c116:	2a2f      	cmp	r2, #47	; 0x2f
   2c118:	d113      	bne.n	2c142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
   2c11a:	2101      	movs	r1, #1
   2c11c:	2011      	movs	r0, #17
   2c11e:	e7f4      	b.n	2c10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
   2c120:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
   2c124:	2802      	cmp	r0, #2
   2c126:	d00e      	beq.n	2c146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
   2c128:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
   2c12c:	2801      	cmp	r0, #1
   2c12e:	d108      	bne.n	2c142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
   2c130:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
   2c134:	f88d 0000 	strb.w	r0, [sp]
   2c138:	9800      	ldr	r0, [sp, #0]
   2c13a:	9000      	str	r0, [sp, #0]
   2c13c:	f89d 0000 	ldrb.w	r0, [sp]
   2c140:	b108      	cbz	r0, 2c146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
   2c142:	2000      	movs	r0, #0
   2c144:	bd08      	pop	{r3, pc}
   2c146:	2101      	movs	r1, #1
   2c148:	2017      	movs	r0, #23
   2c14a:	e7de      	b.n	2c10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
   2c14c:	20000124 	.word	0x20000124
   2c150:	b538      	push	{r3, r4, r5, lr}
   2c152:	2800      	cmp	r0, #0
   2c154:	d173      	bne.n	2c23e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
   2c156:	4c3b      	ldr	r4, [pc, #236]	; (2c244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
   2c158:	6860      	ldr	r0, [r4, #4]
   2c15a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
   2c15e:	07ca      	lsls	r2, r1, #31
   2c160:	d002      	beq.n	2c168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
   2c162:	2101      	movs	r1, #1
   2c164:	2009      	movs	r0, #9
   2c166:	e066      	b.n	2c236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
   2c168:	078a      	lsls	r2, r1, #30
   2c16a:	d50a      	bpl.n	2c182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
   2c16c:	2101      	movs	r1, #1
   2c16e:	200c      	movs	r0, #12
   2c170:	f000 fd3a 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2c174:	6860      	ldr	r0, [r4, #4]
   2c176:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
   2c17a:	f041 0101 	orr.w	r1, r1, #1
   2c17e:	7001      	strb	r1, [r0, #0]
   2c180:	e05b      	b.n	2c23a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
   2c182:	074a      	lsls	r2, r1, #29
   2c184:	d502      	bpl.n	2c18c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
   2c186:	2101      	movs	r1, #1
   2c188:	2013      	movs	r0, #19
   2c18a:	e054      	b.n	2c236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
   2c18c:	070a      	lsls	r2, r1, #28
   2c18e:	d506      	bpl.n	2c19e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
   2c190:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   2c194:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
   2c198:	2101      	movs	r1, #1
   2c19a:	2007      	movs	r0, #7
   2c19c:	e04b      	b.n	2c236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
   2c19e:	f011 0f30 	tst.w	r1, #48	; 0x30
   2c1a2:	d044      	beq.n	2c22e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
   2c1a4:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
   2c1a8:	f88d 1000 	strb.w	r1, [sp]
   2c1ac:	9900      	ldr	r1, [sp, #0]
   2c1ae:	9100      	str	r1, [sp, #0]
   2c1b0:	f89d 1000 	ldrb.w	r1, [sp]
   2c1b4:	bbc1      	cbnz	r1, 2c228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
   2c1b6:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
   2c1ba:	2500      	movs	r5, #0
   2c1bc:	f88d 1000 	strb.w	r1, [sp]
   2c1c0:	9900      	ldr	r1, [sp, #0]
   2c1c2:	9100      	str	r1, [sp, #0]
   2c1c4:	f89d 1000 	ldrb.w	r1, [sp]
   2c1c8:	b1c1      	cbz	r1, 2c1fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
   2c1ca:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2c1ce:	2925      	cmp	r1, #37	; 0x25
   2c1d0:	d02b      	beq.n	2c22a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
   2c1d2:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
   2c1d6:	2925      	cmp	r1, #37	; 0x25
   2c1d8:	d027      	beq.n	2c22a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
   2c1da:	2300      	movs	r3, #0
   2c1dc:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
   2c1e0:	f500 7199 	add.w	r1, r0, #306	; 0x132
   2c1e4:	f008 fe8a 	bl	34efc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   2c1e8:	6860      	ldr	r0, [r4, #4]
   2c1ea:	f850 1f8c 	ldr.w	r1, [r0, #140]!
   2c1ee:	f021 0120 	bic.w	r1, r1, #32
   2c1f2:	f041 0110 	orr.w	r1, r1, #16
   2c1f6:	6001      	str	r1, [r0, #0]
   2c1f8:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
   2c1fc:	6860      	ldr	r0, [r4, #4]
   2c1fe:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
   2c202:	06c9      	lsls	r1, r1, #27
   2c204:	d51b      	bpl.n	2c23e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
   2c206:	f008 fe94 	bl	34f32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   2c20a:	480e      	ldr	r0, [pc, #56]	; (2c244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
   2c20c:	f009 f852 	bl	352b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
   2c210:	6861      	ldr	r1, [r4, #4]
   2c212:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   2c216:	8bc2      	ldrh	r2, [r0, #30]
   2c218:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
   2c21c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   2c21e:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
   2c222:	2101      	movs	r1, #1
   2c224:	2015      	movs	r0, #21
   2c226:	e006      	b.n	2c236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
   2c228:	e009      	b.n	2c23e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
   2c22a:	2301      	movs	r3, #1
   2c22c:	e7d6      	b.n	2c1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
   2c22e:	0648      	lsls	r0, r1, #25
   2c230:	d505      	bpl.n	2c23e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
   2c232:	2101      	movs	r1, #1
   2c234:	2024      	movs	r0, #36	; 0x24
   2c236:	f000 fcd7 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2c23a:	2001      	movs	r0, #1
   2c23c:	bd38      	pop	{r3, r4, r5, pc}
   2c23e:	2000      	movs	r0, #0
   2c240:	bd38      	pop	{r3, r4, r5, pc}
   2c242:	0000      	.short	0x0000
   2c244:	20000124 	.word	0x20000124
   2c248:	b570      	push	{r4, r5, r6, lr}
   2c24a:	460d      	mov	r5, r1
   2c24c:	4606      	mov	r6, r0
   2c24e:	f008 fd8a 	bl	34d66 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   2c252:	4604      	mov	r4, r0
   2c254:	4630      	mov	r0, r6
   2c256:	f008 fd88 	bl	34d6a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   2c25a:	4629      	mov	r1, r5
   2c25c:	f000 f81e 	bl	2c29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
   2c260:	b1b8      	cbz	r0, 2c292 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
   2c262:	4620      	mov	r0, r4
   2c264:	f008 fb22 	bl	348ac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   2c268:	0001      	movs	r1, r0
   2c26a:	d00d      	beq.n	2c288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
   2c26c:	480a      	ldr	r0, [pc, #40]	; (2c298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
   2c26e:	6840      	ldr	r0, [r0, #4]
   2c270:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
   2c274:	428a      	cmp	r2, r1
   2c276:	d007      	beq.n	2c288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
   2c278:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   2c27c:	2901      	cmp	r1, #1
   2c27e:	d005      	beq.n	2c28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
   2c280:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
   2c284:	4220      	tst	r0, r4
   2c286:	d004      	beq.n	2c292 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
   2c288:	2001      	movs	r0, #1
   2c28a:	bd70      	pop	{r4, r5, r6, pc}
   2c28c:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
   2c290:	e7f8      	b.n	2c284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
   2c292:	2000      	movs	r0, #0
   2c294:	bd70      	pop	{r4, r5, r6, pc}
   2c296:	0000      	.short	0x0000
   2c298:	20000124 	.word	0x20000124
   2c29c:	b570      	push	{r4, r5, r6, lr}
   2c29e:	460d      	mov	r5, r1
   2c2a0:	4604      	mov	r4, r0
   2c2a2:	f008 fb03 	bl	348ac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   2c2a6:	b350      	cbz	r0, 2c2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
   2c2a8:	4916      	ldr	r1, [pc, #88]	; (2c304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
   2c2aa:	6849      	ldr	r1, [r1, #4]
   2c2ac:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
   2c2b0:	4282      	cmp	r2, r0
   2c2b2:	d024      	beq.n	2c2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
   2c2b4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
   2c2b8:	2b01      	cmp	r3, #1
   2c2ba:	d005      	beq.n	2c2c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
   2c2bc:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
   2c2c0:	4223      	tst	r3, r4
   2c2c2:	d013      	beq.n	2c2ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
   2c2c4:	b11d      	cbz	r5, 2c2ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
   2c2c6:	e01a      	b.n	2c2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
   2c2c8:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
   2c2cc:	e7f8      	b.n	2c2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
   2c2ce:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   2c2d2:	4221      	tst	r1, r4
   2c2d4:	d113      	bne.n	2c2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
   2c2d6:	b15a      	cbz	r2, 2c2f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
   2c2d8:	2a04      	cmp	r2, #4
   2c2da:	d00e      	beq.n	2c2fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   2c2dc:	2804      	cmp	r0, #4
   2c2de:	d00c      	beq.n	2c2fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   2c2e0:	2a08      	cmp	r2, #8
   2c2e2:	d00a      	beq.n	2c2fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   2c2e4:	2808      	cmp	r0, #8
   2c2e6:	d008      	beq.n	2c2fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
   2c2e8:	4282      	cmp	r2, r0
   2c2ea:	d908      	bls.n	2c2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
   2c2ec:	2000      	movs	r0, #0
   2c2ee:	bd70      	pop	{r4, r5, r6, pc}
   2c2f0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2c2f4:	2006      	movs	r0, #6
   2c2f6:	f7fb fbab 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2c2fa:	4282      	cmp	r2, r0
   2c2fc:	d3f6      	bcc.n	2c2ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
   2c2fe:	2001      	movs	r0, #1
   2c300:	bd70      	pop	{r4, r5, r6, pc}
   2c302:	0000      	.short	0x0000
   2c304:	20000124 	.word	0x20000124
   2c308:	b510      	push	{r4, lr}
   2c30a:	4c10      	ldr	r4, [pc, #64]	; (2c34c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
   2c30c:	2301      	movs	r3, #1
   2c30e:	2100      	movs	r1, #0
   2c310:	6860      	ldr	r0, [r4, #4]
   2c312:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2c316:	3080      	adds	r0, #128	; 0x80
   2c318:	f008 fa1e 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c31c:	b140      	cbz	r0, 2c330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
   2c31e:	6860      	ldr	r0, [r4, #4]
   2c320:	2301      	movs	r3, #1
   2c322:	2104      	movs	r1, #4
   2c324:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c328:	3080      	adds	r0, #128	; 0x80
   2c32a:	f008 fa15 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c32e:	b108      	cbz	r0, 2c334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
   2c330:	2000      	movs	r0, #0
   2c332:	bd10      	pop	{r4, pc}
   2c334:	6860      	ldr	r0, [r4, #4]
   2c336:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
   2c33a:	2800      	cmp	r0, #0
   2c33c:	d0f9      	beq.n	2c332 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
   2c33e:	2100      	movs	r1, #0
   2c340:	2012      	movs	r0, #18
   2c342:	f000 fc51 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2c346:	2001      	movs	r0, #1
   2c348:	bd10      	pop	{r4, pc}
   2c34a:	0000      	.short	0x0000
   2c34c:	20000124 	.word	0x20000124
   2c350:	490d      	ldr	r1, [pc, #52]	; (2c388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
   2c352:	4602      	mov	r2, r0
   2c354:	7848      	ldrb	r0, [r1, #1]
   2c356:	b9a0      	cbnz	r0, 2c382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
   2c358:	f101 0010 	add.w	r0, r1, #16
   2c35c:	6840      	ldr	r0, [r0, #4]
   2c35e:	b142      	cbz	r2, 2c372 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
   2c360:	7889      	ldrb	r1, [r1, #2]
   2c362:	0709      	lsls	r1, r1, #28
   2c364:	d503      	bpl.n	2c36e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
   2c366:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
   2c36a:	2807      	cmp	r0, #7
   2c36c:	d009      	beq.n	2c382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
   2c36e:	2001      	movs	r0, #1
   2c370:	4770      	bx	lr
   2c372:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   2c376:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
   2c378:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   2c37a:	428a      	cmp	r2, r1
   2c37c:	d801      	bhi.n	2c382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
   2c37e:	f7ff b83f 	b.w	2b400 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
   2c382:	2000      	movs	r0, #0
   2c384:	4770      	bx	lr
   2c386:	0000      	.short	0x0000
   2c388:	20000114 	.word	0x20000114
   2c38c:	b538      	push	{r3, r4, r5, lr}
   2c38e:	4c32      	ldr	r4, [pc, #200]	; (2c458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
   2c390:	4605      	mov	r5, r0
   2c392:	6860      	ldr	r0, [r4, #4]
   2c394:	3080      	adds	r0, #128	; 0x80
   2c396:	f009 fe6d 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2c39a:	2800      	cmp	r0, #0
   2c39c:	d15b      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c39e:	2d00      	cmp	r5, #0
   2c3a0:	d159      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c3a2:	6860      	ldr	r0, [r4, #4]
   2c3a4:	2301      	movs	r3, #1
   2c3a6:	4619      	mov	r1, r3
   2c3a8:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
   2c3ac:	3080      	adds	r0, #128	; 0x80
   2c3ae:	f008 f9d3 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c3b2:	2800      	cmp	r0, #0
   2c3b4:	d14f      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c3b6:	6860      	ldr	r0, [r4, #4]
   2c3b8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   2c3bc:	f88d 1000 	strb.w	r1, [sp]
   2c3c0:	9900      	ldr	r1, [sp, #0]
   2c3c2:	9100      	str	r1, [sp, #0]
   2c3c4:	f89d 2000 	ldrb.w	r2, [sp]
   2c3c8:	2100      	movs	r1, #0
   2c3ca:	b142      	cbz	r2, 2c3de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
   2c3cc:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
   2c3d0:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
   2c3d4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
   2c3d8:	2100      	movs	r1, #0
   2c3da:	2002      	movs	r0, #2
   2c3dc:	e030      	b.n	2c440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
   2c3de:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c3e2:	2301      	movs	r3, #1
   2c3e4:	2104      	movs	r1, #4
   2c3e6:	3080      	adds	r0, #128	; 0x80
   2c3e8:	f008 f9b6 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c3ec:	4605      	mov	r5, r0
   2c3ee:	f7ff feaf 	bl	2c150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
   2c3f2:	2800      	cmp	r0, #0
   2c3f4:	d12f      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c3f6:	4628      	mov	r0, r5
   2c3f8:	f7ff fe6c 	bl	2c0d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
   2c3fc:	2800      	cmp	r0, #0
   2c3fe:	d12a      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c400:	f7ff ff82 	bl	2c308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
   2c404:	2800      	cmp	r0, #0
   2c406:	d126      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c408:	6860      	ldr	r0, [r4, #4]
   2c40a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
   2c40e:	2909      	cmp	r1, #9
   2c410:	d01a      	beq.n	2c448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
   2c412:	2d00      	cmp	r5, #0
   2c414:	d11f      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c416:	f000 fb13 	bl	2ca40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
   2c41a:	2800      	cmp	r0, #0
   2c41c:	d11b      	bne.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c41e:	6860      	ldr	r0, [r4, #4]
   2c420:	2301      	movs	r3, #1
   2c422:	2100      	movs	r1, #0
   2c424:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2c428:	3080      	adds	r0, #128	; 0x80
   2c42a:	f008 f995 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c42e:	2800      	cmp	r0, #0
   2c430:	d011      	beq.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c432:	6860      	ldr	r0, [r4, #4]
   2c434:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
   2c438:	2800      	cmp	r0, #0
   2c43a:	d00c      	beq.n	2c456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
   2c43c:	2100      	movs	r1, #0
   2c43e:	20ff      	movs	r0, #255	; 0xff
   2c440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c444:	f000 bbd0 	b.w	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2c448:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
   2c44c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
   2c450:	2100      	movs	r1, #0
   2c452:	2007      	movs	r0, #7
   2c454:	e7f4      	b.n	2c440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
   2c456:	bd38      	pop	{r3, r4, r5, pc}
   2c458:	20000124 	.word	0x20000124
   2c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c45e:	4d2b      	ldr	r5, [pc, #172]	; (2c50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
   2c460:	0006      	movs	r6, r0
   2c462:	f105 0410 	add.w	r4, r5, #16
   2c466:	d133      	bne.n	2c4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
   2c468:	f000 f8aa 	bl	2c5c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
   2c46c:	f000 f852 	bl	2c514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
   2c470:	0006      	movs	r6, r0
   2c472:	d12d      	bne.n	2c4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
   2c474:	8869      	ldrh	r1, [r5, #2]
   2c476:	0748      	lsls	r0, r1, #29
   2c478:	d506      	bpl.n	2c488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
   2c47a:	6860      	ldr	r0, [r4, #4]
   2c47c:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
   2c480:	2806      	cmp	r0, #6
   2c482:	d101      	bne.n	2c488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
   2c484:	2001      	movs	r0, #1
   2c486:	7028      	strb	r0, [r5, #0]
   2c488:	0788      	lsls	r0, r1, #30
   2c48a:	d516      	bpl.n	2c4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
   2c48c:	68a8      	ldr	r0, [r5, #8]
   2c48e:	78c0      	ldrb	r0, [r0, #3]
   2c490:	282b      	cmp	r0, #43	; 0x2b
   2c492:	d207      	bcs.n	2c4a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   2c494:	491e      	ldr	r1, [pc, #120]	; (2c510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
   2c496:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2c49a:	b119      	cbz	r1, 2c4a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
   2c49c:	481b      	ldr	r0, [pc, #108]	; (2c50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
   2c49e:	3010      	adds	r0, #16
   2c4a0:	4788      	blx	r1
   2c4a2:	e00a      	b.n	2c4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
   2c4a4:	28ff      	cmp	r0, #255	; 0xff
   2c4a6:	d004      	beq.n	2c4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
   2c4a8:	f640 0148 	movw	r1, #2120	; 0x848
   2c4ac:	2031      	movs	r0, #49	; 0x31
   2c4ae:	f7fb facf 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2c4b2:	4816      	ldr	r0, [pc, #88]	; (2c50c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
   2c4b4:	3010      	adds	r0, #16
   2c4b6:	f009 fe55 	bl	36164 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
   2c4ba:	78a8      	ldrb	r0, [r5, #2]
   2c4bc:	06c0      	lsls	r0, r0, #27
   2c4be:	d507      	bpl.n	2c4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
   2c4c0:	6860      	ldr	r0, [r4, #4]
   2c4c2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2c4c6:	290a      	cmp	r1, #10
   2c4c8:	d102      	bne.n	2c4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
   2c4ca:	210b      	movs	r1, #11
   2c4cc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   2c4d0:	7868      	ldrb	r0, [r5, #1]
   2c4d2:	0700      	lsls	r0, r0, #28
   2c4d4:	d518      	bpl.n	2c508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
   2c4d6:	6860      	ldr	r0, [r4, #4]
   2c4d8:	2301      	movs	r3, #1
   2c4da:	2105      	movs	r1, #5
   2c4dc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c4e0:	3080      	adds	r0, #128	; 0x80
   2c4e2:	f008 f939 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c4e6:	b108      	cbz	r0, 2c4ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
   2c4e8:	2608      	movs	r6, #8
   2c4ea:	e00d      	b.n	2c508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
   2c4ec:	2500      	movs	r5, #0
   2c4ee:	4669      	mov	r1, sp
   2c4f0:	2003      	movs	r0, #3
   2c4f2:	9500      	str	r5, [sp, #0]
   2c4f4:	f7fc fb3c 	bl	28b70 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
   2c4f8:	9800      	ldr	r0, [sp, #0]
   2c4fa:	b128      	cbz	r0, 2c508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
   2c4fc:	7205      	strb	r5, [r0, #8]
   2c4fe:	2210      	movs	r2, #16
   2c500:	6861      	ldr	r1, [r4, #4]
   2c502:	9800      	ldr	r0, [sp, #0]
   2c504:	f008 fcd0 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2c508:	4630      	mov	r0, r6
   2c50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c50c:	20000114 	.word	0x20000114
   2c510:	200001d8 	.word	0x200001d8
   2c514:	b570      	push	{r4, r5, r6, lr}
   2c516:	4d28      	ldr	r5, [pc, #160]	; (2c5b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
   2c518:	2000      	movs	r0, #0
   2c51a:	78a9      	ldrb	r1, [r5, #2]
   2c51c:	07c9      	lsls	r1, r1, #31
   2c51e:	d017      	beq.n	2c550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
   2c520:	68e8      	ldr	r0, [r5, #12]
   2c522:	f105 0410 	add.w	r4, r5, #16
   2c526:	2301      	movs	r3, #1
   2c528:	78c6      	ldrb	r6, [r0, #3]
   2c52a:	6860      	ldr	r0, [r4, #4]
   2c52c:	2105      	movs	r1, #5
   2c52e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c532:	3080      	adds	r0, #128	; 0x80
   2c534:	f008 f910 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c538:	b158      	cbz	r0, 2c552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
   2c53a:	1eb6      	subs	r6, r6, #2
   2c53c:	2e0a      	cmp	r6, #10
   2c53e:	d206      	bcs.n	2c54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
   2c540:	e8df f006 	tbb	[pc, r6]
   2c544:	05050707 	.word	0x05050707
   2c548:	05050707 	.word	0x05050707
   2c54c:	0707      	.short	0x0707
   2c54e:	2008      	movs	r0, #8
   2c550:	bd70      	pop	{r4, r5, r6, pc}
   2c552:	68e8      	ldr	r0, [r5, #12]
   2c554:	f7fd f944 	bl	297e0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
   2c558:	b338      	cbz	r0, 2c5aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
   2c55a:	68e8      	ldr	r0, [r5, #12]
   2c55c:	78c5      	ldrb	r5, [r0, #3]
   2c55e:	b11d      	cbz	r5, 2c568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
   2c560:	2d01      	cmp	r5, #1
   2c562:	d001      	beq.n	2c568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
   2c564:	2d16      	cmp	r5, #22
   2c566:	d113      	bne.n	2c590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
   2c568:	6860      	ldr	r0, [r4, #4]
   2c56a:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
   2c56e:	f008 f94b 	bl	34808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
   2c572:	b168      	cbz	r0, 2c590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
   2c574:	6861      	ldr	r1, [r4, #4]
   2c576:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
   2c57a:	2820      	cmp	r0, #32
   2c57c:	d008      	beq.n	2c590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
   2c57e:	2821      	cmp	r0, #33	; 0x21
   2c580:	d003      	beq.n	2c58a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
   2c582:	2d16      	cmp	r5, #22
   2c584:	d00f      	beq.n	2c5a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
   2c586:	2002      	movs	r0, #2
   2c588:	bd70      	pop	{r4, r5, r6, pc}
   2c58a:	202e      	movs	r0, #46	; 0x2e
   2c58c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
   2c590:	2d2b      	cmp	r5, #43	; 0x2b
   2c592:	d20a      	bcs.n	2c5aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
   2c594:	4809      	ldr	r0, [pc, #36]	; (2c5bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
   2c596:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   2c59a:	b131      	cbz	r1, 2c5aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
   2c59c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c5a0:	4805      	ldr	r0, [pc, #20]	; (2c5b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
   2c5a2:	3010      	adds	r0, #16
   2c5a4:	4708      	bx	r1
   2c5a6:	2020      	movs	r0, #32
   2c5a8:	bd70      	pop	{r4, r5, r6, pc}
   2c5aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c5ae:	4802      	ldr	r0, [pc, #8]	; (2c5b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
   2c5b0:	3010      	adds	r0, #16
   2c5b2:	f000 bd47 	b.w	2d044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
   2c5b6:	0000      	.short	0x0000
   2c5b8:	20000114 	.word	0x20000114
   2c5bc:	2000012c 	.word	0x2000012c
   2c5c0:	b570      	push	{r4, r5, r6, lr}
   2c5c2:	4e25      	ldr	r6, [pc, #148]	; (2c658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
   2c5c4:	78b0      	ldrb	r0, [r6, #2]
   2c5c6:	0700      	lsls	r0, r0, #28
   2c5c8:	d545      	bpl.n	2c656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
   2c5ca:	f106 0410 	add.w	r4, r6, #16
   2c5ce:	6860      	ldr	r0, [r4, #4]
   2c5d0:	3080      	adds	r0, #128	; 0x80
   2c5d2:	f009 fd4f 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2c5d6:	b148      	cbz	r0, 2c5ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
   2c5d8:	6860      	ldr	r0, [r4, #4]
   2c5da:	21fe      	movs	r1, #254	; 0xfe
   2c5dc:	2500      	movs	r5, #0
   2c5de:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
   2c5e2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2c5e6:	291a      	cmp	r1, #26
   2c5e8:	d10e      	bne.n	2c608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
   2c5ea:	e004      	b.n	2c5f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
   2c5ec:	f640 0154 	movw	r1, #2132	; 0x854
   2c5f0:	2031      	movs	r0, #49	; 0x31
   2c5f2:	f7fb fa2d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2c5f6:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
   2c5fa:	4817      	ldr	r0, [pc, #92]	; (2c658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
   2c5fc:	3010      	adds	r0, #16
   2c5fe:	f008 fd94 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2c602:	6860      	ldr	r0, [r4, #4]
   2c604:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
   2c608:	6860      	ldr	r0, [r4, #4]
   2c60a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
   2c60e:	2920      	cmp	r1, #32
   2c610:	d002      	beq.n	2c618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
   2c612:	2931      	cmp	r1, #49	; 0x31
   2c614:	d116      	bne.n	2c644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
   2c616:	e00e      	b.n	2c636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
   2c618:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c61c:	2301      	movs	r3, #1
   2c61e:	210b      	movs	r1, #11
   2c620:	3080      	adds	r0, #128	; 0x80
   2c622:	f008 f899 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c626:	b108      	cbz	r0, 2c62c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
   2c628:	202e      	movs	r0, #46	; 0x2e
   2c62a:	e000      	b.n	2c62e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
   2c62c:	2021      	movs	r0, #33	; 0x21
   2c62e:	6861      	ldr	r1, [r4, #4]
   2c630:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
   2c634:	e006      	b.n	2c644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
   2c636:	2101      	movs	r1, #1
   2c638:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
   2c63c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
   2c640:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
   2c644:	6860      	ldr	r0, [r4, #4]
   2c646:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
   2c64a:	2907      	cmp	r1, #7
   2c64c:	d103      	bne.n	2c656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
   2c64e:	2102      	movs	r1, #2
   2c650:	7031      	strb	r1, [r6, #0]
   2c652:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
   2c656:	bd70      	pop	{r4, r5, r6, pc}
   2c658:	20000114 	.word	0x20000114
   2c65c:	b538      	push	{r3, r4, r5, lr}
   2c65e:	4605      	mov	r5, r0
   2c660:	4668      	mov	r0, sp
   2c662:	f7fc f91f 	bl	288a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
   2c666:	b308      	cbz	r0, 2c6ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
   2c668:	2222      	movs	r2, #34	; 0x22
   2c66a:	2100      	movs	r1, #0
   2c66c:	9800      	ldr	r0, [sp, #0]
   2c66e:	f00b f820 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2c672:	2103      	movs	r1, #3
   2c674:	9800      	ldr	r0, [sp, #0]
   2c676:	f008 fb90 	bl	34d9a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
   2c67a:	9800      	ldr	r0, [sp, #0]
   2c67c:	7801      	ldrb	r1, [r0, #0]
   2c67e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
   2c682:	7001      	strb	r1, [r0, #0]
   2c684:	4629      	mov	r1, r5
   2c686:	f7fd f8bb 	bl	29800 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
   2c68a:	4c5b      	ldr	r4, [pc, #364]	; (2c7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
   2c68c:	2d11      	cmp	r5, #17
   2c68e:	d032      	beq.n	2c6f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
   2c690:	dc0f      	bgt.n	2c6b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
   2c692:	f1a5 0502 	sub.w	r5, r5, #2
   2c696:	2d0d      	cmp	r5, #13
   2c698:	d21f      	bcs.n	2c6da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
   2c69a:	e8df f005 	tbb	[pc, r5]
   2c69e:	1e21      	.short	0x1e21
   2c6a0:	26a3a355 	.word	0x26a3a355
   2c6a4:	a31e621e 	.word	0xa31e621e
   2c6a8:	0090393f 	.word	0x0090393f
   2c6ac:	f640 21fe 	movw	r1, #2814	; 0xafe
   2c6b0:	e09e      	b.n	2c7f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
   2c6b2:	2d17      	cmp	r5, #23
   2c6b4:	d075      	beq.n	2c7a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
   2c6b6:	dc08      	bgt.n	2c6ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
   2c6b8:	f1a5 0512 	sub.w	r5, r5, #18
   2c6bc:	2d05      	cmp	r5, #5
   2c6be:	d20c      	bcs.n	2c6da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
   2c6c0:	e8df f005 	tbb	[pc, r5]
   2c6c4:	54549090 	.word	0x54549090
   2c6c8:	0038      	.short	0x0038
   2c6ca:	2d23      	cmp	r5, #35	; 0x23
   2c6cc:	d07b      	beq.n	2c7c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
   2c6ce:	2d24      	cmp	r5, #36	; 0x24
   2c6d0:	d079      	beq.n	2c7c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
   2c6d2:	2d25      	cmp	r5, #37	; 0x25
   2c6d4:	d077      	beq.n	2c7c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
   2c6d6:	2dff      	cmp	r5, #255	; 0xff
   2c6d8:	d07c      	beq.n	2c7d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
   2c6da:	f640 31aa 	movw	r1, #2986	; 0xbaa
   2c6de:	e087      	b.n	2c7f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
   2c6e0:	6861      	ldr	r1, [r4, #4]
   2c6e2:	9800      	ldr	r0, [sp, #0]
   2c6e4:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
   2c6e8:	e016      	b.n	2c718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
   2c6ea:	6860      	ldr	r0, [r4, #4]
   2c6ec:	9900      	ldr	r1, [sp, #0]
   2c6ee:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
   2c6f2:	7108      	strb	r0, [r1, #4]
   2c6f4:	e076      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c6f6:	6860      	ldr	r0, [r4, #4]
   2c6f8:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
   2c6fc:	9800      	ldr	r0, [sp, #0]
   2c6fe:	f008 fb38 	bl	34d72 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
   2c702:	6860      	ldr	r0, [r4, #4]
   2c704:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
   2c708:	9800      	ldr	r0, [sp, #0]
   2c70a:	f008 fb36 	bl	34d7a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
   2c70e:	e069      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c710:	6861      	ldr	r1, [r4, #4]
   2c712:	9800      	ldr	r0, [sp, #0]
   2c714:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
   2c718:	7101      	strb	r1, [r0, #4]
   2c71a:	e063      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c71c:	9800      	ldr	r0, [sp, #0]
   2c71e:	210d      	movs	r1, #13
   2c720:	7101      	strb	r1, [r0, #4]
   2c722:	2159      	movs	r1, #89	; 0x59
   2c724:	7141      	strb	r1, [r0, #5]
   2c726:	2100      	movs	r1, #0
   2c728:	7181      	strb	r1, [r0, #6]
   2c72a:	2177      	movs	r1, #119	; 0x77
   2c72c:	71c1      	strb	r1, [r0, #7]
   2c72e:	2110      	movs	r1, #16
   2c730:	7201      	strb	r1, [r0, #8]
   2c732:	e057      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c734:	9800      	ldr	r0, [sp, #0]
   2c736:	6861      	ldr	r1, [r4, #4]
   2c738:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
   2c73c:	7101      	strb	r1, [r0, #4]
   2c73e:	6861      	ldr	r1, [r4, #4]
   2c740:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
   2c744:	7141      	strb	r1, [r0, #5]
   2c746:	e04d      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c748:	6861      	ldr	r1, [r4, #4]
   2c74a:	9800      	ldr	r0, [sp, #0]
   2c74c:	f501 7110 	add.w	r1, r1, #576	; 0x240
   2c750:	f008 faca 	bl	34ce8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
   2c754:	6861      	ldr	r1, [r4, #4]
   2c756:	9800      	ldr	r0, [sp, #0]
   2c758:	f501 718e 	add.w	r1, r1, #284	; 0x11c
   2c75c:	f008 fac1 	bl	34ce2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
   2c760:	e040      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c762:	4825      	ldr	r0, [pc, #148]	; (2c7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
   2c764:	9900      	ldr	r1, [sp, #0]
   2c766:	f7fd fc0b 	bl	29f80 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
   2c76a:	e03b      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c76c:	6860      	ldr	r0, [r4, #4]
   2c76e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
   2c772:	9800      	ldr	r0, [sp, #0]
   2c774:	f008 fb19 	bl	34daa <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
   2c778:	6860      	ldr	r0, [r4, #4]
   2c77a:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
   2c77e:	9800      	ldr	r0, [sp, #0]
   2c780:	f008 fb17 	bl	34db2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
   2c784:	6860      	ldr	r0, [r4, #4]
   2c786:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
   2c78a:	9800      	ldr	r0, [sp, #0]
   2c78c:	f008 fb15 	bl	34dba <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
   2c790:	6860      	ldr	r0, [r4, #4]
   2c792:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
   2c796:	9800      	ldr	r0, [sp, #0]
   2c798:	f008 fb13 	bl	34dc2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
   2c79c:	e022      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c79e:	e000      	b.n	2c7a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
   2c7a0:	e011      	b.n	2c7c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
   2c7a2:	6861      	ldr	r1, [r4, #4]
   2c7a4:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
   2c7a8:	2801      	cmp	r0, #1
   2c7aa:	9800      	ldr	r0, [sp, #0]
   2c7ac:	d0c4      	beq.n	2c738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
   2c7ae:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
   2c7b2:	7101      	strb	r1, [r0, #4]
   2c7b4:	6861      	ldr	r1, [r4, #4]
   2c7b6:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
   2c7ba:	e7c3      	b.n	2c744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
   2c7bc:	e00a      	b.n	2c7d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
   2c7be:	9800      	ldr	r0, [sp, #0]
   2c7c0:	f7fd fb88 	bl	29ed4 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
   2c7c4:	e00e      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c7c6:	4b0d      	ldr	r3, [pc, #52]	; (2c7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
   2c7c8:	4a0b      	ldr	r2, [pc, #44]	; (2c7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
   2c7ca:	4628      	mov	r0, r5
   2c7cc:	681b      	ldr	r3, [r3, #0]
   2c7ce:	9900      	ldr	r1, [sp, #0]
   2c7d0:	4798      	blx	r3
   2c7d2:	e007      	b.n	2c7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
   2c7d4:	6860      	ldr	r0, [r4, #4]
   2c7d6:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
   2c7da:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
   2c7de:	9800      	ldr	r0, [sp, #0]
   2c7e0:	f008 facd 	bl	34d7e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
   2c7e4:	f7fc f838 	bl	28858 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
   2c7e8:	2800      	cmp	r0, #0
   2c7ea:	d104      	bne.n	2c7f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
   2c7ec:	f640 31ae 	movw	r1, #2990	; 0xbae
   2c7f0:	2031      	movs	r0, #49	; 0x31
   2c7f2:	f7fb f92d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2c7f6:	bd38      	pop	{r3, r4, r5, pc}
   2c7f8:	20000124 	.word	0x20000124
   2c7fc:	20000284 	.word	0x20000284
   2c800:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   2c804:	4e8c      	ldr	r6, [pc, #560]	; (2ca38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
   2c806:	468a      	mov	sl, r1
   2c808:	6870      	ldr	r0, [r6, #4]
   2c80a:	8800      	ldrh	r0, [r0, #0]
   2c80c:	f7fb fdf8 	bl	28400 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
   2c810:	0007      	movs	r7, r0
   2c812:	d00c      	beq.n	2c82e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
   2c814:	f1a6 0510 	sub.w	r5, r6, #16
   2c818:	f04f 0400 	mov.w	r4, #0
   2c81c:	8868      	ldrh	r0, [r5, #2]
   2c81e:	05c0      	lsls	r0, r0, #23
   2c820:	d50a      	bpl.n	2c838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
   2c822:	6870      	ldr	r0, [r6, #4]
   2c824:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
   2c828:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
   2c82c:	e009      	b.n	2c842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
   2c82e:	f640 6189 	movw	r1, #3721	; 0xe89
   2c832:	2031      	movs	r0, #49	; 0x31
   2c834:	f7fb f90c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2c838:	6871      	ldr	r1, [r6, #4]
   2c83a:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
   2c83e:	1c40      	adds	r0, r0, #1
   2c840:	8008      	strh	r0, [r1, #0]
   2c842:	f000 ff5b 	bl	2d6fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
   2c846:	f04f 0901 	mov.w	r9, #1
   2c84a:	b340      	cbz	r0, 2c89e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
   2c84c:	8868      	ldrh	r0, [r5, #2]
   2c84e:	0500      	lsls	r0, r0, #20
   2c850:	d506      	bpl.n	2c860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   2c852:	6870      	ldr	r0, [r6, #4]
   2c854:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
   2c858:	b111      	cbz	r1, 2c860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
   2c85a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
   2c85e:	e01e      	b.n	2c89e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
   2c860:	6870      	ldr	r0, [r6, #4]
   2c862:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
   2c866:	1c49      	adds	r1, r1, #1
   2c868:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   2c86c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
   2c870:	428a      	cmp	r2, r1
   2c872:	d301      	bcc.n	2c878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
   2c874:	1a53      	subs	r3, r2, r1
   2c876:	e000      	b.n	2c87a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
   2c878:	2300      	movs	r3, #0
   2c87a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2c87e:	f10c 0c05 	add.w	ip, ip, #5
   2c882:	4563      	cmp	r3, ip
   2c884:	d801      	bhi.n	2c88a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
   2c886:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
   2c88a:	4291      	cmp	r1, r2
   2c88c:	d307      	bcc.n	2c89e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
   2c88e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
   2c892:	2202      	movs	r2, #2
   2c894:	4969      	ldr	r1, [pc, #420]	; (2ca3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
   2c896:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   2c89a:	f008 fb19 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   2c89e:	8868      	ldrh	r0, [r5, #2]
   2c8a0:	f04f 0b02 	mov.w	fp, #2
   2c8a4:	f410 7f40 	tst.w	r0, #768	; 0x300
   2c8a8:	d00e      	beq.n	2c8c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   2c8aa:	6870      	ldr	r0, [r6, #4]
   2c8ac:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
   2c8b0:	b111      	cbz	r1, 2c8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
   2c8b2:	2903      	cmp	r1, #3
   2c8b4:	d108      	bne.n	2c8c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
   2c8b6:	e002      	b.n	2c8be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
   2c8b8:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
   2c8bc:	e001      	b.n	2c8c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
   2c8be:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
   2c8c2:	2101      	movs	r1, #1
   2c8c4:	f7fe fdac 	bl	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2c8c8:	6870      	ldr	r0, [r6, #4]
   2c8ca:	46b0      	mov	r8, r6
   2c8cc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
   2c8d0:	2901      	cmp	r1, #1
   2c8d2:	d104      	bne.n	2c8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
   2c8d4:	8869      	ldrh	r1, [r5, #2]
   2c8d6:	0549      	lsls	r1, r1, #21
   2c8d8:	d501      	bpl.n	2c8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
   2c8da:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
   2c8de:	9900      	ldr	r1, [sp, #0]
   2c8e0:	2900      	cmp	r1, #0
   2c8e2:	d179      	bne.n	2c9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
   2c8e4:	78a9      	ldrb	r1, [r5, #2]
   2c8e6:	0649      	lsls	r1, r1, #25
   2c8e8:	d502      	bpl.n	2c8f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
   2c8ea:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
   2c8ee:	e004      	b.n	2c8fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
   2c8f0:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
   2c8f4:	1c49      	adds	r1, r1, #1
   2c8f6:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
   2c8fa:	4650      	mov	r0, sl
   2c8fc:	f7ff fdae 	bl	2c45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
   2c900:	ea40 000a 	orr.w	r0, r0, sl
   2c904:	4682      	mov	sl, r0
   2c906:	f7ff fd41 	bl	2c38c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
   2c90a:	f8d8 6004 	ldr.w	r6, [r8, #4]
   2c90e:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
   2c912:	1c40      	adds	r0, r0, #1
   2c914:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
   2c918:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
   2c91c:	b128      	cbz	r0, 2c92a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
   2c91e:	f7fc f965 	bl	28bec <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
   2c922:	b1b0      	cbz	r0, 2c952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
   2c924:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
   2c928:	e013      	b.n	2c952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
   2c92a:	f7fc f83d 	bl	289a8 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
   2c92e:	b108      	cbz	r0, 2c934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
   2c930:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
   2c934:	f7fc f832 	bl	2899c <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
   2c938:	b158      	cbz	r0, 2c952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
   2c93a:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
   2c93e:	1c40      	adds	r0, r0, #1
   2c940:	b2c0      	uxtb	r0, r0
   2c942:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
   2c946:	2802      	cmp	r0, #2
   2c948:	d903      	bls.n	2c952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
   2c94a:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
   2c94e:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
   2c952:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2c956:	4646      	mov	r6, r8
   2c958:	2301      	movs	r3, #1
   2c95a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2c95e:	2100      	movs	r1, #0
   2c960:	3080      	adds	r0, #128	; 0x80
   2c962:	f007 fef9 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c966:	b920      	cbnz	r0, 2c972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
   2c968:	6870      	ldr	r0, [r6, #4]
   2c96a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
   2c96e:	280b      	cmp	r0, #11
   2c970:	d15f      	bne.n	2ca32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   2c972:	6870      	ldr	r0, [r6, #4]
   2c974:	2301      	movs	r3, #1
   2c976:	2100      	movs	r1, #0
   2c978:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2c97c:	3080      	adds	r0, #128	; 0x80
   2c97e:	f007 feeb 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c982:	b350      	cbz	r0, 2c9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
   2c984:	6870      	ldr	r0, [r6, #4]
   2c986:	2301      	movs	r3, #1
   2c988:	2100      	movs	r1, #0
   2c98a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
   2c98e:	3080      	adds	r0, #128	; 0x80
   2c990:	f007 fee2 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2c994:	b308      	cbz	r0, 2c9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
   2c996:	6870      	ldr	r0, [r6, #4]
   2c998:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
   2c99c:	2902      	cmp	r1, #2
   2c99e:	d148      	bne.n	2ca32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   2c9a0:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
   2c9a4:	b9c8      	cbnz	r0, 2c9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
   2c9a6:	4638      	mov	r0, r7
   2c9a8:	f007 f9f7 	bl	33d9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   2c9ac:	b1a8      	cbz	r0, 2c9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
   2c9ae:	6870      	ldr	r0, [r6, #4]
   2c9b0:	3080      	adds	r0, #128	; 0x80
   2c9b2:	f009 fb5f 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2c9b6:	b980      	cbnz	r0, 2c9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
   2c9b8:	6871      	ldr	r1, [r6, #4]
   2c9ba:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
   2c9be:	2801      	cmp	r0, #1
   2c9c0:	d937      	bls.n	2ca32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   2c9c2:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
   2c9c6:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
   2c9ca:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
   2c9ce:	1e93      	subs	r3, r2, #2
   2c9d0:	4298      	cmp	r0, r3
   2c9d2:	db03      	blt.n	2c9dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
   2c9d4:	2001      	movs	r0, #1
   2c9d6:	e004      	b.n	2c9e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
   2c9d8:	e01c      	b.n	2ca14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
   2c9da:	e02a      	b.n	2ca32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
   2c9dc:	1a10      	subs	r0, r2, r0
   2c9de:	1e40      	subs	r0, r0, #1
   2c9e0:	b280      	uxth	r0, r0
   2c9e2:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
   2c9e6:	88aa      	ldrh	r2, [r5, #4]
   2c9e8:	4293      	cmp	r3, r2
   2c9ea:	d301      	bcc.n	2c9f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
   2c9ec:	2201      	movs	r2, #1
   2c9ee:	e002      	b.n	2c9f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
   2c9f0:	1ad2      	subs	r2, r2, r3
   2c9f2:	1c52      	adds	r2, r2, #1
   2c9f4:	b292      	uxth	r2, r2
   2c9f6:	4290      	cmp	r0, r2
   2c9f8:	d900      	bls.n	2c9fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
   2c9fa:	4610      	mov	r0, r2
   2c9fc:	2801      	cmp	r0, #1
   2c9fe:	d101      	bne.n	2ca04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
   2ca00:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
   2ca04:	6871      	ldr	r1, [r6, #4]
   2ca06:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
   2ca0a:	4410      	add	r0, r2
   2ca0c:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
   2ca10:	f000 ff8e 	bl	2d930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
   2ca14:	78a8      	ldrb	r0, [r5, #2]
   2ca16:	4652      	mov	r2, sl
   2ca18:	f3c0 1180 	ubfx	r1, r0, #6, #1
   2ca1c:	9800      	ldr	r0, [sp, #0]
   2ca1e:	f000 fe81 	bl	2d724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
   2ca22:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2ca26:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
   2ca2a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   2ca2e:	f7fb befd 	b.w	2882c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
   2ca32:	2001      	movs	r0, #1
   2ca34:	6871      	ldr	r1, [r6, #4]
   2ca36:	e7e3      	b.n	2ca00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
   2ca38:	20000124 	.word	0x20000124
   2ca3c:	000353b3 	.word	0x000353b3
   2ca40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   2ca42:	4c68      	ldr	r4, [pc, #416]	; (2cbe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
   2ca44:	2301      	movs	r3, #1
   2ca46:	2100      	movs	r1, #0
   2ca48:	6860      	ldr	r0, [r4, #4]
   2ca4a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2ca4e:	3080      	adds	r0, #128	; 0x80
   2ca50:	f007 fe82 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2ca54:	2800      	cmp	r0, #0
   2ca56:	d07a      	beq.n	2cb4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
   2ca58:	6860      	ldr	r0, [r4, #4]
   2ca5a:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
   2ca5e:	2500      	movs	r5, #0
   2ca60:	b139      	cbz	r1, 2ca72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
   2ca62:	2100      	movs	r1, #0
   2ca64:	200e      	movs	r0, #14
   2ca66:	f000 f8bf 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2ca6a:	6860      	ldr	r0, [r4, #4]
   2ca6c:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
   2ca70:	e0b5      	b.n	2cbde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
   2ca72:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
   2ca76:	b119      	cbz	r1, 2ca80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
   2ca78:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   2ca7c:	0789      	lsls	r1, r1, #30
   2ca7e:	d016      	beq.n	2caae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
   2ca80:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
   2ca84:	f88d 1004 	strb.w	r1, [sp, #4]
   2ca88:	9901      	ldr	r1, [sp, #4]
   2ca8a:	9101      	str	r1, [sp, #4]
   2ca8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   2ca90:	b141      	cbz	r1, 2caa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
   2ca92:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
   2ca96:	f88d 1000 	strb.w	r1, [sp]
   2ca9a:	9900      	ldr	r1, [sp, #0]
   2ca9c:	9100      	str	r1, [sp, #0]
   2ca9e:	f89d 1000 	ldrb.w	r1, [sp]
   2caa2:	b189      	cbz	r1, 2cac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
   2caa4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   2caa8:	2901      	cmp	r1, #1
   2caaa:	d030      	beq.n	2cb0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
   2caac:	e040      	b.n	2cb30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
   2caae:	2100      	movs	r1, #0
   2cab0:	200c      	movs	r0, #12
   2cab2:	f000 f899 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2cab6:	6860      	ldr	r0, [r4, #4]
   2cab8:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
   2cabc:	f041 0101 	orr.w	r1, r1, #1
   2cac0:	7001      	strb	r1, [r0, #0]
   2cac2:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
   2cac6:	e08a      	b.n	2cbde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
   2cac8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2cacc:	2925      	cmp	r1, #37	; 0x25
   2cace:	d01c      	beq.n	2cb0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
   2cad0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
   2cad4:	2925      	cmp	r1, #37	; 0x25
   2cad6:	d018      	beq.n	2cb0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
   2cad8:	f05f 0300 	movs.w	r3, #0
   2cadc:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
   2cae0:	f500 7199 	add.w	r1, r0, #306	; 0x132
   2cae4:	f008 fa0a 	bl	34efc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
   2cae8:	6860      	ldr	r0, [r4, #4]
   2caea:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
   2caee:	2100      	movs	r1, #0
   2caf0:	2014      	movs	r0, #20
   2caf2:	f000 f879 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2caf6:	6861      	ldr	r1, [r4, #4]
   2caf8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   2cafc:	8bc2      	ldrh	r2, [r0, #30]
   2cafe:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
   2cb02:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   2cb04:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
   2cb08:	e069      	b.n	2cbde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
   2cb0a:	2301      	movs	r3, #1
   2cb0c:	e7e6      	b.n	2cadc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
   2cb0e:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
   2cb12:	f88d 1000 	strb.w	r1, [sp]
   2cb16:	9900      	ldr	r1, [sp, #0]
   2cb18:	9100      	str	r1, [sp, #0]
   2cb1a:	f89d 1000 	ldrb.w	r1, [sp]
   2cb1e:	b939      	cbnz	r1, 2cb30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
   2cb20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2cb24:	2301      	movs	r3, #1
   2cb26:	210b      	movs	r1, #11
   2cb28:	3080      	adds	r0, #128	; 0x80
   2cb2a:	f007 fe15 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cb2e:	b178      	cbz	r0, 2cb50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
   2cb30:	6860      	ldr	r0, [r4, #4]
   2cb32:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   2cb36:	f88d 1000 	strb.w	r1, [sp]
   2cb3a:	9900      	ldr	r1, [sp, #0]
   2cb3c:	9100      	str	r1, [sp, #0]
   2cb3e:	f89d 1000 	ldrb.w	r1, [sp]
   2cb42:	b3b9      	cbz	r1, 2cbb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
   2cb44:	2100      	movs	r1, #0
   2cb46:	2023      	movs	r0, #35	; 0x23
   2cb48:	f000 f84e 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2cb4c:	e047      	b.n	2cbde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
   2cb4e:	e030      	b.n	2cbb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
   2cb50:	6860      	ldr	r0, [r4, #4]
   2cb52:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
   2cb56:	f009 fa95 	bl	36084 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   2cb5a:	4605      	mov	r5, r0
   2cb5c:	6860      	ldr	r0, [r4, #4]
   2cb5e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   2cb62:	f009 fa8f 	bl	36084 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
   2cb66:	4606      	mov	r6, r0
   2cb68:	6860      	ldr	r0, [r4, #4]
   2cb6a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
   2cb6e:	4628      	mov	r0, r5
   2cb70:	f009 fa93 	bl	3609a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   2cb74:	b150      	cbz	r0, 2cb8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
   2cb76:	6860      	ldr	r0, [r4, #4]
   2cb78:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
   2cb7c:	4630      	mov	r0, r6
   2cb7e:	f009 fa8c 	bl	3609a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
   2cb82:	b118      	cbz	r0, 2cb8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
   2cb84:	2000      	movs	r0, #0
   2cb86:	f000 f943 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2cb8a:	e011      	b.n	2cbb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
   2cb8c:	6860      	ldr	r0, [r4, #4]
   2cb8e:	2301      	movs	r3, #1
   2cb90:	2103      	movs	r1, #3
   2cb92:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2cb96:	3080      	adds	r0, #128	; 0x80
   2cb98:	f007 fdde 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cb9c:	b940      	cbnz	r0, 2cbb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
   2cb9e:	6860      	ldr	r0, [r4, #4]
   2cba0:	2301      	movs	r3, #1
   2cba2:	2102      	movs	r1, #2
   2cba4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2cba8:	3080      	adds	r0, #128	; 0x80
   2cbaa:	f007 fdd5 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cbae:	b110      	cbz	r0, 2cbb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
   2cbb0:	2000      	movs	r0, #0
   2cbb2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   2cbb4:	e002      	b.n	2cbbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
   2cbb6:	2100      	movs	r1, #0
   2cbb8:	2016      	movs	r0, #22
   2cbba:	e7c5      	b.n	2cb48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
   2cbbc:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
   2cbc0:	f88d 0000 	strb.w	r0, [sp]
   2cbc4:	9800      	ldr	r0, [sp, #0]
   2cbc6:	9000      	str	r0, [sp, #0]
   2cbc8:	f89d 0000 	ldrb.w	r0, [sp]
   2cbcc:	2800      	cmp	r0, #0
   2cbce:	d0f0      	beq.n	2cbb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
   2cbd0:	2100      	movs	r1, #0
   2cbd2:	2025      	movs	r0, #37	; 0x25
   2cbd4:	f000 f808 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2cbd8:	6860      	ldr	r0, [r4, #4]
   2cbda:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
   2cbde:	2001      	movs	r0, #1
   2cbe0:	e7e7      	b.n	2cbb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
   2cbe2:	0000      	.short	0x0000
   2cbe4:	20000124 	.word	0x20000124
   2cbe8:	b570      	push	{r4, r5, r6, lr}
   2cbea:	4c0d      	ldr	r4, [pc, #52]	; (2cc20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
   2cbec:	4606      	mov	r6, r0
   2cbee:	460d      	mov	r5, r1
   2cbf0:	6860      	ldr	r0, [r4, #4]
   2cbf2:	3080      	adds	r0, #128	; 0x80
   2cbf4:	f009 fa3e 	bl	36074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
   2cbf8:	b120      	cbz	r0, 2cc04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
   2cbfa:	f640 31b3 	movw	r1, #2995	; 0xbb3
   2cbfe:	2031      	movs	r0, #49	; 0x31
   2cc00:	f7fa ff26 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2cc04:	6862      	ldr	r2, [r4, #4]
   2cc06:	2000      	movs	r0, #0
   2cc08:	2d01      	cmp	r5, #1
   2cc0a:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
   2cc0e:	d004      	beq.n	2cc1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
   2cc10:	f822 0fd2 	strh.w	r0, [r2, #210]!
   2cc14:	2001      	movs	r0, #1
   2cc16:	7110      	strb	r0, [r2, #4]
   2cc18:	bd70      	pop	{r4, r5, r6, pc}
   2cc1a:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
   2cc1e:	bd70      	pop	{r4, r5, r6, pc}
   2cc20:	20000124 	.word	0x20000124
   2cc24:	b538      	push	{r3, r4, r5, lr}
   2cc26:	4c1f      	ldr	r4, [pc, #124]	; (2cca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
   2cc28:	2500      	movs	r5, #0
   2cc2a:	6860      	ldr	r0, [r4, #4]
   2cc2c:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
   2cc30:	2901      	cmp	r1, #1
   2cc32:	d00a      	beq.n	2cc4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
   2cc34:	2902      	cmp	r1, #2
   2cc36:	d133      	bne.n	2cca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   2cc38:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
   2cc3c:	b1d9      	cbz	r1, 2cc76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
   2cc3e:	2106      	movs	r1, #6
   2cc40:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
   2cc44:	2101      	movs	r1, #1
   2cc46:	2002      	movs	r0, #2
   2cc48:	e025      	b.n	2cc96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   2cc4a:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
   2cc4e:	f88d 1000 	strb.w	r1, [sp]
   2cc52:	9900      	ldr	r1, [sp, #0]
   2cc54:	9100      	str	r1, [sp, #0]
   2cc56:	f89d 1000 	ldrb.w	r1, [sp]
   2cc5a:	2900      	cmp	r1, #0
   2cc5c:	d120      	bne.n	2cca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
   2cc5e:	f500 7384 	add.w	r3, r0, #264	; 0x108
   2cc62:	f500 710e 	add.w	r1, r0, #568	; 0x238
   2cc66:	2200      	movs	r2, #0
   2cc68:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
   2cc6c:	f007 fd3f 	bl	346ee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   2cc70:	2101      	movs	r1, #1
   2cc72:	2005      	movs	r0, #5
   2cc74:	e00f      	b.n	2cc96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
   2cc76:	2103      	movs	r1, #3
   2cc78:	2206      	movs	r2, #6
   2cc7a:	480a      	ldr	r0, [pc, #40]	; (2cca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
   2cc7c:	f008 fa63 	bl	35146 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
   2cc80:	6860      	ldr	r0, [r4, #4]
   2cc82:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
   2cc86:	0880      	lsrs	r0, r0, #2
   2cc88:	f010 0f01 	tst.w	r0, #1
   2cc8c:	d001      	beq.n	2cc92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
   2cc8e:	2011      	movs	r0, #17
   2cc90:	e000      	b.n	2cc94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
   2cc92:	200d      	movs	r0, #13
   2cc94:	2101      	movs	r1, #1
   2cc96:	f7ff ffa7 	bl	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   2cc9a:	6860      	ldr	r0, [r4, #4]
   2cc9c:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
   2cca0:	bd38      	pop	{r3, r4, r5, pc}
   2cca2:	0000      	.short	0x0000
   2cca4:	20000124 	.word	0x20000124
   2cca8:	b570      	push	{r4, r5, r6, lr}
   2ccaa:	4b2b      	ldr	r3, [pc, #172]	; (2cd58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
   2ccac:	4602      	mov	r2, r0
   2ccae:	8858      	ldrh	r0, [r3, #2]
   2ccb0:	4310      	orrs	r0, r2
   2ccb2:	8058      	strh	r0, [r3, #2]
   2ccb4:	f103 0010 	add.w	r0, r3, #16
   2ccb8:	2a40      	cmp	r2, #64	; 0x40
   2ccba:	6840      	ldr	r0, [r0, #4]
   2ccbc:	d00d      	beq.n	2ccda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
   2ccbe:	0796      	lsls	r6, r2, #30
   2ccc0:	f04f 0500 	mov.w	r5, #0
   2ccc4:	f04f 0401 	mov.w	r4, #1
   2ccc8:	ea4f 76c2 	mov.w	r6, r2, lsl #31
   2cccc:	d50c      	bpl.n	2cce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
   2ccce:	b14e      	cbz	r6, 2cce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
   2ccd0:	f640 51f6 	movw	r1, #3574	; 0xdf6
   2ccd4:	2031      	movs	r0, #49	; 0x31
   2ccd6:	f7fa febb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ccda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ccde:	2104      	movs	r1, #4
   2cce0:	f7fe bb9e 	b.w	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2cce4:	6099      	str	r1, [r3, #8]
   2cce6:	e01c      	b.n	2cd22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
   2cce8:	b1c6      	cbz	r6, 2cd1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
   2ccea:	60d9      	str	r1, [r3, #12]
   2ccec:	78c9      	ldrb	r1, [r1, #3]
   2ccee:	2906      	cmp	r1, #6
   2ccf0:	d002      	beq.n	2ccf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
   2ccf2:	290b      	cmp	r1, #11
   2ccf4:	d112      	bne.n	2cd1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
   2ccf6:	e009      	b.n	2cd0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
   2ccf8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2ccfc:	2918      	cmp	r1, #24
   2ccfe:	d10d      	bne.n	2cd1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
   2cd00:	2100      	movs	r1, #0
   2cd02:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
   2cd06:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
   2cd0a:	e007      	b.n	2cd1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
   2cd0c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2cd10:	2912      	cmp	r1, #18
   2cd12:	d103      	bne.n	2cd1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
   2cd14:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
   2cd18:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
   2cd1c:	0791      	lsls	r1, r2, #30
   2cd1e:	d516      	bpl.n	2cd4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
   2cd20:	6899      	ldr	r1, [r3, #8]
   2cd22:	78c9      	ldrb	r1, [r1, #3]
   2cd24:	2905      	cmp	r1, #5
   2cd26:	d002      	beq.n	2cd2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
   2cd28:	290b      	cmp	r1, #11
   2cd2a:	d110      	bne.n	2cd4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
   2cd2c:	e009      	b.n	2cd42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
   2cd2e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2cd32:	2916      	cmp	r1, #22
   2cd34:	d10b      	bne.n	2cd4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
   2cd36:	2100      	movs	r1, #0
   2cd38:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
   2cd3c:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
   2cd40:	e005      	b.n	2cd4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
   2cd42:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2cd46:	2911      	cmp	r1, #17
   2cd48:	d101      	bne.n	2cd4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
   2cd4a:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
   2cd4e:	0690      	lsls	r0, r2, #26
   2cd50:	d501      	bpl.n	2cd56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
   2cd52:	2008      	movs	r0, #8
   2cd54:	7058      	strb	r0, [r3, #1]
   2cd56:	bd70      	pop	{r4, r5, r6, pc}
   2cd58:	20000114 	.word	0x20000114
   2cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd60:	4c29      	ldr	r4, [pc, #164]	; (2ce08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
   2cd62:	2501      	movs	r5, #1
   2cd64:	6862      	ldr	r2, [r4, #4]
   2cd66:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
   2cd6a:	b109      	cbz	r1, 2cd70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
   2cd6c:	2701      	movs	r7, #1
   2cd6e:	e000      	b.n	2cd72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
   2cd70:	2700      	movs	r7, #0
   2cd72:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
   2cd76:	b108      	cbz	r0, 2cd7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
   2cd78:	2601      	movs	r6, #1
   2cd7a:	e000      	b.n	2cd7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
   2cd7c:	2600      	movs	r6, #0
   2cd7e:	b90f      	cbnz	r7, 2cd84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
   2cd80:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
   2cd84:	b90e      	cbnz	r6, 2cd8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
   2cd86:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
   2cd8a:	f102 0362 	add.w	r3, r2, #98	; 0x62
   2cd8e:	7219      	strb	r1, [r3, #8]
   2cd90:	7258      	strb	r0, [r3, #9]
   2cd92:	20ff      	movs	r0, #255	; 0xff
   2cd94:	7298      	strb	r0, [r3, #10]
   2cd96:	481d      	ldr	r0, [pc, #116]	; (2ce0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
   2cd98:	6803      	ldr	r3, [r0, #0]
   2cd9a:	b10b      	cbz	r3, 2cda0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
   2cd9c:	4610      	mov	r0, r2
   2cd9e:	4798      	blx	r3
   2cda0:	6860      	ldr	r0, [r4, #4]
   2cda2:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
   2cda6:	2801      	cmp	r0, #1
   2cda8:	d001      	beq.n	2cdae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
   2cdaa:	b907      	cbnz	r7, 2cdae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
   2cdac:	b116      	cbz	r6, 2cdb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
   2cdae:	2000      	movs	r0, #0
   2cdb0:	f000 f82e 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2cdb4:	6860      	ldr	r0, [r4, #4]
   2cdb6:	302c      	adds	r0, #44	; 0x2c
   2cdb8:	f008 f90d 	bl	34fd6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
   2cdbc:	4606      	mov	r6, r0
   2cdbe:	6860      	ldr	r0, [r4, #4]
   2cdc0:	f008 f8b7 	bl	34f32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   2cdc4:	b130      	cbz	r0, 2cdd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
   2cdc6:	6861      	ldr	r1, [r4, #4]
   2cdc8:	f501 72b1 	add.w	r2, r1, #354	; 0x162
   2cdcc:	f831 0b2c 	ldrh.w	r0, [r1], #44
   2cdd0:	f7fc ff50 	bl	29c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   2cdd4:	2105      	movs	r1, #5
   2cdd6:	6860      	ldr	r0, [r4, #4]
   2cdd8:	f7fe fb22 	bl	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2cddc:	6860      	ldr	r0, [r4, #4]
   2cdde:	302c      	adds	r0, #44	; 0x2c
   2cde0:	f008 f8f9 	bl	34fd6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
   2cde4:	4604      	mov	r4, r0
   2cde6:	42a6      	cmp	r6, r4
   2cde8:	d20a      	bcs.n	2ce00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
   2cdea:	f003 fdcd 	bl	30988 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
   2cdee:	4601      	mov	r1, r0
   2cdf0:	1ba0      	subs	r0, r4, r6
   2cdf2:	2867      	cmp	r0, #103	; 0x67
   2cdf4:	d200      	bcs.n	2cdf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
   2cdf6:	2067      	movs	r0, #103	; 0x67
   2cdf8:	f003 fc8c 	bl	30714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   2cdfc:	b100      	cbz	r0, 2ce00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
   2cdfe:	2500      	movs	r5, #0
   2ce00:	4628      	mov	r0, r5
   2ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ce06:	0000      	.short	0x0000
   2ce08:	20000124 	.word	0x20000124
   2ce0c:	2000028c 	.word	0x2000028c
   2ce10:	4601      	mov	r1, r0
   2ce12:	4801      	ldr	r0, [pc, #4]	; (2ce18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
   2ce14:	f001 ba96 	b.w	2e344 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
   2ce18:	20000124 	.word	0x20000124
   2ce1c:	b570      	push	{r4, r5, r6, lr}
   2ce1e:	4d0f      	ldr	r5, [pc, #60]	; (2ce5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
   2ce20:	686c      	ldr	r4, [r5, #4]
   2ce22:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
   2ce26:	2921      	cmp	r1, #33	; 0x21
   2ce28:	d002      	beq.n	2ce30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
   2ce2a:	292e      	cmp	r1, #46	; 0x2e
   2ce2c:	d003      	beq.n	2ce36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
   2ce2e:	e011      	b.n	2ce54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
   2ce30:	f7ff ffee 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2ce34:	e008      	b.n	2ce48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
   2ce36:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
   2ce3a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   2ce3e:	2301      	movs	r3, #1
   2ce40:	210b      	movs	r1, #11
   2ce42:	f007 fc89 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2ce46:	b138      	cbz	r0, 2ce58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
   2ce48:	6869      	ldr	r1, [r5, #4]
   2ce4a:	2000      	movs	r0, #0
   2ce4c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
   2ce50:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
   2ce54:	2000      	movs	r0, #0
   2ce56:	bd70      	pop	{r4, r5, r6, pc}
   2ce58:	202a      	movs	r0, #42	; 0x2a
   2ce5a:	e7e9      	b.n	2ce30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
   2ce5c:	20000124 	.word	0x20000124
   2ce60:	b570      	push	{r4, r5, r6, lr}
   2ce62:	4604      	mov	r4, r0
   2ce64:	6840      	ldr	r0, [r0, #4]
   2ce66:	2301      	movs	r3, #1
   2ce68:	2100      	movs	r1, #0
   2ce6a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2ce6e:	3080      	adds	r0, #128	; 0x80
   2ce70:	f007 fc72 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2ce74:	b1b8      	cbz	r0, 2cea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
   2ce76:	4d13      	ldr	r5, [pc, #76]	; (2cec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
   2ce78:	68e8      	ldr	r0, [r5, #12]
   2ce7a:	f007 fee0 	bl	34c3e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
   2ce7e:	6861      	ldr	r1, [r4, #4]
   2ce80:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
   2ce84:	6861      	ldr	r1, [r4, #4]
   2ce86:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
   2ce8a:	f009 f914 	bl	360b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   2ce8e:	b160      	cbz	r0, 2ceaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
   2ce90:	6861      	ldr	r1, [r4, #4]
   2ce92:	2028      	movs	r0, #40	; 0x28
   2ce94:	2202      	movs	r2, #2
   2ce96:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
   2ce9a:	6860      	ldr	r0, [r4, #4]
   2ce9c:	490a      	ldr	r1, [pc, #40]	; (2cec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
   2ce9e:	30b4      	adds	r0, #180	; 0xb4
   2cea0:	f008 f802 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2cea4:	e00b      	b.n	2cebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
   2cea6:	2001      	movs	r0, #1
   2cea8:	bd70      	pop	{r4, r5, r6, pc}
   2ceaa:	6861      	ldr	r1, [r4, #4]
   2ceac:	68e8      	ldr	r0, [r5, #12]
   2ceae:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
   2ceb2:	f007 febf 	bl	34c34 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
   2ceb6:	6861      	ldr	r1, [r4, #4]
   2ceb8:	200a      	movs	r0, #10
   2ceba:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2cebe:	2000      	movs	r0, #0
   2cec0:	bd70      	pop	{r4, r5, r6, pc}
   2cec2:	0000      	.short	0x0000
   2cec4:	20000114 	.word	0x20000114
   2cec8:	00035165 	.word	0x00035165
   2cecc:	b570      	push	{r4, r5, r6, lr}
   2cece:	4604      	mov	r4, r0
   2ced0:	6840      	ldr	r0, [r0, #4]
   2ced2:	2301      	movs	r3, #1
   2ced4:	2100      	movs	r1, #0
   2ced6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2ceda:	3080      	adds	r0, #128	; 0x80
   2cedc:	f007 fc3c 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cee0:	b1e0      	cbz	r0, 2cf1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
   2cee2:	4d28      	ldr	r5, [pc, #160]	; (2cf84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
   2cee4:	2100      	movs	r1, #0
   2cee6:	68e8      	ldr	r0, [r5, #12]
   2cee8:	f007 feac 	bl	34c44 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
   2ceec:	b1c0      	cbz	r0, 2cf20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
   2ceee:	68e8      	ldr	r0, [r5, #12]
   2cef0:	6861      	ldr	r1, [r4, #4]
   2cef2:	f8b0 000d 	ldrh.w	r0, [r0, #13]
   2cef6:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
   2cefa:	6861      	ldr	r1, [r4, #4]
   2cefc:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
   2cf00:	f009 f8d9 	bl	360b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   2cf04:	b188      	cbz	r0, 2cf2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
   2cf06:	6861      	ldr	r1, [r4, #4]
   2cf08:	2028      	movs	r0, #40	; 0x28
   2cf0a:	2202      	movs	r2, #2
   2cf0c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
   2cf10:	6860      	ldr	r0, [r4, #4]
   2cf12:	491d      	ldr	r1, [pc, #116]	; (2cf88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
   2cf14:	30b4      	adds	r0, #180	; 0xb4
   2cf16:	f007 ffc7 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2cf1a:	e030      	b.n	2cf7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
   2cf1c:	2001      	movs	r0, #1
   2cf1e:	bd70      	pop	{r4, r5, r6, pc}
   2cf20:	4620      	mov	r0, r4
   2cf22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2cf26:	f000 b88d 	b.w	2d044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
   2cf2a:	68e8      	ldr	r0, [r5, #12]
   2cf2c:	f007 feb4 	bl	34c98 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
   2cf30:	f007 fc08 	bl	34744 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   2cf34:	4606      	mov	r6, r0
   2cf36:	6860      	ldr	r0, [r4, #4]
   2cf38:	4631      	mov	r1, r6
   2cf3a:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
   2cf3e:	68e8      	ldr	r0, [r5, #12]
   2cf40:	7900      	ldrb	r0, [r0, #4]
   2cf42:	f007 fd6c 	bl	34a1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
   2cf46:	6861      	ldr	r1, [r4, #4]
   2cf48:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
   2cf4c:	68e8      	ldr	r0, [r5, #12]
   2cf4e:	4631      	mov	r1, r6
   2cf50:	f8b0 0005 	ldrh.w	r0, [r0, #5]
   2cf54:	f007 fd5f 	bl	34a16 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
   2cf58:	6861      	ldr	r1, [r4, #4]
   2cf5a:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
   2cf5e:	68e8      	ldr	r0, [r5, #12]
   2cf60:	f007 fe9d 	bl	34c9e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
   2cf64:	6861      	ldr	r1, [r4, #4]
   2cf66:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
   2cf6a:	68e8      	ldr	r0, [r5, #12]
   2cf6c:	f007 fe9a 	bl	34ca4 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
   2cf70:	6861      	ldr	r1, [r4, #4]
   2cf72:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
   2cf76:	6861      	ldr	r1, [r4, #4]
   2cf78:	200d      	movs	r0, #13
   2cf7a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2cf7e:	2000      	movs	r0, #0
   2cf80:	bd70      	pop	{r4, r5, r6, pc}
   2cf82:	0000      	.short	0x0000
   2cf84:	20000114 	.word	0x20000114
   2cf88:	00035165 	.word	0x00035165
   2cf8c:	b570      	push	{r4, r5, r6, lr}
   2cf8e:	4604      	mov	r4, r0
   2cf90:	6840      	ldr	r0, [r0, #4]
   2cf92:	2301      	movs	r3, #1
   2cf94:	2100      	movs	r1, #0
   2cf96:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2cf9a:	3080      	adds	r0, #128	; 0x80
   2cf9c:	f007 fbdc 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cfa0:	b970      	cbnz	r0, 2cfc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
   2cfa2:	6860      	ldr	r0, [r4, #4]
   2cfa4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2cfa8:	2a13      	cmp	r2, #19
   2cfaa:	d009      	beq.n	2cfc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
   2cfac:	2301      	movs	r3, #1
   2cfae:	2105      	movs	r1, #5
   2cfb0:	3080      	adds	r0, #128	; 0x80
   2cfb2:	f007 fbd1 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2cfb6:	b108      	cbz	r0, 2cfbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
   2cfb8:	2008      	movs	r0, #8
   2cfba:	bd70      	pop	{r4, r5, r6, pc}
   2cfbc:	2001      	movs	r0, #1
   2cfbe:	bd70      	pop	{r4, r5, r6, pc}
   2cfc0:	6860      	ldr	r0, [r4, #4]
   2cfc2:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
   2cfc6:	b910      	cbnz	r0, 2cfce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
   2cfc8:	4816      	ldr	r0, [pc, #88]	; (2d024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
   2cfca:	f008 f8a6 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   2cfce:	4d15      	ldr	r5, [pc, #84]	; (2d024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
   2cfd0:	6861      	ldr	r1, [r4, #4]
   2cfd2:	3d10      	subs	r5, #16
   2cfd4:	f501 710e 	add.w	r1, r1, #568	; 0x238
   2cfd8:	68e8      	ldr	r0, [r5, #12]
   2cfda:	f007 fe7c 	bl	34cd6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
   2cfde:	6861      	ldr	r1, [r4, #4]
   2cfe0:	68e8      	ldr	r0, [r5, #12]
   2cfe2:	f501 718c 	add.w	r1, r1, #280	; 0x118
   2cfe6:	f007 fe6d 	bl	34cc4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
   2cfea:	6860      	ldr	r0, [r4, #4]
   2cfec:	8801      	ldrh	r1, [r0, #0]
   2cfee:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
   2cff2:	6861      	ldr	r1, [r4, #4]
   2cff4:	68e8      	ldr	r0, [r5, #12]
   2cff6:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
   2cffa:	f007 fe67 	bl	34ccc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
   2cffe:	6861      	ldr	r1, [r4, #4]
   2d000:	68e8      	ldr	r0, [r5, #12]
   2d002:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
   2d006:	f007 fe5a 	bl	34cbe <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
   2d00a:	6860      	ldr	r0, [r4, #4]
   2d00c:	2202      	movs	r2, #2
   2d00e:	4906      	ldr	r1, [pc, #24]	; (2d028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
   2d010:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
   2d014:	f007 ff48 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2d018:	6861      	ldr	r1, [r4, #4]
   2d01a:	2015      	movs	r0, #21
   2d01c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2d020:	2000      	movs	r0, #0
   2d022:	bd70      	pop	{r4, r5, r6, pc}
   2d024:	20000124 	.word	0x20000124
   2d028:	00035309 	.word	0x00035309
   2d02c:	4901      	ldr	r1, [pc, #4]	; (2d034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
   2d02e:	68c9      	ldr	r1, [r1, #12]
   2d030:	f7fc bf28 	b.w	29e84 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
   2d034:	20000114 	.word	0x20000114
   2d038:	4901      	ldr	r1, [pc, #4]	; (2d040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
   2d03a:	68c9      	ldr	r1, [r1, #12]
   2d03c:	f7fc bf58 	b.w	29ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
   2d040:	20000114 	.word	0x20000114
   2d044:	b510      	push	{r4, lr}
   2d046:	6842      	ldr	r2, [r0, #4]
   2d048:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
   2d04c:	070b      	lsls	r3, r1, #28
   2d04e:	d501      	bpl.n	2d054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
   2d050:	2001      	movs	r0, #1
   2d052:	bd10      	pop	{r4, pc}
   2d054:	f041 0108 	orr.w	r1, r1, #8
   2d058:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
   2d05c:	4905      	ldr	r1, [pc, #20]	; (2d074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
   2d05e:	6840      	ldr	r0, [r0, #4]
   2d060:	68c9      	ldr	r1, [r1, #12]
   2d062:	78c9      	ldrb	r1, [r1, #3]
   2d064:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
   2d068:	4802      	ldr	r0, [pc, #8]	; (2d074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
   2d06a:	3010      	adds	r0, #16
   2d06c:	f008 f855 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   2d070:	2000      	movs	r0, #0
   2d072:	bd10      	pop	{r4, pc}
   2d074:	20000114 	.word	0x20000114
   2d078:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   2d07c:	4605      	mov	r5, r0
   2d07e:	6840      	ldr	r0, [r0, #4]
   2d080:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
   2d084:	f010 0f30 	tst.w	r0, #48	; 0x30
   2d088:	d002      	beq.n	2d090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
   2d08a:	2001      	movs	r0, #1
   2d08c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   2d090:	4c32      	ldr	r4, [pc, #200]	; (2d15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
   2d092:	68e0      	ldr	r0, [r4, #12]
   2d094:	f007 fe39 	bl	34d0a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   2d098:	b330      	cbz	r0, 2d0e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
   2d09a:	68e0      	ldr	r0, [r4, #12]
   2d09c:	f007 fe2f 	bl	34cfe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   2d0a0:	4680      	mov	r8, r0
   2d0a2:	68e0      	ldr	r0, [r4, #12]
   2d0a4:	f007 fe2f 	bl	34d06 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   2d0a8:	4607      	mov	r7, r0
   2d0aa:	68e0      	ldr	r0, [r4, #12]
   2d0ac:	f007 fe25 	bl	34cfa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   2d0b0:	4606      	mov	r6, r0
   2d0b2:	68e0      	ldr	r0, [r4, #12]
   2d0b4:	f007 fe25 	bl	34d02 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   2d0b8:	4601      	mov	r1, r0
   2d0ba:	f8cd 8000 	str.w	r8, [sp]
   2d0be:	6868      	ldr	r0, [r5, #4]
   2d0c0:	463b      	mov	r3, r7
   2d0c2:	4632      	mov	r2, r6
   2d0c4:	302c      	adds	r0, #44	; 0x2c
   2d0c6:	f007 ff90 	bl	34fea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   2d0ca:	78a0      	ldrb	r0, [r4, #2]
   2d0cc:	0781      	lsls	r1, r0, #30
   2d0ce:	f04f 0001 	mov.w	r0, #1
   2d0d2:	d503      	bpl.n	2d0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
   2d0d4:	68a1      	ldr	r1, [r4, #8]
   2d0d6:	78c9      	ldrb	r1, [r1, #3]
   2d0d8:	2914      	cmp	r1, #20
   2d0da:	d00a      	beq.n	2d0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
   2d0dc:	6869      	ldr	r1, [r5, #4]
   2d0de:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
   2d0e2:	291d      	cmp	r1, #29
   2d0e4:	d005      	beq.n	2d0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
   2d0e6:	e007      	b.n	2d0f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
   2d0e8:	4628      	mov	r0, r5
   2d0ea:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   2d0ee:	f7ff bfa9 	b.w	2d044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
   2d0f2:	6869      	ldr	r1, [r5, #4]
   2d0f4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   2d0f8:	6868      	ldr	r0, [r5, #4]
   2d0fa:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
   2d0fe:	2901      	cmp	r1, #1
   2d100:	d011      	beq.n	2d126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
   2d102:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
   2d106:	f88d 1004 	strb.w	r1, [sp, #4]
   2d10a:	9901      	ldr	r1, [sp, #4]
   2d10c:	9101      	str	r1, [sp, #4]
   2d10e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   2d112:	b941      	cbnz	r1, 2d126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
   2d114:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
   2d118:	f88d 1000 	strb.w	r1, [sp]
   2d11c:	9900      	ldr	r1, [sp, #0]
   2d11e:	9100      	str	r1, [sp, #0]
   2d120:	f89d 1000 	ldrb.w	r1, [sp]
   2d124:	b151      	cbz	r1, 2d13c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
   2d126:	f850 1f8c 	ldr.w	r1, [r0, #140]!
   2d12a:	f041 0110 	orr.w	r1, r1, #16
   2d12e:	6001      	str	r1, [r0, #0]
   2d130:	480a      	ldr	r0, [pc, #40]	; (2d15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
   2d132:	3010      	adds	r0, #16
   2d134:	f007 fff1 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   2d138:	2000      	movs	r0, #0
   2d13a:	e7a7      	b.n	2d08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
   2d13c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
   2d140:	f041 0120 	orr.w	r1, r1, #32
   2d144:	6001      	str	r1, [r0, #0]
   2d146:	4805      	ldr	r0, [pc, #20]	; (2d15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
   2d148:	3010      	adds	r0, #16
   2d14a:	6843      	ldr	r3, [r0, #4]
   2d14c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
   2d150:	8818      	ldrh	r0, [r3, #0]
   2d152:	f503 72bc 	add.w	r2, r3, #376	; 0x178
   2d156:	f7fc fdb5 	bl	29cc4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
   2d15a:	e7e9      	b.n	2d130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
   2d15c:	20000114 	.word	0x20000114
   2d160:	4901      	ldr	r1, [pc, #4]	; (2d168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
   2d162:	68c9      	ldr	r1, [r1, #12]
   2d164:	f008 b868 	b.w	35238 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
   2d168:	20000114 	.word	0x20000114
   2d16c:	b510      	push	{r4, lr}
   2d16e:	4604      	mov	r4, r0
   2d170:	6840      	ldr	r0, [r0, #4]
   2d172:	2301      	movs	r3, #1
   2d174:	2100      	movs	r1, #0
   2d176:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2d17a:	3080      	adds	r0, #128	; 0x80
   2d17c:	f007 faec 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d180:	2800      	cmp	r0, #0
   2d182:	6860      	ldr	r0, [r4, #4]
   2d184:	d00c      	beq.n	2d1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
   2d186:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
   2d18a:	2800      	cmp	r0, #0
   2d18c:	d007      	beq.n	2d19e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
   2d18e:	480a      	ldr	r0, [pc, #40]	; (2d1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
   2d190:	f007 ffc3 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   2d194:	6861      	ldr	r1, [r4, #4]
   2d196:	2011      	movs	r0, #17
   2d198:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2d19c:	2000      	movs	r0, #0
   2d19e:	bd10      	pop	{r4, pc}
   2d1a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2d1a4:	2301      	movs	r3, #1
   2d1a6:	2105      	movs	r1, #5
   2d1a8:	3080      	adds	r0, #128	; 0x80
   2d1aa:	f007 fad5 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d1ae:	b108      	cbz	r0, 2d1b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
   2d1b0:	2008      	movs	r0, #8
   2d1b2:	bd10      	pop	{r4, pc}
   2d1b4:	2001      	movs	r0, #1
   2d1b6:	bd10      	pop	{r4, pc}
   2d1b8:	20000124 	.word	0x20000124
   2d1bc:	b538      	push	{r3, r4, r5, lr}
   2d1be:	4604      	mov	r4, r0
   2d1c0:	6840      	ldr	r0, [r0, #4]
   2d1c2:	2301      	movs	r3, #1
   2d1c4:	210b      	movs	r1, #11
   2d1c6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2d1ca:	3080      	adds	r0, #128	; 0x80
   2d1cc:	f007 fac4 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d1d0:	bb60      	cbnz	r0, 2d22c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
   2d1d2:	6860      	ldr	r0, [r4, #4]
   2d1d4:	2301      	movs	r3, #1
   2d1d6:	2100      	movs	r1, #0
   2d1d8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2d1dc:	3080      	adds	r0, #128	; 0x80
   2d1de:	f007 fabb 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d1e2:	b308      	cbz	r0, 2d228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
   2d1e4:	6860      	ldr	r0, [r4, #4]
   2d1e6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
   2d1ea:	2825      	cmp	r0, #37	; 0x25
   2d1ec:	d01e      	beq.n	2d22c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
   2d1ee:	4d2a      	ldr	r5, [pc, #168]	; (2d298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
   2d1f0:	68e8      	ldr	r0, [r5, #12]
   2d1f2:	f007 fd9c 	bl	34d2e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
   2d1f6:	b1d8      	cbz	r0, 2d230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
   2d1f8:	68e8      	ldr	r0, [r5, #12]
   2d1fa:	6862      	ldr	r2, [r4, #4]
   2d1fc:	7941      	ldrb	r1, [r0, #5]
   2d1fe:	f001 0107 	and.w	r1, r1, #7
   2d202:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
   2d206:	7900      	ldrb	r0, [r0, #4]
   2d208:	f000 0207 	and.w	r2, r0, #7
   2d20c:	6860      	ldr	r0, [r4, #4]
   2d20e:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
   2d212:	6860      	ldr	r0, [r4, #4]
   2d214:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
   2d218:	f88d 1000 	strb.w	r1, [sp]
   2d21c:	9900      	ldr	r1, [sp, #0]
   2d21e:	9100      	str	r1, [sp, #0]
   2d220:	f89d 1000 	ldrb.w	r1, [sp]
   2d224:	bb71      	cbnz	r1, 2d284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
   2d226:	e008      	b.n	2d23a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
   2d228:	2001      	movs	r0, #1
   2d22a:	bd38      	pop	{r3, r4, r5, pc}
   2d22c:	2020      	movs	r0, #32
   2d22e:	bd38      	pop	{r3, r4, r5, pc}
   2d230:	4620      	mov	r0, r4
   2d232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d236:	f7ff bf05 	b.w	2d044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
   2d23a:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   2d23e:	2901      	cmp	r1, #1
   2d240:	d020      	beq.n	2d284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
   2d242:	f100 016a 	add.w	r1, r0, #106	; 0x6a
   2d246:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   2d24a:	784d      	ldrb	r5, [r1, #1]
   2d24c:	4295      	cmp	r5, r2
   2d24e:	d106      	bne.n	2d25e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
   2d250:	7809      	ldrb	r1, [r1, #0]
   2d252:	4299      	cmp	r1, r3
   2d254:	d103      	bne.n	2d25e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
   2d256:	2102      	movs	r1, #2
   2d258:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
   2d25c:	e012      	b.n	2d284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
   2d25e:	480e      	ldr	r0, [pc, #56]	; (2d298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
   2d260:	3010      	adds	r0, #16
   2d262:	6841      	ldr	r1, [r0, #4]
   2d264:	f501 70cb 	add.w	r0, r1, #406	; 0x196
   2d268:	880a      	ldrh	r2, [r1, #0]
   2d26a:	f820 2b02 	strh.w	r2, [r0], #2
   2d26e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
   2d272:	f800 2b01 	strb.w	r2, [r0], #1
   2d276:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
   2d27a:	f800 190d 	strb.w	r1, [r0], #-13
   2d27e:	4907      	ldr	r1, [pc, #28]	; (2d29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
   2d280:	f007 fe09 	bl	34e96 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
   2d284:	6861      	ldr	r1, [r4, #4]
   2d286:	2022      	movs	r0, #34	; 0x22
   2d288:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2d28c:	4802      	ldr	r0, [pc, #8]	; (2d298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
   2d28e:	3010      	adds	r0, #16
   2d290:	f007 ff43 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   2d294:	2000      	movs	r0, #0
   2d296:	bd38      	pop	{r3, r4, r5, pc}
   2d298:	20000114 	.word	0x20000114
   2d29c:	0002e385 	.word	0x0002e385
   2d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d2a4:	6845      	ldr	r5, [r0, #4]
   2d2a6:	4604      	mov	r4, r0
   2d2a8:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
   2d2ac:	2821      	cmp	r0, #33	; 0x21
   2d2ae:	d008      	beq.n	2d2c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
   2d2b0:	f05f 0600 	movs.w	r6, #0
   2d2b4:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
   2d2b8:	2823      	cmp	r0, #35	; 0x23
   2d2ba:	d004      	beq.n	2d2c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
   2d2bc:	b35e      	cbz	r6, 2d316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
   2d2be:	359d      	adds	r5, #157	; 0x9d
   2d2c0:	e002      	b.n	2d2c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
   2d2c2:	2601      	movs	r6, #1
   2d2c4:	e7f6      	b.n	2d2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
   2d2c6:	359e      	adds	r5, #158	; 0x9e
   2d2c8:	f8df 8140 	ldr.w	r8, [pc, #320]	; 2d40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
   2d2cc:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2d2d0:	f007 fd39 	bl	34d46 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
   2d2d4:	2700      	movs	r7, #0
   2d2d6:	b308      	cbz	r0, 2d31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
   2d2d8:	4631      	mov	r1, r6
   2d2da:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2d2de:	f7fe ffb3 	bl	2c248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
   2d2e2:	b1d8      	cbz	r0, 2d31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
   2d2e4:	466a      	mov	r2, sp
   2d2e6:	4646      	mov	r6, r8
   2d2e8:	6860      	ldr	r0, [r4, #4]
   2d2ea:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2d2ee:	f007 fb4c 	bl	3498a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
   2d2f2:	b388      	cbz	r0, 2d358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
   2d2f4:	68f0      	ldr	r0, [r6, #12]
   2d2f6:	f007 fd24 	bl	34d42 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   2d2fa:	6861      	ldr	r1, [r4, #4]
   2d2fc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
   2d300:	6861      	ldr	r1, [r4, #4]
   2d302:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
   2d306:	f008 fed6 	bl	360b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
   2d30a:	b3e8      	cbz	r0, 2d388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
   2d30c:	6861      	ldr	r1, [r4, #4]
   2d30e:	2028      	movs	r0, #40	; 0x28
   2d310:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
   2d314:	e06e      	b.n	2d3f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
   2d316:	2002      	movs	r0, #2
   2d318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d31c:	6860      	ldr	r0, [r4, #4]
   2d31e:	f04f 0900 	mov.w	r9, #0
   2d322:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   2d326:	2901      	cmp	r1, #1
   2d328:	d017      	beq.n	2d35a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
   2d32a:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
   2d32e:	b306      	cbz	r6, 2d372 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
   2d330:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2d334:	6861      	ldr	r1, [r4, #4]
   2d336:	2201      	movs	r2, #1
   2d338:	78c0      	ldrb	r0, [r0, #3]
   2d33a:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
   2d33e:	4082      	lsls	r2, r0
   2d340:	6861      	ldr	r1, [r4, #4]
   2d342:	f3c2 6000 	ubfx	r0, r2, #24, #1
   2d346:	b160      	cbz	r0, 2d362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
   2d348:	2009      	movs	r0, #9
   2d34a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
   2d34e:	6860      	ldr	r0, [r4, #4]
   2d350:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   2d354:	b9b0      	cbnz	r0, 2d384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
   2d356:	e007      	b.n	2d368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
   2d358:	e017      	b.n	2d38a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
   2d35a:	201e      	movs	r0, #30
   2d35c:	f7ff fd58 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2d360:	e7e5      	b.n	2d32e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
   2d362:	f240 414b 	movw	r1, #1099	; 0x44b
   2d366:	e001      	b.n	2d36c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
   2d368:	f240 4153 	movw	r1, #1107	; 0x453
   2d36c:	2031      	movs	r0, #49	; 0x31
   2d36e:	f7fa fb6f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d372:	4826      	ldr	r0, [pc, #152]	; (2d40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
   2d374:	702f      	strb	r7, [r5, #0]
   2d376:	3010      	adds	r0, #16
   2d378:	f007 fed7 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d37c:	4620      	mov	r0, r4
   2d37e:	f7ff fe61 	bl	2d044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
   2d382:	4681      	mov	r9, r0
   2d384:	4648      	mov	r0, r9
   2d386:	e7c7      	b.n	2d318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
   2d388:	e013      	b.n	2d3b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
   2d38a:	6860      	ldr	r0, [r4, #4]
   2d38c:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
   2d390:	2901      	cmp	r1, #1
   2d392:	d009      	beq.n	2d3a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
   2d394:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
   2d398:	6860      	ldr	r0, [r4, #4]
   2d39a:	f100 019e 	add.w	r1, r0, #158	; 0x9e
   2d39e:	42a9      	cmp	r1, r5
   2d3a0:	d11b      	bne.n	2d3da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
   2d3a2:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
   2d3a6:	e018      	b.n	2d3da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
   2d3a8:	2000      	movs	r0, #0
   2d3aa:	f7ff fd31 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2d3ae:	702f      	strb	r7, [r5, #0]
   2d3b0:	e7f2      	b.n	2d398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
   2d3b2:	6860      	ldr	r0, [r4, #4]
   2d3b4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2d3b8:	290d      	cmp	r1, #13
   2d3ba:	d018      	beq.n	2d3ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
   2d3bc:	290b      	cmp	r1, #11
   2d3be:	d016      	beq.n	2d3ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
   2d3c0:	290a      	cmp	r1, #10
   2d3c2:	d014      	beq.n	2d3ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
   2d3c4:	f89d 1000 	ldrb.w	r1, [sp]
   2d3c8:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
   2d3cc:	6861      	ldr	r1, [r4, #4]
   2d3ce:	f89d 0001 	ldrb.w	r0, [sp, #1]
   2d3d2:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
   2d3d6:	2025      	movs	r0, #37	; 0x25
   2d3d8:	7028      	strb	r0, [r5, #0]
   2d3da:	6860      	ldr	r0, [r4, #4]
   2d3dc:	f100 019e 	add.w	r1, r0, #158	; 0x9e
   2d3e0:	42a9      	cmp	r1, r5
   2d3e2:	d10e      	bne.n	2d402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
   2d3e4:	4809      	ldr	r0, [pc, #36]	; (2d40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
   2d3e6:	3010      	adds	r0, #16
   2d3e8:	f007 fe9f 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d3ec:	e00b      	b.n	2d406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
   2d3ee:	212a      	movs	r1, #42	; 0x2a
   2d3f0:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
   2d3f4:	6860      	ldr	r0, [r4, #4]
   2d3f6:	2202      	movs	r2, #2
   2d3f8:	4905      	ldr	r1, [pc, #20]	; (2d410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
   2d3fa:	30b4      	adds	r0, #180	; 0xb4
   2d3fc:	f007 fd54 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2d400:	e7eb      	b.n	2d3da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
   2d402:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
   2d406:	2000      	movs	r0, #0
   2d408:	e786      	b.n	2d318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
   2d40a:	0000      	.short	0x0000
   2d40c:	20000114 	.word	0x20000114
   2d410:	00035165 	.word	0x00035165
   2d414:	b570      	push	{r4, r5, r6, lr}
   2d416:	4604      	mov	r4, r0
   2d418:	6840      	ldr	r0, [r0, #4]
   2d41a:	4d0a      	ldr	r5, [pc, #40]	; (2d444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
   2d41c:	f810 1fec 	ldrb.w	r1, [r0, #236]!
   2d420:	f041 0104 	orr.w	r1, r1, #4
   2d424:	7001      	strb	r1, [r0, #0]
   2d426:	68e8      	ldr	r0, [r5, #12]
   2d428:	f007 fca1 	bl	34d6e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
   2d42c:	4606      	mov	r6, r0
   2d42e:	68e8      	ldr	r0, [r5, #12]
   2d430:	f007 fca1 	bl	34d76 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
   2d434:	4601      	mov	r1, r0
   2d436:	4622      	mov	r2, r4
   2d438:	4630      	mov	r0, r6
   2d43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2d43e:	f000 b893 	b.w	2d568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
   2d442:	0000      	.short	0x0000
   2d444:	20000114 	.word	0x20000114
   2d448:	4602      	mov	r2, r0
   2d44a:	4813      	ldr	r0, [pc, #76]	; (2d498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
   2d44c:	68c0      	ldr	r0, [r0, #12]
   2d44e:	7901      	ldrb	r1, [r0, #4]
   2d450:	4811      	ldr	r0, [pc, #68]	; (2d498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
   2d452:	3010      	adds	r0, #16
   2d454:	6843      	ldr	r3, [r0, #4]
   2d456:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
   2d45a:	2821      	cmp	r0, #33	; 0x21
   2d45c:	d010      	beq.n	2d480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   2d45e:	282e      	cmp	r0, #46	; 0x2e
   2d460:	d00e      	beq.n	2d480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
   2d462:	2828      	cmp	r0, #40	; 0x28
   2d464:	d00e      	beq.n	2d484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
   2d466:	2804      	cmp	r0, #4
   2d468:	d00e      	beq.n	2d488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
   2d46a:	280f      	cmp	r0, #15
   2d46c:	d00e      	beq.n	2d48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
   2d46e:	281d      	cmp	r0, #29
   2d470:	d00e      	beq.n	2d490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
   2d472:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
   2d476:	2823      	cmp	r0, #35	; 0x23
   2d478:	d00c      	beq.n	2d494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
   2d47a:	20fe      	movs	r0, #254	; 0xfe
   2d47c:	f000 b874 	b.w	2d568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
   2d480:	2016      	movs	r0, #22
   2d482:	e7fb      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d484:	2023      	movs	r0, #35	; 0x23
   2d486:	e7f9      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d488:	200e      	movs	r0, #14
   2d48a:	e7f7      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d48c:	2012      	movs	r0, #18
   2d48e:	e7f5      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d490:	2014      	movs	r0, #20
   2d492:	e7f3      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d494:	2017      	movs	r0, #23
   2d496:	e7f1      	b.n	2d47c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
   2d498:	20000114 	.word	0x20000114
   2d49c:	b510      	push	{r4, lr}
   2d49e:	4604      	mov	r4, r0
   2d4a0:	6840      	ldr	r0, [r0, #4]
   2d4a2:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
   2d4a6:	2818      	cmp	r0, #24
   2d4a8:	d001      	beq.n	2d4ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
   2d4aa:	2002      	movs	r0, #2
   2d4ac:	bd10      	pop	{r4, pc}
   2d4ae:	4804      	ldr	r0, [pc, #16]	; (2d4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
   2d4b0:	f007 fe3b 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d4b4:	6861      	ldr	r1, [r4, #4]
   2d4b6:	201c      	movs	r0, #28
   2d4b8:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   2d4bc:	2000      	movs	r0, #0
   2d4be:	bd10      	pop	{r4, pc}
   2d4c0:	20000124 	.word	0x20000124
   2d4c4:	4901      	ldr	r1, [pc, #4]	; (2d4cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
   2d4c6:	68c9      	ldr	r1, [r1, #12]
   2d4c8:	f007 be6e 	b.w	351a8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
   2d4cc:	20000114 	.word	0x20000114
   2d4d0:	b570      	push	{r4, r5, r6, lr}
   2d4d2:	4604      	mov	r4, r0
   2d4d4:	481f      	ldr	r0, [pc, #124]	; (2d554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
   2d4d6:	2500      	movs	r5, #0
   2d4d8:	68c0      	ldr	r0, [r0, #12]
   2d4da:	7903      	ldrb	r3, [r0, #4]
   2d4dc:	6860      	ldr	r0, [r4, #4]
   2d4de:	2b16      	cmp	r3, #22
   2d4e0:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
   2d4e4:	d013      	beq.n	2d50e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
   2d4e6:	dc06      	bgt.n	2d4f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
   2d4e8:	2b0e      	cmp	r3, #14
   2d4ea:	d009      	beq.n	2d500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
   2d4ec:	2b12      	cmp	r3, #18
   2d4ee:	d007      	beq.n	2d500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
   2d4f0:	2b14      	cmp	r3, #20
   2d4f2:	d12c      	bne.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d4f4:	e004      	b.n	2d500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
   2d4f6:	2b17      	cmp	r3, #23
   2d4f8:	d002      	beq.n	2d500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
   2d4fa:	2b23      	cmp	r3, #35	; 0x23
   2d4fc:	d127      	bne.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d4fe:	e01f      	b.n	2d540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
   2d500:	4622      	mov	r2, r4
   2d502:	2101      	movs	r1, #1
   2d504:	4618      	mov	r0, r3
   2d506:	f000 f9c5 	bl	2d894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
   2d50a:	4605      	mov	r5, r0
   2d50c:	e01f      	b.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d50e:	2821      	cmp	r0, #33	; 0x21
   2d510:	d001      	beq.n	2d516 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
   2d512:	282e      	cmp	r0, #46	; 0x2e
   2d514:	d11b      	bne.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d516:	4620      	mov	r0, r4
   2d518:	f007 fe1b 	bl	35152 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
   2d51c:	6860      	ldr	r0, [r4, #4]
   2d51e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2d522:	2922      	cmp	r1, #34	; 0x22
   2d524:	d013      	beq.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d526:	2108      	movs	r1, #8
   2d528:	30ec      	adds	r0, #236	; 0xec
   2d52a:	f008 fd70 	bl	3600e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
   2d52e:	6860      	ldr	r0, [r4, #4]
   2d530:	210b      	movs	r1, #11
   2d532:	30ec      	adds	r0, #236	; 0xec
   2d534:	f008 fd6b 	bl	3600e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
   2d538:	201a      	movs	r0, #26
   2d53a:	f7ff fc69 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2d53e:	e006      	b.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d540:	2828      	cmp	r0, #40	; 0x28
   2d542:	d104      	bne.n	2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d544:	4804      	ldr	r0, [pc, #16]	; (2d558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
   2d546:	6801      	ldr	r1, [r0, #0]
   2d548:	b109      	cbz	r1, 2d54e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
   2d54a:	4620      	mov	r0, r4
   2d54c:	4788      	blx	r1
   2d54e:	4628      	mov	r0, r5
   2d550:	bd70      	pop	{r4, r5, r6, pc}
   2d552:	0000      	.short	0x0000
   2d554:	20000114 	.word	0x20000114
   2d558:	20000290 	.word	0x20000290
   2d55c:	4901      	ldr	r1, [pc, #4]	; (2d564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
   2d55e:	68c9      	ldr	r1, [r1, #12]
   2d560:	f7fc bd40 	b.w	29fe4 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
   2d564:	20000114 	.word	0x20000114
   2d568:	4603      	mov	r3, r0
   2d56a:	2000      	movs	r0, #0
   2d56c:	2b17      	cmp	r3, #23
   2d56e:	d017      	beq.n	2d5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
   2d570:	dc0a      	bgt.n	2d588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
   2d572:	2b0e      	cmp	r3, #14
   2d574:	d014      	beq.n	2d5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
   2d576:	2b12      	cmp	r3, #18
   2d578:	d012      	beq.n	2d5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
   2d57a:	2b14      	cmp	r3, #20
   2d57c:	d010      	beq.n	2d5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
   2d57e:	2b16      	cmp	r3, #22
   2d580:	d112      	bne.n	2d5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
   2d582:	4608      	mov	r0, r1
   2d584:	f7ff bc4a 	b.w	2ce1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
   2d588:	2b23      	cmp	r3, #35	; 0x23
   2d58a:	d003      	beq.n	2d594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
   2d58c:	2b24      	cmp	r3, #36	; 0x24
   2d58e:	d001      	beq.n	2d594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
   2d590:	2b25      	cmp	r3, #37	; 0x25
   2d592:	d109      	bne.n	2d5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
   2d594:	4a05      	ldr	r2, [pc, #20]	; (2d5ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
   2d596:	6812      	ldr	r2, [r2, #0]
   2d598:	2a00      	cmp	r2, #0
   2d59a:	d005      	beq.n	2d5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
   2d59c:	4618      	mov	r0, r3
   2d59e:	4710      	bx	r2
   2d5a0:	2100      	movs	r1, #0
   2d5a2:	4618      	mov	r0, r3
   2d5a4:	f000 b976 	b.w	2d894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
   2d5a8:	4770      	bx	lr
   2d5aa:	0000      	.short	0x0000
   2d5ac:	20000288 	.word	0x20000288
   2d5b0:	b510      	push	{r4, lr}
   2d5b2:	6841      	ldr	r1, [r0, #4]
   2d5b4:	4604      	mov	r4, r0
   2d5b6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
   2d5ba:	06c2      	lsls	r2, r0, #27
   2d5bc:	d402      	bmi.n	2d5c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
   2d5be:	f240 71db 	movw	r1, #2011	; 0x7db
   2d5c2:	e003      	b.n	2d5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
   2d5c4:	0682      	lsls	r2, r0, #26
   2d5c6:	d504      	bpl.n	2d5d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
   2d5c8:	f240 71dc 	movw	r1, #2012	; 0x7dc
   2d5cc:	2031      	movs	r0, #49	; 0x31
   2d5ce:	f7fa fa3f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d5d2:	f020 0010 	bic.w	r0, r0, #16
   2d5d6:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
   2d5da:	4804      	ldr	r0, [pc, #16]	; (2d5ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
   2d5dc:	f007 fda5 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d5e0:	6860      	ldr	r0, [r4, #4]
   2d5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d5e6:	2105      	movs	r1, #5
   2d5e8:	f7fd bf1a 	b.w	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2d5ec:	20000124 	.word	0x20000124
   2d5f0:	b510      	push	{r4, lr}
   2d5f2:	6840      	ldr	r0, [r0, #4]
   2d5f4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2d5f8:	292f      	cmp	r1, #47	; 0x2f
   2d5fa:	d006      	beq.n	2d60a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
   2d5fc:	2916      	cmp	r1, #22
   2d5fe:	d00c      	beq.n	2d61a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
   2d600:	f240 71a5 	movw	r1, #1957	; 0x7a5
   2d604:	2031      	movs	r0, #49	; 0x31
   2d606:	f7fa fa23 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d60a:	2100      	movs	r1, #0
   2d60c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   2d610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d614:	4803      	ldr	r0, [pc, #12]	; (2d624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
   2d616:	f007 bd88 	b.w	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d61a:	211a      	movs	r1, #26
   2d61c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   2d620:	bd10      	pop	{r4, pc}
   2d622:	0000      	.short	0x0000
   2d624:	20000124 	.word	0x20000124
   2d628:	b570      	push	{r4, r5, r6, lr}
   2d62a:	4604      	mov	r4, r0
   2d62c:	6840      	ldr	r0, [r0, #4]
   2d62e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   2d632:	291c      	cmp	r1, #28
   2d634:	d004      	beq.n	2d640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
   2d636:	f240 71b6 	movw	r1, #1974	; 0x7b6
   2d63a:	2031      	movs	r0, #49	; 0x31
   2d63c:	f7fa fa08 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d640:	2500      	movs	r5, #0
   2d642:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
   2d646:	6860      	ldr	r0, [r4, #4]
   2d648:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
   2d64c:	b161      	cbz	r1, 2d668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
   2d64e:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
   2d652:	6860      	ldr	r0, [r4, #4]
   2d654:	2202      	movs	r2, #2
   2d656:	8801      	ldrh	r1, [r0, #0]
   2d658:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
   2d65c:	6860      	ldr	r0, [r4, #4]
   2d65e:	490d      	ldr	r1, [pc, #52]	; (2d694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
   2d660:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
   2d664:	6860      	ldr	r0, [r4, #4]
   2d666:	e00c      	b.n	2d682 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
   2d668:	8801      	ldrh	r1, [r0, #0]
   2d66a:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
   2d66e:	6860      	ldr	r0, [r4, #4]
   2d670:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
   2d674:	6861      	ldr	r1, [r4, #4]
   2d676:	2001      	movs	r0, #1
   2d678:	2202      	movs	r2, #2
   2d67a:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
   2d67e:	4906      	ldr	r1, [pc, #24]	; (2d698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
   2d680:	6860      	ldr	r0, [r4, #4]
   2d682:	f200 200a 	addw	r0, r0, #522	; 0x20a
   2d686:	f007 fc0f 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2d68a:	6860      	ldr	r0, [r4, #4]
   2d68c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
   2d690:	bd70      	pop	{r4, r5, r6, pc}
   2d692:	0000      	.short	0x0000
   2d694:	000352f3 	.word	0x000352f3
   2d698:	000352d5 	.word	0x000352d5
   2d69c:	4916      	ldr	r1, [pc, #88]	; (2d6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
   2d69e:	b510      	push	{r4, lr}
   2d6a0:	6889      	ldr	r1, [r1, #8]
   2d6a2:	790a      	ldrb	r2, [r1, #4]
   2d6a4:	6841      	ldr	r1, [r0, #4]
   2d6a6:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
   2d6aa:	2b09      	cmp	r3, #9
   2d6ac:	d10a      	bne.n	2d6c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
   2d6ae:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
   2d6b2:	4293      	cmp	r3, r2
   2d6b4:	d106      	bne.n	2d6c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
   2d6b6:	2200      	movs	r2, #0
   2d6b8:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
   2d6bc:	6840      	ldr	r0, [r0, #4]
   2d6be:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
   2d6c2:	bd10      	pop	{r4, pc}
   2d6c4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
   2d6c8:	071c      	lsls	r4, r3, #28
   2d6ca:	d509      	bpl.n	2d6e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
   2d6cc:	f023 0008 	bic.w	r0, r3, #8
   2d6d0:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
   2d6d4:	4808      	ldr	r0, [pc, #32]	; (2d6f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
   2d6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d6da:	3010      	adds	r0, #16
   2d6dc:	f007 bd25 	b.w	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d6e0:	2aff      	cmp	r2, #255	; 0xff
   2d6e2:	d004      	beq.n	2d6ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
   2d6e4:	f240 7151 	movw	r1, #1873	; 0x751
   2d6e8:	2031      	movs	r0, #49	; 0x31
   2d6ea:	f7fa f9b1 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d6f2:	f008 bd37 	b.w	36164 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
   2d6f6:	0000      	.short	0x0000
   2d6f8:	20000114 	.word	0x20000114
   2d6fc:	4808      	ldr	r0, [pc, #32]	; (2d720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
   2d6fe:	b510      	push	{r4, lr}
   2d700:	6840      	ldr	r0, [r0, #4]
   2d702:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
   2d706:	b941      	cbnz	r1, 2d71a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
   2d708:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
   2d70c:	2301      	movs	r3, #1
   2d70e:	2106      	movs	r1, #6
   2d710:	3080      	adds	r0, #128	; 0x80
   2d712:	f007 f821 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d716:	2800      	cmp	r0, #0
   2d718:	d000      	beq.n	2d71c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
   2d71a:	2001      	movs	r0, #1
   2d71c:	bd10      	pop	{r4, pc}
   2d71e:	0000      	.short	0x0000
   2d720:	20000124 	.word	0x20000124
   2d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d726:	4c59      	ldr	r4, [pc, #356]	; (2d88c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
   2d728:	4606      	mov	r6, r0
   2d72a:	4615      	mov	r5, r2
   2d72c:	6860      	ldr	r0, [r4, #4]
   2d72e:	2200      	movs	r2, #0
   2d730:	b111      	cbz	r1, 2d738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
   2d732:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
   2d736:	e006      	b.n	2d746 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
   2d738:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
   2d73c:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
   2d740:	4411      	add	r1, r2
   2d742:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
   2d746:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   2d74a:	f88d 1000 	strb.w	r1, [sp]
   2d74e:	9900      	ldr	r1, [sp, #0]
   2d750:	9100      	str	r1, [sp, #0]
   2d752:	f89d 1000 	ldrb.w	r1, [sp]
   2d756:	b939      	cbnz	r1, 2d768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
   2d758:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
   2d75c:	2301      	movs	r3, #1
   2d75e:	4619      	mov	r1, r3
   2d760:	3080      	adds	r0, #128	; 0x80
   2d762:	f006 fff9 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d766:	b130      	cbz	r0, 2d776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
   2d768:	6860      	ldr	r0, [r4, #4]
   2d76a:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
   2d76e:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
   2d772:	4411      	add	r1, r2
   2d774:	8001      	strh	r1, [r0, #0]
   2d776:	6860      	ldr	r0, [r4, #4]
   2d778:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
   2d77c:	b132      	cbz	r2, 2d78c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
   2d77e:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
   2d782:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
   2d786:	4419      	add	r1, r3
   2d788:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
   2d78c:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
   2d790:	2b00      	cmp	r3, #0
   2d792:	dd06      	ble.n	2d7a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
   2d794:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
   2d798:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
   2d79c:	4439      	add	r1, r7
   2d79e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
   2d7a2:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
   2d7a6:	bb09      	cbnz	r1, 2d7ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
   2d7a8:	b9be      	cbnz	r6, 2d7da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
   2d7aa:	4938      	ldr	r1, [pc, #224]	; (2d88c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
   2d7ac:	3910      	subs	r1, #16
   2d7ae:	7809      	ldrb	r1, [r1, #0]
   2d7b0:	2902      	cmp	r1, #2
   2d7b2:	d006      	beq.n	2d7c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
   2d7b4:	2901      	cmp	r1, #1
   2d7b6:	d00a      	beq.n	2d7ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
   2d7b8:	b1f5      	cbz	r5, 2d7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
   2d7ba:	06e9      	lsls	r1, r5, #27
   2d7bc:	d50b      	bpl.n	2d7d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
   2d7be:	211e      	movs	r1, #30
   2d7c0:	e042      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7c2:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
   2d7c6:	2906      	cmp	r1, #6
   2d7c8:	d03e      	beq.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7ca:	2116      	movs	r1, #22
   2d7cc:	e03c      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7ce:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
   2d7d2:	b959      	cbnz	r1, 2d7ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
   2d7d4:	e054      	b.n	2d880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
   2d7d6:	0729      	lsls	r1, r5, #28
   2d7d8:	d501      	bpl.n	2d7de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
   2d7da:	213d      	movs	r1, #61	; 0x3d
   2d7dc:	e034      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7de:	06a9      	lsls	r1, r5, #26
   2d7e0:	d501      	bpl.n	2d7e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
   2d7e2:	2123      	movs	r1, #35	; 0x23
   2d7e4:	e030      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7e6:	07a9      	lsls	r1, r5, #30
   2d7e8:	d001      	beq.n	2d7ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
   2d7ea:	212a      	movs	r1, #42	; 0x2a
   2d7ec:	e02c      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d7ee:	f640 51a3 	movw	r1, #3491	; 0xda3
   2d7f2:	2031      	movs	r0, #49	; 0x31
   2d7f4:	f7fa f92c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d7f8:	b12a      	cbz	r2, 2d806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
   2d7fa:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
   2d7fe:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
   2d802:	4291      	cmp	r1, r2
   2d804:	d216      	bcs.n	2d834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
   2d806:	2b00      	cmp	r3, #0
   2d808:	dd05      	ble.n	2d816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
   2d80a:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
   2d80e:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
   2d812:	4291      	cmp	r1, r2
   2d814:	d20e      	bcs.n	2d834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
   2d816:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
   2d81a:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
   2d81e:	428a      	cmp	r2, r1
   2d820:	d30a      	bcc.n	2d838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
   2d822:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
   2d826:	f88d 2000 	strb.w	r2, [sp]
   2d82a:	9a00      	ldr	r2, [sp, #0]
   2d82c:	9200      	str	r2, [sp, #0]
   2d82e:	f89d 2000 	ldrb.w	r2, [sp]
   2d832:	b10a      	cbz	r2, 2d838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
   2d834:	2122      	movs	r1, #34	; 0x22
   2d836:	e007      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d838:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   2d83c:	b172      	cbz	r2, 2d85c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
   2d83e:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
   2d842:	428a      	cmp	r2, r1
   2d844:	d31c      	bcc.n	2d880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
   2d846:	2108      	movs	r1, #8
   2d848:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
   2d84c:	f88d 2000 	strb.w	r2, [sp]
   2d850:	9a00      	ldr	r2, [sp, #0]
   2d852:	9200      	str	r2, [sp, #0]
   2d854:	f89d 2000 	ldrb.w	r2, [sp]
   2d858:	b96a      	cbnz	r2, 2d876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
   2d85a:	e005      	b.n	2d868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
   2d85c:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
   2d860:	2906      	cmp	r1, #6
   2d862:	d30d      	bcc.n	2d880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
   2d864:	213e      	movs	r1, #62	; 0x3e
   2d866:	e7ef      	b.n	2d848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
   2d868:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
   2d86c:	2202      	movs	r2, #2
   2d86e:	4908      	ldr	r1, [pc, #32]	; (2d890 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
   2d870:	30b4      	adds	r0, #180	; 0xb4
   2d872:	f007 fb19 	bl	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
   2d876:	6860      	ldr	r0, [r4, #4]
   2d878:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d87c:	f008 bbeb 	b.w	36056 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
   2d880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d884:	2100      	movs	r1, #0
   2d886:	f7fd bdcb 	b.w	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   2d88a:	0000      	.short	0x0000
   2d88c:	20000124 	.word	0x20000124
   2d890:	00035165 	.word	0x00035165
   2d894:	b570      	push	{r4, r5, r6, lr}
   2d896:	4614      	mov	r4, r2
   2d898:	460e      	mov	r6, r1
   2d89a:	6861      	ldr	r1, [r4, #4]
   2d89c:	4602      	mov	r2, r0
   2d89e:	2500      	movs	r5, #0
   2d8a0:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
   2d8a4:	2a0e      	cmp	r2, #14
   2d8a6:	d00a      	beq.n	2d8be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
   2d8a8:	2a12      	cmp	r2, #18
   2d8aa:	d011      	beq.n	2d8d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
   2d8ac:	2a14      	cmp	r2, #20
   2d8ae:	d016      	beq.n	2d8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
   2d8b0:	2a17      	cmp	r2, #23
   2d8b2:	d023      	beq.n	2d8fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
   2d8b4:	f240 31dd 	movw	r1, #989	; 0x3dd
   2d8b8:	2031      	movs	r0, #49	; 0x31
   2d8ba:	f7fa f8c9 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d8be:	2804      	cmp	r0, #4
   2d8c0:	d131      	bne.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8c2:	4620      	mov	r0, r4
   2d8c4:	f007 fc45 	bl	35152 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
   2d8c8:	4620      	mov	r0, r4
   2d8ca:	f7fc fb6d 	bl	29fa8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
   2d8ce:	e02a      	b.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8d0:	280f      	cmp	r0, #15
   2d8d2:	d128      	bne.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8d4:	4620      	mov	r0, r4
   2d8d6:	f007 fd99 	bl	3540c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
   2d8da:	4605      	mov	r5, r0
   2d8dc:	e023      	b.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8de:	281d      	cmp	r0, #29
   2d8e0:	d121      	bne.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8e2:	4620      	mov	r0, r4
   2d8e4:	f007 fc35 	bl	35152 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
   2d8e8:	b126      	cbz	r6, 2d8f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
   2d8ea:	6860      	ldr	r0, [r4, #4]
   2d8ec:	2105      	movs	r1, #5
   2d8ee:	30ec      	adds	r0, #236	; 0xec
   2d8f0:	f008 fb8d 	bl	3600e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
   2d8f4:	480d      	ldr	r0, [pc, #52]	; (2d92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
   2d8f6:	f007 fcdd 	bl	352b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
   2d8fa:	e014      	b.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d8fc:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
   2d900:	2823      	cmp	r0, #35	; 0x23
   2d902:	d110      	bne.n	2d926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
   2d904:	2600      	movs	r6, #0
   2d906:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
   2d90a:	4808      	ldr	r0, [pc, #32]	; (2d92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
   2d90c:	f007 fc0d 	bl	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
   2d910:	6860      	ldr	r0, [r4, #4]
   2d912:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
   2d916:	2801      	cmp	r0, #1
   2d918:	d102      	bne.n	2d920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
   2d91a:	2000      	movs	r0, #0
   2d91c:	f7ff fa78 	bl	2ce10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
   2d920:	6860      	ldr	r0, [r4, #4]
   2d922:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
   2d926:	4628      	mov	r0, r5
   2d928:	bd70      	pop	{r4, r5, r6, pc}
   2d92a:	0000      	.short	0x0000
   2d92c:	20000124 	.word	0x20000124
   2d930:	b570      	push	{r4, r5, r6, lr}
   2d932:	4d2e      	ldr	r5, [pc, #184]	; (2d9ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
   2d934:	6868      	ldr	r0, [r5, #4]
   2d936:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
   2d93a:	b151      	cbz	r1, 2d952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
   2d93c:	2901      	cmp	r1, #1
   2d93e:	d008      	beq.n	2d952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
   2d940:	2902      	cmp	r1, #2
   2d942:	d009      	beq.n	2d958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
   2d944:	2903      	cmp	r1, #3
   2d946:	d007      	beq.n	2d958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
   2d948:	f640 4118 	movw	r1, #3096	; 0xc18
   2d94c:	2031      	movs	r0, #49	; 0x31
   2d94e:	f7fa f87f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2d952:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
   2d956:	e037      	b.n	2d9c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
   2d958:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
   2d95c:	2907      	cmp	r1, #7
   2d95e:	d036      	beq.n	2d9ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
   2d960:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
   2d964:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
   2d968:	2400      	movs	r4, #0
   2d96a:	1c93      	adds	r3, r2, #2
   2d96c:	4299      	cmp	r1, r3
   2d96e:	d306      	bcc.n	2d97e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
   2d970:	1a89      	subs	r1, r1, r2
   2d972:	1e89      	subs	r1, r1, #2
   2d974:	040c      	lsls	r4, r1, #16
   2d976:	0c24      	lsrs	r4, r4, #16
   2d978:	d001      	beq.n	2d97e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
   2d97a:	1e64      	subs	r4, r4, #1
   2d97c:	b2a4      	uxth	r4, r4
   2d97e:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
   2d982:	b139      	cbz	r1, 2d994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
   2d984:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
   2d988:	2301      	movs	r3, #1
   2d98a:	2109      	movs	r1, #9
   2d98c:	3080      	adds	r0, #128	; 0x80
   2d98e:	f006 fee3 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   2d992:	b340      	cbz	r0, 2d9e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
   2d994:	f7ff feb2 	bl	2d6fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
   2d998:	b178      	cbz	r0, 2d9ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
   2d99a:	686a      	ldr	r2, [r5, #4]
   2d99c:	2000      	movs	r0, #0
   2d99e:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
   2d9a2:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
   2d9a6:	1c93      	adds	r3, r2, #2
   2d9a8:	4299      	cmp	r1, r3
   2d9aa:	d303      	bcc.n	2d9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
   2d9ac:	1a88      	subs	r0, r1, r2
   2d9ae:	1e80      	subs	r0, r0, #2
   2d9b0:	d000      	beq.n	2d9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
   2d9b2:	1e40      	subs	r0, r0, #1
   2d9b4:	42a0      	cmp	r0, r4
   2d9b6:	d200      	bcs.n	2d9ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
   2d9b8:	b284      	uxth	r4, r0
   2d9ba:	b10c      	cbz	r4, 2d9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
   2d9bc:	1e64      	subs	r4, r4, #1
   2d9be:	b2a4      	uxth	r4, r4
   2d9c0:	6868      	ldr	r0, [r5, #4]
   2d9c2:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
   2d9c6:	4421      	add	r1, r4
   2d9c8:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
   2d9cc:	bd70      	pop	{r4, r5, r6, pc}
   2d9ce:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
   2d9d2:	2903      	cmp	r1, #3
   2d9d4:	d3bd      	bcc.n	2d952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
   2d9d6:	f830 1f94 	ldrh.w	r1, [r0, #148]!
   2d9da:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
   2d9dc:	4411      	add	r1, r2
   2d9de:	1c49      	adds	r1, r1, #1
   2d9e0:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
   2d9e4:	bd70      	pop	{r4, r5, r6, pc}
   2d9e6:	2400      	movs	r4, #0
   2d9e8:	e7ea      	b.n	2d9c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
   2d9ea:	0000      	.short	0x0000
   2d9ec:	20000124 	.word	0x20000124

0002d9f0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
   2d9f0:	b570      	push	{r4, r5, r6, lr}
   2d9f2:	6844      	ldr	r4, [r0, #4]
   2d9f4:	220d      	movs	r2, #13
   2d9f6:	f504 7598 	add.w	r5, r4, #304	; 0x130
   2d9fa:	2100      	movs	r1, #0
   2d9fc:	f104 006f 	add.w	r0, r4, #111	; 0x6f
   2da00:	f009 fe57 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2da04:	f44f 70a3 	mov.w	r0, #326	; 0x146
   2da08:	2100      	movs	r1, #0
   2da0a:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
   2da0e:	5501      	strb	r1, [r0, r4]
   2da10:	f8a5 1017 	strh.w	r1, [r5, #23]
   2da14:	7669      	strb	r1, [r5, #25]
   2da16:	4608      	mov	r0, r1
   2da18:	f05f 017f 	movs.w	r1, #127	; 0x7f
   2da1c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
   2da20:	1c40      	adds	r0, r0, #1
   2da22:	b2c0      	uxtb	r0, r0
   2da24:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
   2da28:	2802      	cmp	r0, #2
   2da2a:	d3f7      	bcc.n	2da1c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
   2da2c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
   2da30:	4620      	mov	r0, r4
   2da32:	f008 fc57 	bl	362e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
   2da36:	2000      	movs	r0, #0
   2da38:	21ff      	movs	r1, #255	; 0xff
   2da3a:	1822      	adds	r2, r4, r0
   2da3c:	1c40      	adds	r0, r0, #1
   2da3e:	b2c0      	uxtb	r0, r0
   2da40:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
   2da44:	2802      	cmp	r0, #2
   2da46:	d3f8      	bcc.n	2da3a <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
   2da48:	bd70      	pop	{r4, r5, r6, pc}
	...

0002da4c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
   2da4c:	4903      	ldr	r1, [pc, #12]	; (2da5c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
   2da4e:	884a      	ldrh	r2, [r1, #2]
   2da50:	8002      	strh	r2, [r0, #0]
   2da52:	7809      	ldrb	r1, [r1, #0]
   2da54:	7081      	strb	r1, [r0, #2]
   2da56:	2000      	movs	r0, #0
   2da58:	4770      	bx	lr
   2da5a:	0000      	.short	0x0000
   2da5c:	20001200 	.word	0x20001200

0002da60 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
   2da60:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   2da62:	460c      	mov	r4, r1
   2da64:	4605      	mov	r5, r0
   2da66:	8800      	ldrh	r0, [r0, #0]
   2da68:	4669      	mov	r1, sp
   2da6a:	f006 fe5e 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2da6e:	2200      	movs	r2, #0
   2da70:	b128      	cbz	r0, 2da7e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
   2da72:	f8c4 2002 	str.w	r2, [r4, #2]
   2da76:	71a2      	strb	r2, [r4, #6]
   2da78:	8022      	strh	r2, [r4, #0]
   2da7a:	2002      	movs	r0, #2
   2da7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2da7e:	9901      	ldr	r1, [sp, #4]
   2da80:	f111 0180 	adds.w	r1, r1, #128	; 0x80
   2da84:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
   2da88:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
   2da8c:	f8c4 0002 	str.w	r0, [r4, #2]
   2da90:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
   2da94:	71a0      	strb	r0, [r4, #6]
   2da96:	8828      	ldrh	r0, [r5, #0]
   2da98:	8020      	strh	r0, [r4, #0]
   2da9a:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
   2da9e:	f88d 0008 	strb.w	r0, [sp, #8]
   2daa2:	9802      	ldr	r0, [sp, #8]
   2daa4:	9002      	str	r0, [sp, #8]
   2daa6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2daaa:	2800      	cmp	r0, #0
   2daac:	d1ea      	bne.n	2da84 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
   2daae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0002dab0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
   2dab0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
   2dab2:	460d      	mov	r5, r1
   2dab4:	4606      	mov	r6, r0
   2dab6:	8800      	ldrh	r0, [r0, #0]
   2dab8:	4669      	mov	r1, sp
   2daba:	f006 fe36 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2dabe:	2800      	cmp	r0, #0
   2dac0:	d11a      	bne.n	2daf8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
   2dac2:	f8dd 4004 	ldr.w	r4, [sp, #4]
   2dac6:	2700      	movs	r7, #0
   2dac8:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
   2dacc:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
   2dad0:	f009 f904 	bl	36cdc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
   2dad4:	70a8      	strb	r0, [r5, #2]
   2dad6:	7860      	ldrb	r0, [r4, #1]
   2dad8:	f009 f900 	bl	36cdc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
   2dadc:	70e8      	strb	r0, [r5, #3]
   2dade:	78a0      	ldrb	r0, [r4, #2]
   2dae0:	f88d 0008 	strb.w	r0, [sp, #8]
   2dae4:	9802      	ldr	r0, [sp, #8]
   2dae6:	9002      	str	r0, [sp, #8]
   2dae8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2daec:	3c6a      	subs	r4, #106	; 0x6a
   2daee:	2800      	cmp	r0, #0
   2daf0:	d1ea      	bne.n	2dac8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
   2daf2:	8830      	ldrh	r0, [r6, #0]
   2daf4:	8028      	strh	r0, [r5, #0]
   2daf6:	2000      	movs	r0, #0
   2daf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0002dafc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
   2dafc:	4903      	ldr	r1, [pc, #12]	; (2db0c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
   2dafe:	888a      	ldrh	r2, [r1, #4]
   2db00:	8002      	strh	r2, [r0, #0]
   2db02:	88c9      	ldrh	r1, [r1, #6]
   2db04:	8041      	strh	r1, [r0, #2]
   2db06:	2000      	movs	r0, #0
   2db08:	4770      	bx	lr
   2db0a:	0000      	.short	0x0000
   2db0c:	2000029c 	.word	0x2000029c

0002db10 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
   2db10:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   2db12:	2400      	movs	r4, #0
   2db14:	a902      	add	r1, sp, #8
   2db16:	f88d 4004 	strb.w	r4, [sp, #4]
   2db1a:	f88d 4008 	strb.w	r4, [sp, #8]
   2db1e:	9100      	str	r1, [sp, #0]
   2db20:	7882      	ldrb	r2, [r0, #2]
   2db22:	7841      	ldrb	r1, [r0, #1]
   2db24:	7800      	ldrb	r0, [r0, #0]
   2db26:	ab01      	add	r3, sp, #4
   2db28:	f009 fa4c 	bl	36fc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   2db2c:	2800      	cmp	r0, #0
   2db2e:	d112      	bne.n	2db56 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
   2db30:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2db34:	f009 f986 	bl	36e44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   2db38:	b170      	cbz	r0, 2db58 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   2db3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2db3e:	f009 f981 	bl	36e44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   2db42:	b148      	cbz	r0, 2db58 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
   2db44:	4805      	ldr	r0, [pc, #20]	; (2db5c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
   2db46:	f89d 1004 	ldrb.w	r1, [sp, #4]
   2db4a:	7381      	strb	r1, [r0, #14]
   2db4c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2db50:	73c1      	strb	r1, [r0, #15]
   2db52:	8204      	strh	r4, [r0, #16]
   2db54:	2000      	movs	r0, #0
   2db56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2db58:	2011      	movs	r0, #17
   2db5a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   2db5c:	20001200 	.word	0x20001200

0002db60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   2db60:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   2db64:	460f      	mov	r7, r1
   2db66:	4605      	mov	r5, r0
   2db68:	7806      	ldrb	r6, [r0, #0]
   2db6a:	f009 f91e 	bl	36daa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
   2db6e:	2800      	cmp	r0, #0
   2db70:	d10e      	bne.n	2db90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
   2db72:	4628      	mov	r0, r5
   2db74:	f009 f8f3 	bl	36d5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
   2db78:	2800      	cmp	r0, #0
   2db7a:	d109      	bne.n	2db90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
   2db7c:	2101      	movs	r1, #1
   2db7e:	4630      	mov	r0, r6
   2db80:	f7fa fa94 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2db84:	0004      	movs	r4, r0
   2db86:	d005      	beq.n	2db94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
   2db88:	f007 ff66 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2db8c:	b170      	cbz	r0, 2dbac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
   2db8e:	200c      	movs	r0, #12
   2db90:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   2db94:	2101      	movs	r1, #1
   2db96:	4630      	mov	r0, r6
   2db98:	f7fa fa50 	bl	2803c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   2db9c:	0004      	movs	r4, r0
   2db9e:	d013      	beq.n	2dbc8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
   2dba0:	4817      	ldr	r0, [pc, #92]	; (2dc00 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
   2dba2:	f990 1000 	ldrsb.w	r1, [r0]
   2dba6:	4620      	mov	r0, r4
   2dba8:	f007 fd2b 	bl	35602 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   2dbac:	4620      	mov	r0, r4
   2dbae:	f007 fd93 	bl	356d8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   2dbb2:	7038      	strb	r0, [r7, #0]
   2dbb4:	74e8      	strb	r0, [r5, #19]
   2dbb6:	4629      	mov	r1, r5
   2dbb8:	4620      	mov	r0, r4
   2dbba:	f7fc fc57 	bl	2a46c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   2dbbe:	4606      	mov	r6, r0
   2dbc0:	7e68      	ldrb	r0, [r5, #25]
   2dbc2:	b1d0      	cbz	r0, 2dbfa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
   2dbc4:	b12e      	cbz	r6, 2dbd2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
   2dbc6:	e018      	b.n	2dbfa <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
   2dbc8:	f241 512e 	movw	r1, #5422	; 0x152e
   2dbcc:	2039      	movs	r0, #57	; 0x39
   2dbce:	f7f9 ff3f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2dbd2:	2200      	movs	r2, #0
   2dbd4:	4668      	mov	r0, sp
   2dbd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2dbd8:	f006 fbea 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   2dbdc:	2200      	movs	r2, #0
   2dbde:	2101      	movs	r1, #1
   2dbe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2dbe2:	f006 fc5f 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   2dbe6:	2204      	movs	r2, #4
   2dbe8:	4668      	mov	r0, sp
   2dbea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2dbec:	f006 fbe0 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   2dbf0:	2200      	movs	r2, #0
   2dbf2:	4611      	mov	r1, r2
   2dbf4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2dbf6:	f006 fc55 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   2dbfa:	4630      	mov	r0, r6
   2dbfc:	e7c8      	b.n	2db90 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
   2dbfe:	0000      	.short	0x0000
   2dc00:	20000294 	.word	0x20000294

0002dc04 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
   2dc04:	7801      	ldrb	r1, [r0, #0]
   2dc06:	b171      	cbz	r1, 2dc26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   2dc08:	7841      	ldrb	r1, [r0, #1]
   2dc0a:	b161      	cbz	r1, 2dc26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   2dc0c:	8841      	ldrh	r1, [r0, #2]
   2dc0e:	291b      	cmp	r1, #27
   2dc10:	d309      	bcc.n	2dc26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   2dc12:	8881      	ldrh	r1, [r0, #4]
   2dc14:	291b      	cmp	r1, #27
   2dc16:	d306      	bcc.n	2dc26 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
   2dc18:	4904      	ldr	r1, [pc, #16]	; (2dc2c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
   2dc1a:	6802      	ldr	r2, [r0, #0]
   2dc1c:	600a      	str	r2, [r1, #0]
   2dc1e:	8880      	ldrh	r0, [r0, #4]
   2dc20:	8088      	strh	r0, [r1, #4]
   2dc22:	2000      	movs	r0, #0
   2dc24:	4770      	bx	lr
   2dc26:	2012      	movs	r0, #18
   2dc28:	4770      	bx	lr
   2dc2a:	0000      	.short	0x0000
   2dc2c:	20001200 	.word	0x20001200

0002dc30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
   2dc30:	6800      	ldr	r0, [r0, #0]
   2dc32:	f240 41e2 	movw	r1, #1250	; 0x4e2
   2dc36:	4288      	cmp	r0, r1
   2dc38:	d303      	bcc.n	2dc42 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
   2dc3a:	4903      	ldr	r1, [pc, #12]	; (2dc48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
   2dc3c:	6088      	str	r0, [r1, #8]
   2dc3e:	2000      	movs	r0, #0
   2dc40:	4770      	bx	lr
   2dc42:	2012      	movs	r0, #18
   2dc44:	4770      	bx	lr
   2dc46:	0000      	.short	0x0000
   2dc48:	20001200 	.word	0x20001200

0002dc4c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
   2dc4c:	4a03      	ldr	r2, [pc, #12]	; (2dc5c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
   2dc4e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   2dc52:	6001      	str	r1, [r0, #0]
   2dc54:	6042      	str	r2, [r0, #4]
   2dc56:	2000      	movs	r0, #0
   2dc58:	4770      	bx	lr
   2dc5a:	0000      	.short	0x0000
   2dc5c:	0002e1a8 	.word	0x0002e1a8

0002dc60 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   2dc60:	b50e      	push	{r1, r2, r3, lr}
   2dc62:	8800      	ldrh	r0, [r0, #0]
   2dc64:	4669      	mov	r1, sp
   2dc66:	f006 fd60 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2dc6a:	b960      	cbnz	r0, 2dc86 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   2dc6c:	9801      	ldr	r0, [sp, #4]
   2dc6e:	f009 f965 	bl	36f3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   2dc72:	b140      	cbz	r0, 2dc86 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   2dc74:	9801      	ldr	r0, [sp, #4]
   2dc76:	4601      	mov	r1, r0
   2dc78:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
   2dc7c:	3080      	adds	r0, #128	; 0x80
   2dc7e:	f501 71a1 	add.w	r1, r1, #322	; 0x142
   2dc82:	b962      	cbnz	r2, 2dc9e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   2dc84:	e001      	b.n	2dc8a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   2dc86:	2002      	movs	r0, #2
   2dc88:	bd0e      	pop	{r1, r2, r3, pc}
   2dc8a:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   2dc8e:	f88d 2008 	strb.w	r2, [sp, #8]
   2dc92:	9a02      	ldr	r2, [sp, #8]
   2dc94:	9202      	str	r2, [sp, #8]
   2dc96:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2dc9a:	2201      	movs	r2, #1
   2dc9c:	b10b      	cbz	r3, 2dca2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   2dc9e:	203a      	movs	r0, #58	; 0x3a
   2dca0:	bd0e      	pop	{r1, r2, r3, pc}
   2dca2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   2dca6:	079b      	lsls	r3, r3, #30
   2dca8:	d006      	beq.n	2dcb8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
   2dcaa:	2202      	movs	r2, #2
   2dcac:	4905      	ldr	r1, [pc, #20]	; (2dcc4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
   2dcae:	305e      	adds	r0, #94	; 0x5e
   2dcb0:	f007 f90e 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   2dcb4:	2000      	movs	r0, #0
   2dcb6:	bd0e      	pop	{r1, r2, r3, pc}
   2dcb8:	700a      	strb	r2, [r1, #0]
   2dcba:	4668      	mov	r0, sp
   2dcbc:	f007 f8c8 	bl	34e50 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   2dcc0:	e7f8      	b.n	2dcb4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
   2dcc2:	0000      	.short	0x0000
   2dcc4:	00035445 	.word	0x00035445

0002dcc8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
   2dcc8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   2dccc:	4613      	mov	r3, r2
   2dcce:	4a33      	ldr	r2, [pc, #204]	; (2dd9c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
   2dcd0:	460f      	mov	r7, r1
   2dcd2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
   2dcd6:	8814      	ldrh	r4, [r2, #0]
   2dcd8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
   2dcdc:	428c      	cmp	r4, r1
   2dcde:	d200      	bcs.n	2dce2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
   2dce0:	4621      	mov	r1, r4
   2dce2:	4688      	mov	r8, r1
   2dce4:	8891      	ldrh	r1, [r2, #4]
   2dce6:	42b1      	cmp	r1, r6
   2dce8:	d200      	bcs.n	2dcec <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
   2dcea:	460e      	mov	r6, r1
   2dcec:	8851      	ldrh	r1, [r2, #2]
   2dcee:	f640 0448 	movw	r4, #2120	; 0x848
   2dcf2:	42a1      	cmp	r1, r4
   2dcf4:	d300      	bcc.n	2dcf8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
   2dcf6:	4621      	mov	r1, r4
   2dcf8:	88d5      	ldrh	r5, [r2, #6]
   2dcfa:	42a5      	cmp	r5, r4
   2dcfc:	d300      	bcc.n	2dd00 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
   2dcfe:	4625      	mov	r5, r4
   2dd00:	42a1      	cmp	r1, r4
   2dd02:	d200      	bcs.n	2dd06 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
   2dd04:	460c      	mov	r4, r1
   2dd06:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2dd0a:	2e1b      	cmp	r6, #27
   2dd0c:	d001      	beq.n	2dd12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
   2dd0e:	4295      	cmp	r5, r2
   2dd10:	d104      	bne.n	2dd1c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
   2dd12:	f1b8 0f1b 	cmp.w	r8, #27
   2dd16:	d03e      	beq.n	2dd96 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
   2dd18:	4294      	cmp	r4, r2
   2dd1a:	d03c      	beq.n	2dd96 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
   2dd1c:	466a      	mov	r2, sp
   2dd1e:	4619      	mov	r1, r3
   2dd20:	f009 f8b3 	bl	36e8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   2dd24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2dd28:	4641      	mov	r1, r8
   2dd2a:	4540      	cmp	r0, r8
   2dd2c:	d900      	bls.n	2dd30 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
   2dd2e:	4608      	mov	r0, r1
   2dd30:	80f8      	strh	r0, [r7, #6]
   2dd32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2dd36:	42a1      	cmp	r1, r4
   2dd38:	d800      	bhi.n	2dd3c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
   2dd3a:	460c      	mov	r4, r1
   2dd3c:	813c      	strh	r4, [r7, #8]
   2dd3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2dd42:	42b1      	cmp	r1, r6
   2dd44:	d800      	bhi.n	2dd48 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
   2dd46:	460e      	mov	r6, r1
   2dd48:	807e      	strh	r6, [r7, #2]
   2dd4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2dd4e:	42a9      	cmp	r1, r5
   2dd50:	d800      	bhi.n	2dd54 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
   2dd52:	460d      	mov	r5, r1
   2dd54:	80bd      	strh	r5, [r7, #4]
   2dd56:	21ff      	movs	r1, #255	; 0xff
   2dd58:	7039      	strb	r1, [r7, #0]
   2dd5a:	381b      	subs	r0, #27
   2dd5c:	28e0      	cmp	r0, #224	; 0xe0
   2dd5e:	d902      	bls.n	2dd66 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
   2dd60:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
   2dd64:	e014      	b.n	2dd90 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
   2dd66:	3e1b      	subs	r6, #27
   2dd68:	2ee0      	cmp	r6, #224	; 0xe0
   2dd6a:	d902      	bls.n	2dd72 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
   2dd6c:	f240 51b2 	movw	r1, #1458	; 0x5b2
   2dd70:	e00e      	b.n	2dd90 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
   2dd72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
   2dd76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
   2dd7a:	4284      	cmp	r4, r0
   2dd7c:	d902      	bls.n	2dd84 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
   2dd7e:	f240 51b4 	movw	r1, #1460	; 0x5b4
   2dd82:	e005      	b.n	2dd90 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
   2dd84:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
   2dd88:	4285      	cmp	r5, r0
   2dd8a:	d904      	bls.n	2dd96 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
   2dd8c:	f240 51b6 	movw	r1, #1462	; 0x5b6
   2dd90:	2039      	movs	r0, #57	; 0x39
   2dd92:	f7f9 fe5d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2dd96:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   2dd9a:	0000      	.short	0x0000
   2dd9c:	2000029c 	.word	0x2000029c

0002dda0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
   2dda0:	b570      	push	{r4, r5, r6, lr}
   2dda2:	b086      	sub	sp, #24
   2dda4:	4604      	mov	r4, r0
   2dda6:	f000 fa9d 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   2ddaa:	0940      	lsrs	r0, r0, #5
   2ddac:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   2ddb0:	4e2d      	ldr	r6, [pc, #180]	; (2de68 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
   2ddb2:	07c0      	lsls	r0, r0, #31
   2ddb4:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   2ddb8:	d002      	beq.n	2ddc0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
   2ddba:	8871      	ldrh	r1, [r6, #2]
   2ddbc:	88b0      	ldrh	r0, [r6, #4]
   2ddbe:	e001      	b.n	2ddc4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
   2ddc0:	211b      	movs	r1, #27
   2ddc2:	4608      	mov	r0, r1
   2ddc4:	84e9      	strh	r1, [r5, #38]	; 0x26
   2ddc6:	8528      	strh	r0, [r5, #40]	; 0x28
   2ddc8:	f000 fa8c 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   2ddcc:	0788      	lsls	r0, r1, #30
   2ddce:	f04f 0501 	mov.w	r5, #1
   2ddd2:	d505      	bpl.n	2dde0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
   2ddd4:	f88d 5000 	strb.w	r5, [sp]
   2ddd8:	4668      	mov	r0, sp
   2ddda:	9401      	str	r4, [sp, #4]
   2dddc:	f7ff fe08 	bl	2d9f0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
   2dde0:	68b0      	ldr	r0, [r6, #8]
   2dde2:	62e0      	str	r0, [r4, #44]	; 0x2c
   2dde4:	f641 514c 	movw	r1, #7500	; 0x1d4c
   2dde8:	6121      	str	r1, [r4, #16]
   2ddea:	8821      	ldrh	r1, [r4, #0]
   2ddec:	f8ad 1004 	strh.w	r1, [sp, #4]
   2ddf0:	7bb1      	ldrb	r1, [r6, #14]
   2ddf2:	f88d 1006 	strb.w	r1, [sp, #6]
   2ddf6:	7bf1      	ldrb	r1, [r6, #15]
   2ddf8:	f88d 1007 	strb.w	r1, [sp, #7]
   2ddfc:	8a31      	ldrh	r1, [r6, #16]
   2ddfe:	f8ad 1008 	strh.w	r1, [sp, #8]
   2de02:	a904      	add	r1, sp, #16
   2de04:	9100      	str	r1, [sp, #0]
   2de06:	4628      	mov	r0, r5
   2de08:	ab03      	add	r3, sp, #12
   2de0a:	aa01      	add	r2, sp, #4
   2de0c:	4621      	mov	r1, r4
   2de0e:	f009 f872 	bl	36ef6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   2de12:	b138      	cbz	r0, 2de24 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
   2de14:	8820      	ldrh	r0, [r4, #0]
   2de16:	2100      	movs	r1, #0
   2de18:	f7fa f9ea 	bl	281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   2de1c:	b308      	cbz	r0, 2de62 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
   2de1e:	f240 517d 	movw	r1, #1405	; 0x57d
   2de22:	e01b      	b.n	2de5c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
   2de24:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2de28:	f88d 0014 	strb.w	r0, [sp, #20]
   2de2c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2de30:	f88d 0015 	strb.w	r0, [sp, #21]
   2de34:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   2de38:	f8ad 0016 	strh.w	r0, [sp, #22]
   2de3c:	a905      	add	r1, sp, #20
   2de3e:	4620      	mov	r0, r4
   2de40:	f006 fd30 	bl	348a4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   2de44:	7870      	ldrb	r0, [r6, #1]
   2de46:	9000      	str	r0, [sp, #0]
   2de48:	7833      	ldrb	r3, [r6, #0]
   2de4a:	88b2      	ldrh	r2, [r6, #4]
   2de4c:	8871      	ldrh	r1, [r6, #2]
   2de4e:	8820      	ldrh	r0, [r4, #0]
   2de50:	f7fa fa00 	bl	28254 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
   2de54:	2800      	cmp	r0, #0
   2de56:	d005      	beq.n	2de64 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
   2de58:	f44f 61b1 	mov.w	r1, #1416	; 0x588
   2de5c:	2039      	movs	r0, #57	; 0x39
   2de5e:	f7f9 fdf7 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2de62:	2009      	movs	r0, #9
   2de64:	b006      	add	sp, #24
   2de66:	bd70      	pop	{r4, r5, r6, pc}
   2de68:	20001200 	.word	0x20001200

0002de6c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
   2de6c:	b510      	push	{r4, lr}
   2de6e:	2005      	movs	r0, #5
   2de70:	f000 fa2c 	bl	2e2cc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   2de74:	f7fd ff84 	bl	2bd80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
   2de78:	4902      	ldr	r1, [pc, #8]	; (2de84 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
   2de7a:	4801      	ldr	r0, [pc, #4]	; (2de80 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
   2de7c:	6048      	str	r0, [r1, #4]
   2de7e:	bd10      	pop	{r4, pc}
   2de80:	0002dcc9 	.word	0x0002dcc9
   2de84:	20000294 	.word	0x20000294
   2de88:	b51c      	push	{r2, r3, r4, lr}
   2de8a:	4909      	ldr	r1, [pc, #36]	; (2deb0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
   2de8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   2de90:	e9cd 0100 	strd	r0, r1, [sp]
   2de94:	e005      	b.n	2dea2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   2de96:	9800      	ldr	r0, [sp, #0]
   2de98:	f007 fdde 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2de9c:	b108      	cbz	r0, 2dea2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
   2de9e:	2001      	movs	r0, #1
   2dea0:	bd1c      	pop	{r2, r3, r4, pc}
   2dea2:	4668      	mov	r0, sp
   2dea4:	f7fa f954 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   2dea8:	2800      	cmp	r0, #0
   2deaa:	d0f4      	beq.n	2de96 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
   2deac:	2000      	movs	r0, #0
   2deae:	bd1c      	pop	{r2, r3, r4, pc}
   2deb0:	0002e1a8 	.word	0x0002e1a8
   2deb4:	b510      	push	{r4, lr}
   2deb6:	480d      	ldr	r0, [pc, #52]	; (2deec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
   2deb8:	2100      	movs	r1, #0
   2deba:	4b0d      	ldr	r3, [pc, #52]	; (2def0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
   2debc:	74c1      	strb	r1, [r0, #19]
   2debe:	8281      	strh	r1, [r0, #20]
   2dec0:	221b      	movs	r2, #27
   2dec2:	801a      	strh	r2, [r3, #0]
   2dec4:	f44f 74a4 	mov.w	r4, #328	; 0x148
   2dec8:	805c      	strh	r4, [r3, #2]
   2deca:	809a      	strh	r2, [r3, #4]
   2decc:	80dc      	strh	r4, [r3, #6]
   2dece:	7381      	strb	r1, [r0, #14]
   2ded0:	73c1      	strb	r1, [r0, #15]
   2ded2:	2303      	movs	r3, #3
   2ded4:	7003      	strb	r3, [r0, #0]
   2ded6:	2302      	movs	r3, #2
   2ded8:	7043      	strb	r3, [r0, #1]
   2deda:	8042      	strh	r2, [r0, #2]
   2dedc:	8082      	strh	r2, [r0, #4]
   2dede:	f640 62a6 	movw	r2, #3750	; 0xea6
   2dee2:	6082      	str	r2, [r0, #8]
   2dee4:	7481      	strb	r1, [r0, #18]
   2dee6:	7301      	strb	r1, [r0, #12]
   2dee8:	bd10      	pop	{r4, pc}
   2deea:	0000      	.short	0x0000
   2deec:	20001200 	.word	0x20001200
   2def0:	2000029c 	.word	0x2000029c
   2def4:	b510      	push	{r4, lr}
   2def6:	2101      	movs	r1, #1
   2def8:	2000      	movs	r0, #0
   2defa:	f7fa f8d7 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   2defe:	0004      	movs	r4, r0
   2df00:	d10a      	bne.n	2df18 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
   2df02:	2101      	movs	r1, #1
   2df04:	f7fa f89a 	bl	2803c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   2df08:	0004      	movs	r4, r0
   2df0a:	d007      	beq.n	2df1c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
   2df0c:	4806      	ldr	r0, [pc, #24]	; (2df28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
   2df0e:	f990 1000 	ldrsb.w	r1, [r0]
   2df12:	4620      	mov	r0, r4
   2df14:	f007 fb75 	bl	35602 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   2df18:	4620      	mov	r0, r4
   2df1a:	bd10      	pop	{r4, pc}
   2df1c:	f240 3113 	movw	r1, #787	; 0x313
   2df20:	2039      	movs	r0, #57	; 0x39
   2df22:	f7f9 fd95 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2df26:	0000      	.short	0x0000
   2df28:	20000294 	.word	0x20000294

0002df2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
   2df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df2e:	460c      	mov	r4, r1
   2df30:	4605      	mov	r5, r0
   2df32:	f007 fbd4 	bl	356de <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   2df36:	b158      	cbz	r0, 2df50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
   2df38:	4628      	mov	r0, r5
   2df3a:	f007 fbc3 	bl	356c4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   2df3e:	b148      	cbz	r0, 2df54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
   2df40:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   2df44:	2112      	movs	r1, #18
   2df46:	b108      	cbz	r0, 2df4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
   2df48:	2880      	cmp	r0, #128	; 0x80
   2df4a:	d903      	bls.n	2df54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
   2df4c:	4608      	mov	r0, r1
   2df4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df50:	2142      	movs	r1, #66	; 0x42
   2df52:	e7fb      	b.n	2df4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
   2df54:	4628      	mov	r0, r5
   2df56:	f007 fba6 	bl	356a6 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
   2df5a:	b120      	cbz	r0, 2df66 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
   2df5c:	4628      	mov	r0, r5
   2df5e:	f007 fb11 	bl	35584 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
   2df62:	b110      	cbz	r0, 2df6a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
   2df64:	e005      	b.n	2df72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
   2df66:	210c      	movs	r1, #12
   2df68:	e7f0      	b.n	2df4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
   2df6a:	4628      	mov	r0, r5
   2df6c:	f007 fba4 	bl	356b8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
   2df70:	b120      	cbz	r0, 2df7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
   2df72:	4628      	mov	r0, r5
   2df74:	f007 fd70 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2df78:	b930      	cbnz	r0, 2df88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
   2df7a:	e001      	b.n	2df80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
   2df7c:	2012      	movs	r0, #18
   2df7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df80:	4628      	mov	r0, r5
   2df82:	f007 fb1a 	bl	355ba <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
   2df86:	b108      	cbz	r0, 2df8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
   2df88:	200c      	movs	r0, #12
   2df8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df8c:	4628      	mov	r0, r5
   2df8e:	f7fc fa0b 	bl	2a3a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
   2df92:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   2df96:	f242 7010 	movw	r0, #10000	; 0x2710
   2df9a:	4346      	muls	r6, r0
   2df9c:	78e1      	ldrb	r1, [r4, #3]
   2df9e:	4628      	mov	r0, r5
   2dfa0:	f007 fb78 	bl	35694 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
   2dfa4:	4628      	mov	r0, r5
   2dfa6:	f007 fb89 	bl	356bc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   2dfaa:	b1a8      	cbz	r0, 2dfd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
   2dfac:	2100      	movs	r1, #0
   2dfae:	4668      	mov	r0, sp
   2dfb0:	f7fa f8f0 	bl	28194 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
   2dfb4:	0004      	movs	r4, r0
   2dfb6:	d019      	beq.n	2dfec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
   2dfb8:	2100      	movs	r1, #0
   2dfba:	f7fb fae7 	bl	2958c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
   2dfbe:	f8bd 0000 	ldrh.w	r0, [sp]
   2dfc2:	8020      	strh	r0, [r4, #0]
   2dfc4:	4621      	mov	r1, r4
   2dfc6:	4628      	mov	r0, r5
   2dfc8:	f007 fba0 	bl	3570c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
   2dfcc:	4628      	mov	r0, r5
   2dfce:	f007 fb7d 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   2dfd2:	b168      	cbz	r0, 2dff0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
   2dfd4:	2001      	movs	r0, #1
   2dfd6:	e00e      	b.n	2dff6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
   2dfd8:	4632      	mov	r2, r6
   2dfda:	2100      	movs	r1, #0
   2dfdc:	4628      	mov	r0, r5
   2dfde:	f7fd f921 	bl	2b224 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   2dfe2:	2800      	cmp	r0, #0
   2dfe4:	d0d1      	beq.n	2df8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
   2dfe6:	f241 7168 	movw	r1, #5992	; 0x1768
   2dfea:	e012      	b.n	2e012 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
   2dfec:	200d      	movs	r0, #13
   2dfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dff0:	4628      	mov	r0, r5
   2dff2:	f007 fb89 	bl	35708 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
   2dff6:	4601      	mov	r1, r0
   2dff8:	4620      	mov	r0, r4
   2dffa:	f7ff fed1 	bl	2dda0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
   2dffe:	2800      	cmp	r0, #0
   2e000:	d1f5      	bne.n	2dfee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
   2e002:	4632      	mov	r2, r6
   2e004:	4621      	mov	r1, r4
   2e006:	4628      	mov	r0, r5
   2e008:	f7fd f90c 	bl	2b224 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
   2e00c:	b120      	cbz	r0, 2e018 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
   2e00e:	f241 718b 	movw	r1, #6027	; 0x178b
   2e012:	2039      	movs	r0, #57	; 0x39
   2e014:	f7f9 fd1c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e018:	4804      	ldr	r0, [pc, #16]	; (2e02c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
   2e01a:	6843      	ldr	r3, [r0, #4]
   2e01c:	b123      	cbz	r3, 2e028 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
   2e01e:	2200      	movs	r2, #0
   2e020:	f504 7199 	add.w	r1, r4, #306	; 0x132
   2e024:	4620      	mov	r0, r4
   2e026:	4798      	blx	r3
   2e028:	2000      	movs	r0, #0
   2e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e02c:	20000294 	.word	0x20000294
   2e030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e034:	b088      	sub	sp, #32
   2e036:	4604      	mov	r4, r0
   2e038:	8800      	ldrh	r0, [r0, #0]
   2e03a:	a906      	add	r1, sp, #24
   2e03c:	f006 fb75 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2e040:	2800      	cmp	r0, #0
   2e042:	d147      	bne.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e044:	9807      	ldr	r0, [sp, #28]
   2e046:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
   2e04a:	f88d 1008 	strb.w	r1, [sp, #8]
   2e04e:	9902      	ldr	r1, [sp, #8]
   2e050:	9102      	str	r1, [sp, #8]
   2e052:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2e056:	3080      	adds	r0, #128	; 0x80
   2e058:	b101      	cbz	r1, 2e05c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
   2e05a:	2101      	movs	r1, #1
   2e05c:	f88d 100c 	strb.w	r1, [sp, #12]
   2e060:	7b01      	ldrb	r1, [r0, #12]
   2e062:	f04f 0800 	mov.w	r8, #0
   2e066:	0689      	lsls	r1, r1, #26
   2e068:	d502      	bpl.n	2e070 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
   2e06a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2e06e:	b149      	cbz	r1, 2e084 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
   2e070:	f05f 0100 	movs.w	r1, #0
   2e074:	f88d 1004 	strb.w	r1, [sp, #4]
   2e078:	2105      	movs	r1, #5
   2e07a:	306c      	adds	r0, #108	; 0x6c
   2e07c:	f008 f983 	bl	36386 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   2e080:	b110      	cbz	r0, 2e088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
   2e082:	e004      	b.n	2e08e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
   2e084:	2101      	movs	r1, #1
   2e086:	e7f5      	b.n	2e074 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
   2e088:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2e08c:	b308      	cbz	r0, 2e0d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
   2e08e:	8921      	ldrh	r1, [r4, #8]
   2e090:	88e0      	ldrh	r0, [r4, #6]
   2e092:	f008 feec 	bl	36e6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
   2e096:	2800      	cmp	r0, #0
   2e098:	d11c      	bne.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e09a:	88a1      	ldrh	r1, [r4, #4]
   2e09c:	8860      	ldrh	r0, [r4, #2]
   2e09e:	f008 fee6 	bl	36e6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
   2e0a2:	2800      	cmp	r0, #0
   2e0a4:	d116      	bne.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e0a6:	8921      	ldrh	r1, [r4, #8]
   2e0a8:	88e0      	ldrh	r0, [r4, #6]
   2e0aa:	f008 fed6 	bl	36e5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   2e0ae:	2800      	cmp	r0, #0
   2e0b0:	d110      	bne.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e0b2:	88a1      	ldrh	r1, [r4, #4]
   2e0b4:	8860      	ldrh	r0, [r4, #2]
   2e0b6:	f008 fed0 	bl	36e5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
   2e0ba:	0006      	movs	r6, r0
   2e0bc:	d10a      	bne.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e0be:	9807      	ldr	r0, [sp, #28]
   2e0c0:	f500 7599 	add.w	r5, r0, #306	; 0x132
   2e0c4:	27ff      	movs	r7, #255	; 0xff
   2e0c6:	706f      	strb	r7, [r5, #1]
   2e0c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2e0cc:	b129      	cbz	r1, 2e0da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
   2e0ce:	263a      	movs	r6, #58	; 0x3a
   2e0d0:	e02e      	b.n	2e130 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
   2e0d2:	201a      	movs	r0, #26
   2e0d4:	b008      	add	sp, #32
   2e0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e0da:	4641      	mov	r1, r8
   2e0dc:	aa03      	add	r2, sp, #12
   2e0de:	f008 fed4 	bl	36e8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   2e0e2:	8861      	ldrh	r1, [r4, #2]
   2e0e4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   2e0e8:	4281      	cmp	r1, r0
   2e0ea:	d200      	bcs.n	2e0ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
   2e0ec:	4608      	mov	r0, r1
   2e0ee:	80e8      	strh	r0, [r5, #6]
   2e0f0:	88a1      	ldrh	r1, [r4, #4]
   2e0f2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   2e0f6:	4281      	cmp	r1, r0
   2e0f8:	d200      	bcs.n	2e0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
   2e0fa:	4608      	mov	r0, r1
   2e0fc:	8128      	strh	r0, [r5, #8]
   2e0fe:	88e2      	ldrh	r2, [r4, #6]
   2e100:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2e104:	428a      	cmp	r2, r1
   2e106:	d200      	bcs.n	2e10a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
   2e108:	4611      	mov	r1, r2
   2e10a:	8069      	strh	r1, [r5, #2]
   2e10c:	8922      	ldrh	r2, [r4, #8]
   2e10e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2e112:	428a      	cmp	r2, r1
   2e114:	d200      	bcs.n	2e118 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
   2e116:	4611      	mov	r1, r2
   2e118:	f640 0248 	movw	r2, #2120	; 0x848
   2e11c:	80a9      	strh	r1, [r5, #4]
   2e11e:	4291      	cmp	r1, r2
   2e120:	d300      	bcc.n	2e124 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
   2e122:	4611      	mov	r1, r2
   2e124:	80a9      	strh	r1, [r5, #4]
   2e126:	4290      	cmp	r0, r2
   2e128:	d200      	bcs.n	2e12c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
   2e12a:	4602      	mov	r2, r0
   2e12c:	812a      	strh	r2, [r5, #8]
   2e12e:	702f      	strb	r7, [r5, #0]
   2e130:	f885 8001 	strb.w	r8, [r5, #1]
   2e134:	4630      	mov	r0, r6
   2e136:	e7cd      	b.n	2e0d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
   2e138:	b51c      	push	{r2, r3, r4, lr}
   2e13a:	490c      	ldr	r1, [pc, #48]	; (2e16c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
   2e13c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   2e140:	e9cd 0100 	strd	r0, r1, [sp]
   2e144:	e00a      	b.n	2e15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
   2e146:	9c00      	ldr	r4, [sp, #0]
   2e148:	4620      	mov	r0, r4
   2e14a:	f007 fc85 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   2e14e:	b128      	cbz	r0, 2e15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
   2e150:	4620      	mov	r0, r4
   2e152:	f007 faea 	bl	3572a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   2e156:	b108      	cbz	r0, 2e15c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
   2e158:	2001      	movs	r0, #1
   2e15a:	bd1c      	pop	{r2, r3, r4, pc}
   2e15c:	4668      	mov	r0, sp
   2e15e:	f7f9 fff7 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   2e162:	2800      	cmp	r0, #0
   2e164:	d0ef      	beq.n	2e146 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
   2e166:	2000      	movs	r0, #0
   2e168:	bd1c      	pop	{r2, r3, r4, pc}
   2e16a:	0000      	.short	0x0000
   2e16c:	0002e1a8 	.word	0x0002e1a8
   2e170:	b510      	push	{r4, lr}
   2e172:	4604      	mov	r4, r0
   2e174:	88c1      	ldrh	r1, [r0, #6]
   2e176:	8880      	ldrh	r0, [r0, #4]
   2e178:	f008 fe79 	bl	36e6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
   2e17c:	2800      	cmp	r0, #0
   2e17e:	d10f      	bne.n	2e1a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
   2e180:	8861      	ldrh	r1, [r4, #2]
   2e182:	8820      	ldrh	r0, [r4, #0]
   2e184:	f008 fe73 	bl	36e6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
   2e188:	2800      	cmp	r0, #0
   2e18a:	d109      	bne.n	2e1a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
   2e18c:	4805      	ldr	r0, [pc, #20]	; (2e1a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
   2e18e:	88a1      	ldrh	r1, [r4, #4]
   2e190:	8081      	strh	r1, [r0, #4]
   2e192:	8821      	ldrh	r1, [r4, #0]
   2e194:	8001      	strh	r1, [r0, #0]
   2e196:	88e1      	ldrh	r1, [r4, #6]
   2e198:	80c1      	strh	r1, [r0, #6]
   2e19a:	8861      	ldrh	r1, [r4, #2]
   2e19c:	8041      	strh	r1, [r0, #2]
   2e19e:	2000      	movs	r0, #0
   2e1a0:	bd10      	pop	{r4, pc}
   2e1a2:	0000      	.short	0x0000
   2e1a4:	2000029c 	.word	0x2000029c
   2e1a8:	00000000 	.word	0x00000000
   2e1ac:	00010000 	.word	0x00010000
   2e1b0:	00000000 	.word	0x00000000
   2e1b4:	00010000 	.word	0x00010000
   2e1b8:	0d10770d 	.word	0x0d10770d
   2e1bc:	10770059 	.word	0x10770059
   2e1c0:	00000000 	.word	0x00000000
   2e1c4:	00010000 	.word	0x00010000
   2e1c8:	00000000 	.word	0x00000000
   2e1cc:	00010000 	.word	0x00010000

0002e1d0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
   2e1d0:	b510      	push	{r4, lr}
   2e1d2:	f7fb fc77 	bl	29ac4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
   2e1d6:	4c05      	ldr	r4, [pc, #20]	; (2e1ec <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
   2e1d8:	6860      	ldr	r0, [r4, #4]
   2e1da:	f008 ff50 	bl	3707e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
   2e1de:	f008 fceb 	bl	36bb8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
   2e1e2:	f7fb fe1d 	bl	29e20 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
   2e1e6:	2001      	movs	r0, #1
   2e1e8:	7020      	strb	r0, [r4, #0]
   2e1ea:	bd10      	pop	{r4, pc}
   2e1ec:	200002a4 	.word	0x200002a4

0002e1f0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
   2e1f0:	4801      	ldr	r0, [pc, #4]	; (2e1f8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
   2e1f2:	7800      	ldrb	r0, [r0, #0]
   2e1f4:	4770      	bx	lr
   2e1f6:	0000      	.short	0x0000
   2e1f8:	200002a4 	.word	0x200002a4

0002e1fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
   2e1fc:	b510      	push	{r4, lr}
   2e1fe:	4c06      	ldr	r4, [pc, #24]	; (2e218 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
   2e200:	68a0      	ldr	r0, [r4, #8]
   2e202:	f008 ff3c 	bl	3707e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
   2e206:	68e0      	ldr	r0, [r4, #12]
   2e208:	f008 ff39 	bl	3707e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
   2e20c:	f008 fd3e 	bl	36c8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
   2e210:	2000      	movs	r0, #0
   2e212:	7020      	strb	r0, [r4, #0]
   2e214:	bd10      	pop	{r4, pc}
   2e216:	0000      	.short	0x0000
   2e218:	200002a4 	.word	0x200002a4

0002e21c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
   2e21c:	b510      	push	{r4, lr}
   2e21e:	4905      	ldr	r1, [pc, #20]	; (2e234 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
   2e220:	4805      	ldr	r0, [pc, #20]	; (2e238 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   2e222:	f008 ff1f 	bl	37064 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
   2e226:	4804      	ldr	r0, [pc, #16]	; (2e238 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
   2e228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e22c:	4903      	ldr	r1, [pc, #12]	; (2e23c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
   2e22e:	1d00      	adds	r0, r0, #4
   2e230:	f008 bf18 	b.w	37064 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
   2e234:	200002b4 	.word	0x200002b4
   2e238:	200002a8 	.word	0x200002a8
   2e23c:	200002bc 	.word	0x200002bc

0002e240 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
   2e240:	b510      	push	{r4, lr}
   2e242:	4908      	ldr	r1, [pc, #32]	; (2e264 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
   2e244:	4808      	ldr	r0, [pc, #32]	; (2e268 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   2e246:	f008 ff0d 	bl	37064 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
   2e24a:	4807      	ldr	r0, [pc, #28]	; (2e268 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   2e24c:	4907      	ldr	r1, [pc, #28]	; (2e26c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
   2e24e:	1d00      	adds	r0, r0, #4
   2e250:	f008 ff08 	bl	37064 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
   2e254:	4804      	ldr	r0, [pc, #16]	; (2e268 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
   2e256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e25a:	4905      	ldr	r1, [pc, #20]	; (2e270 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
   2e25c:	3008      	adds	r0, #8
   2e25e:	f008 bf01 	b.w	37064 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
   2e262:	0000      	.short	0x0000
   2e264:	200002cc 	.word	0x200002cc
   2e268:	200002a8 	.word	0x200002a8
   2e26c:	200002d4 	.word	0x200002d4
   2e270:	200002c4 	.word	0x200002c4

0002e274 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
   2e274:	4801      	ldr	r0, [pc, #4]	; (2e27c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
   2e276:	7840      	ldrb	r0, [r0, #1]
   2e278:	4770      	bx	lr
   2e27a:	0000      	.short	0x0000
   2e27c:	200002a4 	.word	0x200002a4
   2e280:	b510      	push	{r4, lr}
   2e282:	f7fc f9b3 	bl	2a5ec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
   2e286:	f7fd f87d 	bl	2b384 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
   2e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e28e:	4801      	ldr	r0, [pc, #4]	; (2e294 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
   2e290:	f7fc b992 	b.w	2a5b8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
   2e294:	20001498 	.word	0x20001498
   2e298:	490a      	ldr	r1, [pc, #40]	; (2e2c4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
   2e29a:	b510      	push	{r4, lr}
   2e29c:	2001      	movs	r0, #1
   2e29e:	7048      	strb	r0, [r1, #1]
   2e2a0:	f7fc f9d4 	bl	2a64c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
   2e2a4:	f7fd fd84 	bl	2bdb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
   2e2a8:	f006 f97d 	bl	345a6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
   2e2ac:	4906      	ldr	r1, [pc, #24]	; (2e2c8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
   2e2ae:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
   2e2b2:	f7fa fb7f 	bl	289b4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
   2e2b6:	2000      	movs	r0, #0
   2e2b8:	f005 ffc3 	bl	34242 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   2e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e2c0:	f7fb bc06 	b.w	29ad0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
   2e2c4:	200002a4 	.word	0x200002a4
   2e2c8:	2000159a 	.word	0x2000159a

0002e2cc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
   2e2cc:	4a04      	ldr	r2, [pc, #16]	; (2e2e0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
   2e2ce:	08c1      	lsrs	r1, r0, #3
   2e2d0:	f000 0307 	and.w	r3, r0, #7
   2e2d4:	2001      	movs	r0, #1
   2e2d6:	4098      	lsls	r0, r3
   2e2d8:	5c53      	ldrb	r3, [r2, r1]
   2e2da:	4303      	orrs	r3, r0
   2e2dc:	5453      	strb	r3, [r2, r1]
   2e2de:	4770      	bx	lr
   2e2e0:	20000020 	.word	0x20000020

0002e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
   2e2e4:	4901      	ldr	r1, [pc, #4]	; (2e2ec <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
   2e2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   2e2ea:	4770      	bx	lr
   2e2ec:	20000020 	.word	0x20000020

0002e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
   2e2f0:	4806      	ldr	r0, [pc, #24]	; (2e30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
   2e2f2:	8801      	ldrh	r1, [r0, #0]
   2e2f4:	7900      	ldrb	r0, [r0, #4]
   2e2f6:	0602      	lsls	r2, r0, #24
   2e2f8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
   2e2fc:	f000 0001 	and.w	r0, r0, #1
   2e300:	1800      	adds	r0, r0, r0
   2e302:	b2c0      	uxtb	r0, r0
   2e304:	f040 0001 	orr.w	r0, r0, #1
   2e308:	4770      	bx	lr
   2e30a:	0000      	.short	0x0000
   2e30c:	20000020 	.word	0x20000020

0002e310 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
   2e310:	b510      	push	{r4, lr}
   2e312:	f004 fd35 	bl	32d80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   2e316:	2200      	movs	r2, #0
   2e318:	4b08      	ldr	r3, [pc, #32]	; (2e33c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
   2e31a:	4611      	mov	r1, r2
   2e31c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
   2e320:	4284      	cmp	r4, r0
   2e322:	d303      	bcc.n	2e32c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
   2e324:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   2e328:	7882      	ldrb	r2, [r0, #2]
   2e32a:	e003      	b.n	2e334 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
   2e32c:	1c49      	adds	r1, r1, #1
   2e32e:	b2c9      	uxtb	r1, r1
   2e330:	290c      	cmp	r1, #12
   2e332:	d3f3      	bcc.n	2e31c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
   2e334:	4802      	ldr	r0, [pc, #8]	; (2e340 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
   2e336:	7002      	strb	r2, [r0, #0]
   2e338:	bd10      	pop	{r4, pc}
   2e33a:	0000      	.short	0x0000
   2e33c:	000370d0 	.word	0x000370d0
   2e340:	20000373 	.word	0x20000373

0002e344 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
   2e344:	b570      	push	{r4, r5, r6, lr}
   2e346:	6845      	ldr	r5, [r0, #4]
   2e348:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
   2e34c:	8828      	ldrh	r0, [r5, #0]
   2e34e:	f826 0902 	strh.w	r0, [r6], #-2
   2e352:	f505 7498 	add.w	r4, r5, #304	; 0x130
   2e356:	7031      	strb	r1, [r6, #0]
   2e358:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
   2e35c:	f008 feec 	bl	37138 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
   2e360:	7130      	strb	r0, [r6, #4]
   2e362:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
   2e366:	f008 fee7 	bl	37138 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
   2e36a:	f806 0f05 	strb.w	r0, [r6, #5]!
   2e36e:	2202      	movs	r2, #2
   2e370:	4903      	ldr	r1, [pc, #12]	; (2e380 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
   2e372:	f1a6 000f 	sub.w	r0, r6, #15
   2e376:	f006 fdab 	bl	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
   2e37a:	2000      	movs	r0, #0
   2e37c:	7320      	strb	r0, [r4, #12]
   2e37e:	bd70      	pop	{r4, r5, r6, pc}
   2e380:	00037125 	.word	0x00037125

0002e384 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   2e384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2e386:	460e      	mov	r6, r1
   2e388:	4604      	mov	r4, r0
   2e38a:	f7fb fa63 	bl	29854 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   2e38e:	2500      	movs	r5, #0
   2e390:	b320      	cbz	r0, 2e3dc <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
   2e392:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
   2e396:	a902      	add	r1, sp, #8
   2e398:	8820      	ldrh	r0, [r4, #0]
   2e39a:	f8ad 0000 	strh.w	r0, [sp]
   2e39e:	f006 f9c4 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   2e3a2:	b108      	cbz	r0, 2e3a8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
   2e3a4:	2126      	movs	r1, #38	; 0x26
   2e3a6:	e010      	b.n	2e3ca <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
   2e3a8:	9803      	ldr	r0, [sp, #12]
   2e3aa:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   2e3ae:	f88d 1002 	strb.w	r1, [sp, #2]
   2e3b2:	7841      	ldrb	r1, [r0, #1]
   2e3b4:	f88d 1003 	strb.w	r1, [sp, #3]
   2e3b8:	8840      	ldrh	r0, [r0, #2]
   2e3ba:	f8ad 0004 	strh.w	r0, [sp, #4]
   2e3be:	2102      	movs	r1, #2
   2e3c0:	4668      	mov	r0, sp
   2e3c2:	f008 fbfb 	bl	36bbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   2e3c6:	b118      	cbz	r0, 2e3d0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
   2e3c8:	213c      	movs	r1, #60	; 0x3c
   2e3ca:	207e      	movs	r0, #126	; 0x7e
   2e3cc:	f7f9 fb40 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e3d0:	f8cd 5000 	str.w	r5, [sp]
   2e3d4:	f8bd 0000 	ldrh.w	r0, [sp]
   2e3d8:	b004      	add	sp, #16
   2e3da:	bd70      	pop	{r4, r5, r6, pc}
   2e3dc:	201c      	movs	r0, #28
   2e3de:	7030      	strb	r0, [r6, #0]
   2e3e0:	7075      	strb	r5, [r6, #1]
   2e3e2:	f8d4 000a 	ldr.w	r0, [r4, #10]
   2e3e6:	6070      	str	r0, [r6, #4]
   2e3e8:	4801      	ldr	r0, [pc, #4]	; (2e3f0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
   2e3ea:	6800      	ldr	r0, [r0, #0]
   2e3ec:	9000      	str	r0, [sp, #0]
   2e3ee:	e7f1      	b.n	2e3d4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
   2e3f0:	0002e3f4 	.word	0x0002e3f4
   2e3f4:	00000004 	.word	0x00000004

0002e3f8 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
   2e3f8:	b570      	push	{r4, r5, r6, lr}
   2e3fa:	4605      	mov	r5, r0
   2e3fc:	4616      	mov	r6, r2
   2e3fe:	460c      	mov	r4, r1
   2e400:	2002      	movs	r0, #2
   2e402:	f000 f9b7 	bl	2e774 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   2e406:	4906      	ldr	r1, [pc, #24]	; (2e420 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
   2e408:	2001      	movs	r0, #1
   2e40a:	1ef6      	subs	r6, r6, #3
   2e40c:	7008      	strb	r0, [r1, #0]
   2e40e:	4805      	ldr	r0, [pc, #20]	; (2e424 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   2e410:	6006      	str	r6, [r0, #0]
   2e412:	4804      	ldr	r0, [pc, #16]	; (2e424 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
   2e414:	3808      	subs	r0, #8
   2e416:	6005      	str	r5, [r0, #0]
   2e418:	1f00      	subs	r0, r0, #4
   2e41a:	6004      	str	r4, [r0, #0]
   2e41c:	bd70      	pop	{r4, r5, r6, pc}
   2e41e:	0000      	.short	0x0000
   2e420:	20000374 	.word	0x20000374
   2e424:	4000f510 	.word	0x4000f510

0002e428 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
   2e428:	b510      	push	{r4, lr}
   2e42a:	4c0c      	ldr	r4, [pc, #48]	; (2e45c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
   2e42c:	7820      	ldrb	r0, [r4, #0]
   2e42e:	b180      	cbz	r0, 2e452 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
   2e430:	490b      	ldr	r1, [pc, #44]	; (2e460 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
   2e432:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2e436:	6008      	str	r0, [r1, #0]
   2e438:	f000 f86a 	bl	2e510 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   2e43c:	2100      	movs	r1, #0
   2e43e:	b120      	cbz	r0, 2e44a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
   2e440:	2001      	movs	r0, #1
   2e442:	7060      	strb	r0, [r4, #1]
   2e444:	4807      	ldr	r0, [pc, #28]	; (2e464 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
   2e446:	6800      	ldr	r0, [r0, #0]
   2e448:	e001      	b.n	2e44e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
   2e44a:	7061      	strb	r1, [r4, #1]
   2e44c:	2010      	movs	r0, #16
   2e44e:	70a0      	strb	r0, [r4, #2]
   2e450:	7021      	strb	r1, [r4, #0]
   2e452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e456:	2000      	movs	r0, #0
   2e458:	f000 b98c 	b.w	2e774 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   2e45c:	20000374 	.word	0x20000374
   2e460:	4001f508 	.word	0x4001f508
   2e464:	4000f400 	.word	0x4000f400

0002e468 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
   2e468:	b510      	push	{r4, lr}
   2e46a:	2002      	movs	r0, #2
   2e46c:	f000 f982 	bl	2e774 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   2e470:	4904      	ldr	r1, [pc, #16]	; (2e484 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
   2e472:	2001      	movs	r0, #1
   2e474:	7008      	strb	r0, [r1, #0]
   2e476:	f000 f859 	bl	2e52c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
   2e47a:	4903      	ldr	r1, [pc, #12]	; (2e488 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
   2e47c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2e480:	6008      	str	r0, [r1, #0]
   2e482:	bd10      	pop	{r4, pc}
   2e484:	20000374 	.word	0x20000374
   2e488:	4001f504 	.word	0x4001f504

0002e48c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
   2e48c:	4803      	ldr	r0, [pc, #12]	; (2e49c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
   2e48e:	2100      	movs	r1, #0
   2e490:	7001      	strb	r1, [r0, #0]
   2e492:	7041      	strb	r1, [r0, #1]
   2e494:	2110      	movs	r1, #16
   2e496:	7081      	strb	r1, [r0, #2]
   2e498:	4770      	bx	lr
   2e49a:	0000      	.short	0x0000
   2e49c:	20000374 	.word	0x20000374

0002e4a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
   2e4a0:	4807      	ldr	r0, [pc, #28]	; (2e4c0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
   2e4a2:	b510      	push	{r4, lr}
   2e4a4:	7801      	ldrb	r1, [r0, #0]
   2e4a6:	b141      	cbz	r1, 2e4ba <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
   2e4a8:	f000 f832 	bl	2e510 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
   2e4ac:	b118      	cbz	r0, 2e4b6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
   2e4ae:	4805      	ldr	r0, [pc, #20]	; (2e4c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
   2e4b0:	6800      	ldr	r0, [r0, #0]
   2e4b2:	b2c0      	uxtb	r0, r0
   2e4b4:	bd10      	pop	{r4, pc}
   2e4b6:	2010      	movs	r0, #16
   2e4b8:	bd10      	pop	{r4, pc}
   2e4ba:	7880      	ldrb	r0, [r0, #2]
   2e4bc:	bd10      	pop	{r4, pc}
   2e4be:	0000      	.short	0x0000
   2e4c0:	20000374 	.word	0x20000374
   2e4c4:	4000f400 	.word	0x4000f400

0002e4c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
   2e4c8:	4808      	ldr	r0, [pc, #32]	; (2e4ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
   2e4ca:	b510      	push	{r4, lr}
   2e4cc:	7801      	ldrb	r1, [r0, #0]
   2e4ce:	b159      	cbz	r1, 2e4e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
   2e4d0:	4807      	ldr	r0, [pc, #28]	; (2e4f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
   2e4d2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   2e4d6:	b128      	cbz	r0, 2e4e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
   2e4d8:	f000 f80c 	bl	2e4f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   2e4dc:	2800      	cmp	r0, #0
   2e4de:	d000      	beq.n	2e4e2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
   2e4e0:	2001      	movs	r0, #1
   2e4e2:	bd10      	pop	{r4, pc}
   2e4e4:	2002      	movs	r0, #2
   2e4e6:	bd10      	pop	{r4, pc}
   2e4e8:	7840      	ldrb	r0, [r0, #1]
   2e4ea:	bd10      	pop	{r4, pc}
   2e4ec:	20000374 	.word	0x20000374
   2e4f0:	4000f000 	.word	0x4000f000
   2e4f4:	4805      	ldr	r0, [pc, #20]	; (2e50c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
   2e4f6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   2e4fa:	b111      	cbz	r1, 2e502 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
   2e4fc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
   2e500:	b108      	cbz	r0, 2e506 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
   2e502:	2000      	movs	r0, #0
   2e504:	4770      	bx	lr
   2e506:	2001      	movs	r0, #1
   2e508:	4770      	bx	lr
   2e50a:	0000      	.short	0x0000
   2e50c:	4000f000 	.word	0x4000f000
   2e510:	4805      	ldr	r0, [pc, #20]	; (2e528 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
   2e512:	b510      	push	{r4, lr}
   2e514:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   2e518:	b120      	cbz	r0, 2e524 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   2e51a:	f7ff ffeb 	bl	2e4f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
   2e51e:	b108      	cbz	r0, 2e524 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
   2e520:	2001      	movs	r0, #1
   2e522:	bd10      	pop	{r4, pc}
   2e524:	2000      	movs	r0, #0
   2e526:	bd10      	pop	{r4, pc}
   2e528:	4000f000 	.word	0x4000f000
   2e52c:	4804      	ldr	r0, [pc, #16]	; (2e540 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
   2e52e:	2100      	movs	r1, #0
   2e530:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   2e534:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   2e538:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   2e53c:	4770      	bx	lr
   2e53e:	0000      	.short	0x0000
   2e540:	4000f000 	.word	0x4000f000

0002e544 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
   2e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e548:	4604      	mov	r4, r0
   2e54a:	461e      	mov	r6, r3
   2e54c:	4690      	mov	r8, r2
   2e54e:	460f      	mov	r7, r1
   2e550:	2001      	movs	r0, #1
   2e552:	f000 f90f 	bl	2e774 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
   2e556:	4d1e      	ldr	r5, [pc, #120]	; (2e5d0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
   2e558:	481e      	ldr	r0, [pc, #120]	; (2e5d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
   2e55a:	f004 0103 	and.w	r1, r4, #3
   2e55e:	712e      	strb	r6, [r5, #4]
   2e560:	6800      	ldr	r0, [r0, #0]
   2e562:	0432      	lsls	r2, r6, #16
   2e564:	f361 0007 	bfi	r0, r1, #0, #8
   2e568:	f366 200f 	bfi	r0, r6, #8, #8
   2e56c:	0c00      	lsrs	r0, r0, #16
   2e56e:	4e1a      	ldr	r6, [pc, #104]	; (2e5d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
   2e570:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
   2e574:	4308      	orrs	r0, r1
   2e576:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
   2e57a:	4818      	ldr	r0, [pc, #96]	; (2e5dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
   2e57c:	6007      	str	r7, [r0, #0]
   2e57e:	f008 ff84 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   2e582:	b938      	cbnz	r0, 2e594 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
   2e584:	4815      	ldr	r0, [pc, #84]	; (2e5dc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
   2e586:	3010      	adds	r0, #16
   2e588:	6801      	ldr	r1, [r0, #0]
   2e58a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2e58e:	ea41 0108 	orr.w	r1, r1, r8
   2e592:	6001      	str	r1, [r0, #0]
   2e594:	f000 f8e4 	bl	2e760 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
   2e598:	b10c      	cbz	r4, 2e59e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
   2e59a:	2c04      	cmp	r4, #4
   2e59c:	d107      	bne.n	2e5ae <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
   2e59e:	4811      	ldr	r0, [pc, #68]	; (2e5e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
   2e5a0:	490d      	ldr	r1, [pc, #52]	; (2e5d8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
   2e5a2:	4a0f      	ldr	r2, [pc, #60]	; (2e5e0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
   2e5a4:	1d09      	adds	r1, r1, #4
   2e5a6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   2e5aa:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
   2e5ae:	2001      	movs	r0, #1
   2e5b0:	7068      	strb	r0, [r5, #1]
   2e5b2:	70ec      	strb	r4, [r5, #3]
   2e5b4:	b11c      	cbz	r4, 2e5be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
   2e5b6:	2c01      	cmp	r4, #1
   2e5b8:	d001      	beq.n	2e5be <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
   2e5ba:	2c02      	cmp	r4, #2
   2e5bc:	d106      	bne.n	2e5cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
   2e5be:	7028      	strb	r0, [r5, #0]
   2e5c0:	2100      	movs	r1, #0
   2e5c2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
   2e5c6:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
   2e5ca:	6030      	str	r0, [r6, #0]
   2e5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e5d0:	20000377 	.word	0x20000377
   2e5d4:	0002e770 	.word	0x0002e770
   2e5d8:	4000f000 	.word	0x4000f000
   2e5dc:	4000f508 	.word	0x4000f508
   2e5e0:	4000f100 	.word	0x4000f100
   2e5e4:	4001f088 	.word	0x4001f088

0002e5e8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
   2e5e8:	b570      	push	{r4, r5, r6, lr}
   2e5ea:	4a1c      	ldr	r2, [pc, #112]	; (2e65c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
   2e5ec:	7853      	ldrb	r3, [r2, #1]
   2e5ee:	b1a3      	cbz	r3, 2e61a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
   2e5f0:	4b1b      	ldr	r3, [pc, #108]	; (2e660 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
   2e5f2:	6019      	str	r1, [r3, #0]
   2e5f4:	1d19      	adds	r1, r3, #4
   2e5f6:	6008      	str	r0, [r1, #0]
   2e5f8:	2501      	movs	r5, #1
   2e5fa:	7095      	strb	r5, [r2, #2]
   2e5fc:	4610      	mov	r0, r2
   2e5fe:	78d6      	ldrb	r6, [r2, #3]
   2e600:	4b18      	ldr	r3, [pc, #96]	; (2e664 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
   2e602:	7800      	ldrb	r0, [r0, #0]
   2e604:	4c18      	ldr	r4, [pc, #96]	; (2e668 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
   2e606:	2100      	movs	r1, #0
   2e608:	b156      	cbz	r6, 2e620 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
   2e60a:	2e04      	cmp	r6, #4
   2e60c:	d01b      	beq.n	2e646 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
   2e60e:	b308      	cbz	r0, 2e654 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
   2e610:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   2e614:	0668      	lsls	r0, r5, #25
   2e616:	6018      	str	r0, [r3, #0]
   2e618:	bd70      	pop	{r4, r5, r6, pc}
   2e61a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   2e61e:	e01a      	b.n	2e656 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
   2e620:	b178      	cbz	r0, 2e642 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
   2e622:	4620      	mov	r0, r4
   2e624:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   2e628:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   2e62c:	601e      	str	r6, [r3, #0]
   2e62e:	1271      	asrs	r1, r6, #9
   2e630:	f008 fdaa 	bl	37188 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
   2e634:	2800      	cmp	r0, #0
   2e636:	d0ef      	beq.n	2e618 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
   2e638:	6065      	str	r5, [r4, #4]
   2e63a:	480a      	ldr	r0, [pc, #40]	; (2e664 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
   2e63c:	1d00      	adds	r0, r0, #4
   2e63e:	6006      	str	r6, [r0, #0]
   2e640:	bd70      	pop	{r4, r5, r6, pc}
   2e642:	21d5      	movs	r1, #213	; 0xd5
   2e644:	e007      	b.n	2e656 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
   2e646:	7015      	strb	r5, [r2, #0]
   2e648:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   2e64c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   2e650:	6025      	str	r5, [r4, #0]
   2e652:	bd70      	pop	{r4, r5, r6, pc}
   2e654:	21e8      	movs	r1, #232	; 0xe8
   2e656:	203c      	movs	r0, #60	; 0x3c
   2e658:	f7f9 f9fa 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e65c:	20000377 	.word	0x20000377
   2e660:	4000f50c 	.word	0x4000f50c
   2e664:	4001f504 	.word	0x4001f504
   2e668:	4000f000 	.word	0x4000f000

0002e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
   2e66c:	b570      	push	{r4, r5, r6, lr}
   2e66e:	4d05      	ldr	r5, [pc, #20]	; (2e684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
   2e670:	2400      	movs	r4, #0
   2e672:	7828      	ldrb	r0, [r5, #0]
   2e674:	b110      	cbz	r0, 2e67c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
   2e676:	f000 f873 	bl	2e760 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
   2e67a:	702c      	strb	r4, [r5, #0]
   2e67c:	706c      	strb	r4, [r5, #1]
   2e67e:	70ac      	strb	r4, [r5, #2]
   2e680:	bd70      	pop	{r4, r5, r6, pc}
   2e682:	0000      	.short	0x0000
   2e684:	20000377 	.word	0x20000377

0002e688 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
   2e688:	4802      	ldr	r0, [pc, #8]	; (2e694 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
   2e68a:	2100      	movs	r1, #0
   2e68c:	7001      	strb	r1, [r0, #0]
   2e68e:	7041      	strb	r1, [r0, #1]
   2e690:	7081      	strb	r1, [r0, #2]
   2e692:	4770      	bx	lr
   2e694:	20000377 	.word	0x20000377

0002e698 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
   2e698:	480b      	ldr	r0, [pc, #44]	; (2e6c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
   2e69a:	b510      	push	{r4, lr}
   2e69c:	7800      	ldrb	r0, [r0, #0]
   2e69e:	b158      	cbz	r0, 2e6b8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
   2e6a0:	f44f 7182 	mov.w	r1, #260	; 0x104
   2e6a4:	4809      	ldr	r0, [pc, #36]	; (2e6cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
   2e6a6:	f008 fd6f 	bl	37188 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
   2e6aa:	b140      	cbz	r0, 2e6be <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
   2e6ac:	4808      	ldr	r0, [pc, #32]	; (2e6d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
   2e6ae:	6800      	ldr	r0, [r0, #0]
   2e6b0:	2800      	cmp	r0, #0
   2e6b2:	d000      	beq.n	2e6b6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
   2e6b4:	2001      	movs	r0, #1
   2e6b6:	bd10      	pop	{r4, pc}
   2e6b8:	f240 215e 	movw	r1, #606	; 0x25e
   2e6bc:	e001      	b.n	2e6c2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
   2e6be:	f240 215f 	movw	r1, #607	; 0x25f
   2e6c2:	203c      	movs	r0, #60	; 0x3c
   2e6c4:	f7f9 f9c4 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e6c8:	20000377 	.word	0x20000377
   2e6cc:	4000f000 	.word	0x4000f000
   2e6d0:	4000f400 	.word	0x4000f400

0002e6d4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
   2e6d4:	4801      	ldr	r0, [pc, #4]	; (2e6dc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
   2e6d6:	2101      	movs	r1, #1
   2e6d8:	6081      	str	r1, [r0, #8]
   2e6da:	4770      	bx	lr
   2e6dc:	4000f000 	.word	0x4000f000

0002e6e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
   2e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e6e4:	481b      	ldr	r0, [pc, #108]	; (2e754 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
   2e6e6:	7800      	ldrb	r0, [r0, #0]
   2e6e8:	b1d8      	cbz	r0, 2e722 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
   2e6ea:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2e758 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
   2e6ee:	f44f 7682 	mov.w	r6, #260	; 0x104
   2e6f2:	4631      	mov	r1, r6
   2e6f4:	4640      	mov	r0, r8
   2e6f6:	f008 fd47 	bl	37188 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
   2e6fa:	2800      	cmp	r0, #0
   2e6fc:	d128      	bne.n	2e750 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
   2e6fe:	2002      	movs	r0, #2
   2e700:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
   2e704:	4c15      	ldr	r4, [pc, #84]	; (2e75c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
   2e706:	6820      	ldr	r0, [r4, #0]
   2e708:	43c0      	mvns	r0, r0
   2e70a:	f340 1500 	sbfx	r5, r0, #4, #1
   2e70e:	6820      	ldr	r0, [r4, #0]
   2e710:	f040 0010 	orr.w	r0, r0, #16
   2e714:	6020      	str	r0, [r4, #0]
   2e716:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2e71a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
   2e71e:	1c6d      	adds	r5, r5, #1
   2e720:	e008      	b.n	2e734 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
   2e722:	f240 216a 	movw	r1, #618	; 0x26a
   2e726:	203c      	movs	r0, #60	; 0x3c
   2e728:	f7f9 f992 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e72c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
   2e730:	f008 feeb 	bl	3750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   2e734:	4631      	mov	r1, r6
   2e736:	4640      	mov	r0, r8
   2e738:	f008 fd26 	bl	37188 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
   2e73c:	2800      	cmp	r0, #0
   2e73e:	d0f5      	beq.n	2e72c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
   2e740:	b91d      	cbnz	r5, 2e74a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
   2e742:	6820      	ldr	r0, [r4, #0]
   2e744:	f020 0010 	bic.w	r0, r0, #16
   2e748:	6020      	str	r0, [r4, #0]
   2e74a:	2002      	movs	r0, #2
   2e74c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
   2e750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e754:	20000377 	.word	0x20000377
   2e758:	4000f000 	.word	0x4000f000
   2e75c:	e000ed10 	.word	0xe000ed10
   2e760:	4902      	ldr	r1, [pc, #8]	; (2e76c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
   2e762:	4801      	ldr	r0, [pc, #4]	; (2e768 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
   2e764:	6008      	str	r0, [r1, #0]
   2e766:	4770      	bx	lr
   2e768:	02020000 	.word	0x02020000
   2e76c:	4001f508 	.word	0x4001f508
   2e770:	00010000 	.word	0x00010000

0002e774 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
   2e774:	b510      	push	{r4, lr}
   2e776:	4604      	mov	r4, r0
   2e778:	f000 f820 	bl	2e7bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   2e77c:	2c00      	cmp	r4, #0
   2e77e:	d00e      	beq.n	2e79e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
   2e780:	4a0b      	ldr	r2, [pc, #44]	; (2e7b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
   2e782:	480b      	ldr	r0, [pc, #44]	; (2e7b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
   2e784:	490b      	ldr	r1, [pc, #44]	; (2e7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
   2e786:	3214      	adds	r2, #20
   2e788:	2c01      	cmp	r4, #1
   2e78a:	d005      	beq.n	2e798 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
   2e78c:	2c02      	cmp	r4, #2
   2e78e:	d007      	beq.n	2e7a0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
   2e790:	2182      	movs	r1, #130	; 0x82
   2e792:	203d      	movs	r0, #61	; 0x3d
   2e794:	f7f9 f95c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e798:	2302      	movs	r3, #2
   2e79a:	6003      	str	r3, [r0, #0]
   2e79c:	6011      	str	r1, [r2, #0]
   2e79e:	bd10      	pop	{r4, pc}
   2e7a0:	2303      	movs	r3, #3
   2e7a2:	6003      	str	r3, [r0, #0]
   2e7a4:	6011      	str	r1, [r2, #0]
   2e7a6:	4904      	ldr	r1, [pc, #16]	; (2e7b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
   2e7a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2e7ac:	6008      	str	r0, [r1, #0]
   2e7ae:	bd10      	pop	{r4, pc}
   2e7b0:	4000f500 	.word	0x4000f500
   2e7b4:	2000169c 	.word	0x2000169c
   2e7b8:	4001f504 	.word	0x4001f504
   2e7bc:	4805      	ldr	r0, [pc, #20]	; (2e7d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
   2e7be:	b510      	push	{r4, lr}
   2e7c0:	2100      	movs	r1, #0
   2e7c2:	6001      	str	r1, [r0, #0]
   2e7c4:	6001      	str	r1, [r0, #0]
   2e7c6:	f7ff ff51 	bl	2e66c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
   2e7ca:	4903      	ldr	r1, [pc, #12]	; (2e7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
   2e7cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2e7d0:	6008      	str	r0, [r1, #0]
   2e7d2:	bd10      	pop	{r4, pc}
   2e7d4:	4000f500 	.word	0x4000f500
   2e7d8:	4001f508 	.word	0x4001f508

0002e7dc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
   2e7dc:	4805      	ldr	r0, [pc, #20]	; (2e7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
   2e7de:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   2e7e2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   2e7e6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   2e7ea:	2100      	movs	r1, #0
   2e7ec:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
   2e7f0:	4770      	bx	lr
   2e7f2:	0000      	.short	0x0000
   2e7f4:	40001000 	.word	0x40001000

0002e7f8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
   2e7f8:	4904      	ldr	r1, [pc, #16]	; (2e80c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
   2e7fa:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
   2e7fe:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
   2e802:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2e806:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   2e80a:	4770      	bx	lr
   2e80c:	40001000 	.word	0x40001000

0002e810 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
   2e810:	4902      	ldr	r1, [pc, #8]	; (2e81c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
   2e812:	5c08      	ldrb	r0, [r1, r0]
   2e814:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   2e818:	4770      	bx	lr
   2e81a:	0000      	.short	0x0000
   2e81c:	0002f4b2 	.word	0x0002f4b2

0002e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
   2e820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e822:	4c24      	ldr	r4, [pc, #144]	; (2e8b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
   2e824:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   2e828:	f010 0f10 	tst.w	r0, #16
   2e82c:	d001      	beq.n	2e832 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
   2e82e:	2701      	movs	r7, #1
   2e830:	e000      	b.n	2e834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
   2e832:	2700      	movs	r7, #0
   2e834:	2010      	movs	r0, #16
   2e836:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   2e83a:	2002      	movs	r0, #2
   2e83c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   2e840:	481d      	ldr	r0, [pc, #116]	; (2e8b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
   2e842:	2500      	movs	r5, #0
   2e844:	491d      	ldr	r1, [pc, #116]	; (2e8bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
   2e846:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
   2e84a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
   2e84e:	6008      	str	r0, [r1, #0]
   2e850:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
   2e854:	f44f 7688 	mov.w	r6, #272	; 0x110
   2e858:	f010 0fff 	tst.w	r0, #255	; 0xff
   2e85c:	d019      	beq.n	2e892 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
   2e85e:	20ff      	movs	r0, #255	; 0xff
   2e860:	f88d 0000 	strb.w	r0, [sp]
   2e864:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   2e868:	2001      	movs	r0, #1
   2e86a:	6120      	str	r0, [r4, #16]
   2e86c:	e005      	b.n	2e87a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
   2e86e:	bf00      	nop
   2e870:	f89d 0000 	ldrb.w	r0, [sp]
   2e874:	1e40      	subs	r0, r0, #1
   2e876:	f88d 0000 	strb.w	r0, [sp]
   2e87a:	f89d 0000 	ldrb.w	r0, [sp]
   2e87e:	b128      	cbz	r0, 2e88c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
   2e880:	4631      	mov	r1, r6
   2e882:	4620      	mov	r0, r4
   2e884:	f008 fcaf 	bl	371e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
   2e888:	2800      	cmp	r0, #0
   2e88a:	d0f1      	beq.n	2e870 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
   2e88c:	f89d 0000 	ldrb.w	r0, [sp]
   2e890:	b158      	cbz	r0, 2e8aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
   2e892:	f000 fc23 	bl	2f0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
   2e896:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   2e89a:	f000 fd8b 	bl	2f3b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
   2e89e:	2f00      	cmp	r7, #0
   2e8a0:	d002      	beq.n	2e8a8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
   2e8a2:	2010      	movs	r0, #16
   2e8a4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   2e8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e8aa:	f640 0194 	movw	r1, #2196	; 0x894
   2e8ae:	203e      	movs	r0, #62	; 0x3e
   2e8b0:	f7f9 f8ce 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e8b4:	40001000 	.word	0x40001000
   2e8b8:	20001268 	.word	0x20001268
   2e8bc:	4001f508 	.word	0x4001f508

0002e8c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
   2e8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e8c4:	4d18      	ldr	r5, [pc, #96]	; (2e928 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
   2e8c6:	4607      	mov	r7, r0
   2e8c8:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
   2e8cc:	07c2      	lsls	r2, r0, #31
   2e8ce:	d00f      	beq.n	2e8f0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
   2e8d0:	4c16      	ldr	r4, [pc, #88]	; (2e92c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
   2e8d2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
   2e8d6:	f042 0201 	orr.w	r2, r2, #1
   2e8da:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   2e8de:	f040 0002 	orr.w	r0, r0, #2
   2e8e2:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
   2e8e6:	2601      	movs	r6, #1
   2e8e8:	b13f      	cbz	r7, 2e8fa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
   2e8ea:	2f01      	cmp	r7, #1
   2e8ec:	d00b      	beq.n	2e906 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
   2e8ee:	e010      	b.n	2e912 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
   2e8f0:	f240 716f 	movw	r1, #1903	; 0x76f
   2e8f4:	203e      	movs	r0, #62	; 0x3e
   2e8f6:	f7f9 f8ab 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2e8fa:	4608      	mov	r0, r1
   2e8fc:	f000 fdb4 	bl	2f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
   2e900:	726e      	strb	r6, [r5, #9]
   2e902:	6026      	str	r6, [r4, #0]
   2e904:	e005      	b.n	2e912 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
   2e906:	4608      	mov	r0, r1
   2e908:	f000 fd94 	bl	2f434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
   2e90c:	2002      	movs	r0, #2
   2e90e:	7268      	strb	r0, [r5, #9]
   2e910:	6066      	str	r6, [r4, #4]
   2e912:	4807      	ldr	r0, [pc, #28]	; (2e930 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
   2e914:	64c6      	str	r6, [r0, #76]	; 0x4c
   2e916:	4806      	ldr	r0, [pc, #24]	; (2e930 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
   2e918:	300c      	adds	r0, #12
   2e91a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
   2e91e:	4638      	mov	r0, r7
   2e920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e924:	f000 bd18 	b.w	2f358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
   2e928:	20001268 	.word	0x20001268
   2e92c:	40001000 	.word	0x40001000
   2e930:	40008000 	.word	0x40008000

0002e934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
   2e934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e938:	4c2c      	ldr	r4, [pc, #176]	; (2e9ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
   2e93a:	0006      	movs	r6, r0
   2e93c:	4d2c      	ldr	r5, [pc, #176]	; (2e9f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
   2e93e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   2e942:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2e9f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
   2e946:	f040 0002 	orr.w	r0, r0, #2
   2e94a:	4689      	mov	r9, r1
   2e94c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   2e950:	f04f 0700 	mov.w	r7, #0
   2e954:	d002      	beq.n	2e95c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
   2e956:	2e01      	cmp	r6, #1
   2e958:	d020      	beq.n	2e99c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
   2e95a:	e036      	b.n	2e9ca <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
   2e95c:	4608      	mov	r0, r1
   2e95e:	f000 fd83 	bl	2f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
   2e962:	2001      	movs	r0, #1
   2e964:	7260      	strb	r0, [r4, #9]
   2e966:	79e0      	ldrb	r0, [r4, #7]
   2e968:	2801      	cmp	r0, #1
   2e96a:	d105      	bne.n	2e978 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
   2e96c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   2e970:	f040 0008 	orr.w	r0, r0, #8
   2e974:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   2e978:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2e97a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   2e97e:	6260      	str	r0, [r4, #36]	; 0x24
   2e980:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2e984:	f8c8 0000 	str.w	r0, [r8]
   2e988:	491b      	ldr	r1, [pc, #108]	; (2e9f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
   2e98a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
   2e98e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2e992:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   2e996:	fbb0 f7f1 	udiv	r7, r0, r1
   2e99a:	e016      	b.n	2e9ca <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
   2e99c:	4608      	mov	r0, r1
   2e99e:	f000 fd49 	bl	2f434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
   2e9a2:	2002      	movs	r0, #2
   2e9a4:	7260      	strb	r0, [r4, #9]
   2e9a6:	79e0      	ldrb	r0, [r4, #7]
   2e9a8:	2801      	cmp	r0, #1
   2e9aa:	d105      	bne.n	2e9b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
   2e9ac:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   2e9b0:	f040 0004 	orr.w	r0, r0, #4
   2e9b4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   2e9b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2e9ba:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   2e9be:	6260      	str	r0, [r4, #36]	; 0x24
   2e9c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   2e9c4:	f8c8 0000 	str.w	r0, [r8]
   2e9c8:	2729      	movs	r7, #41	; 0x29
   2e9ca:	f000 fbf3 	bl	2f1b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
   2e9ce:	f008 fc52 	bl	37276 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
   2e9d2:	b120      	cbz	r0, 2e9de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
   2e9d4:	f7ff ff24 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   2e9d8:	2000      	movs	r0, #0
   2e9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e9de:	2100      	movs	r1, #0
   2e9e0:	4630      	mov	r0, r6
   2e9e2:	f000 fcb9 	bl	2f358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
   2e9e6:	4638      	mov	r0, r7
   2e9e8:	e7f7      	b.n	2e9da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
   2e9ea:	0000      	.short	0x0000
   2e9ec:	20001268 	.word	0x20001268
   2e9f0:	40001000 	.word	0x40001000
   2e9f4:	4001f504 	.word	0x4001f504
   2e9f8:	0002f4ac 	.word	0x0002f4ac

0002e9fc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
   2e9fc:	4a02      	ldr	r2, [pc, #8]	; (2ea08 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
   2e9fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2ea00:	6003      	str	r3, [r0, #0]
   2ea02:	6b10      	ldr	r0, [r2, #48]	; 0x30
   2ea04:	6008      	str	r0, [r1, #0]
   2ea06:	4770      	bx	lr
   2ea08:	20001268 	.word	0x20001268

0002ea0c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
   2ea0c:	b510      	push	{r4, lr}
   2ea0e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
   2ea10:	4901      	ldr	r1, [pc, #4]	; (2ea18 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
   2ea12:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
   2ea16:	bd10      	pop	{r4, pc}
   2ea18:	20001258 	.word	0x20001258

0002ea1c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
   2ea1c:	490f      	ldr	r1, [pc, #60]	; (2ea5c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
   2ea1e:	b510      	push	{r4, lr}
   2ea20:	69ca      	ldr	r2, [r1, #28]
   2ea22:	4282      	cmp	r2, r0
   2ea24:	d302      	bcc.n	2ea2c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
   2ea26:	f640 1124 	movw	r1, #2340	; 0x924
   2ea2a:	e00b      	b.n	2ea44 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
   2ea2c:	2201      	movs	r2, #1
   2ea2e:	730a      	strb	r2, [r1, #12]
   2ea30:	6108      	str	r0, [r1, #16]
   2ea32:	490b      	ldr	r1, [pc, #44]	; (2ea60 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
   2ea34:	644a      	str	r2, [r1, #68]	; 0x44
   2ea36:	1d0a      	adds	r2, r1, #4
   2ea38:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   2ea3c:	4283      	cmp	r3, r0
   2ea3e:	d304      	bcc.n	2ea4a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
   2ea40:	f640 112d 	movw	r1, #2349	; 0x92d
   2ea44:	203e      	movs	r0, #62	; 0x3e
   2ea46:	f7f9 f803 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ea4a:	2300      	movs	r3, #0
   2ea4c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
   2ea50:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   2ea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ea58:	f000 bc52 	b.w	2f300 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
   2ea5c:	20001268 	.word	0x20001268
   2ea60:	40008000 	.word	0x40008000

0002ea64 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
   2ea64:	b570      	push	{r4, r5, r6, lr}
   2ea66:	4c0f      	ldr	r4, [pc, #60]	; (2eaa4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
   2ea68:	4603      	mov	r3, r0
   2ea6a:	2002      	movs	r0, #2
   2ea6c:	7320      	strb	r0, [r4, #12]
   2ea6e:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
   2ea72:	2096      	movs	r0, #150	; 0x96
   2ea74:	f894 1020 	ldrb.w	r1, [r4, #32]
   2ea78:	7d22      	ldrb	r2, [r4, #20]
   2ea7a:	2d01      	cmp	r5, #1
   2ea7c:	d00e      	beq.n	2ea9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
   2ea7e:	f000 fd51 	bl	2f524 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
   2ea82:	6120      	str	r0, [r4, #16]
   2ea84:	4808      	ldr	r0, [pc, #32]	; (2eaa8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
   2ea86:	2100      	movs	r1, #0
   2ea88:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   2ea8c:	6921      	ldr	r1, [r4, #16]
   2ea8e:	69e0      	ldr	r0, [r4, #28]
   2ea90:	4408      	add	r0, r1
   2ea92:	4905      	ldr	r1, [pc, #20]	; (2eaa8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
   2ea94:	1d09      	adds	r1, r1, #4
   2ea96:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2ea9a:	bd70      	pop	{r4, r5, r6, pc}
   2ea9c:	f000 fd60 	bl	2f560 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
   2eaa0:	e7ef      	b.n	2ea82 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
   2eaa2:	0000      	.short	0x0000
   2eaa4:	20001268 	.word	0x20001268
   2eaa8:	40008000 	.word	0x40008000

0002eaac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
   2eaac:	b510      	push	{r4, lr}
   2eaae:	f008 fd08 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   2eab2:	2800      	cmp	r0, #0
   2eab4:	d006      	beq.n	2eac4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
   2eab6:	4804      	ldr	r0, [pc, #16]	; (2eac8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
   2eab8:	6801      	ldr	r1, [r0, #0]
   2eaba:	f021 0101 	bic.w	r1, r1, #1
   2eabe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   2eac2:	6001      	str	r1, [r0, #0]
   2eac4:	bd10      	pop	{r4, pc}
   2eac6:	0000      	.short	0x0000
   2eac8:	40001774 	.word	0x40001774

0002eacc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
   2eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ead0:	2234      	movs	r2, #52	; 0x34
   2ead2:	2100      	movs	r1, #0
   2ead4:	4813      	ldr	r0, [pc, #76]	; (2eb24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
   2ead6:	f008 fdec 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2eada:	f000 fc6b 	bl	2f3b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
   2eade:	f008 fca9 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   2eae2:	4d11      	ldr	r5, [pc, #68]	; (2eb28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   2eae4:	4e10      	ldr	r6, [pc, #64]	; (2eb28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   2eae6:	2400      	movs	r4, #0
   2eae8:	4f0f      	ldr	r7, [pc, #60]	; (2eb28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
   2eaea:	3508      	adds	r5, #8
   2eaec:	3610      	adds	r6, #16
   2eaee:	b928      	cbnz	r0, 2eafc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   2eaf0:	f008 fcb7 	bl	37462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   2eaf4:	b910      	cbnz	r0, 2eafc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
   2eaf6:	f008 fcbe 	bl	37476 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   2eafa:	b108      	cbz	r0, 2eb00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
   2eafc:	2224      	movs	r2, #36	; 0x24
   2eafe:	e006      	b.n	2eb0e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   2eb00:	f008 fcf9 	bl	374f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   2eb04:	b910      	cbnz	r0, 2eb0c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
   2eb06:	f008 fcec 	bl	374e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   2eb0a:	b140      	cbz	r0, 2eb1e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
   2eb0c:	2240      	movs	r2, #64	; 0x40
   2eb0e:	21ff      	movs	r1, #255	; 0xff
   2eb10:	4638      	mov	r0, r7
   2eb12:	f008 fdce 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   2eb16:	602c      	str	r4, [r5, #0]
   2eb18:	6034      	str	r4, [r6, #0]
   2eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2eb1e:	2238      	movs	r2, #56	; 0x38
   2eb20:	e7f5      	b.n	2eb0e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
   2eb22:	0000      	.short	0x0000
   2eb24:	20001268 	.word	0x20001268
   2eb28:	40000e00 	.word	0x40000e00

0002eb2c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
   2eb2c:	4801      	ldr	r0, [pc, #4]	; (2eb34 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
   2eb2e:	69c0      	ldr	r0, [r0, #28]
   2eb30:	4770      	bx	lr
   2eb32:	0000      	.short	0x0000
   2eb34:	20001268 	.word	0x20001268

0002eb38 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
   2eb38:	4801      	ldr	r0, [pc, #4]	; (2eb40 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
   2eb3a:	f890 0020 	ldrb.w	r0, [r0, #32]
   2eb3e:	4770      	bx	lr
   2eb40:	20001268 	.word	0x20001268

0002eb44 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
   2eb44:	4801      	ldr	r0, [pc, #4]	; (2eb4c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
   2eb46:	6980      	ldr	r0, [r0, #24]
   2eb48:	4770      	bx	lr
   2eb4a:	0000      	.short	0x0000
   2eb4c:	20001268 	.word	0x20001268

0002eb50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
   2eb50:	b510      	push	{r4, lr}
   2eb52:	f000 fbe3 	bl	2f31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
   2eb56:	f7ff fe63 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   2eb5a:	f004 fbab 	bl	332b4 <mpsl_fem_disable>
   2eb5e:	b130      	cbz	r0, 2eb6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
   2eb60:	1c40      	adds	r0, r0, #1
   2eb62:	d004      	beq.n	2eb6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
   2eb64:	f240 5165 	movw	r1, #1381	; 0x565
   2eb68:	203e      	movs	r0, #62	; 0x3e
   2eb6a:	f7f8 ff71 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2eb6e:	480f      	ldr	r0, [pc, #60]	; (2ebac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
   2eb70:	4a0f      	ldr	r2, [pc, #60]	; (2ebb0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
   2eb72:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2eb74:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
   2eb78:	6011      	str	r1, [r2, #0]
   2eb7a:	2400      	movs	r4, #0
   2eb7c:	6244      	str	r4, [r0, #36]	; 0x24
   2eb7e:	7304      	strb	r4, [r0, #12]
   2eb80:	61c4      	str	r4, [r0, #28]
   2eb82:	6184      	str	r4, [r0, #24]
   2eb84:	f000 fbca 	bl	2f31c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
   2eb88:	480a      	ldr	r0, [pc, #40]	; (2ebb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
   2eb8a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
   2eb8e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
   2eb92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
   2eb96:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
   2eb9a:	2001      	movs	r0, #1
   2eb9c:	f008 fb12 	bl	371c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   2eba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2eba4:	2001      	movs	r0, #1
   2eba6:	f008 bb00 	b.w	371aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   2ebaa:	0000      	.short	0x0000
   2ebac:	20001268 	.word	0x20001268
   2ebb0:	4001f508 	.word	0x4001f508
   2ebb4:	40008000 	.word	0x40008000

0002ebb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
   2ebb8:	b570      	push	{r4, r5, r6, lr}
   2ebba:	2001      	movs	r0, #1
   2ebbc:	f008 fb02 	bl	371c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
   2ebc0:	4c37      	ldr	r4, [pc, #220]	; (2eca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
   2ebc2:	2000      	movs	r0, #0
   2ebc4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   2ebc8:	2001      	movs	r0, #1
   2ebca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
   2ebce:	f008 fc68 	bl	374a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   2ebd2:	4d34      	ldr	r5, [pc, #208]	; (2eca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   2ebd4:	b118      	cbz	r0, 2ebde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
   2ebd6:	6828      	ldr	r0, [r5, #0]
   2ebd8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2ebdc:	6028      	str	r0, [r5, #0]
   2ebde:	f008 fc54 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   2ebe2:	b128      	cbz	r0, 2ebf0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
   2ebe4:	6828      	ldr	r0, [r5, #0]
   2ebe6:	4930      	ldr	r1, [pc, #192]	; (2eca8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
   2ebe8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
   2ebec:	4308      	orrs	r0, r1
   2ebee:	6028      	str	r0, [r5, #0]
   2ebf0:	f008 fc67 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   2ebf4:	b138      	cbz	r0, 2ec06 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
   2ebf6:	482b      	ldr	r0, [pc, #172]	; (2eca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   2ebf8:	1d00      	adds	r0, r0, #4
   2ebfa:	6801      	ldr	r1, [r0, #0]
   2ebfc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
   2ec00:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
   2ec04:	6001      	str	r1, [r0, #0]
   2ec06:	4927      	ldr	r1, [pc, #156]	; (2eca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   2ec08:	4828      	ldr	r0, [pc, #160]	; (2ecac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
   2ec0a:	313c      	adds	r1, #60	; 0x3c
   2ec0c:	6008      	str	r0, [r1, #0]
   2ec0e:	f004 fb8b 	bl	33328 <mpsl_fem_device_config_254_apply_get>
   2ec12:	b140      	cbz	r0, 2ec26 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   2ec14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   2ec18:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
   2ec1c:	1c41      	adds	r1, r0, #1
   2ec1e:	d002      	beq.n	2ec26 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
   2ec20:	4920      	ldr	r1, [pc, #128]	; (2eca4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
   2ec22:	3110      	adds	r1, #16
   2ec24:	6008      	str	r0, [r1, #0]
   2ec26:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   2ec2a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   2ec2c:	1c41      	adds	r1, r0, #1
   2ec2e:	d004      	beq.n	2ec3a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
   2ec30:	491f      	ldr	r1, [pc, #124]	; (2ecb0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
   2ec32:	680a      	ldr	r2, [r1, #0]
   2ec34:	f360 4217 	bfi	r2, r0, #16, #8
   2ec38:	600a      	str	r2, [r1, #0]
   2ec3a:	f240 1103 	movw	r1, #259	; 0x103
   2ec3e:	f240 605b 	movw	r0, #1627	; 0x65b
   2ec42:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
   2ec46:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   2ec4a:	2001      	movs	r0, #1
   2ec4c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
   2ec50:	f000 f842 	bl	2ecd8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
   2ec54:	f240 2001 	movw	r0, #513	; 0x201
   2ec58:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
   2ec5c:	2002      	movs	r0, #2
   2ec5e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   2ec62:	4914      	ldr	r1, [pc, #80]	; (2ecb4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
   2ec64:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
   2ec68:	6008      	str	r0, [r1, #0]
   2ec6a:	4913      	ldr	r1, [pc, #76]	; (2ecb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
   2ec6c:	2000      	movs	r0, #0
   2ec6e:	8608      	strh	r0, [r1, #48]	; 0x30
   2ec70:	3110      	adds	r1, #16
   2ec72:	61c8      	str	r0, [r1, #28]
   2ec74:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
   2ec78:	2001      	movs	r0, #1
   2ec7a:	f008 fa96 	bl	371aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
   2ec7e:	2010      	movs	r0, #16
   2ec80:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   2ec84:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   2ec88:	2002      	movs	r0, #2
   2ec8a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
   2ec8e:	480b      	ldr	r0, [pc, #44]	; (2ecbc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
   2ec90:	6800      	ldr	r0, [r0, #0]
   2ec92:	2800      	cmp	r0, #0
   2ec94:	d002      	beq.n	2ec9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
   2ec96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ec9a:	4700      	bx	r0
   2ec9c:	bd70      	pop	{r4, r5, r6, pc}
   2ec9e:	0000      	.short	0x0000
   2eca0:	40001000 	.word	0x40001000
   2eca4:	4000173c 	.word	0x4000173c
   2eca8:	80000096 	.word	0x80000096
   2ecac:	8900002c 	.word	0x8900002c
   2ecb0:	4000158c 	.word	0x4000158c
   2ecb4:	4001f504 	.word	0x4001f504
   2ecb8:	20001258 	.word	0x20001258
   2ecbc:	200002dc 	.word	0x200002dc

0002ecc0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
   2ecc0:	4901      	ldr	r1, [pc, #4]	; (2ecc8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
   2ecc2:	7548      	strb	r0, [r1, #21]
   2ecc4:	4770      	bx	lr
   2ecc6:	0000      	.short	0x0000
   2ecc8:	20001268 	.word	0x20001268

0002eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   2eccc:	4901      	ldr	r1, [pc, #4]	; (2ecd4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
   2ecce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   2ecd2:	4770      	bx	lr
   2ecd4:	0002f500 	.word	0x0002f500

0002ecd8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
   2ecd8:	4908      	ldr	r1, [pc, #32]	; (2ecfc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
   2ecda:	b510      	push	{r4, lr}
   2ecdc:	7508      	strb	r0, [r1, #20]
   2ecde:	4908      	ldr	r1, [pc, #32]	; (2ed00 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
   2ece0:	2801      	cmp	r0, #1
   2ece2:	d006      	beq.n	2ecf2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
   2ece4:	2802      	cmp	r0, #2
   2ece6:	d006      	beq.n	2ecf6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
   2ece8:	f640 516c 	movw	r1, #3436	; 0xd6c
   2ecec:	203e      	movs	r0, #62	; 0x3e
   2ecee:	f7f8 feaf 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ecf2:	2003      	movs	r0, #3
   2ecf4:	e000      	b.n	2ecf8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
   2ecf6:	2004      	movs	r0, #4
   2ecf8:	6008      	str	r0, [r1, #0]
   2ecfa:	bd10      	pop	{r4, pc}
   2ecfc:	20001268 	.word	0x20001268
   2ed00:	40001510 	.word	0x40001510

0002ed04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
   2ed04:	4905      	ldr	r1, [pc, #20]	; (2ed1c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
   2ed06:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   2ed0a:	4805      	ldr	r0, [pc, #20]	; (2ed20 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
   2ed0c:	f810 1f28 	ldrb.w	r1, [r0, #40]!
   2ed10:	f041 0101 	orr.w	r1, r1, #1
   2ed14:	7001      	strb	r1, [r0, #0]
   2ed16:	f000 ba13 	b.w	2f140 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
   2ed1a:	0000      	.short	0x0000
   2ed1c:	40001000 	.word	0x40001000
   2ed20:	20001268 	.word	0x20001268

0002ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   2ed24:	4901      	ldr	r1, [pc, #4]	; (2ed2c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
   2ed26:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   2ed2a:	4770      	bx	lr
   2ed2c:	0002f50c 	.word	0x0002f50c

0002ed30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
   2ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ed34:	4e30      	ldr	r6, [pc, #192]	; (2edf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
   2ed36:	4c31      	ldr	r4, [pc, #196]	; (2edfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
   2ed38:	4688      	mov	r8, r1
   2ed3a:	0007      	movs	r7, r0
   2ed3c:	4615      	mov	r5, r2
   2ed3e:	f04f 0901 	mov.w	r9, #1
   2ed42:	d006      	beq.n	2ed52 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
   2ed44:	2f01      	cmp	r7, #1
   2ed46:	d012      	beq.n	2ed6e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
   2ed48:	f640 0117 	movw	r1, #2071	; 0x817
   2ed4c:	203e      	movs	r0, #62	; 0x3e
   2ed4e:	f7f8 fe7f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ed52:	4610      	mov	r0, r2
   2ed54:	f000 fb88 	bl	2f468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
   2ed58:	4829      	ldr	r0, [pc, #164]	; (2ee00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
   2ed5a:	f884 9009 	strb.w	r9, [r4, #9]
   2ed5e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
   2ed62:	4640      	mov	r0, r8
   2ed64:	f000 fb2e 	bl	2f3c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
   2ed68:	4605      	mov	r5, r0
   2ed6a:	4630      	mov	r0, r6
   2ed6c:	e00c      	b.n	2ed88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
   2ed6e:	4610      	mov	r0, r2
   2ed70:	f000 fb60 	bl	2f434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
   2ed74:	2002      	movs	r0, #2
   2ed76:	7260      	strb	r0, [r4, #9]
   2ed78:	f649 71ba 	movw	r1, #40890	; 0x9fba
   2ed7c:	4640      	mov	r0, r8
   2ed7e:	f000 fb21 	bl	2f3c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
   2ed82:	4605      	mov	r5, r0
   2ed84:	481c      	ldr	r0, [pc, #112]	; (2edf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
   2ed86:	1d00      	adds	r0, r0, #4
   2ed88:	f000 fada 	bl	2f340 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
   2ed8c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2ee04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
   2ed90:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
   2ed94:	f8df a074 	ldr.w	sl, [pc, #116]	; 2ee0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
   2ed98:	481b      	ldr	r0, [pc, #108]	; (2ee08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
   2ed9a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
   2ed9e:	2010      	movs	r0, #16
   2eda0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
   2eda4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2eda6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
   2edaa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
   2edae:	6260      	str	r0, [r4, #36]	; 0x24
   2edb0:	4817      	ldr	r0, [pc, #92]	; (2ee10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
   2edb2:	6006      	str	r6, [r0, #0]
   2edb4:	f000 f9fe 	bl	2f1b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
   2edb8:	4641      	mov	r1, r8
   2edba:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
   2edbe:	4811      	ldr	r0, [pc, #68]	; (2ee04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
   2edc0:	300c      	adds	r0, #12
   2edc2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   2edc6:	42a8      	cmp	r0, r5
   2edc8:	d310      	bcc.n	2edec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
   2edca:	2000      	movs	r0, #0
   2edcc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2edd0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
   2edd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2edd6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   2edda:	6260      	str	r0, [r4, #36]	; 0x24
   2eddc:	480c      	ldr	r0, [pc, #48]	; (2ee10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
   2edde:	1d00      	adds	r0, r0, #4
   2ede0:	6006      	str	r6, [r0, #0]
   2ede2:	f7ff fd1d 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   2ede6:	2000      	movs	r0, #0
   2ede8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2edec:	4629      	mov	r1, r5
   2edee:	4638      	mov	r0, r7
   2edf0:	f000 fab2 	bl	2f358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
   2edf4:	2001      	movs	r0, #1
   2edf6:	e7f7      	b.n	2ede8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
   2edf8:	40001000 	.word	0x40001000
   2edfc:	20001268 	.word	0x20001268
   2ee00:	0002f4ac 	.word	0x0002f4ac
   2ee04:	40008000 	.word	0x40008000
   2ee08:	40008140 	.word	0x40008140
   2ee0c:	4001f098 	.word	0x4001f098
   2ee10:	4001f504 	.word	0x4001f504

0002ee14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
   2ee14:	4b0d      	ldr	r3, [pc, #52]	; (2ee4c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
   2ee16:	b510      	push	{r4, lr}
   2ee18:	71d8      	strb	r0, [r3, #7]
   2ee1a:	729a      	strb	r2, [r3, #10]
   2ee1c:	b151      	cbz	r1, 2ee34 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
   2ee1e:	2002      	movs	r0, #2
   2ee20:	7218      	strb	r0, [r3, #8]
   2ee22:	2801      	cmp	r0, #1
   2ee24:	d008      	beq.n	2ee38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
   2ee26:	2802      	cmp	r0, #2
   2ee28:	d00f      	beq.n	2ee4a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   2ee2a:	f640 2144 	movw	r1, #2628	; 0xa44
   2ee2e:	203e      	movs	r0, #62	; 0x3e
   2ee30:	f7f8 fe0e 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2ee34:	2001      	movs	r0, #1
   2ee36:	e7f3      	b.n	2ee20 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
   2ee38:	7a58      	ldrb	r0, [r3, #9]
   2ee3a:	2802      	cmp	r0, #2
   2ee3c:	d105      	bne.n	2ee4a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
   2ee3e:	f000 f943 	bl	2f0c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
   2ee42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ee46:	f000 ba51 	b.w	2f2ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
   2ee4a:	bd10      	pop	{r4, pc}
   2ee4c:	20001268 	.word	0x20001268

0002ee50 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
   2ee50:	4902      	ldr	r1, [pc, #8]	; (2ee5c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
   2ee52:	2000      	movs	r0, #0
   2ee54:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2ee58:	4770      	bx	lr
   2ee5a:	0000      	.short	0x0000
   2ee5c:	40008000 	.word	0x40008000

0002ee60 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
   2ee60:	4904      	ldr	r1, [pc, #16]	; (2ee74 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
   2ee62:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
   2ee66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2ee6a:	4249      	negs	r1, r1
   2ee6c:	7001      	strb	r1, [r0, #0]
   2ee6e:	2001      	movs	r0, #1
   2ee70:	4770      	bx	lr
   2ee72:	0000      	.short	0x0000
   2ee74:	40001000 	.word	0x40001000

0002ee78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
   2ee78:	4903      	ldr	r1, [pc, #12]	; (2ee88 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
   2ee7a:	0e02      	lsrs	r2, r0, #24
   2ee7c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
   2ee80:	0200      	lsls	r0, r0, #8
   2ee82:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
   2ee86:	4770      	bx	lr
   2ee88:	40001000 	.word	0x40001000

0002ee8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
   2ee8c:	4901      	ldr	r1, [pc, #4]	; (2ee94 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
   2ee8e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   2ee92:	4770      	bx	lr
   2ee94:	40001000 	.word	0x40001000

0002ee98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
   2ee98:	b510      	push	{r4, lr}
   2ee9a:	2200      	movs	r2, #0
   2ee9c:	2901      	cmp	r1, #1
   2ee9e:	d006      	beq.n	2eeae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
   2eea0:	2902      	cmp	r1, #2
   2eea2:	d002      	beq.n	2eeaa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
   2eea4:	f240 21d2 	movw	r1, #722	; 0x2d2
   2eea8:	e014      	b.n	2eed4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
   2eeaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2eeae:	490b      	ldr	r1, [pc, #44]	; (2eedc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
   2eeb0:	430a      	orrs	r2, r1
   2eeb2:	490b      	ldr	r1, [pc, #44]	; (2eee0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
   2eeb4:	600a      	str	r2, [r1, #0]
   2eeb6:	490b      	ldr	r1, [pc, #44]	; (2eee4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
   2eeb8:	4308      	orrs	r0, r1
   2eeba:	4909      	ldr	r1, [pc, #36]	; (2eee0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
   2eebc:	1d09      	adds	r1, r1, #4
   2eebe:	6008      	str	r0, [r1, #0]
   2eec0:	4809      	ldr	r0, [pc, #36]	; (2eee8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
   2eec2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   2eec6:	b2c0      	uxtb	r0, r0
   2eec8:	2803      	cmp	r0, #3
   2eeca:	d001      	beq.n	2eed0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
   2eecc:	280b      	cmp	r0, #11
   2eece:	d104      	bne.n	2eeda <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
   2eed0:	f240 21ea 	movw	r1, #746	; 0x2ea
   2eed4:	203e      	movs	r0, #62	; 0x3e
   2eed6:	f7f8 fdbb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2eeda:	bd10      	pop	{r4, pc}
   2eedc:	00100108 	.word	0x00100108
   2eee0:	40001514 	.word	0x40001514
   2eee4:	02030000 	.word	0x02030000
   2eee8:	40001000 	.word	0x40001000

0002eeec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
   2eeec:	4901      	ldr	r1, [pc, #4]	; (2eef4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
   2eeee:	7588      	strb	r0, [r1, #22]
   2eef0:	4770      	bx	lr
   2eef2:	0000      	.short	0x0000
   2eef4:	20001268 	.word	0x20001268

0002eef8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
   2eef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eefc:	4851      	ldr	r0, [pc, #324]	; (2f044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
   2eefe:	f04f 0a01 	mov.w	sl, #1
   2ef02:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
   2ef06:	484f      	ldr	r0, [pc, #316]	; (2f044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
   2ef08:	300c      	adds	r0, #12
   2ef0a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
   2ef0e:	f008 f9b0 	bl	37272 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
   2ef12:	4c4d      	ldr	r4, [pc, #308]	; (2f048 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
   2ef14:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
   2ef18:	f000 f8e0 	bl	2f0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
   2ef1c:	494b      	ldr	r1, [pc, #300]	; (2f04c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
   2ef1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2ef20:	6008      	str	r0, [r1, #0]
   2ef22:	f8df 812c 	ldr.w	r8, [pc, #300]	; 2f050 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
   2ef26:	2000      	movs	r0, #0
   2ef28:	6260      	str	r0, [r4, #36]	; 0x24
   2ef2a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
   2ef2e:	f240 131d 	movw	r3, #285	; 0x11d
   2ef32:	439a      	bics	r2, r3
   2ef34:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
   2ef38:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
   2ef3c:	f000 f94e 	bl	2f1dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
   2ef40:	4605      	mov	r5, r0
   2ef42:	4840      	ldr	r0, [pc, #256]	; (2f044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
   2ef44:	3008      	adds	r0, #8
   2ef46:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   2ef4a:	4e3e      	ldr	r6, [pc, #248]	; (2f044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
   2ef4c:	61e0      	str	r0, [r4, #28]
   2ef4e:	1d36      	adds	r6, r6, #4
   2ef50:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
   2ef54:	61a0      	str	r0, [r4, #24]
   2ef56:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   2ef5a:	7d21      	ldrb	r1, [r4, #20]
   2ef5c:	f884 1020 	strb.w	r1, [r4, #32]
   2ef60:	7a61      	ldrb	r1, [r4, #9]
   2ef62:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
   2ef66:	46a1      	mov	r9, r4
   2ef68:	2400      	movs	r4, #0
   2ef6a:	4639      	mov	r1, r7
   2ef6c:	4628      	mov	r0, r5
   2ef6e:	f000 f983 	bl	2f278 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
   2ef72:	b910      	cbnz	r0, 2ef7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
   2ef74:	f8c8 a010 	str.w	sl, [r8, #16]
   2ef78:	2401      	movs	r4, #1
   2ef7a:	4f33      	ldr	r7, [pc, #204]	; (2f048 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
   2ef7c:	07e8      	lsls	r0, r5, #31
   2ef7e:	f1a7 0710 	sub.w	r7, r7, #16
   2ef82:	d120      	bne.n	2efc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
   2ef84:	07a8      	lsls	r0, r5, #30
   2ef86:	d527      	bpl.n	2efd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
   2ef88:	f008 fa9b 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   2ef8c:	b9f0      	cbnz	r0, 2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2ef8e:	f008 fa88 	bl	374a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   2ef92:	b9d8      	cbnz	r0, 2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2ef94:	482f      	ldr	r0, [pc, #188]	; (2f054 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
   2ef96:	6800      	ldr	r0, [r0, #0]
   2ef98:	f3c0 5c42 	ubfx	ip, r0, #21, #3
   2ef9c:	f3c0 6300 	ubfx	r3, r0, #24, #1
   2efa0:	f000 020f 	and.w	r2, r0, #15
   2efa4:	f3c0 1103 	ubfx	r1, r0, #4, #4
   2efa8:	f3c0 2803 	ubfx	r8, r0, #8, #4
   2efac:	b173      	cbz	r3, 2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2efae:	b11a      	cbz	r2, 2efb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
   2efb0:	b111      	cbz	r1, 2efb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
   2efb2:	f1b8 0f00 	cmp.w	r8, #0
   2efb6:	d109      	bne.n	2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2efb8:	f3c0 4004 	ubfx	r0, r0, #16, #5
   2efbc:	2801      	cmp	r0, #1
   2efbe:	d105      	bne.n	2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2efc0:	f1bc 0f03 	cmp.w	ip, #3
   2efc4:	d202      	bcs.n	2efcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
   2efc6:	6838      	ldr	r0, [r7, #0]
   2efc8:	4780      	blx	r0
   2efca:	e00e      	b.n	2efea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
   2efcc:	f345 0080 	sbfx	r0, r5, #2, #1
   2efd0:	4621      	mov	r1, r4
   2efd2:	1c40      	adds	r0, r0, #1
   2efd4:	687a      	ldr	r2, [r7, #4]
   2efd6:	e007      	b.n	2efe8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
   2efd8:	f015 0f28 	tst.w	r5, #40	; 0x28
   2efdc:	d005      	beq.n	2efea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
   2efde:	f345 1140 	sbfx	r1, r5, #5, #1
   2efe2:	68ba      	ldr	r2, [r7, #8]
   2efe4:	4620      	mov	r0, r4
   2efe6:	1c49      	adds	r1, r1, #1
   2efe8:	4790      	blx	r2
   2efea:	06e8      	lsls	r0, r5, #27
   2efec:	d501      	bpl.n	2eff2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
   2efee:	68f8      	ldr	r0, [r7, #12]
   2eff0:	4780      	blx	r0
   2eff2:	f899 1009 	ldrb.w	r1, [r9, #9]
   2eff6:	4648      	mov	r0, r9
   2eff8:	2902      	cmp	r1, #2
   2effa:	d120      	bne.n	2f03e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
   2effc:	7b01      	ldrb	r1, [r0, #12]
   2effe:	2900      	cmp	r1, #0
   2f000:	d01d      	beq.n	2f03e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
   2f002:	2902      	cmp	r1, #2
   2f004:	d004      	beq.n	2f010 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
   2f006:	2901      	cmp	r1, #1
   2f008:	d009      	beq.n	2f01e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
   2f00a:	f640 4156 	movw	r1, #3158	; 0xc56
   2f00e:	e00d      	b.n	2f02c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
   2f010:	69c1      	ldr	r1, [r0, #28]
   2f012:	f8d9 0010 	ldr.w	r0, [r9, #16]
   2f016:	4408      	add	r0, r1
   2f018:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
   2f01c:	e00b      	b.n	2f036 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
   2f01e:	6901      	ldr	r1, [r0, #16]
   2f020:	f8d9 001c 	ldr.w	r0, [r9, #28]
   2f024:	4281      	cmp	r1, r0
   2f026:	d804      	bhi.n	2f032 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
   2f028:	f640 4157 	movw	r1, #3159	; 0xc57
   2f02c:	203e      	movs	r0, #62	; 0x3e
   2f02e:	f7f8 fd0f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f032:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
   2f036:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f03a:	f000 b961 	b.w	2f300 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
   2f03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f042:	0000      	.short	0x0000
   2f044:	40008000 	.word	0x40008000
   2f048:	20001268 	.word	0x20001268
   2f04c:	4001f508 	.word	0x4001f508
   2f050:	40001000 	.word	0x40001000
   2f054:	40001450 	.word	0x40001450
   2f058:	480b      	ldr	r0, [pc, #44]	; (2f088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
   2f05a:	7d81      	ldrb	r1, [r0, #22]
   2f05c:	480b      	ldr	r0, [pc, #44]	; (2f08c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
   2f05e:	5c40      	ldrb	r0, [r0, r1]
   2f060:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   2f064:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   2f068:	d204      	bcs.n	2f074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
   2f06a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
   2f06e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2f072:	e001      	b.n	2f078 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
   2f074:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
   2f078:	4a05      	ldr	r2, [pc, #20]	; (2f090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
   2f07a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
   2f07e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
   2f082:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
   2f086:	4770      	bx	lr
   2f088:	20001268 	.word	0x20001268
   2f08c:	0002f4b2 	.word	0x0002f4b2
   2f090:	40001000 	.word	0x40001000
   2f094:	b508      	push	{r3, lr}
   2f096:	490b      	ldr	r1, [pc, #44]	; (2f0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
   2f098:	466b      	mov	r3, sp
   2f09a:	f991 2015 	ldrsb.w	r2, [r1, #21]
   2f09e:	7d89      	ldrb	r1, [r1, #22]
   2f0a0:	f000 faaa 	bl	2f5f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
   2f0a4:	f99d 0000 	ldrsb.w	r0, [sp]
   2f0a8:	f000 fa7a 	bl	2f5a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
   2f0ac:	f10d 0001 	add.w	r0, sp, #1
   2f0b0:	f004 f924 	bl	332fc <mpsl_fem_pa_gain_set>
   2f0b4:	2800      	cmp	r0, #0
   2f0b6:	d004      	beq.n	2f0c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
   2f0b8:	f240 51e6 	movw	r1, #1510	; 0x5e6
   2f0bc:	203e      	movs	r0, #62	; 0x3e
   2f0be:	f7f8 fcc7 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f0c2:	bd08      	pop	{r3, pc}
   2f0c4:	20001268 	.word	0x20001268
   2f0c8:	4803      	ldr	r0, [pc, #12]	; (2f0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
   2f0ca:	7a01      	ldrb	r1, [r0, #8]
   2f0cc:	2901      	cmp	r1, #1
   2f0ce:	d102      	bne.n	2f0d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
   2f0d0:	7a80      	ldrb	r0, [r0, #10]
   2f0d2:	f7ff bfdf 	b.w	2f094 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
   2f0d6:	4770      	bx	lr
   2f0d8:	20001268 	.word	0x20001268
   2f0dc:	480d      	ldr	r0, [pc, #52]	; (2f114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
   2f0de:	b510      	push	{r4, lr}
   2f0e0:	7a40      	ldrb	r0, [r0, #9]
   2f0e2:	2801      	cmp	r0, #1
   2f0e4:	d00c      	beq.n	2f100 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
   2f0e6:	2802      	cmp	r0, #2
   2f0e8:	d113      	bne.n	2f112 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
   2f0ea:	f004 f8e9 	bl	332c0 <mpsl_fem_lna_configuration_clear>
   2f0ee:	2800      	cmp	r0, #0
   2f0f0:	d00f      	beq.n	2f112 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
   2f0f2:	1c40      	adds	r0, r0, #1
   2f0f4:	d00d      	beq.n	2f112 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
   2f0f6:	f640 01ab 	movw	r1, #2219	; 0x8ab
   2f0fa:	203e      	movs	r0, #62	; 0x3e
   2f0fc:	f7f8 fca8 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f100:	f004 f8f0 	bl	332e4 <mpsl_fem_pa_configuration_clear>
   2f104:	2800      	cmp	r0, #0
   2f106:	d004      	beq.n	2f112 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
   2f108:	1c40      	adds	r0, r0, #1
   2f10a:	d002      	beq.n	2f112 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
   2f10c:	f640 01a5 	movw	r1, #2213	; 0x8a5
   2f110:	e7f3      	b.n	2f0fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
   2f112:	bd10      	pop	{r4, pc}
   2f114:	20001268 	.word	0x20001268
   2f118:	4808      	ldr	r0, [pc, #32]	; (2f13c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
   2f11a:	2100      	movs	r1, #0
   2f11c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   2f120:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
   2f124:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
   2f128:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   2f12c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   2f130:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
   2f134:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   2f138:	4770      	bx	lr
   2f13a:	0000      	.short	0x0000
   2f13c:	40001000 	.word	0x40001000
   2f140:	4818      	ldr	r0, [pc, #96]	; (2f1a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
   2f142:	b510      	push	{r4, lr}
   2f144:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   2f148:	07c1      	lsls	r1, r0, #31
   2f14a:	d029      	beq.n	2f1a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
   2f14c:	0781      	lsls	r1, r0, #30
   2f14e:	d514      	bpl.n	2f17a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
   2f150:	4815      	ldr	r0, [pc, #84]	; (2f1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
   2f152:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   2f156:	f041 0101 	orr.w	r1, r1, #1
   2f15a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   2f15e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
   2f162:	b2c0      	uxtb	r0, r0
   2f164:	280b      	cmp	r0, #11
   2f166:	d005      	beq.n	2f174 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
   2f168:	280a      	cmp	r0, #10
   2f16a:	d003      	beq.n	2f174 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
   2f16c:	2803      	cmp	r0, #3
   2f16e:	d001      	beq.n	2f174 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
   2f170:	2802      	cmp	r0, #2
   2f172:	d115      	bne.n	2f1a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
   2f174:	f240 610f 	movw	r1, #1551	; 0x60f
   2f178:	e00f      	b.n	2f19a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
   2f17a:	0740      	lsls	r0, r0, #29
   2f17c:	d510      	bpl.n	2f1a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
   2f17e:	480a      	ldr	r0, [pc, #40]	; (2f1a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
   2f180:	490a      	ldr	r1, [pc, #40]	; (2f1ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
   2f182:	3008      	adds	r0, #8
   2f184:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   2f188:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2f18c:	4808      	ldr	r0, [pc, #32]	; (2f1b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
   2f18e:	f008 f82f 	bl	371f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
   2f192:	2800      	cmp	r0, #0
   2f194:	d004      	beq.n	2f1a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
   2f196:	f240 6117 	movw	r1, #1559	; 0x617
   2f19a:	203e      	movs	r0, #62	; 0x3e
   2f19c:	f7f8 fc58 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f1a0:	bd10      	pop	{r4, pc}
   2f1a2:	0000      	.short	0x0000
   2f1a4:	20001268 	.word	0x20001268
   2f1a8:	40001000 	.word	0x40001000
   2f1ac:	4001f098 	.word	0x4001f098
   2f1b0:	40008000 	.word	0x40008000
   2f1b4:	4808      	ldr	r0, [pc, #32]	; (2f1d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
   2f1b6:	4601      	mov	r1, r0
   2f1b8:	79c2      	ldrb	r2, [r0, #7]
   2f1ba:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   2f1be:	b112      	cbz	r2, 2f1c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
   2f1c0:	2a01      	cmp	r2, #1
   2f1c2:	d003      	beq.n	2f1cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
   2f1c4:	e006      	b.n	2f1d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
   2f1c6:	f041 0102 	orr.w	r1, r1, #2
   2f1ca:	e001      	b.n	2f1d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
   2f1cc:	f041 0104 	orr.w	r1, r1, #4
   2f1d0:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
   2f1d4:	f7ff bfb4 	b.w	2f140 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
   2f1d8:	20001268 	.word	0x20001268
   2f1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f1e0:	4d22      	ldr	r5, [pc, #136]	; (2f26c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
   2f1e2:	2400      	movs	r4, #0
   2f1e4:	7b28      	ldrb	r0, [r5, #12]
   2f1e6:	b138      	cbz	r0, 2f1f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
   2f1e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
   2f1ec:	4820      	ldr	r0, [pc, #128]	; (2f270 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
   2f1ee:	f007 ffff 	bl	371f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
   2f1f2:	b108      	cbz	r0, 2f1f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
   2f1f4:	2701      	movs	r7, #1
   2f1f6:	e000      	b.n	2f1fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
   2f1f8:	2700      	movs	r7, #0
   2f1fa:	7a68      	ldrb	r0, [r5, #9]
   2f1fc:	4e1d      	ldr	r6, [pc, #116]	; (2f274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
   2f1fe:	f44f 7186 	mov.w	r1, #268	; 0x10c
   2f202:	2801      	cmp	r0, #1
   2f204:	d002      	beq.n	2f20c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
   2f206:	2802      	cmp	r0, #2
   2f208:	d006      	beq.n	2f218 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
   2f20a:	e016      	b.n	2f23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
   2f20c:	4630      	mov	r0, r6
   2f20e:	f007 ffea 	bl	371e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
   2f212:	b190      	cbz	r0, 2f23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
   2f214:	2408      	movs	r4, #8
   2f216:	e010      	b.n	2f23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
   2f218:	4630      	mov	r0, r6
   2f21a:	f007 ffe4 	bl	371e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
   2f21e:	b100      	cbz	r0, 2f222 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
   2f220:	2402      	movs	r4, #2
   2f222:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
   2f226:	43c0      	mvns	r0, r0
   2f228:	f340 0000 	sbfx	r0, r0, #0, #1
   2f22c:	1c40      	adds	r0, r0, #1
   2f22e:	d101      	bne.n	2f234 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
   2f230:	f044 0404 	orr.w	r4, r4, #4
   2f234:	b10f      	cbz	r7, 2f23a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
   2f236:	f044 0401 	orr.w	r4, r4, #1
   2f23a:	f014 0f0b 	tst.w	r4, #11
   2f23e:	d107      	bne.n	2f250 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
   2f240:	f44f 7188 	mov.w	r1, #272	; 0x110
   2f244:	4630      	mov	r0, r6
   2f246:	f007 ffce 	bl	371e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
   2f24a:	b108      	cbz	r0, 2f250 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
   2f24c:	f044 0410 	orr.w	r4, r4, #16
   2f250:	f7ff ff62 	bl	2f118 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
   2f254:	06e0      	lsls	r0, r4, #27
   2f256:	d506      	bpl.n	2f266 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
   2f258:	0720      	lsls	r0, r4, #28
   2f25a:	d404      	bmi.n	2f266 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
   2f25c:	7a68      	ldrb	r0, [r5, #9]
   2f25e:	2801      	cmp	r0, #1
   2f260:	d101      	bne.n	2f266 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
   2f262:	f044 0420 	orr.w	r4, r4, #32
   2f266:	4620      	mov	r0, r4
   2f268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f26c:	20001268 	.word	0x20001268
   2f270:	40008000 	.word	0x40008000
   2f274:	40001000 	.word	0x40001000
   2f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f27c:	4c1a      	ldr	r4, [pc, #104]	; (2f2e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
   2f27e:	460d      	mov	r5, r1
   2f280:	7a21      	ldrb	r1, [r4, #8]
   2f282:	b129      	cbz	r1, 2f290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
   2f284:	f010 0f11 	tst.w	r0, #17
   2f288:	d007      	beq.n	2f29a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
   2f28a:	f7ff fac9 	bl	2e820 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
   2f28e:	e024      	b.n	2f2da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
   2f290:	f000 f890 	bl	2f3b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
   2f294:	2000      	movs	r0, #0
   2f296:	7320      	strb	r0, [r4, #12]
   2f298:	e01f      	b.n	2f2da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
   2f29a:	2901      	cmp	r1, #1
   2f29c:	d001      	beq.n	2f2a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
   2f29e:	2601      	movs	r6, #1
   2f2a0:	e000      	b.n	2f2a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
   2f2a2:	2600      	movs	r6, #0
   2f2a4:	79e0      	ldrb	r0, [r4, #7]
   2f2a6:	2801      	cmp	r0, #1
   2f2a8:	d00e      	beq.n	2f2c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
   2f2aa:	2700      	movs	r7, #0
   2f2ac:	f000 f882 	bl	2f3b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
   2f2b0:	2196      	movs	r1, #150	; 0x96
   2f2b2:	4630      	mov	r0, r6
   2f2b4:	f000 f894 	bl	2f3e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
   2f2b8:	4601      	mov	r1, r0
   2f2ba:	b14f      	cbz	r7, 2f2d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
   2f2bc:	353b      	adds	r5, #59	; 0x3b
   2f2be:	428d      	cmp	r5, r1
   2f2c0:	d904      	bls.n	2f2cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
   2f2c2:	2000      	movs	r0, #0
   2f2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f2c8:	2701      	movs	r7, #1
   2f2ca:	e7ef      	b.n	2f2ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
   2f2cc:	2001      	movs	r0, #1
   2f2ce:	71e0      	strb	r0, [r4, #7]
   2f2d0:	7aa2      	ldrb	r2, [r4, #10]
   2f2d2:	4630      	mov	r0, r6
   2f2d4:	f7ff fd2c 	bl	2ed30 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
   2f2d8:	b108      	cbz	r0, 2f2de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
   2f2da:	2001      	movs	r0, #1
   2f2dc:	e7f2      	b.n	2f2c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
   2f2de:	f640 21a5 	movw	r1, #2725	; 0xaa5
   2f2e2:	203e      	movs	r0, #62	; 0x3e
   2f2e4:	f7f8 fbb4 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f2e8:	20001268 	.word	0x20001268
   2f2ec:	4803      	ldr	r0, [pc, #12]	; (2f2fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
   2f2ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
   2f2f2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
   2f2f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   2f2fa:	4770      	bx	lr
   2f2fc:	40001000 	.word	0x40001000
   2f300:	4804      	ldr	r0, [pc, #16]	; (2f314 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
   2f302:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2f304:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   2f308:	6241      	str	r1, [r0, #36]	; 0x24
   2f30a:	4903      	ldr	r1, [pc, #12]	; (2f318 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
   2f30c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2f310:	6008      	str	r0, [r1, #0]
   2f312:	4770      	bx	lr
   2f314:	20001268 	.word	0x20001268
   2f318:	4001f504 	.word	0x4001f504
   2f31c:	4a07      	ldr	r2, [pc, #28]	; (2f33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   2f31e:	2000      	movs	r0, #0
   2f320:	3208      	adds	r2, #8
   2f322:	4906      	ldr	r1, [pc, #24]	; (2f33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   2f324:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   2f328:	1d0a      	adds	r2, r1, #4
   2f32a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   2f32e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2f332:	4902      	ldr	r1, [pc, #8]	; (2f33c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
   2f334:	310c      	adds	r1, #12
   2f336:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2f33a:	4770      	bx	lr
   2f33c:	40008000 	.word	0x40008000
   2f340:	4903      	ldr	r1, [pc, #12]	; (2f350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
   2f342:	79c9      	ldrb	r1, [r1, #7]
   2f344:	2900      	cmp	r1, #0
   2f346:	d102      	bne.n	2f34e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
   2f348:	4902      	ldr	r1, [pc, #8]	; (2f354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
   2f34a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
   2f34e:	4770      	bx	lr
   2f350:	20001268 	.word	0x20001268
   2f354:	4001f098 	.word	0x4001f098
   2f358:	b510      	push	{r4, lr}
   2f35a:	4a14      	ldr	r2, [pc, #80]	; (2f3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
   2f35c:	b120      	cbz	r0, 2f368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
   2f35e:	2801      	cmp	r0, #1
   2f360:	d011      	beq.n	2f386 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
   2f362:	f240 7153 	movw	r1, #1875	; 0x753
   2f366:	e01c      	b.n	2f3a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
   2f368:	f101 0028 	add.w	r0, r1, #40	; 0x28
   2f36c:	e9c2 1002 	strd	r1, r0, [r2, #8]
   2f370:	490f      	ldr	r1, [pc, #60]	; (2f3b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
   2f372:	480e      	ldr	r0, [pc, #56]	; (2f3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
   2f374:	f003 ffbc 	bl	332f0 <mpsl_fem_pa_configuration_set>
   2f378:	2800      	cmp	r0, #0
   2f37a:	d015      	beq.n	2f3a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
   2f37c:	1c40      	adds	r0, r0, #1
   2f37e:	d013      	beq.n	2f3a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
   2f380:	f240 7142 	movw	r1, #1858	; 0x742
   2f384:	e00d      	b.n	2f3a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
   2f386:	f101 0029 	add.w	r0, r1, #41	; 0x29
   2f38a:	e9c2 1002 	strd	r1, r0, [r2, #8]
   2f38e:	4908      	ldr	r1, [pc, #32]	; (2f3b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
   2f390:	4806      	ldr	r0, [pc, #24]	; (2f3ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
   2f392:	f003 ff9b 	bl	332cc <mpsl_fem_lna_configuration_set>
   2f396:	2800      	cmp	r0, #0
   2f398:	d006      	beq.n	2f3a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
   2f39a:	1c40      	adds	r0, r0, #1
   2f39c:	d004      	beq.n	2f3a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
   2f39e:	f240 714f 	movw	r1, #1871	; 0x74f
   2f3a2:	203e      	movs	r0, #62	; 0x3e
   2f3a4:	f7f8 fb54 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f3a8:	bd10      	pop	{r4, pc}
   2f3aa:	0000      	.short	0x0000
   2f3ac:	200002e0 	.word	0x200002e0
   2f3b0:	0002f4dc 	.word	0x0002f4dc
   2f3b4:	4802      	ldr	r0, [pc, #8]	; (2f3c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
   2f3b6:	2100      	movs	r1, #0
   2f3b8:	71c1      	strb	r1, [r0, #7]
   2f3ba:	7201      	strb	r1, [r0, #8]
   2f3bc:	7241      	strb	r1, [r0, #9]
   2f3be:	4770      	bx	lr
   2f3c0:	20001268 	.word	0x20001268
   2f3c4:	4a05      	ldr	r2, [pc, #20]	; (2f3dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
   2f3c6:	79d2      	ldrb	r2, [r2, #7]
   2f3c8:	2a01      	cmp	r2, #1
   2f3ca:	d006      	beq.n	2f3da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
   2f3cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f3d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
   2f3d4:	fbb1 f1f2 	udiv	r1, r1, r2
   2f3d8:	1a40      	subs	r0, r0, r1
   2f3da:	4770      	bx	lr
   2f3dc:	20001268 	.word	0x20001268
   2f3e0:	b570      	push	{r4, r5, r6, lr}
   2f3e2:	4c13      	ldr	r4, [pc, #76]	; (2f430 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
   2f3e4:	4603      	mov	r3, r0
   2f3e6:	460d      	mov	r5, r1
   2f3e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   2f3ec:	2000      	movs	r0, #0
   2f3ee:	b15a      	cbz	r2, 2f408 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
   2f3f0:	4621      	mov	r1, r4
   2f3f2:	f891 1020 	ldrb.w	r1, [r1, #32]
   2f3f6:	b163      	cbz	r3, 2f412 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
   2f3f8:	2b01      	cmp	r3, #1
   2f3fa:	d111      	bne.n	2f420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
   2f3fc:	2a01      	cmp	r2, #1
   2f3fe:	4628      	mov	r0, r5
   2f400:	d012      	beq.n	2f428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
   2f402:	f007 fefa 	bl	371fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
   2f406:	e009      	b.n	2f41c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
   2f408:	f640 0158 	movw	r1, #2136	; 0x858
   2f40c:	203e      	movs	r0, #62	; 0x3e
   2f40e:	f7f8 fb1f 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f412:	2a01      	cmp	r2, #1
   2f414:	4628      	mov	r0, r5
   2f416:	d004      	beq.n	2f422 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
   2f418:	f007 fefd 	bl	37216 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
   2f41c:	69e1      	ldr	r1, [r4, #28]
   2f41e:	4408      	add	r0, r1
   2f420:	bd70      	pop	{r4, r5, r6, pc}
   2f422:	f000 f8d1 	bl	2f5c8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
   2f426:	e7f9      	b.n	2f41c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
   2f428:	f000 f8c0 	bl	2f5ac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
   2f42c:	e7f6      	b.n	2f41c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
   2f42e:	0000      	.short	0x0000
   2f430:	20001268 	.word	0x20001268
   2f434:	b510      	push	{r4, lr}
   2f436:	f7ff fc4f 	bl	2ecd8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
   2f43a:	f7ff fe0d 	bl	2f058 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
   2f43e:	f7ff fe43 	bl	2f0c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
   2f442:	f7ff ff53 	bl	2f2ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
   2f446:	f008 f83c 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   2f44a:	2800      	cmp	r0, #0
   2f44c:	d108      	bne.n	2f460 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
   2f44e:	f008 f828 	bl	374a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
   2f452:	2800      	cmp	r0, #0
   2f454:	d104      	bne.n	2f460 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
   2f456:	4803      	ldr	r0, [pc, #12]	; (2f464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
   2f458:	6801      	ldr	r1, [r0, #0]
   2f45a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
   2f45e:	6001      	str	r1, [r0, #0]
   2f460:	bd10      	pop	{r4, pc}
   2f462:	0000      	.short	0x0000
   2f464:	40001568 	.word	0x40001568
   2f468:	b510      	push	{r4, lr}
   2f46a:	4604      	mov	r4, r0
   2f46c:	f7ff fc34 	bl	2ecd8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
   2f470:	f7ff fdf2 	bl	2f058 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
   2f474:	4620      	mov	r0, r4
   2f476:	f7ff fe0d 	bl	2f094 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
   2f47a:	f008 f822 	bl	374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
   2f47e:	2800      	cmp	r0, #0
   2f480:	d00d      	beq.n	2f49e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
   2f482:	4a09      	ldr	r2, [pc, #36]	; (2f4a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
   2f484:	6811      	ldr	r1, [r2, #0]
   2f486:	0650      	lsls	r0, r2, #25
   2f488:	2c02      	cmp	r4, #2
   2f48a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
   2f48e:	d007      	beq.n	2f4a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
   2f490:	f3c0 2006 	ubfx	r0, r0, #8, #7
   2f494:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
   2f498:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   2f49c:	6010      	str	r0, [r2, #0]
   2f49e:	bd10      	pop	{r4, pc}
   2f4a0:	f3c0 6006 	ubfx	r0, r0, #24, #7
   2f4a4:	e7f6      	b.n	2f494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
   2f4a6:	0000      	.short	0x0000
   2f4a8:	40001588 	.word	0x40001588
   2f4ac:	a62c0000 	.word	0xa62c0000
   2f4b0:	0604a1e0 	.word	0x0604a1e0
   2f4b4:	0e0c0a08 	.word	0x0e0c0a08
   2f4b8:	16141210 	.word	0x16141210
   2f4bc:	201e1c18 	.word	0x201e1c18
   2f4c0:	28262422 	.word	0x28262422
   2f4c4:	302e2c2a 	.word	0x302e2c2a
   2f4c8:	38363432 	.word	0x38363432
   2f4cc:	403e3c3a 	.word	0x403e3c3a
   2f4d0:	48464442 	.word	0x48464442
   2f4d4:	024e4c4a 	.word	0x024e4c4a
   2f4d8:	0000501a 	.word	0x0000501a
   2f4dc:	00000001 	.word	0x00000001
   2f4e0:	40001110 	.word	0x40001110
	...
   2f4f8:	00001e14 	.word	0x00001e14
   2f4fc:	00001130 	.word	0x00001130
   2f500:	00000000 	.word	0x00000000
   2f504:	00000028 	.word	0x00000028
   2f508:	00000018 	.word	0x00000018
   2f50c:	00000000 	.word	0x00000000
   2f510:	00001e14 	.word	0x00001e14
   2f514:	00001130 	.word	0x00001130
   2f518:	00000000 	.word	0x00000000
   2f51c:	00001770 	.word	0x00001770
   2f520:	00000fa0 	.word	0x00000fa0

0002f524 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   2f524:	b570      	push	{r4, r5, r6, lr}
   2f526:	4605      	mov	r5, r0
   2f528:	4614      	mov	r4, r2
   2f52a:	4608      	mov	r0, r1
   2f52c:	f7ff fbfa 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   2f530:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   2f534:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   2f538:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
   2f53c:	4807      	ldr	r0, [pc, #28]	; (2f55c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
   2f53e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2f542:	4408      	add	r0, r1
   2f544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2f548:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   2f54c:	fbb0 f5f1 	udiv	r5, r0, r1
   2f550:	4620      	mov	r0, r4
   2f552:	f7ff fbbb 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2f556:	4428      	add	r0, r5
   2f558:	1d40      	adds	r0, r0, #5
   2f55a:	bd70      	pop	{r4, r5, r6, pc}
   2f55c:	0002f5ec 	.word	0x0002f5ec

0002f560 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   2f560:	b570      	push	{r4, r5, r6, lr}
   2f562:	4d0e      	ldr	r5, [pc, #56]	; (2f59c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
   2f564:	461c      	mov	r4, r3
   2f566:	3d08      	subs	r5, #8
   2f568:	4b0c      	ldr	r3, [pc, #48]	; (2f59c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
   2f56a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
   2f56e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   2f572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2f576:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
   2f57a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   2f57e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
   2f582:	4418      	add	r0, r3
   2f584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2f588:	fbb0 f5f1 	udiv	r5, r0, r1
   2f58c:	4610      	mov	r0, r2
   2f58e:	f7ff fb9d 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   2f592:	4428      	add	r0, r5
   2f594:	4420      	add	r0, r4
   2f596:	1d40      	adds	r0, r0, #5
   2f598:	bd70      	pop	{r4, r5, r6, pc}
   2f59a:	0000      	.short	0x0000
   2f59c:	0002f5ec 	.word	0x0002f5ec

0002f5a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
   2f5a0:	4901      	ldr	r1, [pc, #4]	; (2f5a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
   2f5a2:	b2c0      	uxtb	r0, r0
   2f5a4:	6008      	str	r0, [r1, #0]
   2f5a6:	4770      	bx	lr
   2f5a8:	4000150c 	.word	0x4000150c

0002f5ac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   2f5ac:	4a05      	ldr	r2, [pc, #20]	; (2f5c4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
   2f5ae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   2f5b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f5b6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   2f5ba:	fbb1 f1f2 	udiv	r1, r1, r2
   2f5be:	4408      	add	r0, r1
   2f5c0:	1e80      	subs	r0, r0, #2
   2f5c2:	4770      	bx	lr
   2f5c4:	0002f5e4 	.word	0x0002f5e4

0002f5c8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   2f5c8:	4a05      	ldr	r2, [pc, #20]	; (2f5e0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
   2f5ca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   2f5ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f5d2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   2f5d6:	fbb1 f1f2 	udiv	r1, r1, r2
   2f5da:	4408      	add	r0, r1
   2f5dc:	4770      	bx	lr
   2f5de:	0000      	.short	0x0000
   2f5e0:	0002f5e4 	.word	0x0002f5e4
   2f5e4:	05dc0000 	.word	0x05dc0000
   2f5e8:	000003e8 	.word	0x000003e8
   2f5ec:	00000000 	.word	0x00000000
   2f5f0:	00001e14 	.word	0x00001e14
   2f5f4:	00001130 	.word	0x00001130

0002f5f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
   2f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f5fc:	461e      	mov	r6, r3
   2f5fe:	4617      	mov	r7, r2
   2f600:	460c      	mov	r4, r1
   2f602:	4605      	mov	r5, r0
   2f604:	f000 f856 	bl	2f6b4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
   2f608:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2f6b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
   2f60c:	4680      	mov	r8, r0
   2f60e:	f899 0000 	ldrb.w	r0, [r9]
   2f612:	42a8      	cmp	r0, r5
   2f614:	d110      	bne.n	2f638 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
   2f616:	f899 1001 	ldrb.w	r1, [r9, #1]
   2f61a:	4648      	mov	r0, r9
   2f61c:	42a1      	cmp	r1, r4
   2f61e:	d10b      	bne.n	2f638 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
   2f620:	f990 1002 	ldrsb.w	r1, [r0, #2]
   2f624:	42b9      	cmp	r1, r7
   2f626:	d107      	bne.n	2f638 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
   2f628:	78c2      	ldrb	r2, [r0, #3]
   2f62a:	4542      	cmp	r2, r8
   2f62c:	d104      	bne.n	2f638 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
   2f62e:	8881      	ldrh	r1, [r0, #4]
   2f630:	8031      	strh	r1, [r6, #0]
   2f632:	7980      	ldrb	r0, [r0, #6]
   2f634:	70b0      	strb	r0, [r6, #2]
   2f636:	e037      	b.n	2f6a8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
   2f638:	463a      	mov	r2, r7
   2f63a:	4621      	mov	r1, r4
   2f63c:	2d01      	cmp	r5, #1
   2f63e:	d009      	beq.n	2f654 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
   2f640:	2d02      	cmp	r5, #2
   2f642:	d009      	beq.n	2f658 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
   2f644:	2d04      	cmp	r5, #4
   2f646:	d009      	beq.n	2f65c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
   2f648:	2d08      	cmp	r5, #8
   2f64a:	d009      	beq.n	2f660 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
   2f64c:	f240 4161 	movw	r1, #1121	; 0x461
   2f650:	2006      	movs	r0, #6
   2f652:	e00c      	b.n	2f66e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
   2f654:	2000      	movs	r0, #0
   2f656:	e004      	b.n	2f662 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
   2f658:	2001      	movs	r0, #1
   2f65a:	e002      	b.n	2f662 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
   2f65c:	2003      	movs	r0, #3
   2f65e:	e000      	b.n	2f662 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
   2f660:	2002      	movs	r0, #2
   2f662:	466b      	mov	r3, sp
   2f664:	f000 f89e 	bl	2f7a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
   2f668:	b118      	cbz	r0, 2f672 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
   2f66a:	213d      	movs	r1, #61	; 0x3d
   2f66c:	2075      	movs	r0, #117	; 0x75
   2f66e:	f7f8 f9ef 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   2f672:	4620      	mov	r0, r4
   2f674:	f7ff f8cc 	bl	2e810 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
   2f678:	4602      	mov	r2, r0
   2f67a:	2300      	movs	r3, #0
   2f67c:	4631      	mov	r1, r6
   2f67e:	f99d 0000 	ldrsb.w	r0, [sp]
   2f682:	f003 fe47 	bl	33314 <mpsl_fem_tx_power_split>
   2f686:	4601      	mov	r1, r0
   2f688:	f889 1007 	strb.w	r1, [r9, #7]
   2f68c:	8831      	ldrh	r1, [r6, #0]
   2f68e:	f8a9 1004 	strh.w	r1, [r9, #4]
   2f692:	78b1      	ldrb	r1, [r6, #2]
   2f694:	f889 1006 	strb.w	r1, [r9, #6]
   2f698:	f889 5000 	strb.w	r5, [r9]
   2f69c:	f889 4001 	strb.w	r4, [r9, #1]
   2f6a0:	f889 7002 	strb.w	r7, [r9, #2]
   2f6a4:	f889 8003 	strb.w	r8, [r9, #3]
   2f6a8:	f999 0007 	ldrsb.w	r0, [r9, #7]
   2f6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f6b0:	2000037c 	.word	0x2000037c

0002f6b4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
   2f6b4:	4801      	ldr	r0, [pc, #4]	; (2f6bc <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
   2f6b6:	7800      	ldrb	r0, [r0, #0]
   2f6b8:	4770      	bx	lr
   2f6ba:	0000      	.short	0x0000
   2f6bc:	200002f8 	.word	0x200002f8

0002f6c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
   2f6c0:	b570      	push	{r4, r5, r6, lr}
   2f6c2:	4c17      	ldr	r4, [pc, #92]	; (2f720 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
   2f6c4:	7860      	ldrb	r0, [r4, #1]
   2f6c6:	2800      	cmp	r0, #0
   2f6c8:	d123      	bne.n	2f712 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
   2f6ca:	2001      	movs	r0, #1
   2f6cc:	7060      	strb	r0, [r4, #1]
   2f6ce:	f007 fed2 	bl	37476 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   2f6d2:	f06f 0527 	mvn.w	r5, #39	; 0x27
   2f6d6:	b928      	cbnz	r0, 2f6e4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
   2f6d8:	f007 ff03 	bl	374e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   2f6dc:	b910      	cbnz	r0, 2f6e4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
   2f6de:	f007 ff0a 	bl	374f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   2f6e2:	b120      	cbz	r0, 2f6ee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
   2f6e4:	480f      	ldr	r0, [pc, #60]	; (2f724 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
   2f6e6:	6060      	str	r0, [r4, #4]
   2f6e8:	70a5      	strb	r5, [r4, #2]
   2f6ea:	2008      	movs	r0, #8
   2f6ec:	e010      	b.n	2f710 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
   2f6ee:	f007 fe97 	bl	37420 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   2f6f2:	b940      	cbnz	r0, 2f706 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   2f6f4:	f007 fe9e 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   2f6f8:	b928      	cbnz	r0, 2f706 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   2f6fa:	f007 feb2 	bl	37462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   2f6fe:	b910      	cbnz	r0, 2f706 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
   2f700:	f007 fec3 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   2f704:	b130      	cbz	r0, 2f714 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
   2f706:	4807      	ldr	r0, [pc, #28]	; (2f724 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
   2f708:	3031      	adds	r0, #49	; 0x31
   2f70a:	6060      	str	r0, [r4, #4]
   2f70c:	70a5      	strb	r5, [r4, #2]
   2f70e:	2004      	movs	r0, #4
   2f710:	70e0      	strb	r0, [r4, #3]
   2f712:	bd70      	pop	{r4, r5, r6, pc}
   2f714:	f240 113f 	movw	r1, #319	; 0x13f
   2f718:	2074      	movs	r0, #116	; 0x74
   2f71a:	f003 fc3d 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2f71e:	0000      	.short	0x0000
   2f720:	200002f8 	.word	0x200002f8
   2f724:	00037835 	.word	0x00037835

0002f728 <mpsl_tx_power_radio_supported_power_adjust>:
   2f728:	4a06      	ldr	r2, [pc, #24]	; (2f744 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
   2f72a:	b500      	push	{lr}
   2f72c:	f992 2003 	ldrsb.w	r2, [r2, #3]
   2f730:	4290      	cmp	r0, r2
   2f732:	db01      	blt.n	2f738 <mpsl_tx_power_radio_supported_power_adjust+0x10>
   2f734:	4610      	mov	r0, r2
   2f736:	bd00      	pop	{pc}
   2f738:	f000 f808 	bl	2f74c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
   2f73c:	4902      	ldr	r1, [pc, #8]	; (2f748 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
   2f73e:	5608      	ldrsb	r0, [r1, r0]
   2f740:	bd00      	pop	{pc}
   2f742:	0000      	.short	0x0000
   2f744:	200002f8 	.word	0x200002f8
   2f748:	00037827 	.word	0x00037827

0002f74c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
   2f74c:	4602      	mov	r2, r0
   2f74e:	4813      	ldr	r0, [pc, #76]	; (2f79c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
   2f750:	b510      	push	{r4, lr}
   2f752:	f990 3003 	ldrsb.w	r3, [r0, #3]
   2f756:	429a      	cmp	r2, r3
   2f758:	db01      	blt.n	2f75e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
   2f75a:	200d      	movs	r0, #13
   2f75c:	bd10      	pop	{r4, pc}
   2f75e:	f990 3002 	ldrsb.w	r3, [r0, #2]
   2f762:	429a      	cmp	r2, r3
   2f764:	dc01      	bgt.n	2f76a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
   2f766:	2000      	movs	r0, #0
   2f768:	bd10      	pop	{r4, pc}
   2f76a:	b101      	cbz	r1, 2f76e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
   2f76c:	2101      	movs	r1, #1
   2f76e:	1ad4      	subs	r4, r2, r3
   2f770:	6843      	ldr	r3, [r0, #4]
   2f772:	5d18      	ldrb	r0, [r3, r4]
   2f774:	4c0a      	ldr	r4, [pc, #40]	; (2f7a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
   2f776:	5624      	ldrsb	r4, [r4, r0]
   2f778:	4294      	cmp	r4, r2
   2f77a:	d0f5      	beq.n	2f768 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   2f77c:	4c08      	ldr	r4, [pc, #32]	; (2f7a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
   2f77e:	4408      	add	r0, r1
   2f780:	343f      	adds	r4, #63	; 0x3f
   2f782:	b2c0      	uxtb	r0, r0
   2f784:	b2d2      	uxtb	r2, r2
   2f786:	42a3      	cmp	r3, r4
   2f788:	d1ee      	bne.n	2f768 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   2f78a:	2900      	cmp	r1, #0
   2f78c:	d0ec      	beq.n	2f768 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   2f78e:	2a01      	cmp	r2, #1
   2f790:	d001      	beq.n	2f796 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
   2f792:	2a02      	cmp	r2, #2
   2f794:	d1e8      	bne.n	2f768 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
   2f796:	1c40      	adds	r0, r0, #1
   2f798:	b2c0      	uxtb	r0, r0
   2f79a:	bd10      	pop	{r4, pc}
   2f79c:	200002f8 	.word	0x200002f8
   2f7a0:	00037827 	.word	0x00037827

0002f7a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
   2f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f7a8:	461c      	mov	r4, r3
   2f7aa:	4690      	mov	r8, r2
   2f7ac:	460d      	mov	r5, r1
   2f7ae:	4606      	mov	r6, r0
   2f7b0:	f06f 0715 	mvn.w	r7, #21
   2f7b4:	2804      	cmp	r0, #4
   2f7b6:	d804      	bhi.n	2f7c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
   2f7b8:	b11c      	cbz	r4, 2f7c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
   2f7ba:	f007 fd37 	bl	3722c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
   2f7be:	42a8      	cmp	r0, r5
   2f7c0:	d802      	bhi.n	2f7c8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
   2f7c2:	4638      	mov	r0, r7
   2f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f7c8:	4805      	ldr	r0, [pc, #20]	; (2f7e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
   2f7ca:	4642      	mov	r2, r8
   2f7cc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   2f7d0:	b118      	cbz	r0, 2f7da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
   2f7d2:	5740      	ldrsb	r0, [r0, r5]
   2f7d4:	4282      	cmp	r2, r0
   2f7d6:	dd00      	ble.n	2f7da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
   2f7d8:	4602      	mov	r2, r0
   2f7da:	7022      	strb	r2, [r4, #0]
   2f7dc:	2000      	movs	r0, #0
   2f7de:	e7f1      	b.n	2f7c4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
   2f7e0:	2000129c 	.word	0x2000129c

0002f7e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
   2f7e4:	4801      	ldr	r0, [pc, #4]	; (2f7ec <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
   2f7e6:	7800      	ldrb	r0, [r0, #0]
   2f7e8:	4770      	bx	lr
   2f7ea:	0000      	.short	0x0000
   2f7ec:	20000300 	.word	0x20000300

0002f7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
   2f7f0:	4905      	ldr	r1, [pc, #20]	; (2f808 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
   2f7f2:	780a      	ldrb	r2, [r1, #0]
   2f7f4:	4290      	cmp	r0, r2
   2f7f6:	d301      	bcc.n	2f7fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
   2f7f8:	2000      	movs	r0, #0
   2f7fa:	4770      	bx	lr
   2f7fc:	6849      	ldr	r1, [r1, #4]
   2f7fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2f802:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   2f806:	4770      	bx	lr
   2f808:	20000300 	.word	0x20000300

0002f80c <MPSL_IRQ_RADIO_Handler>:
   2f80c:	490d      	ldr	r1, [pc, #52]	; (2f844 <MPSL_IRQ_RADIO_Handler+0x38>)
   2f80e:	b510      	push	{r4, lr}
   2f810:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
   2f814:	2820      	cmp	r0, #32
   2f816:	d00f      	beq.n	2f838 <MPSL_IRQ_RADIO_Handler+0x2c>
   2f818:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
   2f81c:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
   2f820:	eb02 1040 	add.w	r0, r2, r0, lsl #5
   2f824:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
   2f828:	6840      	ldr	r0, [r0, #4]
   2f82a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
   2f82e:	680a      	ldr	r2, [r1, #0]
   2f830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f834:	2104      	movs	r1, #4
   2f836:	4710      	bx	r2
   2f838:	f640 017f 	movw	r1, #2175	; 0x87f
   2f83c:	2070      	movs	r0, #112	; 0x70
   2f83e:	f003 fbab 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2f842:	0000      	.short	0x0000
   2f844:	20001040 	.word	0x20001040
   2f848:	b570      	push	{r4, r5, r6, lr}
   2f84a:	4605      	mov	r5, r0
   2f84c:	2a20      	cmp	r2, #32
   2f84e:	d028      	beq.n	2f8a2 <MPSL_IRQ_RADIO_Handler+0x96>
   2f850:	4819      	ldr	r0, [pc, #100]	; (2f8b8 <MPSL_IRQ_RADIO_Handler+0xac>)
   2f852:	4c1a      	ldr	r4, [pc, #104]	; (2f8bc <MPSL_IRQ_RADIO_Handler+0xb0>)
   2f854:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
   2f858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2f85c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
   2f860:	4423      	add	r3, r4
   2f862:	2920      	cmp	r1, #32
   2f864:	d022      	beq.n	2f8ac <MPSL_IRQ_RADIO_Handler+0xa0>
   2f866:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
   2f86a:	7840      	ldrb	r0, [r0, #1]
   2f86c:	784c      	ldrb	r4, [r1, #1]
   2f86e:	7048      	strb	r0, [r1, #1]
   2f870:	4620      	mov	r0, r4
   2f872:	4601      	mov	r1, r0
   2f874:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
   2f878:	4291      	cmp	r1, r2
   2f87a:	7005      	strb	r5, [r0, #0]
   2f87c:	7840      	ldrb	r0, [r0, #1]
   2f87e:	d1f8      	bne.n	2f872 <MPSL_IRQ_RADIO_Handler+0x66>
   2f880:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   2f884:	2a20      	cmp	r2, #32
   2f886:	bf1a      	itte	ne
   2f888:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
   2f88c:	7054      	strbne	r4, [r2, #1]
   2f88e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
   2f892:	2220      	movs	r2, #32
   2f894:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
   2f898:	f88c 2001 	strb.w	r2, [ip, #1]
   2f89c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
   2f8a0:	bd70      	pop	{r4, r5, r6, pc}
   2f8a2:	f240 2186 	movw	r1, #646	; 0x286
   2f8a6:	2070      	movs	r0, #112	; 0x70
   2f8a8:	f003 fb76 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2f8ac:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
   2f8b0:	7840      	ldrb	r0, [r0, #1]
   2f8b2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
   2f8b6:	e7db      	b.n	2f870 <MPSL_IRQ_RADIO_Handler+0x64>
   2f8b8:	20000fc0 	.word	0x20000fc0
   2f8bc:	20001040 	.word	0x20001040
   2f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8c4:	b08f      	sub	sp, #60	; 0x3c
   2f8c6:	4615      	mov	r5, r2
   2f8c8:	461e      	mov	r6, r3
   2f8ca:	460c      	mov	r4, r1
   2f8cc:	f002 fab4 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   2f8d0:	1828      	adds	r0, r5, r0
   2f8d2:	f146 0100 	adc.w	r1, r6, #0
   2f8d6:	e9cd 1001 	strd	r1, r0, [sp, #4]
   2f8da:	e9d4 2300 	ldrd	r2, r3, [r4]
   2f8de:	1a80      	subs	r0, r0, r2
   2f8e0:	eb71 0003 	sbcs.w	r0, r1, r3
   2f8e4:	f0c0 80e5 	bcc.w	2fab2 <MPSL_IRQ_RADIO_Handler+0x2a6>
   2f8e8:	a808      	add	r0, sp, #32
   2f8ea:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
   2f8ee:	900a      	str	r0, [sp, #40]	; 0x28
   2f8f0:	48bc      	ldr	r0, [pc, #752]	; (2fbe4 <MPSL_IRQ_RADIO_Handler+0x3d8>)
   2f8f2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   2f8f6:	4408      	add	r0, r1
   2f8f8:	9009      	str	r0, [sp, #36]	; 0x24
   2f8fa:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
   2f8fe:	2020      	movs	r0, #32
   2f900:	f10d 091c 	add.w	r9, sp, #28
   2f904:	f88d 001c 	strb.w	r0, [sp, #28]
   2f908:	2d20      	cmp	r5, #32
   2f90a:	d036      	beq.n	2f97a <MPSL_IRQ_RADIO_Handler+0x16e>
   2f90c:	48b6      	ldr	r0, [pc, #728]	; (2fbe8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
   2f90e:	2600      	movs	r6, #0
   2f910:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
   2f914:	48b5      	ldr	r0, [pc, #724]	; (2fbec <MPSL_IRQ_RADIO_Handler+0x3e0>)
   2f916:	e9d4 7300 	ldrd	r7, r3, [r4]
   2f91a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   2f91e:	f850 8f08 	ldr.w	r8, [r0, #8]!
   2f922:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
   2f926:	eb18 0101 	adds.w	r1, r8, r1
   2f92a:	4172      	adcs	r2, r6
   2f92c:	1a79      	subs	r1, r7, r1
   2f92e:	eb73 0102 	sbcs.w	r1, r3, r2
   2f932:	d322      	bcc.n	2f97a <MPSL_IRQ_RADIO_Handler+0x16e>
   2f934:	89e1      	ldrh	r1, [r4, #14]
   2f936:	b1c9      	cbz	r1, 2f96c <MPSL_IRQ_RADIO_Handler+0x160>
   2f938:	89c0      	ldrh	r0, [r0, #14]
   2f93a:	b9b8      	cbnz	r0, 2f96c <MPSL_IRQ_RADIO_Handler+0x160>
   2f93c:	f003 f96e 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2f940:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2f944:	bf08      	it	eq
   2f946:	200d      	moveq	r0, #13
   2f948:	d00b      	beq.n	2f962 <MPSL_IRQ_RADIO_Handler+0x156>
   2f94a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2f94e:	3856      	subs	r0, #86	; 0x56
   2f950:	bf08      	it	eq
   2f952:	201c      	moveq	r0, #28
   2f954:	d005      	beq.n	2f962 <MPSL_IRQ_RADIO_Handler+0x156>
   2f956:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2f95a:	389f      	subs	r0, #159	; 0x9f
   2f95c:	bf14      	ite	ne
   2f95e:	4630      	movne	r0, r6
   2f960:	2032      	moveq	r0, #50	; 0x32
   2f962:	1c40      	adds	r0, r0, #1
   2f964:	ebb7 0108 	subs.w	r1, r7, r8
   2f968:	4281      	cmp	r1, r0
   2f96a:	db06      	blt.n	2f97a <MPSL_IRQ_RADIO_Handler+0x16e>
   2f96c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   2f970:	f889 5000 	strb.w	r5, [r9]
   2f974:	7845      	ldrb	r5, [r0, #1]
   2f976:	2d20      	cmp	r5, #32
   2f978:	d1cc      	bne.n	2f914 <MPSL_IRQ_RADIO_Handler+0x108>
   2f97a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2f97c:	f899 1000 	ldrb.w	r1, [r9]
   2f980:	2d20      	cmp	r5, #32
   2f982:	7001      	strb	r1, [r0, #0]
   2f984:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2f988:	f000 8128 	beq.w	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2f98c:	4896      	ldr	r0, [pc, #600]	; (2fbe8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
   2f98e:	4f97      	ldr	r7, [pc, #604]	; (2fbec <MPSL_IRQ_RADIO_Handler+0x3e0>)
   2f990:	eb00 108a 	add.w	r0, r0, sl, lsl #6
   2f994:	2600      	movs	r6, #0
   2f996:	9004      	str	r0, [sp, #16]
   2f998:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
   2f99c:	f10a 0008 	add.w	r0, sl, #8
   2f9a0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2f9a4:	f8d4 b000 	ldr.w	fp, [r4]
   2f9a8:	e9d0 8300 	ldrd	r8, r3, [r0]
   2f9ac:	eb1b 0202 	adds.w	r2, fp, r2
   2f9b0:	4171      	adcs	r1, r6
   2f9b2:	ebb8 0202 	subs.w	r2, r8, r2
   2f9b6:	eb73 0101 	sbcs.w	r1, r3, r1
   2f9ba:	d320      	bcc.n	2f9fe <MPSL_IRQ_RADIO_Handler+0x1f2>
   2f9bc:	89c0      	ldrh	r0, [r0, #14]
   2f9be:	2800      	cmp	r0, #0
   2f9c0:	f000 810c 	beq.w	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2f9c4:	89e0      	ldrh	r0, [r4, #14]
   2f9c6:	2800      	cmp	r0, #0
   2f9c8:	f040 8108 	bne.w	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2f9cc:	f003 f926 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2f9d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2f9d4:	bf08      	it	eq
   2f9d6:	200d      	moveq	r0, #13
   2f9d8:	d00b      	beq.n	2f9f2 <MPSL_IRQ_RADIO_Handler+0x1e6>
   2f9da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2f9de:	3856      	subs	r0, #86	; 0x56
   2f9e0:	bf08      	it	eq
   2f9e2:	201c      	moveq	r0, #28
   2f9e4:	d005      	beq.n	2f9f2 <MPSL_IRQ_RADIO_Handler+0x1e6>
   2f9e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2f9ea:	389f      	subs	r0, #159	; 0x9f
   2f9ec:	bf14      	ite	ne
   2f9ee:	4630      	movne	r0, r6
   2f9f0:	2032      	moveq	r0, #50	; 0x32
   2f9f2:	1c41      	adds	r1, r0, #1
   2f9f4:	ebb8 000b 	subs.w	r0, r8, fp
   2f9f8:	4288      	cmp	r0, r1
   2f9fa:	f280 80ef 	bge.w	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2f9fe:	f889 5000 	strb.w	r5, [r9]
   2fa02:	f89a 0018 	ldrb.w	r0, [sl, #24]
   2fa06:	7c21      	ldrb	r1, [r4, #16]
   2fa08:	4281      	cmp	r1, r0
   2fa0a:	d207      	bcs.n	2fa1c <MPSL_IRQ_RADIO_Handler+0x210>
   2fa0c:	9804      	ldr	r0, [sp, #16]
   2fa0e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   2fa12:	7845      	ldrb	r5, [r0, #1]
   2fa14:	2d20      	cmp	r5, #32
   2fa16:	d1bf      	bne.n	2f998 <MPSL_IRQ_RADIO_Handler+0x18c>
   2fa18:	f000 b8e0 	b.w	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2fa1c:	f89d 0020 	ldrb.w	r0, [sp, #32]
   2fa20:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   2fa24:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
   2fa28:	f8d0 9008 	ldr.w	r9, [r0, #8]
   2fa2c:	8ac0      	ldrh	r0, [r0, #22]
   2fa2e:	eb19 0502 	adds.w	r5, r9, r2
   2fa32:	eb41 0806 	adc.w	r8, r1, r6
   2fa36:	bbb0      	cbnz	r0, 2faa6 <MPSL_IRQ_RADIO_Handler+0x29a>
   2fa38:	89e0      	ldrh	r0, [r4, #14]
   2fa3a:	b3a0      	cbz	r0, 2faa6 <MPSL_IRQ_RADIO_Handler+0x29a>
   2fa3c:	f003 f8ee 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fa40:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fa44:	bf08      	it	eq
   2fa46:	200d      	moveq	r0, #13
   2fa48:	d00b      	beq.n	2fa62 <MPSL_IRQ_RADIO_Handler+0x256>
   2fa4a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fa4e:	3856      	subs	r0, #86	; 0x56
   2fa50:	bf08      	it	eq
   2fa52:	201c      	moveq	r0, #28
   2fa54:	d005      	beq.n	2fa62 <MPSL_IRQ_RADIO_Handler+0x256>
   2fa56:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fa5a:	389f      	subs	r0, #159	; 0x9f
   2fa5c:	bf14      	ite	ne
   2fa5e:	4630      	movne	r0, r6
   2fa60:	2032      	moveq	r0, #50	; 0x32
   2fa62:	1c41      	adds	r1, r0, #1
   2fa64:	ebb5 0009 	subs.w	r0, r5, r9
   2fa68:	4288      	cmp	r0, r1
   2fa6a:	da1c      	bge.n	2faa6 <MPSL_IRQ_RADIO_Handler+0x29a>
   2fa6c:	f003 f8d6 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fa70:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fa74:	bf08      	it	eq
   2fa76:	200d      	moveq	r0, #13
   2fa78:	d00b      	beq.n	2fa92 <MPSL_IRQ_RADIO_Handler+0x286>
   2fa7a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fa7e:	3856      	subs	r0, #86	; 0x56
   2fa80:	bf08      	it	eq
   2fa82:	201c      	moveq	r0, #28
   2fa84:	d005      	beq.n	2fa92 <MPSL_IRQ_RADIO_Handler+0x286>
   2fa86:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fa8a:	389f      	subs	r0, #159	; 0x9f
   2fa8c:	bf14      	ite	ne
   2fa8e:	4630      	movne	r0, r6
   2fa90:	2032      	moveq	r0, #50	; 0x32
   2fa92:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2fa96:	1c40      	adds	r0, r0, #1
   2fa98:	eb07 1141 	add.w	r1, r7, r1, lsl #5
   2fa9c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   2faa0:	1815      	adds	r5, r2, r0
   2faa2:	eb43 0806 	adc.w	r8, r3, r6
   2faa6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
   2faaa:	1b49      	subs	r1, r1, r5
   2faac:	eb70 0008 	sbcs.w	r0, r0, r8
   2fab0:	d203      	bcs.n	2faba <MPSL_IRQ_RADIO_Handler+0x2ae>
   2fab2:	b00f      	add	sp, #60	; 0x3c
   2fab4:	2000      	movs	r0, #0
   2fab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2faba:	e9c4 5800 	strd	r5, r8, [r4]
   2fabe:	9818      	ldr	r0, [sp, #96]	; 0x60
   2fac0:	900b      	str	r0, [sp, #44]	; 0x2c
   2fac2:	a808      	add	r0, sp, #32
   2fac4:	900a      	str	r0, [sp, #40]	; 0x28
   2fac6:	9809      	ldr	r0, [sp, #36]	; 0x24
   2fac8:	f10d 0a1c 	add.w	sl, sp, #28
   2facc:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
   2fad0:	2020      	movs	r0, #32
   2fad2:	f88d 001c 	strb.w	r0, [sp, #28]
   2fad6:	2d20      	cmp	r5, #32
   2fad8:	d037      	beq.n	2fb4a <MPSL_IRQ_RADIO_Handler+0x33e>
   2fada:	4843      	ldr	r0, [pc, #268]	; (2fbe8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
   2fadc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2fade:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
   2fae2:	bf00      	nop
   2fae4:	eb07 1045 	add.w	r0, r7, r5, lsl #5
   2fae8:	e9d4 8300 	ldrd	r8, r3, [r4]
   2faec:	f850 9f08 	ldr.w	r9, [r0, #8]!
   2faf0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2faf4:	eb19 0202 	adds.w	r2, r9, r2
   2faf8:	4171      	adcs	r1, r6
   2fafa:	ebb8 0202 	subs.w	r2, r8, r2
   2fafe:	eb73 0101 	sbcs.w	r1, r3, r1
   2fb02:	d322      	bcc.n	2fb4a <MPSL_IRQ_RADIO_Handler+0x33e>
   2fb04:	89e1      	ldrh	r1, [r4, #14]
   2fb06:	b1c9      	cbz	r1, 2fb3c <MPSL_IRQ_RADIO_Handler+0x330>
   2fb08:	89c0      	ldrh	r0, [r0, #14]
   2fb0a:	b9b8      	cbnz	r0, 2fb3c <MPSL_IRQ_RADIO_Handler+0x330>
   2fb0c:	f003 f886 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fb10:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fb14:	bf08      	it	eq
   2fb16:	200d      	moveq	r0, #13
   2fb18:	d00b      	beq.n	2fb32 <MPSL_IRQ_RADIO_Handler+0x326>
   2fb1a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fb1e:	3856      	subs	r0, #86	; 0x56
   2fb20:	bf08      	it	eq
   2fb22:	201c      	moveq	r0, #28
   2fb24:	d005      	beq.n	2fb32 <MPSL_IRQ_RADIO_Handler+0x326>
   2fb26:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fb2a:	389f      	subs	r0, #159	; 0x9f
   2fb2c:	bf14      	ite	ne
   2fb2e:	4630      	movne	r0, r6
   2fb30:	2032      	moveq	r0, #50	; 0x32
   2fb32:	1c41      	adds	r1, r0, #1
   2fb34:	ebb8 0009 	subs.w	r0, r8, r9
   2fb38:	4288      	cmp	r0, r1
   2fb3a:	db06      	blt.n	2fb4a <MPSL_IRQ_RADIO_Handler+0x33e>
   2fb3c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
   2fb40:	f88a 5000 	strb.w	r5, [sl]
   2fb44:	7845      	ldrb	r5, [r0, #1]
   2fb46:	2d20      	cmp	r5, #32
   2fb48:	d1cc      	bne.n	2fae4 <MPSL_IRQ_RADIO_Handler+0x2d8>
   2fb4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2fb4c:	f89a 1000 	ldrb.w	r1, [sl]
   2fb50:	2d20      	cmp	r5, #32
   2fb52:	7001      	strb	r1, [r0, #0]
   2fb54:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
   2fb58:	d040      	beq.n	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2fb5a:	4923      	ldr	r1, [pc, #140]	; (2fbe8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
   2fb5c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
   2fb60:	f8cd 000c 	str.w	r0, [sp, #12]
   2fb64:	eb07 1945 	add.w	r9, r7, r5, lsl #5
   2fb68:	f109 0008 	add.w	r0, r9, #8
   2fb6c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2fb70:	f8d4 b000 	ldr.w	fp, [r4]
   2fb74:	e9d0 a300 	ldrd	sl, r3, [r0]
   2fb78:	eb1b 0202 	adds.w	r2, fp, r2
   2fb7c:	4171      	adcs	r1, r6
   2fb7e:	ebba 0202 	subs.w	r2, sl, r2
   2fb82:	eb73 0101 	sbcs.w	r1, r3, r1
   2fb86:	d31b      	bcc.n	2fbc0 <MPSL_IRQ_RADIO_Handler+0x3b4>
   2fb88:	89c0      	ldrh	r0, [r0, #14]
   2fb8a:	b338      	cbz	r0, 2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2fb8c:	89e0      	ldrh	r0, [r4, #14]
   2fb8e:	bb28      	cbnz	r0, 2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2fb90:	f003 f844 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fb94:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fb98:	bf08      	it	eq
   2fb9a:	200d      	moveq	r0, #13
   2fb9c:	d00b      	beq.n	2fbb6 <MPSL_IRQ_RADIO_Handler+0x3aa>
   2fb9e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fba2:	3856      	subs	r0, #86	; 0x56
   2fba4:	bf08      	it	eq
   2fba6:	201c      	moveq	r0, #28
   2fba8:	d005      	beq.n	2fbb6 <MPSL_IRQ_RADIO_Handler+0x3aa>
   2fbaa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fbae:	389f      	subs	r0, #159	; 0x9f
   2fbb0:	bf14      	ite	ne
   2fbb2:	4630      	movne	r0, r6
   2fbb4:	2032      	moveq	r0, #50	; 0x32
   2fbb6:	1c41      	adds	r1, r0, #1
   2fbb8:	ebba 000b 	subs.w	r0, sl, fp
   2fbbc:	4288      	cmp	r0, r1
   2fbbe:	da0d      	bge.n	2fbdc <MPSL_IRQ_RADIO_Handler+0x3d0>
   2fbc0:	f888 5000 	strb.w	r5, [r8]
   2fbc4:	f899 1018 	ldrb.w	r1, [r9, #24]
   2fbc8:	7c20      	ldrb	r0, [r4, #16]
   2fbca:	4288      	cmp	r0, r1
   2fbcc:	f4bf af26 	bcs.w	2fa1c <MPSL_IRQ_RADIO_Handler+0x210>
   2fbd0:	9803      	ldr	r0, [sp, #12]
   2fbd2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   2fbd6:	7845      	ldrb	r5, [r0, #1]
   2fbd8:	2d20      	cmp	r5, #32
   2fbda:	d1c3      	bne.n	2fb64 <MPSL_IRQ_RADIO_Handler+0x358>
   2fbdc:	b00f      	add	sp, #60	; 0x3c
   2fbde:	2001      	movs	r0, #1
   2fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbe4:	20001040 	.word	0x20001040
   2fbe8:	20000fc0 	.word	0x20000fc0
   2fbec:	20000bc0 	.word	0x20000bc0
   2fbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fbf4:	b083      	sub	sp, #12
   2fbf6:	4691      	mov	r9, r2
   2fbf8:	4604      	mov	r4, r0
   2fbfa:	460d      	mov	r5, r1
   2fbfc:	4698      	mov	r8, r3
   2fbfe:	aa01      	add	r2, sp, #4
   2fc00:	4669      	mov	r1, sp
   2fc02:	4618      	mov	r0, r3
   2fc04:	f002 f934 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   2fc08:	f002 fe30 	bl	3286c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   2fc0c:	f002 f914 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   2fc10:	4607      	mov	r7, r0
   2fc12:	481e      	ldr	r0, [pc, #120]	; (2fc8c <MPSL_IRQ_RADIO_Handler+0x480>)
   2fc14:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   2fc18:	2600      	movs	r6, #0
   2fc1a:	2920      	cmp	r1, #32
   2fc1c:	d009      	beq.n	2fc32 <MPSL_IRQ_RADIO_Handler+0x426>
   2fc1e:	6882      	ldr	r2, [r0, #8]
   2fc20:	68c1      	ldr	r1, [r0, #12]
   2fc22:	6900      	ldr	r0, [r0, #16]
   2fc24:	1d83      	adds	r3, r0, #6
   2fc26:	f146 0000 	adc.w	r0, r6, #0
   2fc2a:	18d4      	adds	r4, r2, r3
   2fc2c:	eb41 0500 	adc.w	r5, r1, r0
   2fc30:	e026      	b.n	2fc80 <MPSL_IRQ_RADIO_Handler+0x474>
   2fc32:	340a      	adds	r4, #10
   2fc34:	f145 0500 	adc.w	r5, r5, #0
   2fc38:	f1b8 0f00 	cmp.w	r8, #0
   2fc3c:	d017      	beq.n	2fc6e <MPSL_IRQ_RADIO_Handler+0x462>
   2fc3e:	f003 f933 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   2fc42:	b9a0      	cbnz	r0, 2fc6e <MPSL_IRQ_RADIO_Handler+0x462>
   2fc44:	f002 ffea 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fc48:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fc4c:	bf08      	it	eq
   2fc4e:	200d      	moveq	r0, #13
   2fc50:	d00b      	beq.n	2fc6a <MPSL_IRQ_RADIO_Handler+0x45e>
   2fc52:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fc56:	3856      	subs	r0, #86	; 0x56
   2fc58:	bf08      	it	eq
   2fc5a:	201c      	moveq	r0, #28
   2fc5c:	d005      	beq.n	2fc6a <MPSL_IRQ_RADIO_Handler+0x45e>
   2fc5e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fc62:	389f      	subs	r0, #159	; 0x9f
   2fc64:	bf14      	ite	ne
   2fc66:	4630      	movne	r0, r6
   2fc68:	2032      	moveq	r0, #50	; 0x32
   2fc6a:	1904      	adds	r4, r0, r4
   2fc6c:	4175      	adcs	r5, r6
   2fc6e:	f1b9 0f00 	cmp.w	r9, #0
   2fc72:	d105      	bne.n	2fc80 <MPSL_IRQ_RADIO_Handler+0x474>
   2fc74:	9800      	ldr	r0, [sp, #0]
   2fc76:	4287      	cmp	r7, r0
   2fc78:	d902      	bls.n	2fc80 <MPSL_IRQ_RADIO_Handler+0x474>
   2fc7a:	1a38      	subs	r0, r7, r0
   2fc7c:	1904      	adds	r4, r0, r4
   2fc7e:	4175      	adcs	r5, r6
   2fc80:	b003      	add	sp, #12
   2fc82:	4620      	mov	r0, r4
   2fc84:	4629      	mov	r1, r5
   2fc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2fc8a:	0000      	.short	0x0000
   2fc8c:	20001040 	.word	0x20001040
   2fc90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc94:	b081      	sub	sp, #4
   2fc96:	4605      	mov	r5, r0
   2fc98:	9802      	ldr	r0, [sp, #8]
   2fc9a:	494a      	ldr	r1, [pc, #296]	; (2fdc4 <MPSL_IRQ_RADIO_Handler+0x5b8>)
   2fc9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2fca0:	4408      	add	r0, r1
   2fca2:	2600      	movs	r6, #0
   2fca4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
   2fca8:	2020      	movs	r0, #32
   2fcaa:	4692      	mov	sl, r2
   2fcac:	7010      	strb	r0, [r2, #0]
   2fcae:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
   2fcb2:	2c20      	cmp	r4, #32
   2fcb4:	d036      	beq.n	2fd24 <MPSL_IRQ_RADIO_Handler+0x518>
   2fcb6:	9902      	ldr	r1, [sp, #8]
   2fcb8:	f509 6080 	add.w	r0, r9, #1024	; 0x400
   2fcbc:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
   2fcc0:	eb09 1044 	add.w	r0, r9, r4, lsl #5
   2fcc4:	e9d5 7300 	ldrd	r7, r3, [r5]
   2fcc8:	f850 8f08 	ldr.w	r8, [r0, #8]!
   2fccc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2fcd0:	eb18 0202 	adds.w	r2, r8, r2
   2fcd4:	4171      	adcs	r1, r6
   2fcd6:	1aba      	subs	r2, r7, r2
   2fcd8:	eb73 0101 	sbcs.w	r1, r3, r1
   2fcdc:	d322      	bcc.n	2fd24 <MPSL_IRQ_RADIO_Handler+0x518>
   2fcde:	89e9      	ldrh	r1, [r5, #14]
   2fce0:	b1c9      	cbz	r1, 2fd16 <MPSL_IRQ_RADIO_Handler+0x50a>
   2fce2:	89c0      	ldrh	r0, [r0, #14]
   2fce4:	b9b8      	cbnz	r0, 2fd16 <MPSL_IRQ_RADIO_Handler+0x50a>
   2fce6:	f002 ff99 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fcea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fcee:	bf08      	it	eq
   2fcf0:	200d      	moveq	r0, #13
   2fcf2:	d00b      	beq.n	2fd0c <MPSL_IRQ_RADIO_Handler+0x500>
   2fcf4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fcf8:	3856      	subs	r0, #86	; 0x56
   2fcfa:	bf08      	it	eq
   2fcfc:	201c      	moveq	r0, #28
   2fcfe:	d005      	beq.n	2fd0c <MPSL_IRQ_RADIO_Handler+0x500>
   2fd00:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fd04:	389f      	subs	r0, #159	; 0x9f
   2fd06:	bf14      	ite	ne
   2fd08:	4630      	movne	r0, r6
   2fd0a:	2032      	moveq	r0, #50	; 0x32
   2fd0c:	1c41      	adds	r1, r0, #1
   2fd0e:	ebb7 0008 	subs.w	r0, r7, r8
   2fd12:	4288      	cmp	r0, r1
   2fd14:	db06      	blt.n	2fd24 <MPSL_IRQ_RADIO_Handler+0x518>
   2fd16:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
   2fd1a:	f88a 4000 	strb.w	r4, [sl]
   2fd1e:	7844      	ldrb	r4, [r0, #1]
   2fd20:	2c20      	cmp	r4, #32
   2fd22:	d1cd      	bne.n	2fcc0 <MPSL_IRQ_RADIO_Handler+0x4b4>
   2fd24:	9804      	ldr	r0, [sp, #16]
   2fd26:	f89a 1000 	ldrb.w	r1, [sl]
   2fd2a:	2c20      	cmp	r4, #32
   2fd2c:	7001      	strb	r1, [r0, #0]
   2fd2e:	9f04      	ldr	r7, [sp, #16]
   2fd30:	9802      	ldr	r0, [sp, #8]
   2fd32:	d042      	beq.n	2fdba <MPSL_IRQ_RADIO_Handler+0x5ae>
   2fd34:	4924      	ldr	r1, [pc, #144]	; (2fdc8 <MPSL_IRQ_RADIO_Handler+0x5bc>)
   2fd36:	eb01 1080 	add.w	r0, r1, r0, lsl #6
   2fd3a:	9000      	str	r0, [sp, #0]
   2fd3c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2fd40:	f8d5 b000 	ldr.w	fp, [r5]
   2fd44:	eb09 1844 	add.w	r8, r9, r4, lsl #5
   2fd48:	f108 0008 	add.w	r0, r8, #8
   2fd4c:	eb1b 0201 	adds.w	r2, fp, r1
   2fd50:	eb43 0106 	adc.w	r1, r3, r6
   2fd54:	e9d0 a300 	ldrd	sl, r3, [r0]
   2fd58:	ebba 0202 	subs.w	r2, sl, r2
   2fd5c:	eb73 0101 	sbcs.w	r1, r3, r1
   2fd60:	d31b      	bcc.n	2fd9a <MPSL_IRQ_RADIO_Handler+0x58e>
   2fd62:	89c0      	ldrh	r0, [r0, #14]
   2fd64:	b348      	cbz	r0, 2fdba <MPSL_IRQ_RADIO_Handler+0x5ae>
   2fd66:	89e8      	ldrh	r0, [r5, #14]
   2fd68:	bb38      	cbnz	r0, 2fdba <MPSL_IRQ_RADIO_Handler+0x5ae>
   2fd6a:	f002 ff57 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2fd6e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fd72:	bf08      	it	eq
   2fd74:	200d      	moveq	r0, #13
   2fd76:	d00b      	beq.n	2fd90 <MPSL_IRQ_RADIO_Handler+0x584>
   2fd78:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2fd7c:	3856      	subs	r0, #86	; 0x56
   2fd7e:	bf08      	it	eq
   2fd80:	201c      	moveq	r0, #28
   2fd82:	d005      	beq.n	2fd90 <MPSL_IRQ_RADIO_Handler+0x584>
   2fd84:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fd88:	389f      	subs	r0, #159	; 0x9f
   2fd8a:	bf14      	ite	ne
   2fd8c:	4630      	movne	r0, r6
   2fd8e:	2032      	moveq	r0, #50	; 0x32
   2fd90:	1c41      	adds	r1, r0, #1
   2fd92:	ebba 000b 	subs.w	r0, sl, fp
   2fd96:	4288      	cmp	r0, r1
   2fd98:	da0f      	bge.n	2fdba <MPSL_IRQ_RADIO_Handler+0x5ae>
   2fd9a:	703c      	strb	r4, [r7, #0]
   2fd9c:	f898 1018 	ldrb.w	r1, [r8, #24]
   2fda0:	7c28      	ldrb	r0, [r5, #16]
   2fda2:	4288      	cmp	r0, r1
   2fda4:	d303      	bcc.n	2fdae <MPSL_IRQ_RADIO_Handler+0x5a2>
   2fda6:	b005      	add	sp, #20
   2fda8:	2000      	movs	r0, #0
   2fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdae:	9800      	ldr	r0, [sp, #0]
   2fdb0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
   2fdb4:	7844      	ldrb	r4, [r0, #1]
   2fdb6:	2c20      	cmp	r4, #32
   2fdb8:	d1c0      	bne.n	2fd3c <MPSL_IRQ_RADIO_Handler+0x530>
   2fdba:	b005      	add	sp, #20
   2fdbc:	2001      	movs	r0, #1
   2fdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdc2:	0000      	.short	0x0000
   2fdc4:	20001040 	.word	0x20001040
   2fdc8:	20000fc0 	.word	0x20000fc0
   2fdcc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   2fdd0:	b09c      	sub	sp, #112	; 0x70
   2fdd2:	461f      	mov	r7, r3
   2fdd4:	f002 fa9c 	bl	32310 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
   2fdd8:	4604      	mov	r4, r0
   2fdda:	460d      	mov	r5, r1
   2fddc:	f002 fd46 	bl	3286c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   2fde0:	4606      	mov	r6, r0
   2fde2:	981e      	ldr	r0, [sp, #120]	; 0x78
   2fde4:	2801      	cmp	r0, #1
   2fde6:	bf18      	it	ne
   2fde8:	2802      	cmpne	r0, #2
   2fdea:	d005      	beq.n	2fdf8 <MPSL_IRQ_RADIO_Handler+0x5ec>
   2fdec:	f640 1156 	movw	r1, #2390	; 0x956
   2fdf0:	f04f 0070 	mov.w	r0, #112	; 0x70
   2fdf4:	f003 f8d0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2fdf8:	49fe      	ldr	r1, [pc, #1016]	; (301f4 <MPSL_IRQ_RADIO_Handler+0x9e8>)
   2fdfa:	2001      	movs	r0, #1
   2fdfc:	6008      	str	r0, [r1, #0]
   2fdfe:	49fe      	ldr	r1, [pc, #1016]	; (301f8 <MPSL_IRQ_RADIO_Handler+0x9ec>)
   2fe00:	6889      	ldr	r1, [r1, #8]
   2fe02:	6008      	str	r0, [r1, #0]
   2fe04:	2000      	movs	r0, #0
   2fe06:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
   2fe0a:	900c      	str	r0, [sp, #48]	; 0x30
   2fe0c:	1e40      	subs	r0, r0, #1
   2fe0e:	900d      	str	r0, [sp, #52]	; 0x34
   2fe10:	48fa      	ldr	r0, [pc, #1000]	; (301fc <MPSL_IRQ_RADIO_Handler+0x9f0>)
   2fe12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   2fe16:	eb00 1047 	add.w	r0, r0, r7, lsl #5
   2fe1a:	f100 0108 	add.w	r1, r0, #8
   2fe1e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
   2fe22:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
   2fe26:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
   2fe2a:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
   2fe2e:	980e      	ldr	r0, [sp, #56]	; 0x38
   2fe30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2fe34:	f007 fa33 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   2fe38:	4602      	mov	r2, r0
   2fe3a:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
   2fe3e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   2fe42:	4bef      	ldr	r3, [pc, #956]	; (30200 <MPSL_IRQ_RADIO_Handler+0x9f4>)
   2fe44:	4440      	add	r0, r8
   2fe46:	1c41      	adds	r1, r0, #1
   2fe48:	1850      	adds	r0, r2, r1
   2fe4a:	429a      	cmp	r2, r3
   2fe4c:	d856      	bhi.n	2fefc <MPSL_IRQ_RADIO_Handler+0x6f0>
   2fe4e:	4aed      	ldr	r2, [pc, #948]	; (30204 <MPSL_IRQ_RADIO_Handler+0x9f8>)
   2fe50:	4291      	cmp	r1, r2
   2fe52:	dc5b      	bgt.n	2ff0c <MPSL_IRQ_RADIO_Handler+0x700>
   2fe54:	4252      	negs	r2, r2
   2fe56:	4291      	cmp	r1, r2
   2fe58:	db60      	blt.n	2ff1c <MPSL_IRQ_RADIO_Handler+0x710>
   2fe5a:	1c59      	adds	r1, r3, #1
   2fe5c:	4281      	cmp	r1, r0
   2fe5e:	bfdc      	itt	le
   2fe60:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   2fe64:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   2fe68:	dd05      	ble.n	2fe76 <MPSL_IRQ_RADIO_Handler+0x66a>
   2fe6a:	2800      	cmp	r0, #0
   2fe6c:	bfbc      	itt	lt
   2fe6e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   2fe72:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   2fe76:	9017      	str	r0, [sp, #92]	; 0x5c
   2fe78:	48e3      	ldr	r0, [pc, #908]	; (30208 <MPSL_IRQ_RADIO_Handler+0x9fc>)
   2fe7a:	f1b8 0f00 	cmp.w	r8, #0
   2fe7e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
   2fe82:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
   2fe86:	bf14      	ite	ne
   2fe88:	f04f 0a01 	movne.w	sl, #1
   2fe8c:	f04f 0a00 	moveq.w	sl, #0
   2fe90:	f003 f80a 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   2fe94:	9019      	str	r0, [sp, #100]	; 0x64
   2fe96:	f1ba 0f00 	cmp.w	sl, #0
   2fe9a:	d00b      	beq.n	2feb4 <MPSL_IRQ_RADIO_Handler+0x6a8>
   2fe9c:	49db      	ldr	r1, [pc, #876]	; (3020c <MPSL_IRQ_RADIO_Handler+0xa00>)
   2fe9e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
   2fea2:	ea6f 0200 	mvn.w	r2, r0
   2fea6:	ea72 0001 	orns	r0, r2, r1
   2feaa:	bf02      	ittt	eq
   2feac:	9819      	ldreq	r0, [sp, #100]	; 0x64
   2feae:	2800      	cmpeq	r0, #0
   2feb0:	2701      	moveq	r7, #1
   2feb2:	d001      	beq.n	2feb8 <MPSL_IRQ_RADIO_Handler+0x6ac>
   2feb4:	f04f 0700 	mov.w	r7, #0
   2feb8:	f002 feb0 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   2febc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   2fec0:	bf08      	it	eq
   2fec2:	200d      	moveq	r0, #13
   2fec4:	d00b      	beq.n	2fede <MPSL_IRQ_RADIO_Handler+0x6d2>
   2fec6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   2feca:	3856      	subs	r0, #86	; 0x56
   2fecc:	bf08      	it	eq
   2fece:	201c      	moveq	r0, #28
   2fed0:	d005      	beq.n	2fede <MPSL_IRQ_RADIO_Handler+0x6d2>
   2fed2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   2fed6:	389f      	subs	r0, #159	; 0x9f
   2fed8:	bf14      	ite	ne
   2feda:	2000      	movne	r0, #0
   2fedc:	2032      	moveq	r0, #50	; 0x32
   2fede:	f04f 0900 	mov.w	r9, #0
   2fee2:	46cb      	mov	fp, r9
   2fee4:	9016      	str	r0, [sp, #88]	; 0x58
   2fee6:	4546      	cmp	r6, r8
   2fee8:	d936      	bls.n	2ff58 <MPSL_IRQ_RADIO_Handler+0x74c>
   2feea:	9917      	ldr	r1, [sp, #92]	; 0x5c
   2feec:	43f3      	mvns	r3, r6
   2feee:	f8df c310 	ldr.w	ip, [pc, #784]	; 30200 <MPSL_IRQ_RADIO_Handler+0x9f4>
   2fef2:	18c8      	adds	r0, r1, r3
   2fef4:	46e9      	mov	r9, sp
   2fef6:	aa1a      	add	r2, sp, #104	; 0x68
   2fef8:	4561      	cmp	r1, ip
   2fefa:	d904      	bls.n	2ff06 <MPSL_IRQ_RADIO_Handler+0x6fa>
   2fefc:	f240 517f 	movw	r1, #1407	; 0x57f
   2ff00:	2070      	movs	r0, #112	; 0x70
   2ff02:	f003 f849 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2ff06:	49bf      	ldr	r1, [pc, #764]	; (30204 <MPSL_IRQ_RADIO_Handler+0x9f8>)
   2ff08:	428b      	cmp	r3, r1
   2ff0a:	dd04      	ble.n	2ff16 <MPSL_IRQ_RADIO_Handler+0x70a>
   2ff0c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
   2ff10:	2070      	movs	r0, #112	; 0x70
   2ff12:	f003 f841 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2ff16:	49be      	ldr	r1, [pc, #760]	; (30210 <MPSL_IRQ_RADIO_Handler+0xa04>)
   2ff18:	428b      	cmp	r3, r1
   2ff1a:	da04      	bge.n	2ff26 <MPSL_IRQ_RADIO_Handler+0x71a>
   2ff1c:	f240 5181 	movw	r1, #1409	; 0x581
   2ff20:	2070      	movs	r0, #112	; 0x70
   2ff22:	f003 f839 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2ff26:	49bb      	ldr	r1, [pc, #748]	; (30214 <MPSL_IRQ_RADIO_Handler+0xa08>)
   2ff28:	4281      	cmp	r1, r0
   2ff2a:	bfdc      	itt	le
   2ff2c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   2ff30:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   2ff34:	dd05      	ble.n	2ff42 <MPSL_IRQ_RADIO_Handler+0x736>
   2ff36:	2800      	cmp	r0, #0
   2ff38:	bfbc      	itt	lt
   2ff3a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   2ff3e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   2ff42:	4649      	mov	r1, r9
   2ff44:	f001 ff94 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   2ff48:	9800      	ldr	r0, [sp, #0]
   2ff4a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2ff4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2ff50:	9000      	str	r0, [sp, #0]
   2ff52:	1a08      	subs	r0, r1, r0
   2ff54:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
   2ff58:	2f00      	cmp	r7, #0
   2ff5a:	bf18      	it	ne
   2ff5c:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
   2ff60:	d105      	bne.n	2ff6e <MPSL_IRQ_RADIO_Handler+0x762>
   2ff62:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   2ff66:	2800      	cmp	r0, #0
   2ff68:	bf18      	it	ne
   2ff6a:	f04f 0b02 	movne.w	fp, #2
   2ff6e:	43e0      	mvns	r0, r4
   2ff70:	ea70 0005 	orns	r0, r0, r5
   2ff74:	d022      	beq.n	2ffbc <MPSL_IRQ_RADIO_Handler+0x7b0>
   2ff76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2ff7a:	1a22      	subs	r2, r4, r0
   2ff7c:	eb75 0201 	sbcs.w	r2, r5, r1
   2ff80:	d20c      	bcs.n	2ff9c <MPSL_IRQ_RADIO_Handler+0x790>
   2ff82:	1b02      	subs	r2, r0, r4
   2ff84:	eb61 0105 	sbc.w	r1, r1, r5
   2ff88:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
   2ff8c:	f171 0100 	sbcs.w	r1, r1, #0
   2ff90:	d311      	bcc.n	2ffb6 <MPSL_IRQ_RADIO_Handler+0x7aa>
   2ff92:	f640 1195 	movw	r1, #2453	; 0x995
   2ff96:	2070      	movs	r0, #112	; 0x70
   2ff98:	f002 fffe 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2ff9c:	1a22      	subs	r2, r4, r0
   2ff9e:	eb65 0101 	sbc.w	r1, r5, r1
   2ffa2:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
   2ffa6:	f171 0100 	sbcs.w	r1, r1, #0
   2ffaa:	d304      	bcc.n	2ffb6 <MPSL_IRQ_RADIO_Handler+0x7aa>
   2ffac:	f640 1199 	movw	r1, #2457	; 0x999
   2ffb0:	2070      	movs	r0, #112	; 0x70
   2ffb2:	f002 fff1 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   2ffb6:	1b00      	subs	r0, r0, r4
   2ffb8:	2801      	cmp	r0, #1
   2ffba:	da03      	bge.n	2ffc4 <MPSL_IRQ_RADIO_Handler+0x7b8>
   2ffbc:	981c      	ldr	r0, [sp, #112]	; 0x70
   2ffbe:	901a      	str	r0, [sp, #104]	; 0x68
   2ffc0:	2003      	movs	r0, #3
   2ffc2:	e00d      	b.n	2ffe0 <MPSL_IRQ_RADIO_Handler+0x7d4>
   2ffc4:	b157      	cbz	r7, 2ffdc <MPSL_IRQ_RADIO_Handler+0x7d0>
   2ffc6:	4891      	ldr	r0, [pc, #580]	; (3020c <MPSL_IRQ_RADIO_Handler+0xa00>)
   2ffc8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   2ffcc:	b130      	cbz	r0, 2ffdc <MPSL_IRQ_RADIO_Handler+0x7d0>
   2ffce:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   2ffd2:	f110 0b00 	adds.w	fp, r0, #0
   2ffd6:	bf18      	it	ne
   2ffd8:	f04f 0b02 	movne.w	fp, #2
   2ffdc:	2000      	movs	r0, #0
   2ffde:	941a      	str	r4, [sp, #104]	; 0x68
   2ffe0:	4483      	add	fp, r0
   2ffe2:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
   2ffe6:	ebb0 0009 	subs.w	r0, r0, r9
   2ffea:	f162 0100 	sbc.w	r1, r2, #0
   2ffee:	1e42      	subs	r2, r0, #1
   2fff0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2fff2:	f141 3eff 	adc.w	lr, r1, #4294967295
   2fff6:	1ad3      	subs	r3, r2, r3
   2fff8:	455b      	cmp	r3, fp
   2fffa:	db08      	blt.n	3000e <MPSL_IRQ_RADIO_Handler+0x802>
   2fffc:	f1b9 0f00 	cmp.w	r9, #0
   30000:	d032      	beq.n	30068 <MPSL_IRQ_RADIO_Handler+0x85c>
   30002:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30004:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   30008:	444b      	add	r3, r9
   3000a:	9310      	str	r3, [sp, #64]	; 0x40
   3000c:	e02c      	b.n	30068 <MPSL_IRQ_RADIO_Handler+0x85c>
   3000e:	f1b9 0f00 	cmp.w	r9, #0
   30012:	d005      	beq.n	30020 <MPSL_IRQ_RADIO_Handler+0x814>
   30014:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
   30018:	b920      	cbnz	r0, 30024 <MPSL_IRQ_RADIO_Handler+0x818>
   3001a:	f002 fc1d 	bl	32858 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
   3001e:	b108      	cbz	r0, 30024 <MPSL_IRQ_RADIO_Handler+0x818>
   30020:	b9af      	cbnz	r7, 3004e <MPSL_IRQ_RADIO_Handler+0x842>
   30022:	e00c      	b.n	3003e <MPSL_IRQ_RADIO_Handler+0x832>
   30024:	b92f      	cbnz	r7, 30032 <MPSL_IRQ_RADIO_Handler+0x826>
   30026:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   3002a:	2800      	cmp	r0, #0
   3002c:	bf18      	it	ne
   3002e:	f1ab 0b02 	subne.w	fp, fp, #2
   30032:	f04f 0900 	mov.w	r9, #0
   30036:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
   3003a:	464e      	mov	r6, r9
   3003c:	e007      	b.n	3004e <MPSL_IRQ_RADIO_Handler+0x842>
   3003e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   30042:	b120      	cbz	r0, 3004e <MPSL_IRQ_RADIO_Handler+0x842>
   30044:	2000      	movs	r0, #0
   30046:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
   3004a:	f1ab 0b02 	sub.w	fp, fp, #2
   3004e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
   30052:	ebb0 0009 	subs.w	r0, r0, r9
   30056:	f162 0100 	sbc.w	r1, r2, #0
   3005a:	1e42      	subs	r2, r0, #1
   3005c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   3005e:	f141 3eff 	adc.w	lr, r1, #4294967295
   30062:	1ad3      	subs	r3, r2, r3
   30064:	455b      	cmp	r3, fp
   30066:	db7d      	blt.n	30164 <MPSL_IRQ_RADIO_Handler+0x958>
   30068:	9b19      	ldr	r3, [sp, #100]	; 0x64
   3006a:	b99b      	cbnz	r3, 30094 <MPSL_IRQ_RADIO_Handler+0x888>
   3006c:	4b67      	ldr	r3, [pc, #412]	; (3020c <MPSL_IRQ_RADIO_Handler+0xa00>)
   3006e:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
   30072:	ea6f 090c 	mvn.w	r9, ip
   30076:	ea79 0903 	orns	r9, r9, r3
   3007a:	d00b      	beq.n	30094 <MPSL_IRQ_RADIO_Handler+0x888>
   3007c:	ebb0 0c0c 	subs.w	ip, r0, ip
   30080:	9816      	ldr	r0, [sp, #88]	; 0x58
   30082:	eb61 0303 	sbc.w	r3, r1, r3
   30086:	ebbc 0000 	subs.w	r0, ip, r0
   3008a:	f173 0000 	sbcs.w	r0, r3, #0
   3008e:	bf38      	it	cc
   30090:	2000      	movcc	r0, #0
   30092:	d300      	bcc.n	30096 <MPSL_IRQ_RADIO_Handler+0x88a>
   30094:	2001      	movs	r0, #1
   30096:	ea3a 0000 	bics.w	r0, sl, r0
   3009a:	d163      	bne.n	30164 <MPSL_IRQ_RADIO_Handler+0x958>
   3009c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
   300a0:	e9cd 0107 	strd	r0, r1, [sp, #28]
   300a4:	981e      	ldr	r0, [sp, #120]	; 0x78
   300a6:	4691      	mov	r9, r2
   300a8:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
   300ac:	46f3      	mov	fp, lr
   300ae:	2700      	movs	r7, #0
   300b0:	f002 fdb4 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   300b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   300b8:	bf08      	it	eq
   300ba:	200d      	moveq	r0, #13
   300bc:	d00b      	beq.n	300d6 <MPSL_IRQ_RADIO_Handler+0x8ca>
   300be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   300c2:	3856      	subs	r0, #86	; 0x56
   300c4:	bf08      	it	eq
   300c6:	201c      	moveq	r0, #28
   300c8:	d005      	beq.n	300d6 <MPSL_IRQ_RADIO_Handler+0x8ca>
   300ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   300ce:	389f      	subs	r0, #159	; 0x9f
   300d0:	bf14      	ite	ne
   300d2:	4638      	movne	r0, r7
   300d4:	2032      	moveq	r0, #50	; 0x32
   300d6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   300da:	300b      	adds	r0, #11
   300dc:	ebb9 0202 	subs.w	r2, r9, r2
   300e0:	eb6b 0303 	sbc.w	r3, fp, r3
   300e4:	1a10      	subs	r0, r2, r0
   300e6:	f173 0000 	sbcs.w	r0, r3, #0
   300ea:	d22a      	bcs.n	30142 <MPSL_IRQ_RADIO_Handler+0x936>
   300ec:	9819      	ldr	r0, [sp, #100]	; 0x64
   300ee:	2801      	cmp	r0, #1
   300f0:	d002      	beq.n	300f8 <MPSL_IRQ_RADIO_Handler+0x8ec>
   300f2:	9818      	ldr	r0, [sp, #96]	; 0x60
   300f4:	b148      	cbz	r0, 3010a <MPSL_IRQ_RADIO_Handler+0x8fe>
   300f6:	e017      	b.n	30128 <MPSL_IRQ_RADIO_Handler+0x91c>
   300f8:	43e0      	mvns	r0, r4
   300fa:	ea70 0005 	orns	r0, r0, r5
   300fe:	d127      	bne.n	30150 <MPSL_IRQ_RADIO_Handler+0x944>
   30100:	f640 01d7 	movw	r1, #2263	; 0x8d7
   30104:	2070      	movs	r0, #112	; 0x70
   30106:	f002 ff47 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3010a:	43e0      	mvns	r0, r4
   3010c:	ea70 0005 	orns	r0, r0, r5
   30110:	d00a      	beq.n	30128 <MPSL_IRQ_RADIO_Handler+0x91c>
   30112:	d01d      	beq.n	30150 <MPSL_IRQ_RADIO_Handler+0x944>
   30114:	ebb4 0009 	subs.w	r0, r4, r9
   30118:	eb65 010b 	sbc.w	r1, r5, fp
   3011c:	2300      	movs	r3, #0
   3011e:	f1d0 0204 	rsbs	r2, r0, #4
   30122:	eb73 0201 	sbcs.w	r2, r3, r1
   30126:	da06      	bge.n	30136 <MPSL_IRQ_RADIO_Handler+0x92a>
   30128:	464c      	mov	r4, r9
   3012a:	465d      	mov	r5, fp
   3012c:	4620      	mov	r0, r4
   3012e:	4629      	mov	r1, r5
   30130:	f001 ffce 	bl	320d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   30134:	e00c      	b.n	30150 <MPSL_IRQ_RADIO_Handler+0x944>
   30136:	2200      	movs	r2, #0
   30138:	1a10      	subs	r0, r2, r0
   3013a:	eb72 0001 	sbcs.w	r0, r2, r1
   3013e:	db11      	blt.n	30164 <MPSL_IRQ_RADIO_Handler+0x958>
   30140:	e006      	b.n	30150 <MPSL_IRQ_RADIO_Handler+0x944>
   30142:	464c      	mov	r4, r9
   30144:	465d      	mov	r5, fp
   30146:	4620      	mov	r0, r4
   30148:	4629      	mov	r1, r5
   3014a:	f001 ffc1 	bl	320d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   3014e:	4657      	mov	r7, sl
   30150:	43e1      	mvns	r1, r4
   30152:	ea71 0005 	orns	r0, r1, r5
   30156:	d071      	beq.n	3023c <MPSL_IRQ_RADIO_Handler+0xa30>
   30158:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
   3015c:	f04f 0b00 	mov.w	fp, #0
   30160:	990e      	ldr	r1, [sp, #56]	; 0x38
   30162:	e000      	b.n	30166 <MPSL_IRQ_RADIO_Handler+0x95a>
   30164:	e06f      	b.n	30246 <MPSL_IRQ_RADIO_Handler+0xa3a>
   30166:	1a0b      	subs	r3, r1, r0
   30168:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   3016c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   30170:	eb11 010c 	adds.w	r1, r1, ip
   30174:	1a08      	subs	r0, r1, r0
   30176:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3017a:	2b01      	cmp	r3, #1
   3017c:	d363      	bcc.n	30246 <MPSL_IRQ_RADIO_Handler+0xa3a>
   3017e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   30182:	bf98      	it	ls
   30184:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
   30188:	d85d      	bhi.n	30246 <MPSL_IRQ_RADIO_Handler+0xa3a>
   3018a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
   3018e:	f007 f886 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   30192:	9917      	ldr	r1, [sp, #92]	; 0x5c
   30194:	4a1b      	ldr	r2, [pc, #108]	; (30204 <MPSL_IRQ_RADIO_Handler+0x9f8>)
   30196:	1a0d      	subs	r5, r1, r0
   30198:	1aaa      	subs	r2, r5, r2
   3019a:	f17b 0200 	sbcs.w	r2, fp, #0
   3019e:	d316      	bcc.n	301ce <MPSL_IRQ_RADIO_Handler+0x9c2>
   301a0:	4b18      	ldr	r3, [pc, #96]	; (30204 <MPSL_IRQ_RADIO_Handler+0x9f8>)
   301a2:	1a42      	subs	r2, r0, r1
   301a4:	1ad3      	subs	r3, r2, r3
   301a6:	f17b 0300 	sbcs.w	r3, fp, #0
   301aa:	d310      	bcc.n	301ce <MPSL_IRQ_RADIO_Handler+0x9c2>
   301ac:	4b14      	ldr	r3, [pc, #80]	; (30200 <MPSL_IRQ_RADIO_Handler+0x9f4>)
   301ae:	42ab      	cmp	r3, r5
   301b0:	bf3e      	ittt	cc
   301b2:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
   301b6:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
   301ba:	1845      	addcc	r5, r0, r1
   301bc:	d307      	bcc.n	301ce <MPSL_IRQ_RADIO_Handler+0x9c2>
   301be:	4293      	cmp	r3, r2
   301c0:	d245      	bcs.n	3024e <MPSL_IRQ_RADIO_Handler+0xa42>
   301c2:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
   301c6:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
   301ca:	4408      	add	r0, r1
   301cc:	4245      	negs	r5, r0
   301ce:	f8df 903c 	ldr.w	r9, [pc, #60]	; 3020c <MPSL_IRQ_RADIO_Handler+0xa00>
   301d2:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
   301d6:	b378      	cbz	r0, 30238 <MPSL_IRQ_RADIO_Handler+0xa2c>
   301d8:	981e      	ldr	r0, [sp, #120]	; 0x78
   301da:	2801      	cmp	r0, #1
   301dc:	d005      	beq.n	301ea <MPSL_IRQ_RADIO_Handler+0x9de>
   301de:	2002      	movs	r0, #2
   301e0:	f002 fa02 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   301e4:	2001      	movs	r0, #1
   301e6:	f002 f9ff 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   301ea:	45b0      	cmp	r8, r6
   301ec:	d240      	bcs.n	30270 <MPSL_IRQ_RADIO_Handler+0xa64>
   301ee:	eba5 0106 	sub.w	r1, r5, r6
   301f2:	e011      	b.n	30218 <MPSL_IRQ_RADIO_Handler+0xa0c>
   301f4:	40000508 	.word	0x40000508
   301f8:	20000308 	.word	0x20000308
   301fc:	20000bc0 	.word	0x20000bc0
   30200:	1e847fff 	.word	0x1e847fff
   30204:	0f424000 	.word	0x0f424000
   30208:	20000fc0 	.word	0x20000fc0
   3020c:	20001040 	.word	0x20001040
   30210:	f0bdc000 	.word	0xf0bdc000
   30214:	1e848000 	.word	0x1e848000
   30218:	f04f 0002 	mov.w	r0, #2
   3021c:	f002 f92a 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   30220:	b398      	cbz	r0, 3028a <MPSL_IRQ_RADIO_Handler+0xa7e>
   30222:	f1b8 0f00 	cmp.w	r8, #0
   30226:	bf1c      	itt	ne
   30228:	eba5 0108 	subne.w	r1, r5, r8
   3022c:	2001      	movne	r0, #1
   3022e:	d035      	beq.n	3029c <MPSL_IRQ_RADIO_Handler+0xa90>
   30230:	f002 f920 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   30234:	b348      	cbz	r0, 3028a <MPSL_IRQ_RADIO_Handler+0xa7e>
   30236:	e031      	b.n	3029c <MPSL_IRQ_RADIO_Handler+0xa90>
   30238:	e00e      	b.n	30258 <MPSL_IRQ_RADIO_Handler+0xa4c>
   3023a:	e7ff      	b.n	3023c <MPSL_IRQ_RADIO_Handler+0xa30>
   3023c:	f640 2103 	movw	r1, #2563	; 0xa03
   30240:	2070      	movs	r0, #112	; 0x70
   30242:	f002 fea9 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30246:	b020      	add	sp, #128	; 0x80
   30248:	2000      	movs	r0, #0
   3024a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   3024e:	f640 21d7 	movw	r1, #2775	; 0xad7
   30252:	2070      	movs	r0, #112	; 0x70
   30254:	f002 fea0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30258:	45b0      	cmp	r8, r6
   3025a:	bf34      	ite	cc
   3025c:	4630      	movcc	r0, r6
   3025e:	4640      	movcs	r0, r8
   30260:	301e      	adds	r0, #30
   30262:	42a8      	cmp	r0, r5
   30264:	dbb8      	blt.n	301d8 <MPSL_IRQ_RADIO_Handler+0x9cc>
   30266:	f640 2117 	movw	r1, #2583	; 0xa17
   3026a:	2070      	movs	r0, #112	; 0x70
   3026c:	f002 fe94 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30270:	d90c      	bls.n	3028c <MPSL_IRQ_RADIO_Handler+0xa80>
   30272:	eba5 0108 	sub.w	r1, r5, r8
   30276:	2001      	movs	r0, #1
   30278:	f002 f8fc 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   3027c:	b128      	cbz	r0, 3028a <MPSL_IRQ_RADIO_Handler+0xa7e>
   3027e:	2e00      	cmp	r6, #0
   30280:	bf1c      	itt	ne
   30282:	1ba9      	subne	r1, r5, r6
   30284:	2002      	movne	r0, #2
   30286:	d009      	beq.n	3029c <MPSL_IRQ_RADIO_Handler+0xa90>
   30288:	e7d2      	b.n	30230 <MPSL_IRQ_RADIO_Handler+0xa24>
   3028a:	e034      	b.n	302f6 <MPSL_IRQ_RADIO_Handler+0xaea>
   3028c:	ea56 0008 	orrs.w	r0, r6, r8
   30290:	d004      	beq.n	3029c <MPSL_IRQ_RADIO_Handler+0xa90>
   30292:	f640 113a 	movw	r1, #2362	; 0x93a
   30296:	2070      	movs	r0, #112	; 0x70
   30298:	f002 fe7e 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3029c:	4629      	mov	r1, r5
   3029e:	2000      	movs	r0, #0
   302a0:	f002 f8e8 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   302a4:	b338      	cbz	r0, 302f6 <MPSL_IRQ_RADIO_Handler+0xaea>
   302a6:	2601      	movs	r6, #1
   302a8:	f1ba 0f00 	cmp.w	sl, #0
   302ac:	bf04      	itt	eq
   302ae:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
   302b2:	2800      	cmpeq	r0, #0
   302b4:	d000      	beq.n	302b8 <MPSL_IRQ_RADIO_Handler+0xaac>
   302b6:	b347      	cbz	r7, 3030a <MPSL_IRQ_RADIO_Handler+0xafe>
   302b8:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
   302bc:	ea6f 0101 	mvn.w	r1, r1
   302c0:	ea71 0000 	orns	r0, r1, r0
   302c4:	d006      	beq.n	302d4 <MPSL_IRQ_RADIO_Handler+0xac8>
   302c6:	f002 fcaf 	bl	32c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   302ca:	f04f 30ff 	mov.w	r0, #4294967295
   302ce:	4601      	mov	r1, r0
   302d0:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
   302d4:	b1ff      	cbz	r7, 30316 <MPSL_IRQ_RADIO_Handler+0xb0a>
   302d6:	9816      	ldr	r0, [sp, #88]	; 0x58
   302d8:	1a20      	subs	r0, r4, r0
   302da:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   302de:	f04f 0005 	mov.w	r0, #5
   302e2:	f002 f8c7 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   302e6:	b370      	cbz	r0, 30346 <MPSL_IRQ_RADIO_Handler+0xb3a>
   302e8:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
   302ec:	2800      	cmp	r0, #0
   302ee:	bf08      	it	eq
   302f0:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
   302f4:	e017      	b.n	30326 <MPSL_IRQ_RADIO_Handler+0xb1a>
   302f6:	2002      	movs	r0, #2
   302f8:	f002 f976 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   302fc:	2001      	movs	r0, #1
   302fe:	f002 f973 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   30302:	b020      	add	sp, #128	; 0x80
   30304:	2000      	movs	r0, #0
   30306:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   3030a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
   3030e:	43c0      	mvns	r0, r0
   30310:	ea70 0001 	orns	r0, r0, r1
   30314:	d012      	beq.n	3033c <MPSL_IRQ_RADIO_Handler+0xb30>
   30316:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
   3031a:	b120      	cbz	r0, 30326 <MPSL_IRQ_RADIO_Handler+0xb1a>
   3031c:	2005      	movs	r0, #5
   3031e:	f002 f963 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   30322:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
   30326:	eba5 0008 	sub.w	r0, r5, r8
   3032a:	f1a0 0119 	sub.w	r1, r0, #25
   3032e:	2900      	cmp	r1, #0
   30330:	dc0f      	bgt.n	30352 <MPSL_IRQ_RADIO_Handler+0xb46>
   30332:	f44f 6124 	mov.w	r1, #2624	; 0xa40
   30336:	2070      	movs	r0, #112	; 0x70
   30338:	f002 fe2e 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3033c:	f002 fc90 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   30340:	f002 f876 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   30344:	e7c4      	b.n	302d0 <MPSL_IRQ_RADIO_Handler+0xac4>
   30346:	e7ff      	b.n	30348 <MPSL_IRQ_RADIO_Handler+0xb3c>
   30348:	f240 21e6 	movw	r1, #742	; 0x2e6
   3034c:	2070      	movs	r0, #112	; 0x70
   3034e:	f002 fe23 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30352:	2003      	movs	r0, #3
   30354:	f002 f88e 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   30358:	b338      	cbz	r0, 303aa <MPSL_IRQ_RADIO_Handler+0xb9e>
   3035a:	4816      	ldr	r0, [pc, #88]	; (303b4 <MPSL_IRQ_RADIO_Handler+0xba8>)
   3035c:	6880      	ldr	r0, [r0, #8]
   3035e:	f8c0 b000 	str.w	fp, [r0]
   30362:	4815      	ldr	r0, [pc, #84]	; (303b8 <MPSL_IRQ_RADIO_Handler+0xbac>)
   30364:	f8c0 b000 	str.w	fp, [r0]
   30368:	ac0c      	add	r4, sp, #48	; 0x30
   3036a:	4814      	ldr	r0, [pc, #80]	; (303bc <MPSL_IRQ_RADIO_Handler+0xbb0>)
   3036c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
   30370:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   30374:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   30378:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   3037c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
   30380:	ac10      	add	r4, sp, #64	; 0x40
   30382:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
   30386:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
   3038a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
   3038e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
   30392:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
   30396:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   3039a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   3039e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
   303a2:	b020      	add	sp, #128	; 0x80
   303a4:	2001      	movs	r0, #1
   303a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   303aa:	f640 2148 	movw	r1, #2632	; 0xa48
   303ae:	2070      	movs	r0, #112	; 0x70
   303b0:	f002 fdf2 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   303b4:	20000308 	.word	0x20000308
   303b8:	40000508 	.word	0x40000508
   303bc:	20000fc0 	.word	0x20000fc0
   303c0:	b570      	push	{r4, r5, r6, lr}
   303c2:	4d1d      	ldr	r5, [pc, #116]	; (30438 <MPSL_IRQ_RADIO_Handler+0xc2c>)
   303c4:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
   303c8:	2820      	cmp	r0, #32
   303ca:	bf18      	it	ne
   303cc:	bd70      	popne	{r4, r5, r6, pc}
   303ce:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
   303d2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   303d6:	4428      	add	r0, r5
   303d8:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
   303dc:	2c20      	cmp	r4, #32
   303de:	d026      	beq.n	3042e <MPSL_IRQ_RADIO_Handler+0xc22>
   303e0:	4b16      	ldr	r3, [pc, #88]	; (3043c <MPSL_IRQ_RADIO_Handler+0xc30>)
   303e2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
   303e6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   303ea:	7849      	ldrb	r1, [r1, #1]
   303ec:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
   303f0:	20ff      	movs	r0, #255	; 0xff
   303f2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   303f6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
   303fa:	4621      	mov	r1, r4
   303fc:	2002      	movs	r0, #2
   303fe:	f000 f88b 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   30402:	2000      	movs	r0, #0
   30404:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
   30408:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
   3040c:	480c      	ldr	r0, [pc, #48]	; (30440 <MPSL_IRQ_RADIO_Handler+0xc34>)
   3040e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   30412:	7e00      	ldrb	r0, [r0, #24]
   30414:	2800      	cmp	r0, #0
   30416:	bf08      	it	eq
   30418:	f002 ff26 	bleq	33268 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
   3041c:	2000      	movs	r0, #0
   3041e:	4909      	ldr	r1, [pc, #36]	; (30444 <MPSL_IRQ_RADIO_Handler+0xc38>)
   30420:	6849      	ldr	r1, [r1, #4]
   30422:	2900      	cmp	r1, #0
   30424:	bf08      	it	eq
   30426:	bd70      	popeq	{r4, r5, r6, pc}
   30428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3042c:	4708      	bx	r1
   3042e:	f240 311d 	movw	r1, #797	; 0x31d
   30432:	2070      	movs	r0, #112	; 0x70
   30434:	f002 fdb0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30438:	20001040 	.word	0x20001040
   3043c:	20000fc0 	.word	0x20000fc0
   30440:	20000bc0 	.word	0x20000bc0
   30444:	20000308 	.word	0x20000308
   30448:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   3044c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 30508 <MPSL_IRQ_RADIO_Handler+0xcfc>
   30450:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
   30454:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   30458:	4440      	add	r0, r8
   3045a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
   3045e:	2c20      	cmp	r4, #32
   30460:	bf08      	it	eq
   30462:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   30466:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 3050c <MPSL_IRQ_RADIO_Handler+0xd00>
   3046a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 30510 <MPSL_IRQ_RADIO_Handler+0xd04>
   3046e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
   30472:	eb09 1785 	add.w	r7, r9, r5, lsl #6
   30476:	2607      	movs	r6, #7
   30478:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   3047c:	2801      	cmp	r0, #1
   3047e:	d00e      	beq.n	3049e <MPSL_IRQ_RADIO_Handler+0xc92>
   30480:	2804      	cmp	r0, #4
   30482:	bf08      	it	eq
   30484:	2602      	moveq	r6, #2
   30486:	d00a      	beq.n	3049e <MPSL_IRQ_RADIO_Handler+0xc92>
   30488:	2805      	cmp	r0, #5
   3048a:	bf0c      	ite	eq
   3048c:	2603      	moveq	r6, #3
   3048e:	2806      	cmpne	r0, #6
   30490:	d005      	beq.n	3049e <MPSL_IRQ_RADIO_Handler+0xc92>
   30492:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
   30496:	f04f 0070 	mov.w	r0, #112	; 0x70
   3049a:	f002 fd7d 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3049e:	f1bb 0f00 	cmp.w	fp, #0
   304a2:	bf18      	it	ne
   304a4:	f3af 8000 	nopne.w
   304a8:	f3ef 8010 	mrs	r0, PRIMASK
   304ac:	b672      	cpsid	i
   304ae:	eb07 0144 	add.w	r1, r7, r4, lsl #1
   304b2:	784a      	ldrb	r2, [r1, #1]
   304b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   304b8:	4441      	add	r1, r8
   304ba:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
   304be:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
   304c2:	42a2      	cmp	r2, r4
   304c4:	bf04      	itt	eq
   304c6:	2220      	moveq	r2, #32
   304c8:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
   304cc:	b1a8      	cbz	r0, 304fa <MPSL_IRQ_RADIO_Handler+0xcee>
   304ce:	462a      	mov	r2, r5
   304d0:	4621      	mov	r1, r4
   304d2:	2001      	movs	r0, #1
   304d4:	f000 f820 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   304d8:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
   304dc:	e9d1 2000 	ldrd	r2, r0, [r1]
   304e0:	4631      	mov	r1, r6
   304e2:	4790      	blx	r2
   304e4:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
   304e8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   304ec:	4440      	add	r0, r8
   304ee:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
   304f2:	2c20      	cmp	r4, #32
   304f4:	d1bd      	bne.n	30472 <MPSL_IRQ_RADIO_Handler+0xc66>
   304f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   304fa:	4806      	ldr	r0, [pc, #24]	; (30514 <MPSL_IRQ_RADIO_Handler+0xd08>)
   304fc:	2800      	cmp	r0, #0
   304fe:	bf18      	it	ne
   30500:	f3af 8000 	nopne.w
   30504:	b662      	cpsie	i
   30506:	e7e2      	b.n	304ce <MPSL_IRQ_RADIO_Handler+0xcc2>
   30508:	20001040 	.word	0x20001040
   3050c:	00000000 	.word	0x00000000
   30510:	20000fc0 	.word	0x20000fc0
   30514:	00000000 	.word	0x00000000
   30518:	f8df c058 	ldr.w	ip, [pc, #88]	; 30574 <MPSL_IRQ_RADIO_Handler+0xd68>
   3051c:	b510      	push	{r4, lr}
   3051e:	2300      	movs	r3, #0
   30520:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
   30524:	2807      	cmp	r0, #7
   30526:	d21f      	bcs.n	30568 <MPSL_IRQ_RADIO_Handler+0xd5c>
   30528:	e8df f000 	tbb	[pc, r0]
   3052c:	05050505 	.word	0x05050505
   30530:	00040404 	.word	0x00040404
   30534:	2301      	movs	r3, #1
   30536:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
   3053a:	2b00      	cmp	r3, #0
   3053c:	bf08      	it	eq
   3053e:	bd10      	popeq	{r4, pc}
   30540:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30544:	480c      	ldr	r0, [pc, #48]	; (30578 <MPSL_IRQ_RADIO_Handler+0xd6c>)
   30546:	4402      	add	r2, r0
   30548:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
   3054c:	2820      	cmp	r0, #32
   3054e:	bf0e      	itee	eq
   30550:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
   30554:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
   30558:	7041      	strbne	r1, [r0, #1]
   3055a:	2020      	movs	r0, #32
   3055c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
   30560:	7058      	strb	r0, [r3, #1]
   30562:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
   30566:	bd10      	pop	{r4, pc}
   30568:	f44f 7117 	mov.w	r1, #604	; 0x25c
   3056c:	2070      	movs	r0, #112	; 0x70
   3056e:	f002 fd13 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30572:	0000      	.short	0x0000
   30574:	20000fc0 	.word	0x20000fc0
   30578:	20001040 	.word	0x20001040
   3057c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   30580:	460f      	mov	r7, r1
   30582:	4680      	mov	r8, r0
   30584:	f8df b154 	ldr.w	fp, [pc, #340]	; 306dc <MPSL_IRQ_RADIO_Handler+0xed0>
   30588:	eb01 0047 	add.w	r0, r1, r7, lsl #1
   3058c:	4458      	add	r0, fp
   3058e:	f1b8 0f01 	cmp.w	r8, #1
   30592:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
   30596:	4625      	mov	r5, r4
   30598:	bf18      	it	ne
   3059a:	f1b8 0f02 	cmpne.w	r8, #2
   3059e:	d005      	beq.n	305ac <MPSL_IRQ_RADIO_Handler+0xda0>
   305a0:	f640 217e 	movw	r1, #2686	; 0xa7e
   305a4:	f04f 0070 	mov.w	r0, #112	; 0x70
   305a8:	f002 fcf6 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   305ac:	2d20      	cmp	r5, #32
   305ae:	d041      	beq.n	30634 <MPSL_IRQ_RADIO_Handler+0xe28>
   305b0:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
   305b4:	2600      	movs	r6, #0
   305b6:	2800      	cmp	r0, #0
   305b8:	bf08      	it	eq
   305ba:	2602      	moveq	r6, #2
   305bc:	f001 fd82 	bl	320c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
   305c0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 306e0 <MPSL_IRQ_RADIO_Handler+0xed4>
   305c4:	eb09 1344 	add.w	r3, r9, r4, lsl #5
   305c8:	6899      	ldr	r1, [r3, #8]
   305ca:	691b      	ldr	r3, [r3, #16]
   305cc:	1a0a      	subs	r2, r1, r0
   305ce:	18c9      	adds	r1, r1, r3
   305d0:	1a09      	subs	r1, r1, r0
   305d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   305d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   305da:	4296      	cmp	r6, r2
   305dc:	bf99      	ittee	ls
   305de:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
   305e2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   305e6:	4a3f      	ldrhi	r2, [pc, #252]	; (306e4 <MPSL_IRQ_RADIO_Handler+0xed8>)
   305e8:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
   305ec:	d920      	bls.n	30630 <MPSL_IRQ_RADIO_Handler+0xe24>
   305ee:	4622      	mov	r2, r4
   305f0:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
   305f4:	784c      	ldrb	r4, [r1, #1]
   305f6:	2c20      	cmp	r4, #32
   305f8:	d012      	beq.n	30620 <MPSL_IRQ_RADIO_Handler+0xe14>
   305fa:	eb09 1344 	add.w	r3, r9, r4, lsl #5
   305fe:	6899      	ldr	r1, [r3, #8]
   30600:	691b      	ldr	r3, [r3, #16]
   30602:	ebb1 0c00 	subs.w	ip, r1, r0
   30606:	18c9      	adds	r1, r1, r3
   30608:	1a09      	subs	r1, r1, r0
   3060a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
   3060e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   30612:	4566      	cmp	r6, ip
   30614:	bf9c      	itt	ls
   30616:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
   3061a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   3061e:	d8e6      	bhi.n	305ee <MPSL_IRQ_RADIO_Handler+0xde2>
   30620:	2a20      	cmp	r2, #32
   30622:	d005      	beq.n	30630 <MPSL_IRQ_RADIO_Handler+0xe24>
   30624:	463b      	mov	r3, r7
   30626:	2120      	movs	r1, #32
   30628:	2004      	movs	r0, #4
   3062a:	f7ff f90d 	bl	2f848 <MPSL_IRQ_RADIO_Handler+0x3c>
   3062e:	4604      	mov	r4, r0
   30630:	42ac      	cmp	r4, r5
   30632:	d113      	bne.n	3065c <MPSL_IRQ_RADIO_Handler+0xe50>
   30634:	482c      	ldr	r0, [pc, #176]	; (306e8 <MPSL_IRQ_RADIO_Handler+0xedc>)
   30636:	2800      	cmp	r0, #0
   30638:	bf18      	it	ne
   3063a:	f3af 8000 	nopne.w
   3063e:	f001 fef7 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   30642:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
   30646:	2a20      	cmp	r2, #32
   30648:	d00b      	beq.n	30662 <MPSL_IRQ_RADIO_Handler+0xe56>
   3064a:	e9db 3202 	ldrd	r3, r2, [fp, #8]
   3064e:	1c84      	adds	r4, r0, #2
   30650:	f141 0c00 	adc.w	ip, r1, #0
   30654:	1b1b      	subs	r3, r3, r4
   30656:	eb72 020c 	sbcs.w	r2, r2, ip
   3065a:	d202      	bcs.n	30662 <MPSL_IRQ_RADIO_Handler+0xe56>
   3065c:	2000      	movs	r0, #0
   3065e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   30662:	2d20      	cmp	r5, #32
   30664:	d013      	beq.n	3068e <MPSL_IRQ_RADIO_Handler+0xe82>
   30666:	462b      	mov	r3, r5
   30668:	4642      	mov	r2, r8
   3066a:	f7ff fbaf 	bl	2fdcc <MPSL_IRQ_RADIO_Handler+0x5c0>
   3066e:	2800      	cmp	r0, #0
   30670:	bf1e      	ittt	ne
   30672:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
   30676:	2002      	movne	r0, #2
   30678:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   3067c:	463b      	mov	r3, r7
   3067e:	462a      	mov	r2, r5
   30680:	2120      	movs	r1, #32
   30682:	2004      	movs	r0, #4
   30684:	f7ff f8e0 	bl	2f848 <MPSL_IRQ_RADIO_Handler+0x3c>
   30688:	2000      	movs	r0, #0
   3068a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   3068e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
   30692:	43c0      	mvns	r0, r0
   30694:	ea70 0001 	orns	r0, r0, r1
   30698:	d005      	beq.n	306a6 <MPSL_IRQ_RADIO_Handler+0xe9a>
   3069a:	f002 fac5 	bl	32c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   3069e:	f04f 30ff 	mov.w	r0, #4294967295
   306a2:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
   306a6:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
   306aa:	b128      	cbz	r0, 306b8 <MPSL_IRQ_RADIO_Handler+0xeac>
   306ac:	2005      	movs	r0, #5
   306ae:	f001 ff9b 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   306b2:	2000      	movs	r0, #0
   306b4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
   306b8:	2004      	movs	r0, #4
   306ba:	f001 ff95 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   306be:	f001 fffb 	bl	326b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
   306c2:	490a      	ldr	r1, [pc, #40]	; (306ec <MPSL_IRQ_RADIO_Handler+0xee0>)
   306c4:	2020      	movs	r0, #32
   306c6:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
   306ca:	6889      	ldr	r1, [r1, #8]
   306cc:	2000      	movs	r0, #0
   306ce:	6008      	str	r0, [r1, #0]
   306d0:	4907      	ldr	r1, [pc, #28]	; (306f0 <MPSL_IRQ_RADIO_Handler+0xee4>)
   306d2:	6008      	str	r0, [r1, #0]
   306d4:	2001      	movs	r0, #1
   306d6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   306da:	0000      	.short	0x0000
   306dc:	20001040 	.word	0x20001040
   306e0:	20000bc0 	.word	0x20000bc0
   306e4:	20000fc0 	.word	0x20000fc0
   306e8:	00000000 	.word	0x00000000
   306ec:	20000308 	.word	0x20000308
   306f0:	40000508 	.word	0x40000508

000306f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
   306f4:	4906      	ldr	r1, [pc, #24]	; (30710 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
   306f6:	b510      	push	{r4, lr}
   306f8:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
   306fc:	2a20      	cmp	r2, #32
   306fe:	bf1c      	itt	ne
   30700:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
   30704:	bd10      	popne	{r4, pc}
   30706:	f240 3177 	movw	r1, #887	; 0x377
   3070a:	2070      	movs	r0, #112	; 0x70
   3070c:	f002 fc44 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30710:	20001040 	.word	0x20001040

00030714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
   30714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30718:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 308e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
   3071c:	4606      	mov	r6, r0
   3071e:	b08f      	sub	sp, #60	; 0x3c
   30720:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
   30724:	468a      	mov	sl, r1
   30726:	2820      	cmp	r0, #32
   30728:	d061      	beq.n	307ee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
   3072a:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
   3072e:	f10b 0408 	add.w	r4, fp, #8
   30732:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
   30736:	eb08 1941 	add.w	r9, r8, r1, lsl #5
   3073a:	2120      	movs	r1, #32
   3073c:	f88d 1018 	strb.w	r1, [sp, #24]
   30740:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
   30744:	f8db 2008 	ldr.w	r2, [fp, #8]
   30748:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3074c:	4459      	add	r1, fp
   3074e:	2700      	movs	r7, #0
   30750:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   30754:	f8db 1010 	ldr.w	r1, [fp, #16]
   30758:	1851      	adds	r1, r2, r1
   3075a:	910a      	str	r1, [sp, #40]	; 0x28
   3075c:	f8db 0000 	ldr.w	r0, [fp]
   30760:	aa09      	add	r2, sp, #36	; 0x24
   30762:	4430      	add	r0, r6
   30764:	a907      	add	r1, sp, #28
   30766:	f001 fb83 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   3076a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   3076e:	9907      	ldr	r1, [sp, #28]
   30770:	f8d9 2008 	ldr.w	r2, [r9, #8]
   30774:	1840      	adds	r0, r0, r1
   30776:	1810      	adds	r0, r2, r0
   30778:	2e67      	cmp	r6, #103	; 0x67
   3077a:	d33d      	bcc.n	307f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
   3077c:	4959      	ldr	r1, [pc, #356]	; (308e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
   3077e:	2200      	movs	r2, #0
   30780:	1b89      	subs	r1, r1, r6
   30782:	eb72 0107 	sbcs.w	r1, r2, r7
   30786:	d337      	bcc.n	307f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
   30788:	6821      	ldr	r1, [r4, #0]
   3078a:	4694      	mov	ip, r2
   3078c:	1a40      	subs	r0, r0, r1
   3078e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   30792:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
   30796:	eb7c 010c 	sbcs.w	r1, ip, ip
   3079a:	d32d      	bcc.n	307f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
   3079c:	60a0      	str	r0, [r4, #8]
   3079e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
   307a2:	f884 a010 	strb.w	sl, [r4, #16]
   307a6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   307aa:	f10d 0b18 	add.w	fp, sp, #24
   307ae:	2d20      	cmp	r5, #32
   307b0:	d055      	beq.n	3085e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
   307b2:	f508 6180 	add.w	r1, r8, #1024	; 0x400
   307b6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
   307ba:	9001      	str	r0, [sp, #4]
   307bc:	484a      	ldr	r0, [pc, #296]	; (308e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
   307be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   307c2:	f8d4 a000 	ldr.w	sl, [r4]
   307c6:	eb00 1845 	add.w	r8, r0, r5, lsl #5
   307ca:	f108 0008 	add.w	r0, r8, #8
   307ce:	eb1a 0201 	adds.w	r2, sl, r1
   307d2:	eb43 0107 	adc.w	r1, r3, r7
   307d6:	e9d0 9300 	ldrd	r9, r3, [r0]
   307da:	ebb9 0202 	subs.w	r2, r9, r2
   307de:	eb73 0101 	sbcs.w	r1, r3, r1
   307e2:	d325      	bcc.n	30830 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
   307e4:	89c0      	ldrh	r0, [r0, #14]
   307e6:	b398      	cbz	r0, 30850 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
   307e8:	89e0      	ldrh	r0, [r4, #14]
   307ea:	b148      	cbz	r0, 30800 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
   307ec:	e037      	b.n	3085e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
   307ee:	f640 3135 	movw	r1, #2869	; 0xb35
   307f2:	2070      	movs	r0, #112	; 0x70
   307f4:	f002 fbd0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   307f8:	b00f      	add	sp, #60	; 0x3c
   307fa:	2001      	movs	r0, #1
   307fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30800:	f002 fa0c 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   30804:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   30808:	bf08      	it	eq
   3080a:	200d      	moveq	r0, #13
   3080c:	d00b      	beq.n	30826 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
   3080e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   30812:	3856      	subs	r0, #86	; 0x56
   30814:	bf08      	it	eq
   30816:	201c      	moveq	r0, #28
   30818:	d005      	beq.n	30826 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
   3081a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   3081e:	389f      	subs	r0, #159	; 0x9f
   30820:	bf14      	ite	ne
   30822:	4638      	movne	r0, r7
   30824:	2032      	moveq	r0, #50	; 0x32
   30826:	1c41      	adds	r1, r0, #1
   30828:	ebb9 000a 	subs.w	r0, r9, sl
   3082c:	4288      	cmp	r0, r1
   3082e:	da16      	bge.n	3085e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
   30830:	f88b 5000 	strb.w	r5, [fp]
   30834:	f898 0018 	ldrb.w	r0, [r8, #24]
   30838:	7c21      	ldrb	r1, [r4, #16]
   3083a:	4281      	cmp	r1, r0
   3083c:	d309      	bcc.n	30852 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
   3083e:	6821      	ldr	r1, [r4, #0]
   30840:	980a      	ldr	r0, [sp, #40]	; 0x28
   30842:	1a40      	subs	r0, r0, r1
   30844:	60a0      	str	r0, [r4, #8]
   30846:	b00f      	add	sp, #60	; 0x3c
   30848:	f04f 0002 	mov.w	r0, #2
   3084c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30850:	e005      	b.n	3085e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
   30852:	9801      	ldr	r0, [sp, #4]
   30854:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   30858:	7845      	ldrb	r5, [r0, #1]
   3085a:	2d20      	cmp	r5, #32
   3085c:	d1ae      	bne.n	307bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
   3085e:	2005      	movs	r0, #5
   30860:	f001 fec2 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   30864:	4d1e      	ldr	r5, [pc, #120]	; (308e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
   30866:	f04f 30ff 	mov.w	r0, #4294967295
   3086a:	6068      	str	r0, [r5, #4]
   3086c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   30870:	f89d 2018 	ldrb.w	r2, [sp, #24]
   30874:	2120      	movs	r1, #32
   30876:	2a20      	cmp	r2, #32
   30878:	d003      	beq.n	30882 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
   3087a:	2005      	movs	r0, #5
   3087c:	f7fe ffe4 	bl	2f848 <MPSL_IRQ_RADIO_Handler+0x3c>
   30880:	e004      	b.n	3088c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
   30882:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   30886:	4428      	add	r0, r5
   30888:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
   3088c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
   30890:	4916      	ldr	r1, [pc, #88]	; (308ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
   30892:	eb01 1182 	add.w	r1, r1, r2, lsl #6
   30896:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
   3089a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   3089e:	7048      	strb	r0, [r1, #1]
   308a0:	6828      	ldr	r0, [r5, #0]
   308a2:	4430      	add	r0, r6
   308a4:	6028      	str	r0, [r5, #0]
   308a6:	20ff      	movs	r0, #255	; 0xff
   308a8:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   308ac:	7e68      	ldrb	r0, [r5, #25]
   308ae:	2801      	cmp	r0, #1
   308b0:	d10a      	bne.n	308c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
   308b2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
   308b6:	6823      	ldr	r3, [r4, #0]
   308b8:	1818      	adds	r0, r3, r0
   308ba:	f142 0100 	adc.w	r1, r2, #0
   308be:	1e40      	subs	r0, r0, #1
   308c0:	f141 31ff 	adc.w	r1, r1, #4294967295
   308c4:	f001 fcb2 	bl	3222c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
   308c8:	f89d 0018 	ldrb.w	r0, [sp, #24]
   308cc:	2820      	cmp	r0, #32
   308ce:	d003      	beq.n	308d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
   308d0:	4807      	ldr	r0, [pc, #28]	; (308f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
   308d2:	7840      	ldrb	r0, [r0, #1]
   308d4:	f002 fc32 	bl	3313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   308d8:	b00f      	add	sp, #60	; 0x3c
   308da:	2000      	movs	r0, #0
   308dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   308e0:	20001040 	.word	0x20001040
   308e4:	0f424000 	.word	0x0f424000
   308e8:	20000bc0 	.word	0x20000bc0
   308ec:	20000fc0 	.word	0x20000fc0
   308f0:	20000308 	.word	0x20000308

000308f4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
   308f4:	b570      	push	{r4, r5, r6, lr}
   308f6:	4a23      	ldr	r2, [pc, #140]	; (30984 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
   308f8:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
   308fc:	2920      	cmp	r1, #32
   308fe:	d039      	beq.n	30974 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
   30900:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
   30904:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
   30908:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
   3090c:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   30910:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
   30914:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   30918:	4411      	add	r1, r2
   3091a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   3091e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
   30922:	eb05 1484 	add.w	r4, r5, r4, lsl #6
   30926:	2920      	cmp	r1, #32
   30928:	d029      	beq.n	3097e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
   3092a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
   3092e:	7e2d      	ldrb	r5, [r5, #24]
   30930:	42a8      	cmp	r0, r5
   30932:	bf3c      	itt	cc
   30934:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
   30938:	7849      	ldrbcc	r1, [r1, #1]
   3093a:	d3f4      	bcc.n	30926 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
   3093c:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
   30940:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   30944:	f8dc 5008 	ldr.w	r5, [ip, #8]
   30948:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
   3094c:	6814      	ldr	r4, [r2, #0]
   3094e:	1828      	adds	r0, r5, r0
   30950:	f146 0200 	adc.w	r2, r6, #0
   30954:	ebb1 0c00 	subs.w	ip, r1, r0
   30958:	eb73 0202 	sbcs.w	r2, r3, r2
   3095c:	d308      	bcc.n	30970 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
   3095e:	1a08      	subs	r0, r1, r0
   30960:	f006 fc9d 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   30964:	f104 0167 	add.w	r1, r4, #103	; 0x67
   30968:	4281      	cmp	r1, r0
   3096a:	bf9c      	itt	ls
   3096c:	1b00      	subls	r0, r0, r4
   3096e:	bd70      	popls	{r4, r5, r6, pc}
   30970:	2000      	movs	r0, #0
   30972:	bd70      	pop	{r4, r5, r6, pc}
   30974:	f640 3108 	movw	r1, #2824	; 0xb08
   30978:	2070      	movs	r0, #112	; 0x70
   3097a:	f002 fb0d 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3097e:	f04f 30ff 	mov.w	r0, #4294967295
   30982:	bd70      	pop	{r4, r5, r6, pc}
   30984:	20001040 	.word	0x20001040

00030988 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
   30988:	4806      	ldr	r0, [pc, #24]	; (309a4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
   3098a:	b510      	push	{r4, lr}
   3098c:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   30990:	2920      	cmp	r1, #32
   30992:	bf1c      	itt	ne
   30994:	7e00      	ldrbne	r0, [r0, #24]
   30996:	bd10      	popne	{r4, pc}
   30998:	f640 312f 	movw	r1, #2863	; 0xb2f
   3099c:	2070      	movs	r0, #112	; 0x70
   3099e:	f002 fafb 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   309a2:	0000      	.short	0x0000
   309a4:	20001040 	.word	0x20001040

000309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
   309a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   309aa:	4d6f      	ldr	r5, [pc, #444]	; (30b68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
   309ac:	2600      	movs	r6, #0
   309ae:	f505 6490 	add.w	r4, r5, #1152	; 0x480
   309b2:	2701      	movs	r7, #1
   309b4:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
   309b8:	4b6c      	ldr	r3, [pc, #432]	; (30b6c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
   309ba:	2808      	cmp	r0, #8
   309bc:	d273      	bcs.n	30aa6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
   309be:	e8df f000 	tbb	[pc, r0]
   309c2:	7804      	.short	0x7804
   309c4:	47ceb3a0 	.word	0x47ceb3a0
   309c8:	bdb8      	.short	0xbdb8
   309ca:	43c8      	mvns	r0, r1
   309cc:	ea70 0002 	orns	r0, r0, r2
   309d0:	d105      	bne.n	309de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
   309d2:	f002 f945 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   309d6:	f001 fd2b 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   309da:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
   309de:	8ae0      	ldrh	r0, [r4, #22]
   309e0:	b110      	cbz	r0, 309e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
   309e2:	f002 fa61 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   309e6:	b180      	cbz	r0, 30a0a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
   309e8:	f7ff fcea 	bl	303c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
   309ec:	20ff      	movs	r0, #255	; 0xff
   309ee:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   309f2:	6861      	ldr	r1, [r4, #4]
   309f4:	f1b1 3fff 	cmp.w	r1, #4294967295
   309f8:	d003      	beq.n	30a02 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
   309fa:	2005      	movs	r0, #5
   309fc:	f001 fd3a 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   30a00:	b140      	cbz	r0, 30a14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
   30a02:	7e60      	ldrb	r0, [r4, #25]
   30a04:	2801      	cmp	r0, #1
   30a06:	d114      	bne.n	30a32 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
   30a08:	e009      	b.n	30a1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
   30a0a:	f640 012c 	movw	r1, #2092	; 0x82c
   30a0e:	2070      	movs	r0, #112	; 0x70
   30a10:	f002 fac2 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30a14:	f640 0131 	movw	r1, #2097	; 0x831
   30a18:	2070      	movs	r0, #112	; 0x70
   30a1a:	f002 fabd 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30a1e:	68a2      	ldr	r2, [r4, #8]
   30a20:	6920      	ldr	r0, [r4, #16]
   30a22:	68e1      	ldr	r1, [r4, #12]
   30a24:	1810      	adds	r0, r2, r0
   30a26:	4171      	adcs	r1, r6
   30a28:	1e40      	subs	r0, r0, #1
   30a2a:	f141 31ff 	adc.w	r1, r1, #4294967295
   30a2e:	f001 fbfd 	bl	3222c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
   30a32:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   30a36:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   30a3a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   30a3e:	6840      	ldr	r0, [r0, #4]
   30a40:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   30a44:	680a      	ldr	r2, [r1, #0]
   30a46:	b001      	add	sp, #4
   30a48:	2101      	movs	r1, #1
   30a4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   30a4e:	4710      	bx	r2
   30a50:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
   30a54:	b160      	cbz	r0, 30a70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
   30a56:	43c8      	mvns	r0, r1
   30a58:	ea70 0002 	orns	r0, r0, r2
   30a5c:	d105      	bne.n	30a6a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
   30a5e:	f002 f8ff 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   30a62:	f001 fce5 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   30a66:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
   30a6a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   30a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30a70:	f7ff fca6 	bl	303c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
   30a74:	f04f 30ff 	mov.w	r0, #4294967295
   30a78:	6060      	str	r0, [r4, #4]
   30a7a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   30a7e:	f88d 0000 	strb.w	r0, [sp]
   30a82:	f89d 0000 	ldrb.w	r0, [sp]
   30a86:	b178      	cbz	r0, 30aa8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
   30a88:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   30a8c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   30a90:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   30a94:	6840      	ldr	r0, [r0, #4]
   30a96:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   30a9a:	680a      	ldr	r2, [r1, #0]
   30a9c:	b001      	add	sp, #4
   30a9e:	2106      	movs	r1, #6
   30aa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   30aa4:	4710      	bx	r2
   30aa6:	e05a      	b.n	30b5e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
   30aa8:	f640 0148 	movw	r1, #2120	; 0x848
   30aac:	2070      	movs	r0, #112	; 0x70
   30aae:	f002 fa73 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30ab2:	f7ff fc85 	bl	303c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
   30ab6:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
   30aba:	f002 f9f5 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   30abe:	b130      	cbz	r0, 30ace <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
   30ac0:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
   30ac4:	43c9      	mvns	r1, r1
   30ac6:	ea71 0000 	orns	r0, r1, r0
   30aca:	d005      	beq.n	30ad8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
   30acc:	e00a      	b.n	30ae4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
   30ace:	f640 0156 	movw	r1, #2134	; 0x856
   30ad2:	2070      	movs	r0, #112	; 0x70
   30ad4:	f002 fa60 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30ad8:	f002 f8c2 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   30adc:	f001 fca8 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   30ae0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
   30ae4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   30ae8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   30aec:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   30af0:	6840      	ldr	r0, [r0, #4]
   30af2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   30af6:	680a      	ldr	r2, [r1, #0]
   30af8:	b001      	add	sp, #4
   30afa:	2100      	movs	r1, #0
   30afc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   30b00:	4710      	bx	r2
   30b02:	f001 fe95 	bl	32830 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
   30b06:	8ae0      	ldrh	r0, [r4, #22]
   30b08:	b110      	cbz	r0, 30b10 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
   30b0a:	f002 f9cd 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   30b0e:	b130      	cbz	r0, 30b1e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
   30b10:	f001 fea2 	bl	32858 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
   30b14:	2800      	cmp	r0, #0
   30b16:	bf18      	it	ne
   30b18:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
   30b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30b1e:	f44f 6106 	mov.w	r1, #2144	; 0x860
   30b22:	2070      	movs	r0, #112	; 0x70
   30b24:	f002 fa38 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30b28:	4811      	ldr	r0, [pc, #68]	; (30b70 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
   30b2a:	6007      	str	r7, [r0, #0]
   30b2c:	6898      	ldr	r0, [r3, #8]
   30b2e:	6007      	str	r7, [r0, #0]
   30b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30b32:	7818      	ldrb	r0, [r3, #0]
   30b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30b38:	f002 bb00 	b.w	3313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   30b3c:	f7ff fc40 	bl	303c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
   30b40:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   30b44:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   30b48:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   30b4c:	6840      	ldr	r0, [r0, #4]
   30b4e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   30b52:	680a      	ldr	r2, [r1, #0]
   30b54:	b001      	add	sp, #4
   30b56:	2105      	movs	r1, #5
   30b58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   30b5c:	4710      	bx	r2
   30b5e:	f640 0173 	movw	r1, #2163	; 0x873
   30b62:	2070      	movs	r0, #112	; 0x70
   30b64:	f002 fa18 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30b68:	20000bc0 	.word	0x20000bc0
   30b6c:	20000308 	.word	0x20000308
   30b70:	40000508 	.word	0x40000508

00030b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
   30b74:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b78:	48f7      	ldr	r0, [pc, #988]	; (30f58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
   30b7a:	b097      	sub	sp, #92	; 0x5c
   30b7c:	460c      	mov	r4, r1
   30b7e:	6800      	ldr	r0, [r0, #0]
   30b80:	4ff6      	ldr	r7, [pc, #984]	; (30f5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
   30b82:	05c0      	lsls	r0, r0, #23
   30b84:	0dc0      	lsrs	r0, r0, #23
   30b86:	d00e      	beq.n	30ba6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
   30b88:	3810      	subs	r0, #16
   30b8a:	b240      	sxtb	r0, r0
   30b8c:	2800      	cmp	r0, #0
   30b8e:	bfb8      	it	lt
   30b90:	f000 000f 	andlt.w	r0, r0, #15
   30b94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   30b98:	bfac      	ite	ge
   30b9a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
   30b9e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
   30ba2:	0940      	lsrs	r0, r0, #5
   30ba4:	d00c      	beq.n	30bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
   30ba6:	7820      	ldrb	r0, [r4, #0]
   30ba8:	f04f 0a00 	mov.w	sl, #0
   30bac:	2800      	cmp	r0, #0
   30bae:	bf18      	it	ne
   30bb0:	2801      	cmpne	r0, #1
   30bb2:	d017      	beq.n	30be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
   30bb4:	f240 61f9 	movw	r1, #1785	; 0x6f9
   30bb8:	f04f 0070 	mov.w	r0, #112	; 0x70
   30bbc:	f002 f9ec 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30bc0:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
   30bc4:	f04f 0a01 	mov.w	sl, #1
   30bc8:	2820      	cmp	r0, #32
   30bca:	d006      	beq.n	30bda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
   30bcc:	7820      	ldrb	r0, [r4, #0]
   30bce:	b148      	cbz	r0, 30be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
   30bd0:	f240 61f5 	movw	r1, #1781	; 0x6f5
   30bd4:	2070      	movs	r0, #112	; 0x70
   30bd6:	f002 f9df 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30bda:	f240 61f2 	movw	r1, #1778	; 0x6f2
   30bde:	2070      	movs	r0, #112	; 0x70
   30be0:	f002 f9da 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   30be4:	f8df b378 	ldr.w	fp, [pc, #888]	; 30f60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
   30be8:	f1bb 0f00 	cmp.w	fp, #0
   30bec:	d004      	beq.n	30bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
   30bee:	2100      	movs	r1, #0
   30bf0:	f240 60fc 	movw	r0, #1788	; 0x6fc
   30bf4:	f3af 8000 	nop.w
   30bf8:	2000      	movs	r0, #0
   30bfa:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   30bfe:	a905      	add	r1, sp, #20
   30c00:	9112      	str	r1, [sp, #72]	; 0x48
   30c02:	49d8      	ldr	r1, [pc, #864]	; (30f64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
   30c04:	9817      	ldr	r0, [sp, #92]	; 0x5c
   30c06:	f04f 0801 	mov.w	r8, #1
   30c0a:	eb01 1040 	add.w	r0, r1, r0, lsl #5
   30c0e:	9001      	str	r0, [sp, #4]
   30c10:	f1bb 0f00 	cmp.w	fp, #0
   30c14:	d004      	beq.n	30c20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
   30c16:	2100      	movs	r1, #0
   30c18:	f240 7007 	movw	r0, #1799	; 0x707
   30c1c:	f3af 8000 	nop.w
   30c20:	f1b8 0f00 	cmp.w	r8, #0
   30c24:	d009      	beq.n	30c3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
   30c26:	bf00      	nop
   30c28:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
   30c2c:	2500      	movs	r5, #0
   30c2e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
   30c32:	f1ba 0f00 	cmp.w	sl, #0
   30c36:	d007      	beq.n	30c48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
   30c38:	e03e      	b.n	30cb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
   30c3a:	48cb      	ldr	r0, [pc, #812]	; (30f68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
   30c3c:	2800      	cmp	r0, #0
   30c3e:	bf18      	it	ne
   30c40:	f3af 8000 	nopne.w
   30c44:	b662      	cpsie	i
   30c46:	e7ef      	b.n	30c28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
   30c48:	46b1      	mov	r9, r6
   30c4a:	2001      	movs	r0, #1
   30c4c:	ea20 0609 	bic.w	r6, r0, r9
   30c50:	48c6      	ldr	r0, [pc, #792]	; (30f6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
   30c52:	2240      	movs	r2, #64	; 0x40
   30c54:	eb00 1189 	add.w	r1, r0, r9, lsl #6
   30c58:	eb00 1086 	add.w	r0, r0, r6, lsl #6
   30c5c:	f006 fcaf 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   30c60:	f1bb 0f00 	cmp.w	fp, #0
   30c64:	d004      	beq.n	30c70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
   30c66:	2100      	movs	r1, #0
   30c68:	f240 503c 	movw	r0, #1340	; 0x53c
   30c6c:	f3af 8000 	nop.w
   30c70:	eb09 0149 	add.w	r1, r9, r9, lsl #1
   30c74:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   30c78:	4439      	add	r1, r7
   30c7a:	4438      	add	r0, r7
   30c7c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
   30c7e:	8502      	strh	r2, [r0, #40]	; 0x28
   30c80:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   30c84:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   30c88:	f1bb 0f00 	cmp.w	fp, #0
   30c8c:	d004      	beq.n	30c98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
   30c8e:	2100      	movs	r1, #0
   30c90:	f44f 60a8 	mov.w	r0, #1344	; 0x540
   30c94:	f3af 8000 	nop.w
   30c98:	f1bb 0f00 	cmp.w	fp, #0
   30c9c:	d004      	beq.n	30ca8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
   30c9e:	2100      	movs	r1, #0
   30ca0:	f240 7011 	movw	r0, #1809	; 0x711
   30ca4:	f3af 8000 	nop.w
   30ca8:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
   30cac:	f88d 0020 	strb.w	r0, [sp, #32]
   30cb0:	f89d 0020 	ldrb.w	r0, [sp, #32]
   30cb4:	2800      	cmp	r0, #0
   30cb6:	d1ab      	bne.n	30c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
   30cb8:	f1bb 0f00 	cmp.w	fp, #0
   30cbc:	d004      	beq.n	30cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
   30cbe:	2100      	movs	r1, #0
   30cc0:	f240 701b 	movw	r0, #1819	; 0x71b
   30cc4:	f3af 8000 	nop.w
   30cc8:	f001 fbb2 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   30ccc:	4681      	mov	r9, r0
   30cce:	a802      	add	r0, sp, #8
   30cd0:	900a      	str	r0, [sp, #40]	; 0x28
   30cd2:	4688      	mov	r8, r1
   30cd4:	8921      	ldrh	r1, [r4, #8]
   30cd6:	4628      	mov	r0, r5
   30cd8:	f361 401f 	bfi	r0, r1, #16, #16
   30cdc:	4601      	mov	r1, r0
   30cde:	7aa2      	ldrb	r2, [r4, #10]
   30ce0:	4628      	mov	r0, r5
   30ce2:	f362 0007 	bfi	r0, r2, #0, #8
   30ce6:	7ae2      	ldrb	r2, [r4, #11]
   30ce8:	f362 200f 	bfi	r0, r2, #8, #8
   30cec:	7822      	ldrb	r2, [r4, #0]
   30cee:	9502      	str	r5, [sp, #8]
   30cf0:	f362 4017 	bfi	r0, r2, #16, #8
   30cf4:	e9cd 5104 	strd	r5, r1, [sp, #16]
   30cf8:	e9cd 0506 	strd	r0, r5, [sp, #24]
   30cfc:	9503      	str	r5, [sp, #12]
   30cfe:	7820      	ldrb	r0, [r4, #0]
   30d00:	b380      	cbz	r0, 30d64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
   30d02:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   30d06:	499a      	ldr	r1, [pc, #616]	; (30f70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
   30d08:	1a08      	subs	r0, r1, r0
   30d0a:	990a      	ldr	r1, [sp, #40]	; 0x28
   30d0c:	f101 020c 	add.w	r2, r1, #12
   30d10:	a914      	add	r1, sp, #80	; 0x50
   30d12:	f001 f8ad 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   30d16:	2200      	movs	r2, #0
   30d18:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   30d1c:	4648      	mov	r0, r9
   30d1e:	4641      	mov	r1, r8
   30d20:	f7fe ff66 	bl	2fbf0 <MPSL_IRQ_RADIO_Handler+0x3e4>
   30d24:	468c      	mov	ip, r1
   30d26:	7ae1      	ldrb	r1, [r4, #11]
   30d28:	2900      	cmp	r1, #0
   30d2a:	bf0c      	ite	eq
   30d2c:	217a      	moveq	r1, #122	; 0x7a
   30d2e:	214a      	movne	r1, #74	; 0x4a
   30d30:	6862      	ldr	r2, [r4, #4]
   30d32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   30d36:	4411      	add	r1, r2
   30d38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   30d3c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   30d40:	441a      	add	r2, r3
   30d42:	4411      	add	r1, r2
   30d44:	1c88      	adds	r0, r1, #2
   30d46:	f001 f877 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   30d4a:	9600      	str	r6, [sp, #0]
   30d4c:	9004      	str	r0, [sp, #16]
   30d4e:	464a      	mov	r2, r9
   30d50:	4643      	mov	r3, r8
   30d52:	6920      	ldr	r0, [r4, #16]
   30d54:	990a      	ldr	r1, [sp, #40]	; 0x28
   30d56:	f7fe fdb3 	bl	2f8c0 <MPSL_IRQ_RADIO_Handler+0xb4>
   30d5a:	2800      	cmp	r0, #0
   30d5c:	bf08      	it	eq
   30d5e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
   30d62:	e046      	b.n	30df2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
   30d64:	e7ff      	b.n	30d66 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
   30d66:	4648      	mov	r0, r9
   30d68:	4641      	mov	r1, r8
   30d6a:	f001 f803 	bl	31d74 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
   30d6e:	f8df c204 	ldr.w	ip, [pc, #516]	; 30f74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
   30d72:	4602      	mov	r2, r0
   30d74:	eb10 0c0c 	adds.w	ip, r0, ip
   30d78:	460b      	mov	r3, r1
   30d7a:	f141 0e00 	adc.w	lr, r1, #0
   30d7e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   30d82:	ebb0 0c0c 	subs.w	ip, r0, ip
   30d86:	eb71 0c0e 	sbcs.w	ip, r1, lr
   30d8a:	d229      	bcs.n	30de0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
   30d8c:	3229      	adds	r2, #41	; 0x29
   30d8e:	f143 0300 	adc.w	r3, r3, #0
   30d92:	1a82      	subs	r2, r0, r2
   30d94:	eb71 0203 	sbcs.w	r2, r1, r3
   30d98:	d322      	bcc.n	30de0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
   30d9a:	8922      	ldrh	r2, [r4, #8]
   30d9c:	ab0a      	add	r3, sp, #40	; 0x28
   30d9e:	1a80      	subs	r0, r0, r2
   30da0:	eb61 0105 	sbc.w	r1, r1, r5
   30da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   30da6:	1e40      	subs	r0, r0, #1
   30da8:	9200      	str	r2, [sp, #0]
   30daa:	f141 31ff 	adc.w	r1, r1, #4294967295
   30dae:	aa0d      	add	r2, sp, #52	; 0x34
   30db0:	f001 f804 	bl	31dbc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
   30db4:	7ae0      	ldrb	r0, [r4, #11]
   30db6:	2800      	cmp	r0, #0
   30db8:	bf0c      	ite	eq
   30dba:	207a      	moveq	r0, #122	; 0x7a
   30dbc:	204a      	movne	r0, #74	; 0x4a
   30dbe:	990d      	ldr	r1, [sp, #52]	; 0x34
   30dc0:	8922      	ldrh	r2, [r4, #8]
   30dc2:	4408      	add	r0, r1
   30dc4:	6861      	ldr	r1, [r4, #4]
   30dc6:	4411      	add	r1, r2
   30dc8:	4408      	add	r0, r1
   30dca:	1c80      	adds	r0, r0, #2
   30dcc:	f001 f834 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   30dd0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   30dd4:	e9cd 1202 	strd	r1, r2, [sp, #8]
   30dd8:	1a40      	subs	r0, r0, r1
   30dda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   30dde:	e007      	b.n	30df0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
   30de0:	f1b9 0101 	subs.w	r1, r9, #1
   30de4:	f148 30ff 	adc.w	r0, r8, #4294967295
   30de8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   30dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   30df0:	9004      	str	r0, [sp, #16]
   30df2:	f1bb 0f00 	cmp.w	fp, #0
   30df6:	d004      	beq.n	30e02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
   30df8:	2100      	movs	r1, #0
   30dfa:	f240 7022 	movw	r0, #1826	; 0x722
   30dfe:	f3af 8000 	nop.w
   30e02:	495a      	ldr	r1, [pc, #360]	; (30f6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
   30e04:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   30e08:	eb01 1186 	add.w	r1, r1, r6, lsl #6
   30e0c:	9108      	str	r1, [sp, #32]
   30e0e:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
   30e12:	a802      	add	r0, sp, #8
   30e14:	2901      	cmp	r1, #1
   30e16:	bf18      	it	ne
   30e18:	2902      	cmpne	r1, #2
   30e1a:	d141      	bne.n	30ea0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
   30e1c:	9511      	str	r5, [sp, #68]	; 0x44
   30e1e:	9a02      	ldr	r2, [sp, #8]
   30e20:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
   30e24:	1a53      	subs	r3, r2, r1
   30e26:	f8dd c010 	ldr.w	ip, [sp, #16]
   30e2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   30e2e:	eb12 020c 	adds.w	r2, r2, ip
   30e32:	1a51      	subs	r1, r2, r1
   30e34:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   30e38:	2b02      	cmp	r3, #2
   30e3a:	d374      	bcc.n	30f26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
   30e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   30e40:	bf98      	it	ls
   30e42:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
   30e46:	d86e      	bhi.n	30f26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
   30e48:	2501      	movs	r5, #1
   30e4a:	ab14      	add	r3, sp, #80	; 0x50
   30e4c:	aa0e      	add	r2, sp, #56	; 0x38
   30e4e:	4631      	mov	r1, r6
   30e50:	f7fe ff1e 	bl	2fc90 <MPSL_IRQ_RADIO_Handler+0x484>
   30e54:	2800      	cmp	r0, #0
   30e56:	d06d      	beq.n	30f34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
   30e58:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   30e5c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   30e60:	4633      	mov	r3, r6
   30e62:	428a      	cmp	r2, r1
   30e64:	d06a      	beq.n	30f3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
   30e66:	2005      	movs	r0, #5
   30e68:	f7fe fcee 	bl	2f848 <MPSL_IRQ_RADIO_Handler+0x3c>
   30e6c:	9908      	ldr	r1, [sp, #32]
   30e6e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
   30e72:	7048      	strb	r0, [r1, #1]
   30e74:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   30e78:	2820      	cmp	r0, #32
   30e7a:	bf01      	itttt	eq
   30e7c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
   30e80:	4438      	addeq	r0, r7
   30e82:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
   30e86:	9511      	streq	r5, [sp, #68]	; 0x44
   30e88:	bf1e      	ittt	ne
   30e8a:	9908      	ldrne	r1, [sp, #32]
   30e8c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
   30e90:	f880 8001 	strbne.w	r8, [r0, #1]
   30e94:	4632      	mov	r2, r6
   30e96:	4641      	mov	r1, r8
   30e98:	f05f 0003 	movs.w	r0, #3
   30e9c:	f7ff fb3c 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   30ea0:	f1bb 0f00 	cmp.w	fp, #0
   30ea4:	d004      	beq.n	30eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
   30ea6:	2100      	movs	r1, #0
   30ea8:	f240 7027 	movw	r0, #1831	; 0x727
   30eac:	f3af 8000 	nop.w
   30eb0:	4831      	ldr	r0, [pc, #196]	; (30f78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
   30eb2:	2800      	cmp	r0, #0
   30eb4:	bf18      	it	ne
   30eb6:	f3af 8000 	nopne.w
   30eba:	f3ef 8810 	mrs	r8, PRIMASK
   30ebe:	b672      	cpsid	i
   30ec0:	f1bb 0f00 	cmp.w	fp, #0
   30ec4:	d004      	beq.n	30ed0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
   30ec6:	2100      	movs	r1, #0
   30ec8:	f240 702d 	movw	r0, #1837	; 0x72d
   30ecc:	f3af 8000 	nop.w
   30ed0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
   30ed4:	f88d 0020 	strb.w	r0, [sp, #32]
   30ed8:	f89d 0020 	ldrb.w	r0, [sp, #32]
   30edc:	2800      	cmp	r0, #0
   30ede:	f47f ae97 	bne.w	30c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
   30ee2:	f1bb 0f00 	cmp.w	fp, #0
   30ee6:	d004      	beq.n	30ef2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
   30ee8:	2100      	movs	r1, #0
   30eea:	f240 7035 	movw	r0, #1845	; 0x735
   30eee:	f3af 8000 	nop.w
   30ef2:	f10d 0e04 	add.w	lr, sp, #4
   30ef6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
   30efa:	f100 0e08 	add.w	lr, r0, #8
   30efe:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
   30f02:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   30f06:	e9c0 1206 	strd	r1, r2, [r0, #24]
   30f0a:	b325      	cbz	r5, 30f56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
   30f0c:	f1bb 0f00 	cmp.w	fp, #0
   30f10:	d004      	beq.n	30f1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
   30f12:	2100      	movs	r1, #0
   30f14:	f240 7042 	movw	r0, #1858	; 0x742
   30f18:	f3af 8000 	nop.w
   30f1c:	f1ba 0f00 	cmp.w	sl, #0
   30f20:	d146      	bne.n	30fb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
   30f22:	e02b      	b.n	30f7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
   30f24:	e7ff      	b.n	30f26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
   30f26:	4632      	mov	r2, r6
   30f28:	4641      	mov	r1, r8
   30f2a:	2004      	movs	r0, #4
   30f2c:	f7ff faf4 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   30f30:	2501      	movs	r5, #1
   30f32:	e7b5      	b.n	30ea0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
   30f34:	4632      	mov	r2, r6
   30f36:	4641      	mov	r1, r8
   30f38:	2004      	movs	r0, #4
   30f3a:	e7af      	b.n	30e9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
   30f3c:	2920      	cmp	r1, #32
   30f3e:	bf1d      	ittte	ne
   30f40:	9808      	ldrne	r0, [sp, #32]
   30f42:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
   30f46:	7840      	ldrbne	r0, [r0, #1]
   30f48:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
   30f4c:	bf04      	itt	eq
   30f4e:	4438      	addeq	r0, r7
   30f50:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
   30f54:	e78a      	b.n	30e6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
   30f56:	e03b      	b.n	30fd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
   30f58:	e000ed04 	.word	0xe000ed04
   30f5c:	20001040 	.word	0x20001040
   30f60:	00000000 	.word	0x00000000
   30f64:	20000bc0 	.word	0x20000bc0
   30f68:	00000000 	.word	0x00000000
   30f6c:	20000fc0 	.word	0x20000fc0
   30f70:	1e847fff 	.word	0x1e847fff
   30f74:	0f424000 	.word	0x0f424000
   30f78:	00000000 	.word	0x00000000
   30f7c:	9811      	ldr	r0, [sp, #68]	; 0x44
   30f7e:	f010 0fff 	tst.w	r0, #255	; 0xff
   30f82:	d015      	beq.n	30fb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
   30f84:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
   30f88:	2820      	cmp	r0, #32
   30f8a:	d111      	bne.n	30fb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
   30f8c:	f1bb 0f00 	cmp.w	fp, #0
   30f90:	d004      	beq.n	30f9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
   30f92:	2100      	movs	r1, #0
   30f94:	f240 7047 	movw	r0, #1863	; 0x747
   30f98:	f3af 8000 	nop.w
   30f9c:	4631      	mov	r1, r6
   30f9e:	2002      	movs	r0, #2
   30fa0:	f7ff faec 	bl	3057c <MPSL_IRQ_RADIO_Handler+0xd70>
   30fa4:	9010      	str	r0, [sp, #64]	; 0x40
   30fa6:	b918      	cbnz	r0, 30fb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
   30fa8:	7820      	ldrb	r0, [r4, #0]
   30faa:	b300      	cbz	r0, 30fee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
   30fac:	2801      	cmp	r0, #1
   30fae:	d02e      	beq.n	3100e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
   30fb0:	f1bb 0f00 	cmp.w	fp, #0
   30fb4:	d004      	beq.n	30fc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
   30fb6:	2100      	movs	r1, #0
   30fb8:	f240 7064 	movw	r0, #1892	; 0x764
   30fbc:	f3af 8000 	nop.w
   30fc0:	20ff      	movs	r0, #255	; 0xff
   30fc2:	f1ba 0f00 	cmp.w	sl, #0
   30fc6:	bf18      	it	ne
   30fc8:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
   30fcc:	d029      	beq.n	31022 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
   30fce:	2501      	movs	r5, #1
   30fd0:	f1bb 0f00 	cmp.w	fp, #0
   30fd4:	d004      	beq.n	30fe0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
   30fd6:	2100      	movs	r1, #0
   30fd8:	f240 7075 	movw	r0, #1909	; 0x775
   30fdc:	f3af 8000 	nop.w
   30fe0:	9810      	ldr	r0, [sp, #64]	; 0x40
   30fe2:	4c34      	ldr	r4, [pc, #208]	; (310b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
   30fe4:	2802      	cmp	r0, #2
   30fe6:	d025      	beq.n	31034 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
   30fe8:	2801      	cmp	r0, #1
   30fea:	d02b      	beq.n	31044 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
   30fec:	e02f      	b.n	3104e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
   30fee:	f1bb 0f00 	cmp.w	fp, #0
   30ff2:	d004      	beq.n	30ffe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
   30ff4:	2100      	movs	r1, #0
   30ff6:	f240 704f 	movw	r0, #1871	; 0x74f
   30ffa:	f3af 8000 	nop.w
   30ffe:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   31002:	2004      	movs	r0, #4
   31004:	9917      	ldr	r1, [sp, #92]	; 0x5c
   31006:	f7ff fa87 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   3100a:	2501      	movs	r5, #1
   3100c:	e7e0      	b.n	30fd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
   3100e:	f1bb 0f00 	cmp.w	fp, #0
   31012:	f43f adfd 	beq.w	30c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
   31016:	2100      	movs	r1, #0
   31018:	f240 705a 	movw	r0, #1882	; 0x75a
   3101c:	f3af 8000 	nop.w
   31020:	e5f6      	b.n	30c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
   31022:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   31026:	2101      	movs	r1, #1
   31028:	4391      	bics	r1, r2
   3102a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
   3102e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
   31032:	e7cc      	b.n	30fce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
   31034:	68b8      	ldr	r0, [r7, #8]
   31036:	ebb0 0009 	subs.w	r0, r0, r9
   3103a:	f006 f930 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   3103e:	6861      	ldr	r1, [r4, #4]
   31040:	b921      	cbnz	r1, 3104c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
   31042:	e004      	b.n	3104e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
   31044:	6861      	ldr	r1, [r4, #4]
   31046:	f04f 30ff 	mov.w	r0, #4294967295
   3104a:	b101      	cbz	r1, 3104e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
   3104c:	4788      	blx	r1
   3104e:	f1b8 0f00 	cmp.w	r8, #0
   31052:	d028      	beq.n	310a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
   31054:	f1bb 0f00 	cmp.w	fp, #0
   31058:	d004      	beq.n	31064 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
   3105a:	2100      	movs	r1, #0
   3105c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
   31060:	f3af 8000 	nop.w
   31064:	b19d      	cbz	r5, 3108e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
   31066:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
   3106a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   3106e:	4438      	add	r0, r7
   31070:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   31074:	2820      	cmp	r0, #32
   31076:	d00a      	beq.n	3108e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
   31078:	f1bb 0f00 	cmp.w	fp, #0
   3107c:	d004      	beq.n	31088 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
   3107e:	2100      	movs	r1, #0
   31080:	f240 708f 	movw	r0, #1935	; 0x78f
   31084:	f3af 8000 	nop.w
   31088:	7860      	ldrb	r0, [r4, #1]
   3108a:	f002 f857 	bl	3313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   3108e:	f1bb 0f00 	cmp.w	fp, #0
   31092:	d004      	beq.n	3109e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
   31094:	2100      	movs	r1, #0
   31096:	f240 7094 	movw	r0, #1940	; 0x794
   3109a:	f3af 8000 	nop.w
   3109e:	b019      	add	sp, #100	; 0x64
   310a0:	4628      	mov	r0, r5
   310a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310a6:	4804      	ldr	r0, [pc, #16]	; (310b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
   310a8:	2800      	cmp	r0, #0
   310aa:	bf18      	it	ne
   310ac:	f3af 8000 	nopne.w
   310b0:	b662      	cpsie	i
   310b2:	e7cf      	b.n	31054 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
   310b4:	20000308 	.word	0x20000308
   310b8:	00000000 	.word	0x00000000

000310bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
   310bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   310c0:	4604      	mov	r4, r0
   310c2:	7800      	ldrb	r0, [r0, #0]
   310c4:	b095      	sub	sp, #84	; 0x54
   310c6:	b118      	cbz	r0, 310d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
   310c8:	b015      	add	sp, #84	; 0x54
   310ca:	2000      	movs	r0, #0
   310cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310d0:	48d1      	ldr	r0, [pc, #836]	; (31418 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
   310d2:	6800      	ldr	r0, [r0, #0]
   310d4:	05c0      	lsls	r0, r0, #23
   310d6:	0dc0      	lsrs	r0, r0, #23
   310d8:	d00e      	beq.n	310f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
   310da:	3810      	subs	r0, #16
   310dc:	b240      	sxtb	r0, r0
   310de:	2800      	cmp	r0, #0
   310e0:	bfb8      	it	lt
   310e2:	f000 000f 	andlt.w	r0, r0, #15
   310e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   310ea:	bfac      	ite	ge
   310ec:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
   310f0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
   310f4:	0940      	lsrs	r0, r0, #5
   310f6:	d0e7      	beq.n	310c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
   310f8:	a80d      	add	r0, sp, #52	; 0x34
   310fa:	f8df 9320 	ldr.w	r9, [pc, #800]	; 3141c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
   310fe:	9009      	str	r0, [sp, #36]	; 0x24
   31100:	f1b9 0f00 	cmp.w	r9, #0
   31104:	d004      	beq.n	31110 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
   31106:	2100      	movs	r1, #0
   31108:	f240 50c5 	movw	r0, #1477	; 0x5c5
   3110c:	f3af 8000 	nop.w
   31110:	f8df 830c 	ldr.w	r8, [pc, #780]	; 31420 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
   31114:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
   31118:	2500      	movs	r5, #0
   3111a:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
   3111e:	9503      	str	r5, [sp, #12]
   31120:	f1b9 0f00 	cmp.w	r9, #0
   31124:	d004      	beq.n	31130 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
   31126:	2100      	movs	r1, #0
   31128:	f240 50ca 	movw	r0, #1482	; 0x5ca
   3112c:	f3af 8000 	nop.w
   31130:	2001      	movs	r0, #1
   31132:	ea20 0a06 	bic.w	sl, r0, r6
   31136:	48bb      	ldr	r0, [pc, #748]	; (31424 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
   31138:	2240      	movs	r2, #64	; 0x40
   3113a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
   3113e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
   31142:	f006 fa3c 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   31146:	f1b9 0f00 	cmp.w	r9, #0
   3114a:	d004      	beq.n	31156 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
   3114c:	2100      	movs	r1, #0
   3114e:	f240 503c 	movw	r0, #1340	; 0x53c
   31152:	f3af 8000 	nop.w
   31156:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   3115a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
   3115e:	eb01 0208 	add.w	r2, r1, r8
   31162:	4440      	add	r0, r8
   31164:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   31166:	8501      	strh	r1, [r0, #40]	; 0x28
   31168:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
   3116c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   31170:	f1b9 0f00 	cmp.w	r9, #0
   31174:	d004      	beq.n	31180 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
   31176:	2100      	movs	r1, #0
   31178:	f44f 60a8 	mov.w	r0, #1344	; 0x540
   3117c:	f3af 8000 	nop.w
   31180:	f1b9 0f00 	cmp.w	r9, #0
   31184:	d004      	beq.n	31190 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
   31186:	2100      	movs	r1, #0
   31188:	f240 50cf 	movw	r0, #1487	; 0x5cf
   3118c:	f3af 8000 	nop.w
   31190:	f001 f94e 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   31194:	460f      	mov	r7, r1
   31196:	4606      	mov	r6, r0
   31198:	8921      	ldrh	r1, [r4, #8]
   3119a:	4628      	mov	r0, r5
   3119c:	f361 401f 	bfi	r0, r1, #16, #16
   311a0:	4601      	mov	r1, r0
   311a2:	7aa2      	ldrb	r2, [r4, #10]
   311a4:	4628      	mov	r0, r5
   311a6:	f362 0007 	bfi	r0, r2, #0, #8
   311aa:	7ae2      	ldrb	r2, [r4, #11]
   311ac:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   311b0:	f362 200f 	bfi	r0, r2, #8, #8
   311b4:	7822      	ldrb	r2, [r4, #0]
   311b6:	950a      	str	r5, [sp, #40]	; 0x28
   311b8:	f362 4017 	bfi	r0, r2, #16, #8
   311bc:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
   311c0:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
   311c4:	950b      	str	r5, [sp, #44]	; 0x2c
   311c6:	7820      	ldrb	r0, [r4, #0]
   311c8:	b388      	cbz	r0, 3122e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
   311ca:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   311ce:	4896      	ldr	r0, [pc, #600]	; (31428 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
   311d0:	f10b 020c 	add.w	r2, fp, #12
   311d4:	1a40      	subs	r0, r0, r1
   311d6:	a911      	add	r1, sp, #68	; 0x44
   311d8:	f000 fe4a 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   311dc:	2200      	movs	r2, #0
   311de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   311e2:	4630      	mov	r0, r6
   311e4:	4639      	mov	r1, r7
   311e6:	f7fe fd03 	bl	2fbf0 <MPSL_IRQ_RADIO_Handler+0x3e4>
   311ea:	4684      	mov	ip, r0
   311ec:	7ae0      	ldrb	r0, [r4, #11]
   311ee:	460b      	mov	r3, r1
   311f0:	2800      	cmp	r0, #0
   311f2:	bf0c      	ite	eq
   311f4:	207a      	moveq	r0, #122	; 0x7a
   311f6:	204a      	movne	r0, #74	; 0x4a
   311f8:	6861      	ldr	r1, [r4, #4]
   311fa:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   311fe:	4408      	add	r0, r1
   31200:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   31204:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
   31208:	4411      	add	r1, r2
   3120a:	4408      	add	r0, r1
   3120c:	1c80      	adds	r0, r0, #2
   3120e:	f000 fe13 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   31212:	f8cd a000 	str.w	sl, [sp]
   31216:	900c      	str	r0, [sp, #48]	; 0x30
   31218:	4632      	mov	r2, r6
   3121a:	463b      	mov	r3, r7
   3121c:	4659      	mov	r1, fp
   3121e:	6920      	ldr	r0, [r4, #16]
   31220:	f7fe fb4e 	bl	2f8c0 <MPSL_IRQ_RADIO_Handler+0xb4>
   31224:	2800      	cmp	r0, #0
   31226:	bf08      	it	eq
   31228:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
   3122c:	e045      	b.n	312ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
   3122e:	e7ff      	b.n	31230 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
   31230:	4630      	mov	r0, r6
   31232:	4639      	mov	r1, r7
   31234:	f000 fd9e 	bl	31d74 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
   31238:	4b7c      	ldr	r3, [pc, #496]	; (3142c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
   3123a:	4602      	mov	r2, r0
   3123c:	eb10 0c03 	adds.w	ip, r0, r3
   31240:	468b      	mov	fp, r1
   31242:	f141 0300 	adc.w	r3, r1, #0
   31246:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   3124a:	ebb0 0c0c 	subs.w	ip, r0, ip
   3124e:	eb71 0303 	sbcs.w	r3, r1, r3
   31252:	d22a      	bcs.n	312aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
   31254:	3229      	adds	r2, #41	; 0x29
   31256:	f14b 0300 	adc.w	r3, fp, #0
   3125a:	1a82      	subs	r2, r0, r2
   3125c:	eb71 0203 	sbcs.w	r2, r1, r3
   31260:	d323      	bcc.n	312aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
   31262:	8922      	ldrh	r2, [r4, #8]
   31264:	ab12      	add	r3, sp, #72	; 0x48
   31266:	1a80      	subs	r0, r0, r2
   31268:	eb61 0105 	sbc.w	r1, r1, r5
   3126c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3126e:	1e40      	subs	r0, r0, #1
   31270:	9200      	str	r2, [sp, #0]
   31272:	f141 31ff 	adc.w	r1, r1, #4294967295
   31276:	aa07      	add	r2, sp, #28
   31278:	f000 fda0 	bl	31dbc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
   3127c:	7ae0      	ldrb	r0, [r4, #11]
   3127e:	2800      	cmp	r0, #0
   31280:	bf0c      	ite	eq
   31282:	207a      	moveq	r0, #122	; 0x7a
   31284:	204a      	movne	r0, #74	; 0x4a
   31286:	9907      	ldr	r1, [sp, #28]
   31288:	8922      	ldrh	r2, [r4, #8]
   3128a:	4408      	add	r0, r1
   3128c:	6861      	ldr	r1, [r4, #4]
   3128e:	4411      	add	r1, r2
   31290:	4408      	add	r0, r1
   31292:	1c80      	adds	r0, r0, #2
   31294:	f000 fdd0 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   31298:	4601      	mov	r1, r0
   3129a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
   3129e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
   312a2:	1a08      	subs	r0, r1, r0
   312a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   312a8:	e006      	b.n	312b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
   312aa:	1e70      	subs	r0, r6, #1
   312ac:	f147 31ff 	adc.w	r1, r7, #4294967295
   312b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   312b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   312b8:	900c      	str	r0, [sp, #48]	; 0x30
   312ba:	f1b9 0f00 	cmp.w	r9, #0
   312be:	d004      	beq.n	312ca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
   312c0:	2100      	movs	r1, #0
   312c2:	f240 50d5 	movw	r0, #1493	; 0x5d5
   312c6:	f3af 8000 	nop.w
   312ca:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
   312ce:	f8d8 1008 	ldr.w	r1, [r8, #8]
   312d2:	1808      	adds	r0, r1, r0
   312d4:	eb42 0105 	adc.w	r1, r2, r5
   312d8:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
   312dc:	2a20      	cmp	r2, #32
   312de:	d009      	beq.n	312f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
   312e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   312e4:	1a12      	subs	r2, r2, r0
   312e6:	eb73 0201 	sbcs.w	r2, r3, r1
   312ea:	d203      	bcs.n	312f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
   312ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   312f0:	2001      	movs	r0, #1
   312f2:	9003      	str	r0, [sp, #12]
   312f4:	f1b9 0f00 	cmp.w	r9, #0
   312f8:	d004      	beq.n	31304 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
   312fa:	2100      	movs	r1, #0
   312fc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
   31300:	f3af 8000 	nop.w
   31304:	990a      	ldr	r1, [sp, #40]	; 0x28
   31306:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   3130a:	1a0a      	subs	r2, r1, r0
   3130c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3130e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   31312:	18c9      	adds	r1, r1, r3
   31314:	1a08      	subs	r0, r1, r0
   31316:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3131a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   3131e:	bf98      	it	ls
   31320:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
   31324:	d80b      	bhi.n	3133e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
   31326:	4632      	mov	r2, r6
   31328:	463b      	mov	r3, r7
   3132a:	a90a      	add	r1, sp, #40	; 0x28
   3132c:	483f      	ldr	r0, [pc, #252]	; (3142c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
   3132e:	f8cd a000 	str.w	sl, [sp]
   31332:	f7fe fac5 	bl	2f8c0 <MPSL_IRQ_RADIO_Handler+0xb4>
   31336:	9903      	ldr	r1, [sp, #12]
   31338:	4308      	orrs	r0, r1
   3133a:	d145      	bne.n	313c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
   3133c:	e05f      	b.n	313fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
   3133e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
   31342:	aa05      	add	r2, sp, #20
   31344:	a903      	add	r1, sp, #12
   31346:	4658      	mov	r0, fp
   31348:	f000 fd92 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   3134c:	f001 fa8e 	bl	3286c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   31350:	f000 fd72 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   31354:	4682      	mov	sl, r0
   31356:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
   3135a:	2820      	cmp	r0, #32
   3135c:	d00a      	beq.n	31374 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
   3135e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
   31362:	f8d8 3008 	ldr.w	r3, [r8, #8]
   31366:	1d80      	adds	r0, r0, #6
   31368:	f145 0100 	adc.w	r1, r5, #0
   3136c:	181e      	adds	r6, r3, r0
   3136e:	eb42 0701 	adc.w	r7, r2, r1
   31372:	e024      	b.n	313be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
   31374:	360a      	adds	r6, #10
   31376:	f147 0700 	adc.w	r7, r7, #0
   3137a:	f1bb 0f00 	cmp.w	fp, #0
   3137e:	d017      	beq.n	313b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
   31380:	f001 fd92 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   31384:	b9a0      	cbnz	r0, 313b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
   31386:	f001 fc49 	bl	32c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
   3138a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
   3138e:	bf08      	it	eq
   31390:	200d      	moveq	r0, #13
   31392:	d00b      	beq.n	313ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
   31394:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
   31398:	3856      	subs	r0, #86	; 0x56
   3139a:	bf08      	it	eq
   3139c:	201c      	moveq	r0, #28
   3139e:	d005      	beq.n	313ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
   313a0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
   313a4:	389f      	subs	r0, #159	; 0x9f
   313a6:	bf14      	ite	ne
   313a8:	4628      	movne	r0, r5
   313aa:	2032      	moveq	r0, #50	; 0x32
   313ac:	1986      	adds	r6, r0, r6
   313ae:	416f      	adcs	r7, r5
   313b0:	9803      	ldr	r0, [sp, #12]
   313b2:	4582      	cmp	sl, r0
   313b4:	d903      	bls.n	313be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
   313b6:	ebaa 0000 	sub.w	r0, sl, r0
   313ba:	1986      	adds	r6, r0, r6
   313bc:	416f      	adcs	r7, r5
   313be:	201f      	movs	r0, #31
   313c0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   313c4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   313c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   313cc:	f000 fcd2 	bl	31d74 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
   313d0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   313d4:	1880      	adds	r0, r0, r2
   313d6:	eb41 0205 	adc.w	r2, r1, r5
   313da:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
   313de:	1840      	adds	r0, r0, r1
   313e0:	eb42 0105 	adc.w	r1, r2, r5
   313e4:	1c40      	adds	r0, r0, #1
   313e6:	f141 0100 	adc.w	r1, r1, #0
   313ea:	f1b9 0f00 	cmp.w	r9, #0
   313ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
   313f2:	d004      	beq.n	313fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
   313f4:	2100      	movs	r1, #0
   313f6:	f240 50fa 	movw	r0, #1530	; 0x5fa
   313fa:	f3af 8000 	nop.w
   313fe:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
   31402:	f88d 0000 	strb.w	r0, [sp]
   31406:	f89d 0000 	ldrb.w	r0, [sp]
   3140a:	2800      	cmp	r0, #0
   3140c:	f47f ae78 	bne.w	31100 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
   31410:	b015      	add	sp, #84	; 0x54
   31412:	2001      	movs	r0, #1
   31414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31418:	e000ed04 	.word	0xe000ed04
   3141c:	00000000 	.word	0x00000000
   31420:	20001040 	.word	0x20001040
   31424:	20000fc0 	.word	0x20000fc0
   31428:	1e847fff 	.word	0x1e847fff
   3142c:	0f424000 	.word	0x0f424000

00031430 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
   31430:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31434:	4d9d      	ldr	r5, [pc, #628]	; (316ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
   31436:	b08c      	sub	sp, #48	; 0x30
   31438:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
   3143c:	2000      	movs	r0, #0
   3143e:	9007      	str	r0, [sp, #28]
   31440:	9008      	str	r0, [sp, #32]
   31442:	2001      	movs	r0, #1
   31444:	4c9a      	ldr	r4, [pc, #616]	; (316b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
   31446:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
   3144a:	f04f 0800 	mov.w	r8, #0
   3144e:	4607      	mov	r7, r0
   31450:	9006      	str	r0, [sp, #24]
   31452:	b124      	cbz	r4, 3145e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
   31454:	2100      	movs	r1, #0
   31456:	f240 70a5 	movw	r0, #1957	; 0x7a5
   3145a:	f3af 8000 	nop.w
   3145e:	9806      	ldr	r0, [sp, #24]
   31460:	2800      	cmp	r0, #0
   31462:	d03c      	beq.n	314de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
   31464:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
   31468:	b124      	cbz	r4, 31474 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
   3146a:	2100      	movs	r1, #0
   3146c:	f240 70aa 	movw	r0, #1962	; 0x7aa
   31470:	f3af 8000 	nop.w
   31474:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
   31478:	2240      	movs	r2, #64	; 0x40
   3147a:	ea27 060a 	bic.w	r6, r7, sl
   3147e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
   31482:	eb09 118a 	add.w	r1, r9, sl, lsl #6
   31486:	4683      	mov	fp, r0
   31488:	f006 f899 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   3148c:	b124      	cbz	r4, 31498 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
   3148e:	2100      	movs	r1, #0
   31490:	f240 503c 	movw	r0, #1340	; 0x53c
   31494:	f3af 8000 	nop.w
   31498:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   3149c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   314a0:	4428      	add	r0, r5
   314a2:	4429      	add	r1, r5
   314a4:	9000      	str	r0, [sp, #0]
   314a6:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
   314a8:	8502      	strh	r2, [r0, #40]	; 0x28
   314aa:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   314ae:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
   314b2:	b124      	cbz	r4, 314be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
   314b4:	2100      	movs	r1, #0
   314b6:	f44f 60a8 	mov.w	r0, #1344	; 0x540
   314ba:	f3af 8000 	nop.w
   314be:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   314c2:	f88d 0008 	strb.w	r0, [sp, #8]
   314c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   314ca:	b178      	cbz	r0, 314ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
   314cc:	2c00      	cmp	r4, #0
   314ce:	bf1c      	itt	ne
   314d0:	2100      	movne	r1, #0
   314d2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
   314d6:	d0bc      	beq.n	31452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   314d8:	f3af 8000 	nop.w
   314dc:	e7b9      	b.n	31452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   314de:	4875      	ldr	r0, [pc, #468]	; (316b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
   314e0:	2800      	cmp	r0, #0
   314e2:	bf18      	it	ne
   314e4:	f3af 8000 	nopne.w
   314e8:	b662      	cpsie	i
   314ea:	e7bb      	b.n	31464 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
   314ec:	b124      	cbz	r4, 314f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
   314ee:	2100      	movs	r1, #0
   314f0:	f240 70b4 	movw	r0, #1972	; 0x7b4
   314f4:	f3af 8000 	nop.w
   314f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   314fa:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
   314fe:	2803      	cmp	r0, #3
   31500:	d17e      	bne.n	31600 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
   31502:	9a00      	ldr	r2, [sp, #0]
   31504:	990c      	ldr	r1, [sp, #48]	; 0x30
   31506:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
   3150a:	4288      	cmp	r0, r1
   3150c:	bf14      	ite	ne
   3150e:	f04f 0a00 	movne.w	sl, #0
   31512:	f04f 0a01 	moveq.w	sl, #1
   31516:	f102 0c28 	add.w	ip, r2, #40	; 0x28
   3151a:	4683      	mov	fp, r0
   3151c:	2220      	movs	r2, #32
   3151e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
   31522:	e003      	b.n	3152c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
   31524:	4602      	mov	r2, r0
   31526:	eb03 0042 	add.w	r0, r3, r2, lsl #1
   3152a:	7840      	ldrb	r0, [r0, #1]
   3152c:	4288      	cmp	r0, r1
   3152e:	d002      	beq.n	31536 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
   31530:	2820      	cmp	r0, #32
   31532:	d00a      	beq.n	3154a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
   31534:	e7f6      	b.n	31524 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
   31536:	2820      	cmp	r0, #32
   31538:	d007      	beq.n	3154a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
   3153a:	4583      	cmp	fp, r0
   3153c:	d107      	bne.n	3154e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
   3153e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
   31542:	7840      	ldrb	r0, [r0, #1]
   31544:	f88c 0000 	strb.w	r0, [ip]
   31548:	e007      	b.n	3155a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
   3154a:	4640      	mov	r0, r8
   3154c:	e00c      	b.n	31568 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
   3154e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   31552:	eb03 0142 	add.w	r1, r3, r2, lsl #1
   31556:	7840      	ldrb	r0, [r0, #1]
   31558:	7048      	strb	r0, [r1, #1]
   3155a:	b124      	cbz	r4, 31566 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
   3155c:	2100      	movs	r1, #0
   3155e:	f240 40a4 	movw	r0, #1188	; 0x4a4
   31562:	f3af 8000 	nop.w
   31566:	4638      	mov	r0, r7
   31568:	46c3      	mov	fp, r8
   3156a:	ea10 0f0a 	tst.w	r0, sl
   3156e:	bf18      	it	ne
   31570:	46bb      	movne	fp, r7
   31572:	2800      	cmp	r0, #0
   31574:	d04e      	beq.n	31614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
   31576:	b124      	cbz	r4, 31582 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
   31578:	2100      	movs	r1, #0
   3157a:	f240 70b9 	movw	r0, #1977	; 0x7b9
   3157e:	f3af 8000 	nop.w
   31582:	4632      	mov	r2, r6
   31584:	2001      	movs	r0, #1
   31586:	990c      	ldr	r1, [sp, #48]	; 0x30
   31588:	f7fe ffc6 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   3158c:	b124      	cbz	r4, 31598 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
   3158e:	2100      	movs	r1, #0
   31590:	f240 70c2 	movw	r0, #1986	; 0x7c2
   31594:	f3af 8000 	nop.w
   31598:	4847      	ldr	r0, [pc, #284]	; (316b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
   3159a:	2800      	cmp	r0, #0
   3159c:	bf18      	it	ne
   3159e:	f3af 8000 	nopne.w
   315a2:	f3ef 8010 	mrs	r0, PRIMASK
   315a6:	b672      	cpsid	i
   315a8:	9006      	str	r0, [sp, #24]
   315aa:	b124      	cbz	r4, 315b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
   315ac:	2100      	movs	r1, #0
   315ae:	f240 70c7 	movw	r0, #1991	; 0x7c7
   315b2:	f3af 8000 	nop.w
   315b6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
   315ba:	f88d 0008 	strb.w	r0, [sp, #8]
   315be:	f89d 0008 	ldrb.w	r0, [sp, #8]
   315c2:	b138      	cbz	r0, 315d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
   315c4:	2c00      	cmp	r4, #0
   315c6:	bf1c      	itt	ne
   315c8:	2100      	movne	r1, #0
   315ca:	f240 70cb 	movwne	r0, #1995	; 0x7cb
   315ce:	f43f af40 	beq.w	31452 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
   315d2:	e781      	b.n	314d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
   315d4:	f1bb 0f00 	cmp.w	fp, #0
   315d8:	d009      	beq.n	315ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
   315da:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
   315de:	2820      	cmp	r0, #32
   315e0:	d105      	bne.n	315ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
   315e2:	4631      	mov	r1, r6
   315e4:	2002      	movs	r0, #2
   315e6:	f7fe ffc9 	bl	3057c <MPSL_IRQ_RADIO_Handler+0xd70>
   315ea:	9008      	str	r0, [sp, #32]
   315ec:	b1f8      	cbz	r0, 3162e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
   315ee:	b124      	cbz	r4, 315fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
   315f0:	2100      	movs	r1, #0
   315f2:	f240 70df 	movw	r0, #2015	; 0x7df
   315f6:	f3af 8000 	nop.w
   315fa:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
   315fe:	e000      	b.n	31602 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
   31600:	e008      	b.n	31614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
   31602:	ea27 0000 	bic.w	r0, r7, r0
   31606:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
   3160a:	20ff      	movs	r0, #255	; 0xff
   3160c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   31610:	2001      	movs	r0, #1
   31612:	9007      	str	r0, [sp, #28]
   31614:	b124      	cbz	r4, 31620 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
   31616:	2100      	movs	r1, #0
   31618:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
   3161c:	f3af 8000 	nop.w
   31620:	9808      	ldr	r0, [sp, #32]
   31622:	4e26      	ldr	r6, [pc, #152]	; (316bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
   31624:	2802      	cmp	r0, #2
   31626:	d009      	beq.n	3163c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
   31628:	2801      	cmp	r0, #1
   3162a:	d027      	beq.n	3167c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
   3162c:	e02b      	b.n	31686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
   3162e:	b354      	cbz	r4, 31686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
   31630:	2100      	movs	r1, #0
   31632:	f240 70da 	movw	r0, #2010	; 0x7da
   31636:	f3af 8000 	nop.w
   3163a:	e7ec      	b.n	31616 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
   3163c:	f000 fef8 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   31640:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   31644:	ebb3 0c00 	subs.w	ip, r3, r0
   31648:	eb72 0c01 	sbcs.w	ip, r2, r1
   3164c:	d204      	bcs.n	31658 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
   3164e:	f240 71ee 	movw	r1, #2030	; 0x7ee
   31652:	2070      	movs	r0, #112	; 0x70
   31654:	f001 fca0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31658:	1a18      	subs	r0, r3, r0
   3165a:	eb62 0101 	sbc.w	r1, r2, r1
   3165e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
   31662:	f171 0100 	sbcs.w	r1, r1, #0
   31666:	d304      	bcc.n	31672 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
   31668:	f240 71ef 	movw	r1, #2031	; 0x7ef
   3166c:	2070      	movs	r0, #112	; 0x70
   3166e:	f001 fc93 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31672:	f005 fe14 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   31676:	6871      	ldr	r1, [r6, #4]
   31678:	b129      	cbz	r1, 31686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
   3167a:	e003      	b.n	31684 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
   3167c:	6871      	ldr	r1, [r6, #4]
   3167e:	f04f 30ff 	mov.w	r0, #4294967295
   31682:	b101      	cbz	r1, 31686 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
   31684:	4788      	blx	r1
   31686:	9806      	ldr	r0, [sp, #24]
   31688:	b148      	cbz	r0, 3169e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
   3168a:	b124      	cbz	r4, 31696 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
   3168c:	2100      	movs	r1, #0
   3168e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   31692:	f3af 8000 	nop.w
   31696:	9807      	ldr	r0, [sp, #28]
   31698:	b00d      	add	sp, #52	; 0x34
   3169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3169e:	4805      	ldr	r0, [pc, #20]	; (316b4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
   316a0:	2800      	cmp	r0, #0
   316a2:	bf18      	it	ne
   316a4:	f3af 8000 	nopne.w
   316a8:	b662      	cpsie	i
   316aa:	e7ee      	b.n	3168a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
   316ac:	20001040 	.word	0x20001040
	...
   316bc:	20000308 	.word	0x20000308

000316c0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
   316c0:	2820      	cmp	r0, #32
   316c2:	bf24      	itt	cs
   316c4:	2000      	movcs	r0, #0
   316c6:	4770      	bxcs	lr
   316c8:	4b03      	ldr	r3, [pc, #12]	; (316d8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
   316ca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   316ce:	e9c0 1200 	strd	r1, r2, [r0]
   316d2:	2001      	movs	r0, #1
   316d4:	4770      	bx	lr
   316d6:	0000      	.short	0x0000
   316d8:	20000bc0 	.word	0x20000bc0

000316dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
   316dc:	b510      	push	{r4, lr}
   316de:	2820      	cmp	r0, #32
   316e0:	d211      	bcs.n	31706 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
   316e2:	490e      	ldr	r1, [pc, #56]	; (3171c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
   316e4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   316e8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
   316ec:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
   316f0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
   316f4:	b13b      	cbz	r3, 31706 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
   316f6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   316fa:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   316fe:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
   31702:	2a01      	cmp	r2, #1
   31704:	d001      	beq.n	3170a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
   31706:	2000      	movs	r0, #0
   31708:	bd10      	pop	{r4, pc}
   3170a:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
   3170e:	4601      	mov	r1, r0
   31710:	2000      	movs	r0, #0
   31712:	f7fe ff01 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   31716:	2001      	movs	r0, #1
   31718:	bd10      	pop	{r4, pc}
   3171a:	0000      	.short	0x0000
   3171c:	20001040 	.word	0x20001040

00031720 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
   31720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31724:	4e86      	ldr	r6, [pc, #536]	; (31940 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
   31726:	4680      	mov	r8, r0
   31728:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
   3172c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
   31730:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   31734:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
   31738:	2800      	cmp	r0, #0
   3173a:	d071      	beq.n	31820 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
   3173c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
   31740:	4d80      	ldr	r5, [pc, #512]	; (31944 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
   31742:	b125      	cbz	r5, 3174e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
   31744:	2100      	movs	r1, #0
   31746:	f640 307b 	movw	r0, #2939	; 0xb7b
   3174a:	f3af 8000 	nop.w
   3174e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
   31752:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
   31756:	2801      	cmp	r0, #1
   31758:	d018      	beq.n	3178c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
   3175a:	b2c0      	uxtb	r0, r0
   3175c:	2804      	cmp	r0, #4
   3175e:	bf1c      	itt	ne
   31760:	2805      	cmpne	r0, #5
   31762:	2806      	cmpne	r0, #6
   31764:	d061      	beq.n	3182a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
   31766:	b12d      	cbz	r5, 31774 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
   31768:	f04f 0100 	mov.w	r1, #0
   3176c:	f640 3087 	movw	r0, #2951	; 0xb87
   31770:	f3af 8000 	nop.w
   31774:	f005 fec9 	bl	3750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   31778:	b125      	cbz	r5, 31784 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
   3177a:	2100      	movs	r1, #0
   3177c:	f640 308b 	movw	r0, #2955	; 0xb8b
   31780:	f3af 8000 	nop.w
   31784:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
   31788:	2801      	cmp	r0, #1
   3178a:	d1e6      	bne.n	3175a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
   3178c:	2401      	movs	r4, #1
   3178e:	b125      	cbz	r5, 3179a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
   31790:	2100      	movs	r1, #0
   31792:	f640 3092 	movw	r0, #2962	; 0xb92
   31796:	f3af 8000 	nop.w
   3179a:	2c00      	cmp	r4, #0
   3179c:	d04b      	beq.n	31836 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
   3179e:	2000      	movs	r0, #0
   317a0:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
   317a4:	b125      	cbz	r5, 317b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
   317a6:	2100      	movs	r1, #0
   317a8:	f640 3097 	movw	r0, #2967	; 0xb97
   317ac:	f3af 8000 	nop.w
   317b0:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
   317b4:	2001      	movs	r0, #1
   317b6:	ea20 090b 	bic.w	r9, r0, fp
   317ba:	eb07 118b 	add.w	r1, r7, fp, lsl #6
   317be:	eb07 1089 	add.w	r0, r7, r9, lsl #6
   317c2:	2240      	movs	r2, #64	; 0x40
   317c4:	f005 fefb 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   317c8:	b125      	cbz	r5, 317d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
   317ca:	2100      	movs	r1, #0
   317cc:	f240 503c 	movw	r0, #1340	; 0x53c
   317d0:	f3af 8000 	nop.w
   317d4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
   317d8:	eb00 0a06 	add.w	sl, r0, r6
   317dc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
   317e0:	4430      	add	r0, r6
   317e2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   317e4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
   317e8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   317ec:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
   317f0:	b125      	cbz	r5, 317fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
   317f2:	2100      	movs	r1, #0
   317f4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
   317f8:	f3af 8000 	nop.w
   317fc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   31800:	f88d 0000 	strb.w	r0, [sp]
   31804:	f89d 0000 	ldrb.w	r0, [sp]
   31808:	b1e0      	cbz	r0, 31844 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
   3180a:	2d00      	cmp	r5, #0
   3180c:	bf1c      	itt	ne
   3180e:	2100      	movne	r1, #0
   31810:	f640 309d 	movwne	r0, #2973	; 0xb9d
   31814:	d0bb      	beq.n	3178e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   31816:	bf00      	nop
   31818:	f3af 8000 	nop.w
   3181c:	e7b7      	b.n	3178e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   3181e:	e7ff      	b.n	31820 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
   31820:	f640 3172 	movw	r1, #2930	; 0xb72
   31824:	2070      	movs	r0, #112	; 0x70
   31826:	f001 fbb7 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3182a:	464a      	mov	r2, r9
   3182c:	4641      	mov	r1, r8
   3182e:	2001      	movs	r0, #1
   31830:	f7fe fe72 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   31834:	e7a0      	b.n	31778 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
   31836:	4844      	ldr	r0, [pc, #272]	; (31948 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
   31838:	2800      	cmp	r0, #0
   3183a:	bf18      	it	ne
   3183c:	f3af 8000 	nopne.w
   31840:	b662      	cpsie	i
   31842:	e7ac      	b.n	3179e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
   31844:	b125      	cbz	r5, 31850 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
   31846:	2100      	movs	r1, #0
   31848:	f640 30a1 	movw	r0, #2977	; 0xba1
   3184c:	f3af 8000 	nop.w
   31850:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
   31854:	f10a 0129 	add.w	r1, sl, #41	; 0x29
   31858:	4640      	mov	r0, r8
   3185a:	461c      	mov	r4, r3
   3185c:	f04f 0b20 	mov.w	fp, #32
   31860:	eb07 1289 	add.w	r2, r7, r9, lsl #6
   31864:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
   31868:	e004      	b.n	31874 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
   3186a:	46a3      	mov	fp, r4
   3186c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
   31870:	f89c 4001 	ldrb.w	r4, [ip, #1]
   31874:	4284      	cmp	r4, r0
   31876:	d002      	beq.n	3187e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
   31878:	2c20      	cmp	r4, #32
   3187a:	d02b      	beq.n	318d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
   3187c:	e7f5      	b.n	3186a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
   3187e:	2c20      	cmp	r4, #32
   31880:	d028      	beq.n	318d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
   31882:	42a3      	cmp	r3, r4
   31884:	d104      	bne.n	31890 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
   31886:	eb02 0043 	add.w	r0, r2, r3, lsl #1
   3188a:	7840      	ldrb	r0, [r0, #1]
   3188c:	7008      	strb	r0, [r1, #0]
   3188e:	e005      	b.n	3189c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
   31890:	eb02 0044 	add.w	r0, r2, r4, lsl #1
   31894:	eb02 014b 	add.w	r1, r2, fp, lsl #1
   31898:	7840      	ldrb	r0, [r0, #1]
   3189a:	7048      	strb	r0, [r1, #1]
   3189c:	f1ba 0f00 	cmp.w	sl, #0
   318a0:	d011      	beq.n	318c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
   318a2:	b125      	cbz	r5, 318ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
   318a4:	2100      	movs	r1, #0
   318a6:	f240 409c 	movw	r0, #1180	; 0x49c
   318aa:	f3af 8000 	nop.w
   318ae:	f89a 0000 	ldrb.w	r0, [sl]
   318b2:	42a0      	cmp	r0, r4
   318b4:	d107      	bne.n	318c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
   318b6:	b125      	cbz	r5, 318c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
   318b8:	2100      	movs	r1, #0
   318ba:	f240 409f 	movw	r0, #1183	; 0x49f
   318be:	f3af 8000 	nop.w
   318c2:	f88a b000 	strb.w	fp, [sl]
   318c6:	b15d      	cbz	r5, 318e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
   318c8:	2100      	movs	r1, #0
   318ca:	f240 40a4 	movw	r0, #1188	; 0x4a4
   318ce:	f3af 8000 	nop.w
   318d2:	e000      	b.n	318d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
   318d4:	b125      	cbz	r5, 318e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
   318d6:	2100      	movs	r1, #0
   318d8:	f640 30a5 	movw	r0, #2981	; 0xba5
   318dc:	f3af 8000 	nop.w
   318e0:	481a      	ldr	r0, [pc, #104]	; (3194c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
   318e2:	2800      	cmp	r0, #0
   318e4:	bf18      	it	ne
   318e6:	f3af 8000 	nopne.w
   318ea:	f3ef 8410 	mrs	r4, PRIMASK
   318ee:	b672      	cpsid	i
   318f0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   318f4:	f88d 0000 	strb.w	r0, [sp]
   318f8:	f89d 0000 	ldrb.w	r0, [sp]
   318fc:	b138      	cbz	r0, 3190e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
   318fe:	2d00      	cmp	r5, #0
   31900:	bf1c      	itt	ne
   31902:	2100      	movne	r1, #0
   31904:	f640 30ab 	movwne	r0, #2987	; 0xbab
   31908:	f43f af41 	beq.w	3178e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
   3190c:	e784      	b.n	31818 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
   3190e:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
   31912:	20ff      	movs	r0, #255	; 0xff
   31914:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
   31918:	b154      	cbz	r4, 31930 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
   3191a:	2d00      	cmp	r5, #0
   3191c:	bf08      	it	eq
   3191e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31922:	2100      	movs	r1, #0
   31924:	f640 30b8 	movw	r0, #3000	; 0xbb8
   31928:	f3af 8000 	nop.w
   3192c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31930:	4805      	ldr	r0, [pc, #20]	; (31948 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
   31932:	2800      	cmp	r0, #0
   31934:	bf18      	it	ne
   31936:	f3af 8000 	nopne.w
   3193a:	b662      	cpsie	i
   3193c:	e7ed      	b.n	3191a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
   3193e:	0000      	.short	0x0000
   31940:	20001040 	.word	0x20001040
	...

00031950 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
   31950:	b570      	push	{r4, r5, r6, lr}
   31952:	460d      	mov	r5, r1
   31954:	4606      	mov	r6, r0
   31956:	f001 fa95 	bl	32e84 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   3195a:	480d      	ldr	r0, [pc, #52]	; (31990 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
   3195c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
   31960:	2400      	movs	r4, #0
   31962:	3880      	subs	r0, #128	; 0x80
   31964:	eb00 1082 	add.w	r0, r0, r2, lsl #6
   31968:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
   3196c:	b129      	cbz	r1, 3197a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
   3196e:	1c61      	adds	r1, r4, #1
   31970:	b2cc      	uxtb	r4, r1
   31972:	2c20      	cmp	r4, #32
   31974:	d3f8      	bcc.n	31968 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
   31976:	2020      	movs	r0, #32
   31978:	bd70      	pop	{r4, r5, r6, pc}
   3197a:	4806      	ldr	r0, [pc, #24]	; (31994 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
   3197c:	4621      	mov	r1, r4
   3197e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   31982:	e9c0 6500 	strd	r6, r5, [r0]
   31986:	2001      	movs	r0, #1
   31988:	f7fe fdc6 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   3198c:	4620      	mov	r0, r4
   3198e:	bd70      	pop	{r4, r5, r6, pc}
   31990:	20001040 	.word	0x20001040
   31994:	20000bc0 	.word	0x20000bc0

00031998 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
   31998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3199c:	f000 fd48 	bl	32430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
   319a0:	4606      	mov	r6, r0
   319a2:	460f      	mov	r7, r1
   319a4:	f000 fe88 	bl	326b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
   319a8:	4c65      	ldr	r4, [pc, #404]	; (31b40 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
   319aa:	6860      	ldr	r0, [r4, #4]
   319ac:	f1b0 3fff 	cmp.w	r0, #4294967295
   319b0:	bf1c      	itt	ne
   319b2:	f04f 30ff 	movne.w	r0, #4294967295
   319b6:	6060      	strne	r0, [r4, #4]
   319b8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   319bc:	f8df b184 	ldr.w	fp, [pc, #388]	; 31b44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
   319c0:	2500      	movs	r5, #0
   319c2:	bb10      	cbnz	r0, 31a0a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
   319c4:	f44f 710c 	mov.w	r1, #560	; 0x230
   319c8:	6920      	ldr	r0, [r4, #16]
   319ca:	f001 fa47 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   319ce:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   319d2:	68a1      	ldr	r1, [r4, #8]
   319d4:	1818      	adds	r0, r3, r0
   319d6:	eb45 0305 	adc.w	r3, r5, r5
   319da:	1809      	adds	r1, r1, r0
   319dc:	eb42 0003 	adc.w	r0, r2, r3
   319e0:	1a71      	subs	r1, r6, r1
   319e2:	eb77 0000 	sbcs.w	r0, r7, r0
   319e6:	d310      	bcc.n	31a0a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
   319e8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   319ec:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   319f0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
   319f4:	6840      	ldr	r0, [r0, #4]
   319f6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
   319fa:	680a      	ldr	r2, [r1, #0]
   319fc:	2108      	movs	r1, #8
   319fe:	4790      	blx	r2
   31a00:	f44f 716d 	mov.w	r1, #948	; 0x3b4
   31a04:	2070      	movs	r0, #112	; 0x70
   31a06:	f001 fac7 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31a0a:	7e60      	ldrb	r0, [r4, #25]
   31a0c:	b180      	cbz	r0, 31a30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
   31a0e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   31a12:	f88d 0000 	strb.w	r0, [sp]
   31a16:	f89d 0000 	ldrb.w	r0, [sp]
   31a1a:	b148      	cbz	r0, 31a30 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
   31a1c:	f000 fc7e 	bl	3231c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
   31a20:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
   31a24:	b150      	cbz	r0, 31a3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
   31a26:	f240 31cd 	movw	r1, #973	; 0x3cd
   31a2a:	2070      	movs	r0, #112	; 0x70
   31a2c:	f001 fab4 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31a30:	1cf0      	adds	r0, r6, #3
   31a32:	f147 0100 	adc.w	r1, r7, #0
   31a36:	f000 fb4b 	bl	320d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   31a3a:	e7f1      	b.n	31a20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
   31a3c:	2001      	movs	r0, #1
   31a3e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
   31a42:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   31a46:	2820      	cmp	r0, #32
   31a48:	d020      	beq.n	31a8c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
   31a4a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
   31a4e:	2020      	movs	r0, #32
   31a50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
   31a54:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   31a58:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   31a5c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   31a60:	6025      	str	r5, [r4, #0]
   31a62:	f000 ff09 	bl	32878 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
   31a66:	f884 0020 	strb.w	r0, [r4, #32]
   31a6a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
   31a6e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
   31a72:	eb00 0a04 	add.w	sl, r0, r4
   31a76:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
   31a7a:	2820      	cmp	r0, #32
   31a7c:	d01c      	beq.n	31ab8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
   31a7e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
   31a82:	f89b 001a 	ldrb.w	r0, [fp, #26]
   31a86:	2801      	cmp	r0, #1
   31a88:	d005      	beq.n	31a96 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
   31a8a:	e015      	b.n	31ab8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
   31a8c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   31a90:	2070      	movs	r0, #112	; 0x70
   31a92:	f001 fa81 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31a96:	2201      	movs	r2, #1
   31a98:	f8bb 3016 	ldrh.w	r3, [fp, #22]
   31a9c:	4630      	mov	r0, r6
   31a9e:	4639      	mov	r1, r7
   31aa0:	f7fe f8a6 	bl	2fbf0 <MPSL_IRQ_RADIO_Handler+0x3e4>
   31aa4:	e9db 2302 	ldrd	r2, r3, [fp, #8]
   31aa8:	1a12      	subs	r2, r2, r0
   31aaa:	eb73 0201 	sbcs.w	r2, r3, r1
   31aae:	bf24      	itt	cs
   31ab0:	f10b 0208 	addcs.w	r2, fp, #8
   31ab4:	e9c2 0100 	strdcs	r0, r1, [r2]
   31ab8:	4641      	mov	r1, r8
   31aba:	2001      	movs	r0, #1
   31abc:	f7fe fd5e 	bl	3057c <MPSL_IRQ_RADIO_Handler+0xd70>
   31ac0:	0007      	movs	r7, r0
   31ac2:	d0f9      	beq.n	31ab8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
   31ac4:	4820      	ldr	r0, [pc, #128]	; (31b48 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
   31ac6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
   31aca:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
   31ace:	2802      	cmp	r0, #2
   31ad0:	d104      	bne.n	31adc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
   31ad2:	4642      	mov	r2, r8
   31ad4:	4649      	mov	r1, r9
   31ad6:	2006      	movs	r0, #6
   31ad8:	f7fe fd1e 	bl	30518 <MPSL_IRQ_RADIO_Handler+0xd0c>
   31adc:	20ff      	movs	r0, #255	; 0xff
   31ade:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   31ae2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
   31ae6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 31b4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
   31aea:	2820      	cmp	r0, #32
   31aec:	bf1c      	itt	ne
   31aee:	f898 0001 	ldrbne.w	r0, [r8, #1]
   31af2:	f001 fb23 	blne	3313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
   31af6:	f894 0020 	ldrb.w	r0, [r4, #32]
   31afa:	b128      	cbz	r0, 31b08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
   31afc:	f000 fe98 	bl	32830 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
   31b00:	f884 5020 	strb.w	r5, [r4, #32]
   31b04:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
   31b08:	2f02      	cmp	r7, #2
   31b0a:	d00f      	beq.n	31b2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
   31b0c:	2f01      	cmp	r7, #1
   31b0e:	bf18      	it	ne
   31b10:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b14:	f04f 30ff 	mov.w	r0, #4294967295
   31b18:	f8d8 1004 	ldr.w	r1, [r8, #4]
   31b1c:	2900      	cmp	r1, #0
   31b1e:	bf08      	it	eq
   31b20:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b24:	b001      	add	sp, #4
   31b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b2a:	4708      	bx	r1
   31b2c:	68a0      	ldr	r0, [r4, #8]
   31b2e:	1b80      	subs	r0, r0, r6
   31b30:	f005 fbb5 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   31b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
   31b38:	2900      	cmp	r1, #0
   31b3a:	d1f3      	bne.n	31b24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
   31b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b40:	20001040 	.word	0x20001040
   31b44:	20000bc0 	.word	0x20000bc0
   31b48:	20000fc0 	.word	0x20000fc0
   31b4c:	20000308 	.word	0x20000308

00031b50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
   31b50:	b570      	push	{r4, r5, r6, lr}
   31b52:	4c42      	ldr	r4, [pc, #264]	; (31c5c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
   31b54:	4605      	mov	r5, r0
   31b56:	b082      	sub	sp, #8
   31b58:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   31b5c:	2820      	cmp	r0, #32
   31b5e:	d008      	beq.n	31b72 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
   31b60:	6860      	ldr	r0, [r4, #4]
   31b62:	f1b0 3fff 	cmp.w	r0, #4294967295
   31b66:	d009      	beq.n	31b7c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
   31b68:	f640 21b6 	movw	r1, #2742	; 0xab6
   31b6c:	2070      	movs	r0, #112	; 0x70
   31b6e:	f001 fa13 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31b72:	f640 21b5 	movw	r1, #2741	; 0xab5
   31b76:	2070      	movs	r0, #112	; 0x70
   31b78:	f001 fa0e 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31b7c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
   31b80:	4937      	ldr	r1, [pc, #220]	; (31c60 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
   31b82:	eb01 1640 	add.w	r6, r1, r0, lsl #5
   31b86:	68b0      	ldr	r0, [r6, #8]
   31b88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   31b8c:	f005 fb87 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   31b90:	4602      	mov	r2, r0
   31b92:	8af0      	ldrh	r0, [r6, #22]
   31b94:	7d31      	ldrb	r1, [r6, #20]
   31b96:	4b33      	ldr	r3, [pc, #204]	; (31c64 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
   31b98:	4408      	add	r0, r1
   31b9a:	1c40      	adds	r0, r0, #1
   31b9c:	1811      	adds	r1, r2, r0
   31b9e:	429a      	cmp	r2, r3
   31ba0:	d817      	bhi.n	31bd2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
   31ba2:	4a31      	ldr	r2, [pc, #196]	; (31c68 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
   31ba4:	4290      	cmp	r0, r2
   31ba6:	dc1b      	bgt.n	31be0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
   31ba8:	f1c2 0c00 	rsb	ip, r2, #0
   31bac:	4560      	cmp	r0, ip
   31bae:	db1e      	blt.n	31bee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
   31bb0:	0056      	lsls	r6, r2, #1
   31bb2:	428e      	cmp	r6, r1
   31bb4:	bfdc      	itt	le
   31bb6:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
   31bba:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
   31bbe:	dd05      	ble.n	31bcc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
   31bc0:	2900      	cmp	r1, #0
   31bc2:	bfbc      	itt	lt
   31bc4:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
   31bc8:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
   31bcc:	1948      	adds	r0, r1, r5
   31bce:	4299      	cmp	r1, r3
   31bd0:	d904      	bls.n	31bdc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
   31bd2:	f240 517f 	movw	r1, #1407	; 0x57f
   31bd6:	2070      	movs	r0, #112	; 0x70
   31bd8:	f001 f9de 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31bdc:	4295      	cmp	r5, r2
   31bde:	dd04      	ble.n	31bea <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
   31be0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
   31be4:	2070      	movs	r0, #112	; 0x70
   31be6:	f001 f9d7 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31bea:	4565      	cmp	r5, ip
   31bec:	da04      	bge.n	31bf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
   31bee:	f240 5181 	movw	r1, #1409	; 0x581
   31bf2:	2070      	movs	r0, #112	; 0x70
   31bf4:	f001 f9d0 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31bf8:	4286      	cmp	r6, r0
   31bfa:	bfdc      	itt	le
   31bfc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
   31c00:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
   31c04:	dd05      	ble.n	31c12 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
   31c06:	2800      	cmp	r0, #0
   31c08:	bfbc      	itt	lt
   31c0a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
   31c0e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
   31c12:	aa01      	add	r2, sp, #4
   31c14:	4669      	mov	r1, sp
   31c16:	f000 f92b 	bl	31e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
   31c1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   31c1e:	280f      	cmp	r0, #15
   31c20:	bf8c      	ite	hi
   31c22:	2001      	movhi	r0, #1
   31c24:	2000      	movls	r0, #0
   31c26:	9900      	ldr	r1, [sp, #0]
   31c28:	4408      	add	r0, r1
   31c2a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
   31c2e:	6061      	str	r1, [r4, #4]
   31c30:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   31c34:	f88d 0000 	strb.w	r0, [sp]
   31c38:	f89d 0000 	ldrb.w	r0, [sp]
   31c3c:	2800      	cmp	r0, #0
   31c3e:	bf04      	itt	eq
   31c40:	b002      	addeq	sp, #8
   31c42:	bd70      	popeq	{r4, r5, r6, pc}
   31c44:	2005      	movs	r0, #5
   31c46:	f000 fc15 	bl	32474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
   31c4a:	2800      	cmp	r0, #0
   31c4c:	bf1c      	itt	ne
   31c4e:	b002      	addne	sp, #8
   31c50:	bd70      	popne	{r4, r5, r6, pc}
   31c52:	f640 21bd 	movw	r1, #2749	; 0xabd
   31c56:	2070      	movs	r0, #112	; 0x70
   31c58:	f001 f99e 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31c5c:	20001040 	.word	0x20001040
   31c60:	20000bc0 	.word	0x20000bc0
   31c64:	1e847fff 	.word	0x1e847fff
   31c68:	0f424000 	.word	0x0f424000

00031c6c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
   31c6c:	b570      	push	{r4, r5, r6, lr}
   31c6e:	4c1e      	ldr	r4, [pc, #120]	; (31ce8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
   31c70:	2120      	movs	r1, #32
   31c72:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   31c76:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
   31c7a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
   31c7e:	2000      	movs	r0, #0
   31c80:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
   31c84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   31c88:	1e42      	subs	r2, r0, #1
   31c8a:	e9c4 0200 	strd	r0, r2, [r4]
   31c8e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
   31c92:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
   31c96:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
   31c9a:	f884 0020 	strb.w	r0, [r4, #32]
   31c9e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   31ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   31ca6:	1e41      	subs	r1, r0, #1
   31ca8:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
   31cac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   31cb0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
   31cb4:	2210      	movs	r2, #16
   31cb6:	7088      	strb	r0, [r1, #2]
   31cb8:	f801 0f04 	strb.w	r0, [r1, #4]!
   31cbc:	1e52      	subs	r2, r2, #1
   31cbe:	d1fa      	bne.n	31cb6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
   31cc0:	f000 fde4 	bl	3288c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
   31cc4:	4d09      	ldr	r5, [pc, #36]	; (31cec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
   31cc6:	2601      	movs	r6, #1
   31cc8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
   31ccc:	20ff      	movs	r0, #255	; 0xff
   31cce:	7028      	strb	r0, [r5, #0]
   31cd0:	4807      	ldr	r0, [pc, #28]	; (31cf0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
   31cd2:	f001 fa15 	bl	33100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
   31cd6:	7068      	strb	r0, [r5, #1]
   31cd8:	f001 fa80 	bl	331dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
   31cdc:	60a8      	str	r0, [r5, #8]
   31cde:	f000 fd67 	bl	327b0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
   31ce2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
   31ce6:	bd70      	pop	{r4, r5, r6, pc}
   31ce8:	20001040 	.word	0x20001040
   31cec:	20000308 	.word	0x20000308
   31cf0:	00030449 	.word	0x00030449

00031cf4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
   31cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   31cf6:	4607      	mov	r7, r0
   31cf8:	b087      	sub	sp, #28
   31cfa:	461d      	mov	r5, r3
   31cfc:	460e      	mov	r6, r1
   31cfe:	4610      	mov	r0, r2
   31d00:	f005 facd 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   31d04:	4604      	mov	r4, r0
   31d06:	a803      	add	r0, sp, #12
   31d08:	9000      	str	r0, [sp, #0]
   31d0a:	ab04      	add	r3, sp, #16
   31d0c:	aa02      	add	r2, sp, #8
   31d0e:	4638      	mov	r0, r7
   31d10:	4631      	mov	r1, r6
   31d12:	f000 f853 	bl	31dbc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
   31d16:	9902      	ldr	r1, [sp, #8]
   31d18:	4a14      	ldr	r2, [pc, #80]	; (31d6c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
   31d1a:	1a60      	subs	r0, r4, r1
   31d1c:	2300      	movs	r3, #0
   31d1e:	1a82      	subs	r2, r0, r2
   31d20:	f173 0200 	sbcs.w	r2, r3, #0
   31d24:	d318      	bcc.n	31d58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
   31d26:	f8df c044 	ldr.w	ip, [pc, #68]	; 31d6c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
   31d2a:	1b0a      	subs	r2, r1, r4
   31d2c:	ebb2 0c0c 	subs.w	ip, r2, ip
   31d30:	f173 0300 	sbcs.w	r3, r3, #0
   31d34:	d310      	bcc.n	31d58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
   31d36:	4b0e      	ldr	r3, [pc, #56]	; (31d70 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
   31d38:	4283      	cmp	r3, r0
   31d3a:	bf3e      	ittt	cc
   31d3c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
   31d40:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
   31d44:	4420      	addcc	r0, r4
   31d46:	d307      	bcc.n	31d58 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
   31d48:	4293      	cmp	r3, r2
   31d4a:	d209      	bcs.n	31d60 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
   31d4c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
   31d50:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
   31d54:	4408      	add	r0, r1
   31d56:	4240      	negs	r0, r0
   31d58:	300f      	adds	r0, #15
   31d5a:	b007      	add	sp, #28
   31d5c:	1a28      	subs	r0, r5, r0
   31d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31d60:	f640 21d7 	movw	r1, #2775	; 0xad7
   31d64:	2070      	movs	r0, #112	; 0x70
   31d66:	f001 f917 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   31d6a:	0000      	.short	0x0000
   31d6c:	0f424000 	.word	0x0f424000
   31d70:	1e847fff 	.word	0x1e847fff

00031d74 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
   31d74:	0e03      	lsrs	r3, r0, #24
   31d76:	b430      	push	{r4, r5}
   31d78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   31d7c:	f8df c038 	ldr.w	ip, [pc, #56]	; 31db8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
   31d80:	0e09      	lsrs	r1, r1, #24
   31d82:	fba3 250c 	umull	r2, r5, r3, ip
   31d86:	fb01 510c 	mla	r1, r1, ip, r5
   31d8a:	2400      	movs	r4, #0
   31d8c:	fb03 1104 	mla	r1, r3, r4, r1
   31d90:	f647 73ff 	movw	r3, #32767	; 0x7fff
   31d94:	ea03 2350 	and.w	r3, r3, r0, lsr #9
   31d98:	f643 5c09 	movw	ip, #15625	; 0x3d09
   31d9c:	fb13 f30c 	smulbb	r3, r3, ip
   31da0:	f3c0 0008 	ubfx	r0, r0, #0, #9
   31da4:	fb10 f00c 	smulbb	r0, r0, ip
   31da8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   31dac:	eb03 2050 	add.w	r0, r3, r0, lsr #9
   31db0:	1880      	adds	r0, r0, r2
   31db2:	4161      	adcs	r1, r4
   31db4:	bc30      	pop	{r4, r5}
   31db6:	4770      	bx	lr
   31db8:	1e848000 	.word	0x1e848000

00031dbc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
   31dbc:	b570      	push	{r4, r5, r6, lr}
   31dbe:	b084      	sub	sp, #16
   31dc0:	4615      	mov	r5, r2
   31dc2:	aa01      	add	r2, sp, #4
   31dc4:	461c      	mov	r4, r3
   31dc6:	9200      	str	r2, [sp, #0]
   31dc8:	9e08      	ldr	r6, [sp, #32]
   31dca:	ab02      	add	r3, sp, #8
   31dcc:	4a17      	ldr	r2, [pc, #92]	; (31e2c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
   31dce:	f005 fbe7 	bl	375a0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
   31dd2:	9801      	ldr	r0, [sp, #4]
   31dd4:	f248 6237 	movw	r2, #34359	; 0x8637
   31dd8:	0b41      	lsrs	r1, r0, #13
   31dda:	4351      	muls	r1, r2
   31ddc:	0c09      	lsrs	r1, r1, #16
   31dde:	4a14      	ldr	r2, [pc, #80]	; (31e30 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
   31de0:	024b      	lsls	r3, r1, #9
   31de2:	fb01 0102 	mla	r1, r1, r2, r0
   31de6:	4813      	ldr	r0, [pc, #76]	; (31e34 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
   31de8:	4348      	muls	r0, r1
   31dea:	0d42      	lsrs	r2, r0, #21
   31dec:	1898      	adds	r0, r3, r2
   31dee:	f643 5309 	movw	r3, #15625	; 0x3d09
   31df2:	fb12 f303 	smulbb	r3, r2, r3
   31df6:	f503 7280 	add.w	r2, r3, #256	; 0x100
   31dfa:	f643 5c08 	movw	ip, #15624	; 0x3d08
   31dfe:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
   31e02:	4463      	add	r3, ip
   31e04:	b2d2      	uxtb	r2, r2
   31e06:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
   31e0a:	bf84      	itt	hi
   31e0c:	2200      	movhi	r2, #0
   31e0e:	1c40      	addhi	r0, r0, #1
   31e10:	7032      	strb	r2, [r6, #0]
   31e12:	9b02      	ldr	r3, [sp, #8]
   31e14:	0a19      	lsrs	r1, r3, #8
   31e16:	061b      	lsls	r3, r3, #24
   31e18:	1818      	adds	r0, r3, r0
   31e1a:	f141 0100 	adc.w	r1, r1, #0
   31e1e:	e9c4 0100 	strd	r0, r1, [r4]
   31e22:	9801      	ldr	r0, [sp, #4]
   31e24:	6028      	str	r0, [r5, #0]
   31e26:	b004      	add	sp, #16
   31e28:	bd70      	pop	{r4, r5, r6, pc}
   31e2a:	0000      	.short	0x0000
   31e2c:	1e848000 	.word	0x1e848000
   31e30:	ffffc2f7 	.word	0xffffc2f7
   31e34:	00010c6f 	.word	0x00010c6f

00031e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
   31e38:	0b41      	lsrs	r1, r0, #13
   31e3a:	f248 6237 	movw	r2, #34359	; 0x8637
   31e3e:	4351      	muls	r1, r2
   31e40:	0c0a      	lsrs	r2, r1, #16
   31e42:	4b09      	ldr	r3, [pc, #36]	; (31e68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
   31e44:	0251      	lsls	r1, r2, #9
   31e46:	fb02 0203 	mla	r2, r2, r3, r0
   31e4a:	4808      	ldr	r0, [pc, #32]	; (31e6c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
   31e4c:	4350      	muls	r0, r2
   31e4e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
   31e52:	306e      	adds	r0, #110	; 0x6e
   31e54:	0d40      	lsrs	r0, r0, #21
   31e56:	425b      	negs	r3, r3
   31e58:	fb10 f303 	smulbb	r3, r0, r3
   31e5c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
   31e60:	bf88      	it	hi
   31e62:	1c49      	addhi	r1, r1, #1
   31e64:	4408      	add	r0, r1
   31e66:	4770      	bx	lr
   31e68:	ffffc2f7 	.word	0xffffc2f7
   31e6c:	00010c6f 	.word	0x00010c6f

00031e70 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
   31e70:	0b43      	lsrs	r3, r0, #13
   31e72:	f248 6c37 	movw	ip, #34359	; 0x8637
   31e76:	fb03 f30c 	mul.w	r3, r3, ip
   31e7a:	b430      	push	{r4, r5}
   31e7c:	0c1b      	lsrs	r3, r3, #16
   31e7e:	f8df c044 	ldr.w	ip, [pc, #68]	; 31ec4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
   31e82:	025c      	lsls	r4, r3, #9
   31e84:	fb03 030c 	mla	r3, r3, ip, r0
   31e88:	480f      	ldr	r0, [pc, #60]	; (31ec8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
   31e8a:	4358      	muls	r0, r3
   31e8c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
   31e90:	eb04 000c 	add.w	r0, r4, ip
   31e94:	f643 5409 	movw	r4, #15625	; 0x3d09
   31e98:	fb1c f404 	smulbb	r4, ip, r4
   31e9c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
   31ea0:	f643 5508 	movw	r5, #15624	; 0x3d08
   31ea4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
   31ea8:	442c      	add	r4, r5
   31eaa:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
   31eae:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
   31eb2:	bf84      	itt	hi
   31eb4:	f04f 0c00 	movhi.w	ip, #0
   31eb8:	1c40      	addhi	r0, r0, #1
   31eba:	6008      	str	r0, [r1, #0]
   31ebc:	f882 c000 	strb.w	ip, [r2]
   31ec0:	bc30      	pop	{r4, r5}
   31ec2:	4770      	bx	lr
   31ec4:	ffffc2f7 	.word	0xffffc2f7
   31ec8:	00010c6f 	.word	0x00010c6f

00031ecc <MPSL_IRQ_RTC0_Handler>:
   31ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31ed0:	2400      	movs	r4, #0
   31ed2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 31f54 <MPSL_IRQ_RTC0_Handler+0x88>
   31ed6:	4d20      	ldr	r5, [pc, #128]	; (31f58 <MPSL_IRQ_RTC0_Handler+0x8c>)
   31ed8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
   31edc:	f44f 78a0 	mov.w	r8, #320	; 0x140
   31ee0:	ea4f 0604 	mov.w	r6, r4
   31ee4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
   31ee8:	fa07 f004 	lsl.w	r0, r7, r4
   31eec:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   31ef0:	4202      	tst	r2, r0
   31ef2:	d01a      	beq.n	31f2a <MPSL_IRQ_RTC0_Handler+0x5e>
   31ef4:	4a18      	ldr	r2, [pc, #96]	; (31f58 <MPSL_IRQ_RTC0_Handler+0x8c>)
   31ef6:	5852      	ldr	r2, [r2, r1]
   31ef8:	b1ba      	cbz	r2, 31f2a <MPSL_IRQ_RTC0_Handler+0x5e>
   31efa:	506e      	str	r6, [r5, r1]
   31efc:	00a1      	lsls	r1, r4, #2
   31efe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   31f02:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
   31f06:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
   31f0a:	f8d9 2000 	ldr.w	r2, [r9]
   31f0e:	1a89      	subs	r1, r1, r2
   31f10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   31f14:	2902      	cmp	r1, #2
   31f16:	d302      	bcc.n	31f1e <MPSL_IRQ_RTC0_Handler+0x52>
   31f18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   31f1c:	d905      	bls.n	31f2a <MPSL_IRQ_RTC0_Handler+0x5e>
   31f1e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   31f22:	1d20      	adds	r0, r4, #4
   31f24:	b2c0      	uxtb	r0, r0
   31f26:	f7fe fd3f 	bl	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   31f2a:	1c60      	adds	r0, r4, #1
   31f2c:	b2c4      	uxtb	r4, r0
   31f2e:	2c03      	cmp	r4, #3
   31f30:	d3d8      	bcc.n	31ee4 <MPSL_IRQ_RTC0_Handler+0x18>
   31f32:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   31f36:	b128      	cbz	r0, 31f44 <MPSL_IRQ_RTC0_Handler+0x78>
   31f38:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   31f3c:	4807      	ldr	r0, [pc, #28]	; (31f5c <MPSL_IRQ_RTC0_Handler+0x90>)
   31f3e:	6881      	ldr	r1, [r0, #8]
   31f40:	1c49      	adds	r1, r1, #1
   31f42:	6081      	str	r1, [r0, #8]
   31f44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   31f48:	f44f 6000 	mov.w	r0, #2048	; 0x800
   31f4c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
   31f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31f54:	4000b504 	.word	0x4000b504
   31f58:	4000b000 	.word	0x4000b000
   31f5c:	20000028 	.word	0x20000028

00031f60 <MPSL_IRQ_TIMER0_Handler>:
   31f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31f64:	4d38      	ldr	r5, [pc, #224]	; (32048 <MPSL_IRQ_TIMER0_Handler+0xe8>)
   31f66:	7828      	ldrb	r0, [r5, #0]
   31f68:	2804      	cmp	r0, #4
   31f6a:	d068      	beq.n	3203e <MPSL_IRQ_TIMER0_Handler+0xde>
   31f6c:	1ca8      	adds	r0, r5, #2
   31f6e:	2201      	movs	r2, #1
   31f70:	7801      	ldrb	r1, [r0, #0]
   31f72:	b159      	cbz	r1, 31f8c <MPSL_IRQ_TIMER0_Handler+0x2c>
   31f74:	2901      	cmp	r1, #1
   31f76:	bf08      	it	eq
   31f78:	706a      	strbeq	r2, [r5, #1]
   31f7a:	d002      	beq.n	31f82 <MPSL_IRQ_TIMER0_Handler+0x22>
   31f7c:	7869      	ldrb	r1, [r5, #1]
   31f7e:	2900      	cmp	r1, #0
   31f80:	d058      	beq.n	32034 <MPSL_IRQ_TIMER0_Handler+0xd4>
   31f82:	2102      	movs	r1, #2
   31f84:	7001      	strb	r1, [r0, #0]
   31f86:	7840      	ldrb	r0, [r0, #1]
   31f88:	f000 fb2e 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   31f8c:	4c2f      	ldr	r4, [pc, #188]	; (3204c <MPSL_IRQ_TIMER0_Handler+0xec>)
   31f8e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   31f92:	f04f 0800 	mov.w	r8, #0
   31f96:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   31f9a:	f44f 7780 	mov.w	r7, #256	; 0x100
   31f9e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   31fa2:	d00a      	beq.n	31fba <MPSL_IRQ_TIMER0_Handler+0x5a>
   31fa4:	482a      	ldr	r0, [pc, #168]	; (32050 <MPSL_IRQ_TIMER0_Handler+0xf0>)
   31fa6:	6800      	ldr	r0, [r0, #0]
   31fa8:	b138      	cbz	r0, 31fba <MPSL_IRQ_TIMER0_Handler+0x5a>
   31faa:	2003      	movs	r0, #3
   31fac:	f000 fb1c 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   31fb0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   31fb4:	2003      	movs	r0, #3
   31fb6:	f7fe fcf7 	bl	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   31fba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   31fbe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   31fc2:	d00a      	beq.n	31fda <MPSL_IRQ_TIMER0_Handler+0x7a>
   31fc4:	4823      	ldr	r0, [pc, #140]	; (32054 <MPSL_IRQ_TIMER0_Handler+0xf4>)
   31fc6:	6800      	ldr	r0, [r0, #0]
   31fc8:	b138      	cbz	r0, 31fda <MPSL_IRQ_TIMER0_Handler+0x7a>
   31fca:	2002      	movs	r0, #2
   31fcc:	f000 fb0c 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   31fd0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   31fd4:	2002      	movs	r0, #2
   31fd6:	f7fe fce7 	bl	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   31fda:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   31fde:	f410 3f00 	tst.w	r0, #131072	; 0x20000
   31fe2:	d00a      	beq.n	31ffa <MPSL_IRQ_TIMER0_Handler+0x9a>
   31fe4:	481c      	ldr	r0, [pc, #112]	; (32058 <MPSL_IRQ_TIMER0_Handler+0xf8>)
   31fe6:	6800      	ldr	r0, [r0, #0]
   31fe8:	b138      	cbz	r0, 31ffa <MPSL_IRQ_TIMER0_Handler+0x9a>
   31fea:	2001      	movs	r0, #1
   31fec:	f000 fafc 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   31ff0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   31ff4:	2001      	movs	r0, #1
   31ff6:	f7fe fcd7 	bl	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   31ffa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   31ffe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   32002:	bf08      	it	eq
   32004:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   32008:	4814      	ldr	r0, [pc, #80]	; (3205c <MPSL_IRQ_TIMER0_Handler+0xfc>)
   3200a:	6800      	ldr	r0, [r0, #0]
   3200c:	2800      	cmp	r0, #0
   3200e:	bf08      	it	eq
   32010:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
   32014:	2000      	movs	r0, #0
   32016:	f000 fae7 	bl	325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
   3201a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
   3201e:	2004      	movs	r0, #4
   32020:	7028      	strb	r0, [r5, #0]
   32022:	f8c5 8004 	str.w	r8, [r5, #4]
   32026:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
   3202a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3202e:	2000      	movs	r0, #0
   32030:	f7fe bcba 	b.w	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   32034:	f240 5169 	movw	r1, #1385	; 0x569
   32038:	206c      	movs	r0, #108	; 0x6c
   3203a:	f000 ffad 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3203e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32042:	2007      	movs	r0, #7
   32044:	f7fe bcb0 	b.w	309a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
   32048:	20000028 	.word	0x20000028
   3204c:	40008000 	.word	0x40008000
   32050:	4000814c 	.word	0x4000814c
   32054:	40008148 	.word	0x40008148
   32058:	40008144 	.word	0x40008144
   3205c:	40008140 	.word	0x40008140
   32060:	2201      	movs	r2, #1
   32062:	0211      	lsls	r1, r2, #8
   32064:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   32068:	2000      	movs	r0, #0
   3206a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
   3206e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   32072:	f3bf 8f4f 	dsb	sy
   32076:	f3bf 8f6f 	isb	sy
   3207a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3207e:	490e      	ldr	r1, [pc, #56]	; (320b8 <MPSL_IRQ_TIMER0_Handler+0x158>)
   32080:	f841 2f04 	str.w	r2, [r1, #4]!
   32084:	1e43      	subs	r3, r0, #1
   32086:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
   3208a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
   3208e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
   32092:	4b0a      	ldr	r3, [pc, #40]	; (320bc <MPSL_IRQ_TIMER0_Handler+0x15c>)
   32094:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   32098:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
   3209c:	1d1b      	adds	r3, r3, #4
   3209e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   320a2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
   320a6:	1d1b      	adds	r3, r3, #4
   320a8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   320ac:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
   320b0:	60ca      	str	r2, [r1, #12]
   320b2:	4903      	ldr	r1, [pc, #12]	; (320c0 <MPSL_IRQ_TIMER0_Handler+0x160>)
   320b4:	7048      	strb	r0, [r1, #1]
   320b6:	4770      	bx	lr
   320b8:	40008000 	.word	0x40008000
   320bc:	40008004 	.word	0x40008004
   320c0:	20000028 	.word	0x20000028

000320c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
   320c4:	4801      	ldr	r0, [pc, #4]	; (320cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
   320c6:	6800      	ldr	r0, [r0, #0]
   320c8:	4770      	bx	lr
   320ca:	0000      	.short	0x0000
   320cc:	4000b504 	.word	0x4000b504

000320d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
   320d0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   320d4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 32208 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
   320d8:	4604      	mov	r4, r0
   320da:	f1a8 0702 	sub.w	r7, r8, #2
   320de:	460e      	mov	r6, r1
   320e0:	f898 c000 	ldrb.w	ip, [r8]
   320e4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
   320e8:	f1bc 0f01 	cmp.w	ip, #1
   320ec:	d106      	bne.n	320fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
   320ee:	ea81 0204 	eor.w	r2, r1, r4
   320f2:	4070      	eors	r0, r6
   320f4:	4310      	orrs	r0, r2
   320f6:	bf08      	it	eq
   320f8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   320fc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   32100:	4a42      	ldr	r2, [pc, #264]	; (3220c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
   32102:	6010      	str	r0, [r2, #0]
   32104:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   32108:	f1bc 0f00 	cmp.w	ip, #0
   3210c:	bf07      	ittee	eq
   3210e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
   32112:	2200      	moveq	r2, #0
   32114:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   32118:	2201      	movne	r2, #1
   3211a:	483d      	ldr	r0, [pc, #244]	; (32210 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
   3211c:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
   32120:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
   32124:	2500      	movs	r5, #0
   32126:	f44f 79a0 	mov.w	r9, #320	; 0x140
   3212a:	2a02      	cmp	r2, #2
   3212c:	d207      	bcs.n	3213e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
   3212e:	bf00      	nop
   32130:	eb09 0382 	add.w	r3, r9, r2, lsl #2
   32134:	50c5      	str	r5, [r0, r3]
   32136:	1c52      	adds	r2, r2, #1
   32138:	b2d2      	uxtb	r2, r2
   3213a:	2a02      	cmp	r2, #2
   3213c:	d3f8      	bcc.n	32130 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
   3213e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
   32142:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   32146:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
   3214a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
   3214e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
   32152:	4a30      	ldr	r2, [pc, #192]	; (32214 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
   32154:	f8d2 9000 	ldr.w	r9, [r2]
   32158:	eba3 0909 	sub.w	r9, r3, r9
   3215c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
   32160:	f04f 0901 	mov.w	r9, #1
   32164:	f1ba 0f02 	cmp.w	sl, #2
   32168:	d32e      	bcc.n	321c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
   3216a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
   3216e:	d82b      	bhi.n	321c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
   32170:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   32174:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
   32178:	f1bc 0f00 	cmp.w	ip, #0
   3217c:	d005      	beq.n	3218a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
   3217e:	6810      	ldr	r0, [r2, #0]
   32180:	1a08      	subs	r0, r1, r0
   32182:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   32186:	2802      	cmp	r0, #2
   32188:	d3f9      	bcc.n	3217e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
   3218a:	f8c7 9004 	str.w	r9, [r7, #4]
   3218e:	703d      	strb	r5, [r7, #0]
   32190:	f7ff ff66 	bl	32060 <MPSL_IRQ_TIMER0_Handler+0x100>
   32194:	4820      	ldr	r0, [pc, #128]	; (32218 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
   32196:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
   3219a:	f365 0101 	bfi	r1, r5, #0, #2
   3219e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
   321a2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
   321a6:	2102      	movs	r1, #2
   321a8:	f361 0201 	bfi	r2, r1, #0, #2
   321ac:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
   321b0:	2110      	movs	r1, #16
   321b2:	fa91 f1a1 	rbit	r1, r1
   321b6:	fab1 f181 	clz	r1, r1
   321ba:	2909      	cmp	r1, #9
   321bc:	d909      	bls.n	321d2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
   321be:	f240 3155 	movw	r1, #853	; 0x355
   321c2:	a016      	add	r0, pc, #88	; (adr r0, 3221c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
   321c4:	f000 febc 	bl	32f40 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   321c8:	f240 31b2 	movw	r1, #946	; 0x3b2
   321cc:	206c      	movs	r0, #108	; 0x6c
   321ce:	f000 fee3 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   321d2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
   321d6:	f8c0 900c 	str.w	r9, [r0, #12]
   321da:	6879      	ldr	r1, [r7, #4]
   321dc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   321e0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   321e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   321e8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   321ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   321f0:	490d      	ldr	r1, [pc, #52]	; (32228 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
   321f2:	0480      	lsls	r0, r0, #18
   321f4:	6008      	str	r0, [r1, #0]
   321f6:	e9c7 4604 	strd	r4, r6, [r7, #16]
   321fa:	2004      	movs	r0, #4
   321fc:	f888 0001 	strb.w	r0, [r8, #1]
   32200:	f888 9000 	strb.w	r9, [r8]
   32204:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   32208:	2000002a 	.word	0x2000002a
   3220c:	4001f508 	.word	0x4001f508
   32210:	4000b000 	.word	0x4000b000
   32214:	4000b504 	.word	0x4000b504
   32218:	40008000 	.word	0x40008000
   3221c:	5f66726e 	.word	0x5f66726e
   32220:	656d6974 	.word	0x656d6974
   32224:	00682e72 	.word	0x00682e72
   32228:	4001f504 	.word	0x4001f504

0003222c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
   3222c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32230:	4c31      	ldr	r4, [pc, #196]	; (322f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
   32232:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   32236:	ea82 0c00 	eor.w	ip, r2, r0
   3223a:	404b      	eors	r3, r1
   3223c:	ea5c 0303 	orrs.w	r3, ip, r3
   32240:	bf14      	ite	ne
   32242:	2301      	movne	r3, #1
   32244:	2300      	moveq	r3, #0
   32246:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 322fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
   3224a:	f89c 8000 	ldrb.w	r8, [ip]
   3224e:	f1b8 0f02 	cmp.w	r8, #2
   32252:	d002      	beq.n	3225a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
   32254:	2b00      	cmp	r3, #0
   32256:	d03f      	beq.n	322d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
   32258:	e003      	b.n	32262 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
   3225a:	2b00      	cmp	r3, #0
   3225c:	bf08      	it	eq
   3225e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32262:	7863      	ldrb	r3, [r4, #1]
   32264:	b3bb      	cbz	r3, 322d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
   32266:	4d26      	ldr	r5, [pc, #152]	; (32300 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
   32268:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
   3226c:	602b      	str	r3, [r5, #0]
   3226e:	4e25      	ldr	r6, [pc, #148]	; (32304 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
   32270:	f44f 3580 	mov.w	r5, #65536	; 0x10000
   32274:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   32278:	462f      	mov	r7, r5
   3227a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
   3227e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
   32282:	2500      	movs	r5, #0
   32284:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
   32288:	4d1f      	ldr	r5, [pc, #124]	; (32308 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
   3228a:	f8d5 9000 	ldr.w	r9, [r5]
   3228e:	eba3 0909 	sub.w	r9, r3, r9
   32292:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
   32296:	f1b9 0f02 	cmp.w	r9, #2
   3229a:	d327      	bcc.n	322ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
   3229c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
   322a0:	d824      	bhi.n	322ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
   322a2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
   322a6:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
   322aa:	f1b8 0f00 	cmp.w	r8, #0
   322ae:	d005      	beq.n	322bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
   322b0:	682b      	ldr	r3, [r5, #0]
   322b2:	1ad3      	subs	r3, r2, r3
   322b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   322b8:	2b02      	cmp	r3, #2
   322ba:	d3f9      	bcc.n	322b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
   322bc:	4d13      	ldr	r5, [pc, #76]	; (3230c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
   322be:	2202      	movs	r2, #2
   322c0:	0753      	lsls	r3, r2, #29
   322c2:	602b      	str	r3, [r5, #0]
   322c4:	e9c4 0104 	strd	r0, r1, [r4, #16]
   322c8:	2004      	movs	r0, #4
   322ca:	f88c 0001 	strb.w	r0, [ip, #1]
   322ce:	f88c 2000 	strb.w	r2, [ip]
   322d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   322d6:	e004      	b.n	322e2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
   322d8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   322dc:	206c      	movs	r0, #108	; 0x6c
   322de:	f000 fe5b 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   322e2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   322e6:	206c      	movs	r0, #108	; 0x6c
   322e8:	f000 fe56 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   322ec:	f44f 7174 	mov.w	r1, #976	; 0x3d0
   322f0:	206c      	movs	r0, #108	; 0x6c
   322f2:	f000 fe51 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   322f6:	0000      	.short	0x0000
   322f8:	20000028 	.word	0x20000028
   322fc:	2000002a 	.word	0x2000002a
   32300:	4001f508 	.word	0x4001f508
   32304:	4000b000 	.word	0x4000b000
   32308:	4000b504 	.word	0x4000b504
   3230c:	4001f504 	.word	0x4001f504

00032310 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
   32310:	4901      	ldr	r1, [pc, #4]	; (32318 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
   32312:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
   32316:	4770      	bx	lr
   32318:	20000028 	.word	0x20000028

0003231c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
   3231c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32320:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 32418 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
   32324:	f89c 4000 	ldrb.w	r4, [ip]
   32328:	2c00      	cmp	r4, #0
   3232a:	bf07      	ittee	eq
   3232c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
   32330:	2100      	moveq	r1, #0
   32332:	f44f 3200 	movne.w	r2, #131072	; 0x20000
   32336:	2101      	movne	r1, #1
   32338:	4838      	ldr	r0, [pc, #224]	; (3241c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
   3233a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
   3233e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   32342:	2300      	movs	r3, #0
   32344:	2902      	cmp	r1, #2
   32346:	bf38      	it	cc
   32348:	f44f 75a0 	movcc.w	r5, #320	; 0x140
   3234c:	d207      	bcs.n	3235e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
   3234e:	bf00      	nop
   32350:	eb05 0281 	add.w	r2, r5, r1, lsl #2
   32354:	5083      	str	r3, [r0, r2]
   32356:	1c49      	adds	r1, r1, #1
   32358:	b2c9      	uxtb	r1, r1
   3235a:	2902      	cmp	r1, #2
   3235c:	d3f8      	bcc.n	32350 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
   3235e:	2c02      	cmp	r4, #2
   32360:	d004      	beq.n	3236c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
   32362:	f240 31db 	movw	r1, #987	; 0x3db
   32366:	206c      	movs	r0, #108	; 0x6c
   32368:	f000 fe16 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3236c:	f3ef 8210 	mrs	r2, PRIMASK
   32370:	b672      	cpsid	i
   32372:	4c2b      	ldr	r4, [pc, #172]	; (32420 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
   32374:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
   32378:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
   3237c:	b12d      	cbz	r5, 3238a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
   3237e:	68a1      	ldr	r1, [r4, #8]
   32380:	1c49      	adds	r1, r1, #1
   32382:	60a1      	str	r1, [r4, #8]
   32384:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   32388:	e7f4      	b.n	32374 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
   3238a:	68a0      	ldr	r0, [r4, #8]
   3238c:	b902      	cbnz	r2, 32390 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
   3238e:	b662      	cpsie	i
   32390:	0a02      	lsrs	r2, r0, #8
   32392:	0600      	lsls	r0, r0, #24
   32394:	1840      	adds	r0, r0, r1
   32396:	eb42 0103 	adc.w	r1, r2, r3
   3239a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
   3239e:	1cc0      	adds	r0, r0, #3
   323a0:	f141 0100 	adc.w	r1, r1, #0
   323a4:	4f1f      	ldr	r7, [pc, #124]	; (32424 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
   323a6:	2601      	movs	r6, #1
   323a8:	4d1f      	ldr	r5, [pc, #124]	; (32428 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
   323aa:	ea80 0902 	eor.w	r9, r0, r2
   323ae:	ea81 0808 	eor.w	r8, r1, r8
   323b2:	ea59 0808 	orrs.w	r8, r9, r8
   323b6:	d00e      	beq.n	323d6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
   323b8:	f8d7 8000 	ldr.w	r8, [r7]
   323bc:	eba2 0808 	sub.w	r8, r2, r8
   323c0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
   323c4:	f1b8 0f04 	cmp.w	r8, #4
   323c8:	d305      	bcc.n	323d6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
   323ca:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
   323ce:	d802      	bhi.n	323d6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
   323d0:	f7ff fe7e 	bl	320d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
   323d4:	e01b      	b.n	3240e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
   323d6:	6838      	ldr	r0, [r7, #0]
   323d8:	1a10      	subs	r0, r2, r0
   323da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   323de:	2802      	cmp	r0, #2
   323e0:	d313      	bcc.n	3240a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
   323e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   323e6:	d810      	bhi.n	3240a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
   323e8:	4910      	ldr	r1, [pc, #64]	; (3242c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
   323ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   323ee:	6008      	str	r0, [r1, #0]
   323f0:	6066      	str	r6, [r4, #4]
   323f2:	7023      	strb	r3, [r4, #0]
   323f4:	606e      	str	r6, [r5, #4]
   323f6:	60ee      	str	r6, [r5, #12]
   323f8:	0040      	lsls	r0, r0, #1
   323fa:	1f09      	subs	r1, r1, #4
   323fc:	6008      	str	r0, [r1, #0]
   323fe:	2004      	movs	r0, #4
   32400:	f88c 0001 	strb.w	r0, [ip, #1]
   32404:	f88c 6000 	strb.w	r6, [ip]
   32408:	e001      	b.n	3240e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
   3240a:	6066      	str	r6, [r4, #4]
   3240c:	7023      	strb	r3, [r4, #0]
   3240e:	6860      	ldr	r0, [r4, #4]
   32410:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
   32414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32418:	2000002a 	.word	0x2000002a
   3241c:	4000b000 	.word	0x4000b000
   32420:	20000028 	.word	0x20000028
   32424:	4000b504 	.word	0x4000b504
   32428:	40008000 	.word	0x40008000
   3242c:	4001f508 	.word	0x4001f508

00032430 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
   32430:	b410      	push	{r4}
   32432:	f3ef 8410 	mrs	r4, PRIMASK
   32436:	b672      	cpsid	i
   32438:	4a0c      	ldr	r2, [pc, #48]	; (3246c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
   3243a:	490d      	ldr	r1, [pc, #52]	; (32470 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
   3243c:	f04f 0c00 	mov.w	ip, #0
   32440:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   32444:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   32448:	b12b      	cbz	r3, 32456 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
   3244a:	6888      	ldr	r0, [r1, #8]
   3244c:	1c40      	adds	r0, r0, #1
   3244e:	6088      	str	r0, [r1, #8]
   32450:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
   32454:	e7f4      	b.n	32440 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
   32456:	6889      	ldr	r1, [r1, #8]
   32458:	b904      	cbnz	r4, 3245c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
   3245a:	b662      	cpsie	i
   3245c:	0a0a      	lsrs	r2, r1, #8
   3245e:	0609      	lsls	r1, r1, #24
   32460:	1808      	adds	r0, r1, r0
   32462:	bc10      	pop	{r4}
   32464:	eb42 010c 	adc.w	r1, r2, ip
   32468:	4770      	bx	lr
   3246a:	0000      	.short	0x0000
   3246c:	4000b000 	.word	0x4000b000
   32470:	20000028 	.word	0x20000028

00032474 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
   32474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32478:	4a56      	ldr	r2, [pc, #344]	; (325d4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
   3247a:	2501      	movs	r5, #1
   3247c:	2400      	movs	r4, #0
   3247e:	f892 c000 	ldrb.w	ip, [r2]
   32482:	7852      	ldrb	r2, [r2, #1]
   32484:	f44f 76a0 	mov.w	r6, #320	; 0x140
   32488:	2807      	cmp	r0, #7
   3248a:	d27d      	bcs.n	32588 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
   3248c:	e8df f000 	tbb	[pc, r0]
   32490:	04040404 	.word	0x04040404
   32494:	00606060 	.word	0x00606060
   32498:	4b4f      	ldr	r3, [pc, #316]	; (325d8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
   3249a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   3249e:	43ff      	mvns	r7, r7
   324a0:	ea77 0708 	orns	r7, r7, r8
   324a4:	bf04      	itt	eq
   324a6:	785b      	ldrbeq	r3, [r3, #1]
   324a8:	2b00      	cmpeq	r3, #0
   324aa:	d003      	beq.n	324b4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
   324ac:	f1bc 0f02 	cmp.w	ip, #2
   324b0:	d005      	beq.n	324be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
   324b2:	e026      	b.n	32502 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
   324b4:	f44f 6186 	mov.w	r1, #1072	; 0x430
   324b8:	206c      	movs	r0, #108	; 0x6c
   324ba:	f000 fd6d 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   324be:	1f13      	subs	r3, r2, #4
   324c0:	b2db      	uxtb	r3, r3
   324c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   324c6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
   324ca:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
   324ce:	2300      	movs	r3, #0
   324d0:	f1bc 0f01 	cmp.w	ip, #1
   324d4:	d003      	beq.n	324de <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
   324d6:	f1bc 0f02 	cmp.w	ip, #2
   324da:	d008      	beq.n	324ee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
   324dc:	e00e      	b.n	324fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
   324de:	2a04      	cmp	r2, #4
   324e0:	bf24      	itt	cs
   324e2:	6837      	ldrcs	r7, [r6, #0]
   324e4:	2f00      	cmpcs	r7, #0
   324e6:	bf08      	it	eq
   324e8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   324ec:	e006      	b.n	324fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
   324ee:	2a04      	cmp	r2, #4
   324f0:	bf24      	itt	cs
   324f2:	6837      	ldrcs	r7, [r6, #0]
   324f4:	2f00      	cmpcs	r7, #0
   324f6:	bf08      	it	eq
   324f8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
   324fc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   32500:	d1e5      	bne.n	324ce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
   32502:	4b36      	ldr	r3, [pc, #216]	; (325dc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
   32504:	f100 0210 	add.w	r2, r0, #16
   32508:	fa05 f202 	lsl.w	r2, r5, r2
   3250c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   32510:	f04f 0c40 	mov.w	ip, #64	; 0x40
   32514:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
   32518:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
   3251c:	449c      	add	ip, r3
   3251e:	f8cc 5000 	str.w	r5, [ip]
   32522:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   32526:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
   3252a:	eba1 0c0c 	sub.w	ip, r1, ip
   3252e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
   32532:	f1bc 0f03 	cmp.w	ip, #3
   32536:	bf3e      	ittt	cc
   32538:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
   3253c:	2000      	movcc	r0, #0
   3253e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
   32542:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
   32546:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   3254a:	2001      	movs	r0, #1
   3254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32550:	f1bc 0f00 	cmp.w	ip, #0
   32554:	d006      	beq.n	32564 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
   32556:	4282      	cmp	r2, r0
   32558:	d104      	bne.n	32564 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
   3255a:	f44f 618a 	mov.w	r1, #1104	; 0x450
   3255e:	206c      	movs	r0, #108	; 0x6c
   32560:	f000 fd1a 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32564:	1f00      	subs	r0, r0, #4
   32566:	b2c2      	uxtb	r2, r0
   32568:	2a03      	cmp	r2, #3
   3256a:	d304      	bcc.n	32576 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
   3256c:	f44f 7127 	mov.w	r1, #668	; 0x29c
   32570:	206c      	movs	r0, #108	; 0x6c
   32572:	f000 fd11 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32576:	4b1a      	ldr	r3, [pc, #104]	; (325e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
   32578:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   3257c:	4090      	lsls	r0, r2
   3257e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   32582:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
   32586:	e000      	b.n	3258a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
   32588:	e01f      	b.n	325ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
   3258a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
   3258e:	f843 400c 	str.w	r4, [r3, ip]
   32592:	f8df c050 	ldr.w	ip, [pc, #80]	; 325e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
   32596:	f8dc c000 	ldr.w	ip, [ip]
   3259a:	eba1 0c0c 	sub.w	ip, r1, ip
   3259e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
   325a2:	f1bc 0f02 	cmp.w	ip, #2
   325a6:	d30d      	bcc.n	325c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
   325a8:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
   325ac:	d80a      	bhi.n	325c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
   325ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   325b2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   325b6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   325ba:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   325be:	4628      	mov	r0, r5
   325c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   325c4:	4620      	mov	r0, r4
   325c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   325ca:	f240 4154 	movw	r1, #1108	; 0x454
   325ce:	206c      	movs	r0, #108	; 0x6c
   325d0:	f000 fce2 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   325d4:	2000002a 	.word	0x2000002a
   325d8:	20000028 	.word	0x20000028
   325dc:	40008000 	.word	0x40008000
   325e0:	4000b000 	.word	0x4000b000
   325e4:	4000b504 	.word	0x4000b504

000325e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
   325e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   325ea:	2101      	movs	r1, #1
   325ec:	2600      	movs	r6, #0
   325ee:	f44f 77a0 	mov.w	r7, #320	; 0x140
   325f2:	2807      	cmp	r0, #7
   325f4:	d24a      	bcs.n	3268c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
   325f6:	e8df f000 	tbb	[pc, r0]
   325fa:	0404      	.short	0x0404
   325fc:	18180404 	.word	0x18180404
   32600:	0018      	.short	0x0018
   32602:	f100 0210 	add.w	r2, r0, #16
   32606:	fa01 f202 	lsl.w	r2, r1, r2
   3260a:	4923      	ldr	r1, [pc, #140]	; (32698 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
   3260c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   32610:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   32614:	2200      	movs	r2, #0
   32616:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
   3261a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
   3261e:	508e      	str	r6, [r1, r2]
   32620:	491e      	ldr	r1, [pc, #120]	; (3269c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
   32622:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   32626:	9000      	str	r0, [sp, #0]
   32628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3262a:	4d1d      	ldr	r5, [pc, #116]	; (326a0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
   3262c:	1f01      	subs	r1, r0, #4
   3262e:	b2cc      	uxtb	r4, r1
   32630:	7829      	ldrb	r1, [r5, #0]
   32632:	b181      	cbz	r1, 32656 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
   32634:	786a      	ldrb	r2, [r5, #1]
   32636:	4282      	cmp	r2, r0
   32638:	d10d      	bne.n	32656 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
   3263a:	4a1a      	ldr	r2, [pc, #104]	; (326a4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
   3263c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
   32640:	6010      	str	r0, [r2, #0]
   32642:	2901      	cmp	r1, #1
   32644:	bf08      	it	eq
   32646:	f7ff fd0b 	bleq	32060 <MPSL_IRQ_TIMER0_Handler+0x100>
   3264a:	702e      	strb	r6, [r5, #0]
   3264c:	4a16      	ldr	r2, [pc, #88]	; (326a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
   3264e:	f04f 30ff 	mov.w	r0, #4294967295
   32652:	e9c2 0004 	strd	r0, r0, [r2, #16]
   32656:	4915      	ldr	r1, [pc, #84]	; (326ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
   32658:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   3265c:	40a0      	lsls	r0, r4
   3265e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
   32662:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   32666:	00a0      	lsls	r0, r4, #2
   32668:	4408      	add	r0, r1
   3266a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
   3266e:	4a10      	ldr	r2, [pc, #64]	; (326b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
   32670:	6812      	ldr	r2, [r2, #0]
   32672:	1a80      	subs	r0, r0, r2
   32674:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   32678:	2802      	cmp	r0, #2
   3267a:	bf24      	itt	cs
   3267c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
   32680:	500e      	strcs	r6, [r1, r0]
   32682:	480c      	ldr	r0, [pc, #48]	; (326b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
   32684:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   32688:	9000      	str	r0, [sp, #0]
   3268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3268c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   32690:	206c      	movs	r0, #108	; 0x6c
   32692:	f000 fc81 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32696:	0000      	.short	0x0000
   32698:	40008000 	.word	0x40008000
   3269c:	40008140 	.word	0x40008140
   326a0:	2000002a 	.word	0x2000002a
   326a4:	4001f508 	.word	0x4001f508
   326a8:	20000028 	.word	0x20000028
   326ac:	4000b000 	.word	0x4000b000
   326b0:	4000b504 	.word	0x4000b504
   326b4:	4000b140 	.word	0x4000b140

000326b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
   326b8:	481a      	ldr	r0, [pc, #104]	; (32724 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
   326ba:	7800      	ldrb	r0, [r0, #0]
   326bc:	2800      	cmp	r0, #0
   326be:	bf07      	ittee	eq
   326c0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
   326c4:	2100      	moveq	r1, #0
   326c6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
   326ca:	2101      	movne	r1, #1
   326cc:	4a16      	ldr	r2, [pc, #88]	; (32728 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
   326ce:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
   326d2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   326d6:	2000      	movs	r0, #0
   326d8:	2902      	cmp	r1, #2
   326da:	bf38      	it	cc
   326dc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
   326e0:	d207      	bcs.n	326f2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
   326e2:	bf00      	nop
   326e4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
   326e8:	50d0      	str	r0, [r2, r3]
   326ea:	1c49      	adds	r1, r1, #1
   326ec:	b2c9      	uxtb	r1, r1
   326ee:	2902      	cmp	r1, #2
   326f0:	d3f8      	bcc.n	326e4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
   326f2:	490e      	ldr	r1, [pc, #56]	; (3272c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
   326f4:	f04f 32ff 	mov.w	r2, #4294967295
   326f8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   326fc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   32700:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
   32704:	1d0a      	adds	r2, r1, #4
   32706:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   3270a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
   3270e:	1d12      	adds	r2, r2, #4
   32710:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   32714:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
   32718:	1d12      	adds	r2, r2, #4
   3271a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
   3271e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
   32722:	4770      	bx	lr
   32724:	2000002a 	.word	0x2000002a
   32728:	4000b000 	.word	0x4000b000
   3272c:	40008000 	.word	0x40008000

00032730 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
   32730:	b570      	push	{r4, r5, r6, lr}
   32732:	f3ef 8110 	mrs	r1, PRIMASK
   32736:	b672      	cpsid	i
   32738:	2400      	movs	r4, #0
   3273a:	4b0d      	ldr	r3, [pc, #52]	; (32770 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
   3273c:	4a0d      	ldr	r2, [pc, #52]	; (32774 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
   3273e:	bf00      	nop
   32740:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
   32744:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
   32748:	f1bc 0f00 	cmp.w	ip, #0
   3274c:	d005      	beq.n	3275a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
   3274e:	6890      	ldr	r0, [r2, #8]
   32750:	1c40      	adds	r0, r0, #1
   32752:	6090      	str	r0, [r2, #8]
   32754:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   32758:	e7f2      	b.n	32740 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
   3275a:	6895      	ldr	r5, [r2, #8]
   3275c:	b901      	cbnz	r1, 32760 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
   3275e:	b662      	cpsie	i
   32760:	f004 fd9d 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   32764:	4a04      	ldr	r2, [pc, #16]	; (32778 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
   32766:	4621      	mov	r1, r4
   32768:	fbe5 0102 	umlal	r0, r1, r5, r2
   3276c:	bd70      	pop	{r4, r5, r6, pc}
   3276e:	0000      	.short	0x0000
   32770:	4000b000 	.word	0x4000b000
   32774:	20000028 	.word	0x20000028
   32778:	1e848000 	.word	0x1e848000

0003277c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
   3277c:	b510      	push	{r4, lr}
   3277e:	2807      	cmp	r0, #7
   32780:	d20d      	bcs.n	3279e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
   32782:	e8df f000 	tbb	[pc, r0]
   32786:	0404      	.short	0x0404
   32788:	06060404 	.word	0x06060404
   3278c:	0006      	.short	0x0006
   3278e:	4906      	ldr	r1, [pc, #24]	; (327a8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
   32790:	e002      	b.n	32798 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
   32792:	1f00      	subs	r0, r0, #4
   32794:	4905      	ldr	r1, [pc, #20]	; (327ac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
   32796:	b2c0      	uxtb	r0, r0
   32798:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   3279c:	bd10      	pop	{r4, pc}
   3279e:	f240 417b 	movw	r1, #1147	; 0x47b
   327a2:	206c      	movs	r0, #108	; 0x6c
   327a4:	f000 fbf8 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   327a8:	40008140 	.word	0x40008140
   327ac:	4000b140 	.word	0x4000b140

000327b0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
   327b0:	b570      	push	{r4, r5, r6, lr}
   327b2:	481b      	ldr	r0, [pc, #108]	; (32820 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
   327b4:	2400      	movs	r4, #0
   327b6:	2104      	movs	r1, #4
   327b8:	7004      	strb	r4, [r0, #0]
   327ba:	1e80      	subs	r0, r0, #2
   327bc:	7001      	strb	r1, [r0, #0]
   327be:	1f49      	subs	r1, r1, #5
   327c0:	e9c0 1104 	strd	r1, r1, [r0, #16]
   327c4:	6084      	str	r4, [r0, #8]
   327c6:	f7ff fc4b 	bl	32060 <MPSL_IRQ_TIMER0_Handler+0x100>
   327ca:	2501      	movs	r5, #1
   327cc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   327d0:	02eb      	lsls	r3, r5, #11
   327d2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
   327d6:	f3bf 8f4f 	dsb	sy
   327da:	f3bf 8f6f 	isb	sy
   327de:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
   327e2:	4a10      	ldr	r2, [pc, #64]	; (32824 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
   327e4:	6055      	str	r5, [r2, #4]
   327e6:	6095      	str	r5, [r2, #8]
   327e8:	480f      	ldr	r0, [pc, #60]	; (32828 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
   327ea:	6801      	ldr	r1, [r0, #0]
   327ec:	2900      	cmp	r1, #0
   327ee:	d1fc      	bne.n	327ea <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
   327f0:	480e      	ldr	r0, [pc, #56]	; (3282c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
   327f2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   327f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
   327fa:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
   327fe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
   32802:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
   32806:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
   3280a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
   3280e:	6015      	str	r5, [r2, #0]
   32810:	f44f 7082 	mov.w	r0, #260	; 0x104
   32814:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
   32818:	2002      	movs	r0, #2
   3281a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
   3281e:	bd70      	pop	{r4, r5, r6, pc}
   32820:	2000002a 	.word	0x2000002a
   32824:	4000b000 	.word	0x4000b000
   32828:	4000b504 	.word	0x4000b504
   3282c:	00070002 	.word	0x00070002

00032830 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
   32830:	4808      	ldr	r0, [pc, #32]	; (32854 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
   32832:	f990 0000 	ldrsb.w	r0, [r0]
   32836:	2800      	cmp	r0, #0
   32838:	bfb8      	it	lt
   3283a:	4770      	bxlt	lr
   3283c:	f000 011f 	and.w	r1, r0, #31
   32840:	2201      	movs	r2, #1
   32842:	fa02 f101 	lsl.w	r1, r2, r1
   32846:	0940      	lsrs	r0, r0, #5
   32848:	0080      	lsls	r0, r0, #2
   3284a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   3284e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   32852:	4770      	bx	lr
   32854:	20000384 	.word	0x20000384

00032858 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
   32858:	4803      	ldr	r0, [pc, #12]	; (32868 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
   3285a:	7800      	ldrb	r0, [r0, #0]
   3285c:	2803      	cmp	r0, #3
   3285e:	bf0c      	ite	eq
   32860:	2001      	moveq	r0, #1
   32862:	2000      	movne	r0, #0
   32864:	4770      	bx	lr
   32866:	0000      	.short	0x0000
   32868:	2000035c 	.word	0x2000035c

0003286c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
   3286c:	4801      	ldr	r0, [pc, #4]	; (32874 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
   3286e:	8840      	ldrh	r0, [r0, #2]
   32870:	4770      	bx	lr
   32872:	0000      	.short	0x0000
   32874:	2000035c 	.word	0x2000035c

00032878 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
   32878:	4803      	ldr	r0, [pc, #12]	; (32888 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
   3287a:	7800      	ldrb	r0, [r0, #0]
   3287c:	2802      	cmp	r0, #2
   3287e:	bf16      	itet	ne
   32880:	2803      	cmpne	r0, #3
   32882:	2001      	moveq	r0, #1
   32884:	2000      	movne	r0, #0
   32886:	4770      	bx	lr
   32888:	2000035c 	.word	0x2000035c

0003288c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
   3288c:	4802      	ldr	r0, [pc, #8]	; (32898 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
   3288e:	2100      	movs	r1, #0
   32890:	7001      	strb	r1, [r0, #0]
   32892:	8041      	strh	r1, [r0, #2]
   32894:	4770      	bx	lr
   32896:	0000      	.short	0x0000
   32898:	2000035c 	.word	0x2000035c

0003289c <MPSL_IRQ_CLOCK_Handler>:
   3289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   328a0:	4c16      	ldr	r4, [pc, #88]	; (328fc <MPSL_IRQ_CLOCK_Handler+0x60>)
   328a2:	7a60      	ldrb	r0, [r4, #9]
   328a4:	2800      	cmp	r0, #0
   328a6:	d027      	beq.n	328f8 <MPSL_IRQ_CLOCK_Handler+0x5c>
   328a8:	f44f 7180 	mov.w	r1, #256	; 0x100
   328ac:	058d      	lsls	r5, r1, #22
   328ae:	4628      	mov	r0, r5
   328b0:	f004 fd20 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   328b4:	4680      	mov	r8, r0
   328b6:	f44f 7182 	mov.w	r1, #260	; 0x104
   328ba:	4628      	mov	r0, r5
   328bc:	f004 fd1a 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   328c0:	2600      	movs	r6, #0
   328c2:	4607      	mov	r7, r0
   328c4:	f1b8 0f00 	cmp.w	r8, #0
   328c8:	d009      	beq.n	328de <MPSL_IRQ_CLOCK_Handler+0x42>
   328ca:	2001      	movs	r0, #1
   328cc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   328d0:	7920      	ldrb	r0, [r4, #4]
   328d2:	b120      	cbz	r0, 328de <MPSL_IRQ_CLOCK_Handler+0x42>
   328d4:	7126      	strb	r6, [r4, #4]
   328d6:	69e0      	ldr	r0, [r4, #28]
   328d8:	b108      	cbz	r0, 328de <MPSL_IRQ_CLOCK_Handler+0x42>
   328da:	4780      	blx	r0
   328dc:	61e6      	str	r6, [r4, #28]
   328de:	b137      	cbz	r7, 328ee <MPSL_IRQ_CLOCK_Handler+0x52>
   328e0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
   328e4:	2002      	movs	r0, #2
   328e6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   328ea:	f000 fa75 	bl	32dd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   328ee:	4640      	mov	r0, r8
   328f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   328f4:	f000 b858 	b.w	329a8 <MPSL_IRQ_CLOCK_Handler+0x10c>
   328f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   328fc:	20000314 	.word	0x20000314
   32900:	b510      	push	{r4, lr}
   32902:	f004 fda1 	bl	37448 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   32906:	b930      	cbnz	r0, 32916 <MPSL_IRQ_CLOCK_Handler+0x7a>
   32908:	f004 fdbf 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   3290c:	b918      	cbnz	r0, 32916 <MPSL_IRQ_CLOCK_Handler+0x7a>
   3290e:	f004 fdf2 	bl	374f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   32912:	2800      	cmp	r0, #0
   32914:	d002      	beq.n	3291c <MPSL_IRQ_CLOCK_Handler+0x80>
   32916:	4902      	ldr	r1, [pc, #8]	; (32920 <MPSL_IRQ_CLOCK_Handler+0x84>)
   32918:	2002      	movs	r0, #2
   3291a:	6008      	str	r0, [r1, #0]
   3291c:	bd10      	pop	{r4, pc}
   3291e:	0000      	.short	0x0000
   32920:	40000c34 	.word	0x40000c34
   32924:	b570      	push	{r4, r5, r6, lr}
   32926:	f000 f99b 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   3292a:	f000 fabd 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   3292e:	4c09      	ldr	r4, [pc, #36]	; (32954 <MPSL_IRQ_CLOCK_Handler+0xb8>)
   32930:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   32934:	b130      	cbz	r0, 32944 <MPSL_IRQ_CLOCK_Handler+0xa8>
   32936:	f7ff ffe3 	bl	32900 <MPSL_IRQ_CLOCK_Handler+0x64>
   3293a:	2001      	movs	r0, #1
   3293c:	6128      	str	r0, [r5, #16]
   3293e:	2004      	movs	r0, #4
   32940:	72a0      	strb	r0, [r4, #10]
   32942:	e004      	b.n	3294e <MPSL_IRQ_CLOCK_Handler+0xb2>
   32944:	2003      	movs	r0, #3
   32946:	72a0      	strb	r0, [r4, #10]
   32948:	2001      	movs	r0, #1
   3294a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   3294e:	2000      	movs	r0, #0
   32950:	71e0      	strb	r0, [r4, #7]
   32952:	bd70      	pop	{r4, r5, r6, pc}
   32954:	20000314 	.word	0x20000314
   32958:	b570      	push	{r4, r5, r6, lr}
   3295a:	4c12      	ldr	r4, [pc, #72]	; (329a4 <MPSL_IRQ_CLOCK_Handler+0x108>)
   3295c:	79a0      	ldrb	r0, [r4, #6]
   3295e:	b1e0      	cbz	r0, 3299a <MPSL_IRQ_CLOCK_Handler+0xfe>
   32960:	79e1      	ldrb	r1, [r4, #7]
   32962:	1e40      	subs	r0, r0, #1
   32964:	4281      	cmp	r1, r0
   32966:	da18      	bge.n	3299a <MPSL_IRQ_CLOCK_Handler+0xfe>
   32968:	f000 fa9e 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   3296c:	4605      	mov	r5, r0
   3296e:	f000 fb87 	bl	33080 <mpsl_temperature_get>
   32972:	79a1      	ldrb	r1, [r4, #6]
   32974:	2901      	cmp	r1, #1
   32976:	d902      	bls.n	3297e <MPSL_IRQ_CLOCK_Handler+0xe2>
   32978:	79e1      	ldrb	r1, [r4, #7]
   3297a:	1c49      	adds	r1, r1, #1
   3297c:	71e1      	strb	r1, [r4, #7]
   3297e:	b10d      	cbz	r5, 32984 <MPSL_IRQ_CLOCK_Handler+0xe8>
   32980:	6961      	ldr	r1, [r4, #20]
   32982:	e000      	b.n	32986 <MPSL_IRQ_CLOCK_Handler+0xea>
   32984:	6921      	ldr	r1, [r4, #16]
   32986:	1a41      	subs	r1, r0, r1
   32988:	2902      	cmp	r1, #2
   3298a:	da02      	bge.n	32992 <MPSL_IRQ_CLOCK_Handler+0xf6>
   3298c:	f111 0f02 	cmn.w	r1, #2
   32990:	dc07      	bgt.n	329a2 <MPSL_IRQ_CLOCK_Handler+0x106>
   32992:	b10d      	cbz	r5, 32998 <MPSL_IRQ_CLOCK_Handler+0xfc>
   32994:	6160      	str	r0, [r4, #20]
   32996:	e000      	b.n	3299a <MPSL_IRQ_CLOCK_Handler+0xfe>
   32998:	6120      	str	r0, [r4, #16]
   3299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3299e:	f7ff bfc1 	b.w	32924 <MPSL_IRQ_CLOCK_Handler+0x88>
   329a2:	bd70      	pop	{r4, r5, r6, pc}
   329a4:	20000314 	.word	0x20000314
   329a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   329ac:	4606      	mov	r6, r0
   329ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   329b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
   329b6:	4628      	mov	r0, r5
   329b8:	f004 fc9c 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   329bc:	4680      	mov	r8, r0
   329be:	f44f 7188 	mov.w	r1, #272	; 0x110
   329c2:	4628      	mov	r0, r5
   329c4:	f004 fc96 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   329c8:	4c27      	ldr	r4, [pc, #156]	; (32a68 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   329ca:	4682      	mov	sl, r0
   329cc:	7827      	ldrb	r7, [r4, #0]
   329ce:	f104 0008 	add.w	r0, r4, #8
   329d2:	f004 fd03 	bl	373dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   329d6:	b110      	cbz	r0, 329de <MPSL_IRQ_CLOCK_Handler+0x142>
   329d8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
   329dc:	e016      	b.n	32a0c <MPSL_IRQ_CLOCK_Handler+0x170>
   329de:	f04f 0901 	mov.w	r9, #1
   329e2:	b146      	cbz	r6, 329f6 <MPSL_IRQ_CLOCK_Handler+0x15a>
   329e4:	7aa0      	ldrb	r0, [r4, #10]
   329e6:	2803      	cmp	r0, #3
   329e8:	d105      	bne.n	329f6 <MPSL_IRQ_CLOCK_Handler+0x15a>
   329ea:	2004      	movs	r0, #4
   329ec:	72a0      	strb	r0, [r4, #10]
   329ee:	f7ff ff87 	bl	32900 <MPSL_IRQ_CLOCK_Handler+0x64>
   329f2:	f8c5 9010 	str.w	r9, [r5, #16]
   329f6:	2600      	movs	r6, #0
   329f8:	f1b8 0f00 	cmp.w	r8, #0
   329fc:	d018      	beq.n	32a30 <MPSL_IRQ_CLOCK_Handler+0x194>
   329fe:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
   32a02:	7aa0      	ldrb	r0, [r4, #10]
   32a04:	2804      	cmp	r0, #4
   32a06:	d004      	beq.n	32a12 <MPSL_IRQ_CLOCK_Handler+0x176>
   32a08:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   32a0c:	206d      	movs	r0, #109	; 0x6d
   32a0e:	f000 fac3 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32a12:	f004 fd19 	bl	37448 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
   32a16:	b928      	cbnz	r0, 32a24 <MPSL_IRQ_CLOCK_Handler+0x188>
   32a18:	f004 fd37 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   32a1c:	b910      	cbnz	r0, 32a24 <MPSL_IRQ_CLOCK_Handler+0x188>
   32a1e:	f004 fd6a 	bl	374f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   32a22:	b108      	cbz	r0, 32a28 <MPSL_IRQ_CLOCK_Handler+0x18c>
   32a24:	4811      	ldr	r0, [pc, #68]	; (32a6c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
   32a26:	6006      	str	r6, [r0, #0]
   32a28:	2002      	movs	r0, #2
   32a2a:	72a0      	strb	r0, [r4, #10]
   32a2c:	f000 f8fc 	bl	32c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   32a30:	f1ba 0f00 	cmp.w	sl, #0
   32a34:	d008      	beq.n	32a48 <MPSL_IRQ_CLOCK_Handler+0x1ac>
   32a36:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
   32a3a:	7aa0      	ldrb	r0, [r4, #10]
   32a3c:	2802      	cmp	r0, #2
   32a3e:	d101      	bne.n	32a44 <MPSL_IRQ_CLOCK_Handler+0x1a8>
   32a40:	f7ff ff8a 	bl	32958 <MPSL_IRQ_CLOCK_Handler+0xbc>
   32a44:	f8c5 9014 	str.w	r9, [r5, #20]
   32a48:	b13f      	cbz	r7, 32a5a <MPSL_IRQ_CLOCK_Handler+0x1be>
   32a4a:	7026      	strb	r6, [r4, #0]
   32a4c:	7aa0      	ldrb	r0, [r4, #10]
   32a4e:	2802      	cmp	r0, #2
   32a50:	d101      	bne.n	32a56 <MPSL_IRQ_CLOCK_Handler+0x1ba>
   32a52:	f7ff ff67 	bl	32924 <MPSL_IRQ_CLOCK_Handler+0x88>
   32a56:	f000 f8e7 	bl	32c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   32a5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32a5e:	4802      	ldr	r0, [pc, #8]	; (32a68 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
   32a60:	3008      	adds	r0, #8
   32a62:	f004 bcd2 	b.w	3740a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   32a66:	0000      	.short	0x0000
   32a68:	20000314 	.word	0x20000314
   32a6c:	40000c34 	.word	0x40000c34
   32a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32a74:	4c49      	ldr	r4, [pc, #292]	; (32b9c <MPSL_IRQ_CLOCK_Handler+0x300>)
   32a76:	2700      	movs	r7, #0
   32a78:	4606      	mov	r6, r0
   32a7a:	61a7      	str	r7, [r4, #24]
   32a7c:	7842      	ldrb	r2, [r0, #1]
   32a7e:	7881      	ldrb	r1, [r0, #2]
   32a80:	7800      	ldrb	r0, [r0, #0]
   32a82:	72e0      	strb	r0, [r4, #11]
   32a84:	7162      	strb	r2, [r4, #5]
   32a86:	71a1      	strb	r1, [r4, #6]
   32a88:	71e7      	strb	r7, [r4, #7]
   32a8a:	f04f 0801 	mov.w	r8, #1
   32a8e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   32a92:	2805      	cmp	r0, #5
   32a94:	d225      	bcs.n	32ae2 <MPSL_IRQ_CLOCK_Handler+0x246>
   32a96:	e8df f000 	tbb	[pc, r0]
   32a9a:	0310      	.short	0x0310
   32a9c:	00222006 	.word	0x00222006
   32aa0:	f8c4 8018 	str.w	r8, [r4, #24]
   32aa4:	e009      	b.n	32aba <MPSL_IRQ_CLOCK_Handler+0x21e>
   32aa6:	f000 f8db 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   32aaa:	2101      	movs	r1, #1
   32aac:	4628      	mov	r0, r5
   32aae:	f004 fc26 	bl	372fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
   32ab2:	2800      	cmp	r0, #0
   32ab4:	d0f9      	beq.n	32aaa <MPSL_IRQ_CLOCK_Handler+0x20e>
   32ab6:	2002      	movs	r0, #2
   32ab8:	61a0      	str	r0, [r4, #24]
   32aba:	f004 fc4c 	bl	37356 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
   32abe:	b1c0      	cbz	r0, 32af2 <MPSL_IRQ_CLOCK_Handler+0x256>
   32ac0:	f000 fa0c 	bl	32edc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
   32ac4:	7e21      	ldrb	r1, [r4, #24]
   32ac6:	f001 0103 	and.w	r1, r1, #3
   32aca:	4288      	cmp	r0, r1
   32acc:	d111      	bne.n	32af2 <MPSL_IRQ_CLOCK_Handler+0x256>
   32ace:	79b0      	ldrb	r0, [r6, #6]
   32ad0:	b160      	cbz	r0, 32aec <MPSL_IRQ_CLOCK_Handler+0x250>
   32ad2:	2002      	movs	r0, #2
   32ad4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   32ad8:	e044      	b.n	32b64 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   32ada:	4831      	ldr	r0, [pc, #196]	; (32ba0 <MPSL_IRQ_CLOCK_Handler+0x304>)
   32adc:	e7ec      	b.n	32ab8 <MPSL_IRQ_CLOCK_Handler+0x21c>
   32ade:	4831      	ldr	r0, [pc, #196]	; (32ba4 <MPSL_IRQ_CLOCK_Handler+0x308>)
   32ae0:	e7ea      	b.n	32ab8 <MPSL_IRQ_CLOCK_Handler+0x21c>
   32ae2:	f240 313d 	movw	r1, #829	; 0x33d
   32ae6:	206d      	movs	r0, #109	; 0x6d
   32ae8:	f000 fa56 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32aec:	f000 f9ca 	bl	32e84 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   32af0:	e038      	b.n	32b64 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   32af2:	f8c5 800c 	str.w	r8, [r5, #12]
   32af6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   32afa:	69a0      	ldr	r0, [r4, #24]
   32afc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
   32b00:	f004 fc8e 	bl	37420 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   32b04:	b940      	cbnz	r0, 32b18 <MPSL_IRQ_CLOCK_Handler+0x27c>
   32b06:	f004 fc95 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   32b0a:	b928      	cbnz	r0, 32b18 <MPSL_IRQ_CLOCK_Handler+0x27c>
   32b0c:	f004 fca9 	bl	37462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   32b10:	b910      	cbnz	r0, 32b18 <MPSL_IRQ_CLOCK_Handler+0x27c>
   32b12:	f004 fcba 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   32b16:	b138      	cbz	r0, 32b28 <MPSL_IRQ_CLOCK_Handler+0x28c>
   32b18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   32b1c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
   32b20:	4921      	ldr	r1, [pc, #132]	; (32ba8 <MPSL_IRQ_CLOCK_Handler+0x30c>)
   32b22:	f3c0 3042 	ubfx	r0, r0, #13, #3
   32b26:	6008      	str	r0, [r1, #0]
   32b28:	f004 fc7a 	bl	37420 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   32b2c:	b940      	cbnz	r0, 32b40 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   32b2e:	f004 fc81 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   32b32:	b928      	cbnz	r0, 32b40 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   32b34:	f004 fc95 	bl	37462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   32b38:	b910      	cbnz	r0, 32b40 <MPSL_IRQ_CLOCK_Handler+0x2a4>
   32b3a:	f004 fca6 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   32b3e:	b118      	cbz	r0, 32b48 <MPSL_IRQ_CLOCK_Handler+0x2ac>
   32b40:	4919      	ldr	r1, [pc, #100]	; (32ba8 <MPSL_IRQ_CLOCK_Handler+0x30c>)
   32b42:	3110      	adds	r1, #16
   32b44:	f8c1 8000 	str.w	r8, [r1]
   32b48:	f8c5 8008 	str.w	r8, [r5, #8]
   32b4c:	2002      	movs	r0, #2
   32b4e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
   32b52:	79b0      	ldrb	r0, [r6, #6]
   32b54:	b930      	cbnz	r0, 32b64 <MPSL_IRQ_CLOCK_Handler+0x2c8>
   32b56:	f000 f829 	bl	32bac <MPSL_IRQ_CLOCK_Handler+0x310>
   32b5a:	2002      	movs	r0, #2
   32b5c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
   32b60:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
   32b64:	79a0      	ldrb	r0, [r4, #6]
   32b66:	b170      	cbz	r0, 32b86 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   32b68:	7830      	ldrb	r0, [r6, #0]
   32b6a:	b960      	cbnz	r0, 32b86 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   32b6c:	f000 f99c 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   32b70:	4606      	mov	r6, r0
   32b72:	f000 fa85 	bl	33080 <mpsl_temperature_get>
   32b76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   32b7a:	b116      	cbz	r6, 32b82 <MPSL_IRQ_CLOCK_Handler+0x2e6>
   32b7c:	e9c4 1004 	strd	r1, r0, [r4, #16]
   32b80:	e001      	b.n	32b86 <MPSL_IRQ_CLOCK_Handler+0x2ea>
   32b82:	e9c4 0104 	strd	r0, r1, [r4, #16]
   32b86:	2101      	movs	r1, #1
   32b88:	4628      	mov	r0, r5
   32b8a:	f004 fbb8 	bl	372fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
   32b8e:	b108      	cbz	r0, 32b94 <MPSL_IRQ_CLOCK_Handler+0x2f8>
   32b90:	f000 f984 	bl	32e9c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   32b94:	72a7      	strb	r7, [r4, #10]
   32b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32b9a:	0000      	.short	0x0000
   32b9c:	20000314 	.word	0x20000314
   32ba0:	00020001 	.word	0x00020001
   32ba4:	00030001 	.word	0x00030001
   32ba8:	4000053c 	.word	0x4000053c
   32bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32bb0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   32bb4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   32bb8:	f010 0f02 	tst.w	r0, #2
   32bbc:	d011      	beq.n	32be2 <MPSL_IRQ_CLOCK_Handler+0x346>
   32bbe:	4c16      	ldr	r4, [pc, #88]	; (32c18 <MPSL_IRQ_CLOCK_Handler+0x37c>)
   32bc0:	6820      	ldr	r0, [r4, #0]
   32bc2:	43c0      	mvns	r0, r0
   32bc4:	f340 1600 	sbfx	r6, r0, #4, #1
   32bc8:	6820      	ldr	r0, [r4, #0]
   32bca:	f040 0010 	orr.w	r0, r0, #16
   32bce:	6020      	str	r0, [r4, #0]
   32bd0:	f44f 7782 	mov.w	r7, #260	; 0x104
   32bd4:	4639      	mov	r1, r7
   32bd6:	4628      	mov	r0, r5
   32bd8:	1c76      	adds	r6, r6, #1
   32bda:	f004 fb8b 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   32bde:	b128      	cbz	r0, 32bec <MPSL_IRQ_CLOCK_Handler+0x350>
   32be0:	e00a      	b.n	32bf8 <MPSL_IRQ_CLOCK_Handler+0x35c>
   32be2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
   32be6:	206d      	movs	r0, #109	; 0x6d
   32be8:	f000 f9d6 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32bec:	f004 fc8f 	bl	3750e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
   32bf0:	e002      	b.n	32bf8 <MPSL_IRQ_CLOCK_Handler+0x35c>
   32bf2:	bf00      	nop
   32bf4:	f004 fc89 	bl	3750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   32bf8:	4639      	mov	r1, r7
   32bfa:	4628      	mov	r0, r5
   32bfc:	f004 fb7a 	bl	372f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
   32c00:	2800      	cmp	r0, #0
   32c02:	d0f7      	beq.n	32bf4 <MPSL_IRQ_CLOCK_Handler+0x358>
   32c04:	f000 f93e 	bl	32e84 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
   32c08:	2e00      	cmp	r6, #0
   32c0a:	d103      	bne.n	32c14 <MPSL_IRQ_CLOCK_Handler+0x378>
   32c0c:	6820      	ldr	r0, [r4, #0]
   32c0e:	f020 0010 	bic.w	r0, r0, #16
   32c12:	6020      	str	r0, [r4, #0]
   32c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32c18:	e000ed10 	.word	0xe000ed10

00032c1c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
   32c1c:	4801      	ldr	r0, [pc, #4]	; (32c24 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
   32c1e:	89c0      	ldrh	r0, [r0, #14]
   32c20:	4770      	bx	lr
   32c22:	0000      	.short	0x0000
   32c24:	20000314 	.word	0x20000314

00032c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
   32c28:	b510      	push	{r4, lr}
   32c2a:	f3ef 8410 	mrs	r4, PRIMASK
   32c2e:	b672      	cpsid	i
   32c30:	480a      	ldr	r0, [pc, #40]	; (32c5c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
   32c32:	7841      	ldrb	r1, [r0, #1]
   32c34:	b129      	cbz	r1, 32c42 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
   32c36:	7841      	ldrb	r1, [r0, #1]
   32c38:	1e49      	subs	r1, r1, #1
   32c3a:	7041      	strb	r1, [r0, #1]
   32c3c:	7841      	ldrb	r1, [r0, #1]
   32c3e:	b129      	cbz	r1, 32c4c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
   32c40:	e008      	b.n	32c54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   32c42:	f240 1119 	movw	r1, #281	; 0x119
   32c46:	206d      	movs	r0, #109	; 0x6d
   32c48:	f000 f9a6 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   32c4c:	7880      	ldrb	r0, [r0, #2]
   32c4e:	b908      	cbnz	r0, 32c54 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
   32c50:	f000 f938 	bl	32ec4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
   32c54:	2c00      	cmp	r4, #0
   32c56:	d100      	bne.n	32c5a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
   32c58:	b662      	cpsie	i
   32c5a:	bd10      	pop	{r4, pc}
   32c5c:	20000314 	.word	0x20000314

00032c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
   32c60:	b510      	push	{r4, lr}
   32c62:	f3ef 8410 	mrs	r4, PRIMASK
   32c66:	b672      	cpsid	i
   32c68:	4806      	ldr	r0, [pc, #24]	; (32c84 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
   32c6a:	7841      	ldrb	r1, [r0, #1]
   32c6c:	1c49      	adds	r1, r1, #1
   32c6e:	7041      	strb	r1, [r0, #1]
   32c70:	7840      	ldrb	r0, [r0, #1]
   32c72:	2801      	cmp	r0, #1
   32c74:	d101      	bne.n	32c7a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
   32c76:	f004 fb59 	bl	3732c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
   32c7a:	2c00      	cmp	r4, #0
   32c7c:	d100      	bne.n	32c80 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
   32c7e:	b662      	cpsie	i
   32c80:	bd10      	pop	{r4, pc}
   32c82:	0000      	.short	0x0000
   32c84:	20000314 	.word	0x20000314

00032c88 <mpsl_clock_hfclk_release>:
   32c88:	4805      	ldr	r0, [pc, #20]	; (32ca0 <mpsl_clock_hfclk_release+0x18>)
   32c8a:	b510      	push	{r4, lr}
   32c8c:	78c1      	ldrb	r1, [r0, #3]
   32c8e:	b121      	cbz	r1, 32c9a <mpsl_clock_hfclk_release+0x12>
   32c90:	2100      	movs	r1, #0
   32c92:	7101      	strb	r1, [r0, #4]
   32c94:	70c1      	strb	r1, [r0, #3]
   32c96:	f7ff ffc7 	bl	32c28 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
   32c9a:	2000      	movs	r0, #0
   32c9c:	bd10      	pop	{r4, pc}
   32c9e:	0000      	.short	0x0000
   32ca0:	20000314 	.word	0x20000314

00032ca4 <mpsl_clock_hfclk_request>:
   32ca4:	b570      	push	{r4, r5, r6, lr}
   32ca6:	4c0c      	ldr	r4, [pc, #48]	; (32cd8 <mpsl_clock_hfclk_request+0x34>)
   32ca8:	78e1      	ldrb	r1, [r4, #3]
   32caa:	b961      	cbnz	r1, 32cc6 <mpsl_clock_hfclk_request+0x22>
   32cac:	2501      	movs	r5, #1
   32cae:	70e5      	strb	r5, [r4, #3]
   32cb0:	61e0      	str	r0, [r4, #28]
   32cb2:	f7ff ffd5 	bl	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   32cb6:	f000 f8f7 	bl	32ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
   32cba:	b130      	cbz	r0, 32cca <mpsl_clock_hfclk_request+0x26>
   32cbc:	69e0      	ldr	r0, [r4, #28]
   32cbe:	b110      	cbz	r0, 32cc6 <mpsl_clock_hfclk_request+0x22>
   32cc0:	4780      	blx	r0
   32cc2:	2000      	movs	r0, #0
   32cc4:	61e0      	str	r0, [r4, #28]
   32cc6:	2000      	movs	r0, #0
   32cc8:	bd70      	pop	{r4, r5, r6, pc}
   32cca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   32cce:	7125      	strb	r5, [r4, #4]
   32cd0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
   32cd4:	e7f7      	b.n	32cc6 <mpsl_clock_hfclk_request+0x22>
   32cd6:	0000      	.short	0x0000
   32cd8:	20000314 	.word	0x20000314

00032cdc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
   32cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32ce0:	0005      	movs	r5, r0
   32ce2:	f06f 0015 	mvn.w	r0, #21
   32ce6:	d03f      	beq.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32ce8:	7829      	ldrb	r1, [r5, #0]
   32cea:	2904      	cmp	r1, #4
   32cec:	d83c      	bhi.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32cee:	2900      	cmp	r1, #0
   32cf0:	7869      	ldrb	r1, [r5, #1]
   32cf2:	d03b      	beq.n	32d6c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
   32cf4:	2900      	cmp	r1, #0
   32cf6:	d137      	bne.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32cf8:	78a9      	ldrb	r1, [r5, #2]
   32cfa:	2900      	cmp	r1, #0
   32cfc:	d134      	bne.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32cfe:	2000      	movs	r0, #0
   32d00:	f004 fae7 	bl	372d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
   32d04:	2000      	movs	r0, #0
   32d06:	f004 fad7 	bl	372b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
   32d0a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
   32d0e:	f04f 31ff 	mov.w	r1, #4294967295
   32d12:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
   32d16:	2600      	movs	r6, #0
   32d18:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
   32d1c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
   32d20:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
   32d24:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
   32d28:	4c14      	ldr	r4, [pc, #80]	; (32d7c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
   32d2a:	7066      	strb	r6, [r4, #1]
   32d2c:	88a8      	ldrh	r0, [r5, #4]
   32d2e:	81a0      	strh	r0, [r4, #12]
   32d30:	f004 faf3 	bl	3731a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
   32d34:	2701      	movs	r7, #1
   32d36:	b108      	cbz	r0, 32d3c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
   32d38:	70e7      	strb	r7, [r4, #3]
   32d3a:	7067      	strb	r7, [r4, #1]
   32d3c:	2101      	movs	r1, #1
   32d3e:	4640      	mov	r0, r8
   32d40:	f004 fadd 	bl	372fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
   32d44:	b108      	cbz	r0, 32d4a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
   32d46:	f000 f8a9 	bl	32e9c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
   32d4a:	f240 50f5 	movw	r0, #1525	; 0x5f5
   32d4e:	81e0      	strh	r0, [r4, #14]
   32d50:	4628      	mov	r0, r5
   32d52:	f7ff fe8d 	bl	32a70 <MPSL_IRQ_CLOCK_Handler+0x1d4>
   32d56:	7267      	strb	r7, [r4, #9]
   32d58:	2000      	movs	r0, #0
   32d5a:	f004 faad 	bl	372b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
   32d5e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   32d62:	4630      	mov	r0, r6
   32d64:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
   32d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32d6c:	2900      	cmp	r1, #0
   32d6e:	d0fb      	beq.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32d70:	2920      	cmp	r1, #32
   32d72:	d8f9      	bhi.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32d74:	78a9      	ldrb	r1, [r5, #2]
   32d76:	2921      	cmp	r1, #33	; 0x21
   32d78:	d9c1      	bls.n	32cfe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
   32d7a:	e7f5      	b.n	32d68 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
   32d7c:	20000314 	.word	0x20000314

00032d80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
   32d80:	4801      	ldr	r0, [pc, #4]	; (32d88 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
   32d82:	8980      	ldrh	r0, [r0, #12]
   32d84:	4770      	bx	lr
   32d86:	0000      	.short	0x0000
   32d88:	20000314 	.word	0x20000314

00032d8c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
   32d8c:	b510      	push	{r4, lr}
   32d8e:	480d      	ldr	r0, [pc, #52]	; (32dc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   32d90:	f004 fb24 	bl	373dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
   32d94:	490b      	ldr	r1, [pc, #44]	; (32dc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   32d96:	3908      	subs	r1, #8
   32d98:	b148      	cbz	r0, 32dae <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
   32d9a:	2001      	movs	r0, #1
   32d9c:	7008      	strb	r0, [r1, #0]
   32d9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   32da2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   32da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32daa:	f7ff bf59 	b.w	32c60 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
   32dae:	7a88      	ldrb	r0, [r1, #10]
   32db0:	2802      	cmp	r0, #2
   32db2:	d101      	bne.n	32db8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
   32db4:	f7ff fdb6 	bl	32924 <MPSL_IRQ_CLOCK_Handler+0x88>
   32db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32dbc:	4801      	ldr	r0, [pc, #4]	; (32dc4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
   32dbe:	f004 bb24 	b.w	3740a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
   32dc2:	0000      	.short	0x0000
   32dc4:	2000031c 	.word	0x2000031c

00032dc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
   32dc8:	4802      	ldr	r0, [pc, #8]	; (32dd4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
   32dca:	7a80      	ldrb	r0, [r0, #10]
   32dcc:	2800      	cmp	r0, #0
   32dce:	d000      	beq.n	32dd2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
   32dd0:	2001      	movs	r0, #1
   32dd2:	4770      	bx	lr
   32dd4:	20000314 	.word	0x20000314

00032dd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
   32dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32dda:	4d1f      	ldr	r5, [pc, #124]	; (32e58 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   32ddc:	7ae8      	ldrb	r0, [r5, #11]
   32dde:	2800      	cmp	r0, #0
   32de0:	d10f      	bne.n	32e02 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   32de2:	7e28      	ldrb	r0, [r5, #24]
   32de4:	f000 0003 	and.w	r0, r0, #3
   32de8:	f004 faa5 	bl	37336 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   32dec:	2800      	cmp	r0, #0
   32dee:	d008      	beq.n	32e02 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   32df0:	f3ef 8110 	mrs	r1, PRIMASK
   32df4:	b672      	cpsid	i
   32df6:	f7ff ffe7 	bl	32dc8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
   32dfa:	b118      	cbz	r0, 32e04 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
   32dfc:	2900      	cmp	r1, #0
   32dfe:	d100      	bne.n	32e02 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
   32e00:	b662      	cpsie	i
   32e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e04:	2601      	movs	r6, #1
   32e06:	72ae      	strb	r6, [r5, #10]
   32e08:	b901      	cbnz	r1, 32e0c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
   32e0a:	b662      	cpsie	i
   32e0c:	2018      	movs	r0, #24
   32e0e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   32e12:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
   32e16:	61a6      	str	r6, [r4, #24]
   32e18:	f44f 7020 	mov.w	r0, #640	; 0x280
   32e1c:	f8ad 0000 	strh.w	r0, [sp]
   32e20:	f8bd 0000 	ldrh.w	r0, [sp]
   32e24:	1e41      	subs	r1, r0, #1
   32e26:	f8ad 1000 	strh.w	r1, [sp]
   32e2a:	d2f9      	bcs.n	32e20 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
   32e2c:	2700      	movs	r7, #0
   32e2e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
   32e32:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   32e36:	4808      	ldr	r0, [pc, #32]	; (32e58 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
   32e38:	3008      	adds	r0, #8
   32e3a:	f004 fae2 	bl	37402 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
   32e3e:	702f      	strb	r7, [r5, #0]
   32e40:	f7ff fd70 	bl	32924 <MPSL_IRQ_CLOCK_Handler+0x88>
   32e44:	6166      	str	r6, [r4, #20]
   32e46:	7968      	ldrb	r0, [r5, #5]
   32e48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   32e4c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
   32e50:	2018      	movs	r0, #24
   32e52:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   32e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e58:	20000314 	.word	0x20000314

00032e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
   32e5c:	4602      	mov	r2, r0
   32e5e:	b510      	push	{r4, lr}
   32e60:	2000      	movs	r0, #0
   32e62:	2900      	cmp	r1, #0
   32e64:	d00a      	beq.n	32e7c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
   32e66:	2a00      	cmp	r2, #0
   32e68:	d008      	beq.n	32e7c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
   32e6a:	fba2 0101 	umull	r0, r1, r2, r1
   32e6e:	1e40      	subs	r0, r0, #1
   32e70:	4a03      	ldr	r2, [pc, #12]	; (32e80 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
   32e72:	f141 31ff 	adc.w	r1, r1, #4294967295
   32e76:	f004 fb4c 	bl	37512 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   32e7a:	1c40      	adds	r0, r0, #1
   32e7c:	bd10      	pop	{r4, pc}
   32e7e:	0000      	.short	0x0000
   32e80:	000f4240 	.word	0x000f4240

00032e84 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
   32e84:	b510      	push	{r4, lr}
   32e86:	4c04      	ldr	r4, [pc, #16]	; (32e98 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
   32e88:	7e20      	ldrb	r0, [r4, #24]
   32e8a:	f000 0003 	and.w	r0, r0, #3
   32e8e:	f004 fa52 	bl	37336 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
   32e92:	2800      	cmp	r0, #0
   32e94:	d0f8      	beq.n	32e88 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
   32e96:	bd10      	pop	{r4, pc}
   32e98:	20000314 	.word	0x20000314

00032e9c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
   32e9c:	4901      	ldr	r1, [pc, #4]	; (32ea4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
   32e9e:	2001      	movs	r0, #1
   32ea0:	7008      	strb	r0, [r1, #0]
   32ea2:	4770      	bx	lr
   32ea4:	20000385 	.word	0x20000385

00032ea8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
   32ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   32eac:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   32eb0:	b918      	cbnz	r0, 32eba <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
   32eb2:	4803      	ldr	r0, [pc, #12]	; (32ec0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
   32eb4:	7800      	ldrb	r0, [r0, #0]
   32eb6:	2800      	cmp	r0, #0
   32eb8:	d000      	beq.n	32ebc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
   32eba:	2001      	movs	r0, #1
   32ebc:	4770      	bx	lr
   32ebe:	0000      	.short	0x0000
   32ec0:	20000385 	.word	0x20000385

00032ec4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
   32ec4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   32ec8:	2101      	movs	r1, #1
   32eca:	6041      	str	r1, [r0, #4]
   32ecc:	2100      	movs	r1, #0
   32ece:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   32ed2:	4801      	ldr	r0, [pc, #4]	; (32ed8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
   32ed4:	7001      	strb	r1, [r0, #0]
   32ed6:	4770      	bx	lr
   32ed8:	20000385 	.word	0x20000385

00032edc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
   32edc:	4802      	ldr	r0, [pc, #8]	; (32ee8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
   32ede:	6800      	ldr	r0, [r0, #0]
   32ee0:	f000 0003 	and.w	r0, r0, #3
   32ee4:	4770      	bx	lr
   32ee6:	0000      	.short	0x0000
   32ee8:	4000041c 	.word	0x4000041c
   32eec:	b510      	push	{r4, lr}
   32eee:	b131      	cbz	r1, 32efe <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
   32ef0:	2901      	cmp	r1, #1
   32ef2:	d007      	beq.n	32f04 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
   32ef4:	f240 3102 	movw	r1, #770	; 0x302
   32ef8:	a005      	add	r0, pc, #20	; (adr r0, 32f10 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
   32efa:	f000 f821 	bl	32f40 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
   32efe:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
   32f02:	e001      	b.n	32f08 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
   32f04:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
   32f08:	f000 0001 	and.w	r0, r0, #1
   32f0c:	bd10      	pop	{r4, pc}
   32f0e:	0000      	.short	0x0000
   32f10:	5f66726e 	.word	0x5f66726e
   32f14:	636f6c63 	.word	0x636f6c63
   32f18:	00682e6b 	.word	0x00682e6b
   32f1c:	f3bf 8f4f 	dsb	sy
   32f20:	4805      	ldr	r0, [pc, #20]	; (32f38 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
   32f22:	6801      	ldr	r1, [r0, #0]
   32f24:	4a05      	ldr	r2, [pc, #20]	; (32f3c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
   32f26:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
   32f2a:	4311      	orrs	r1, r2
   32f2c:	6001      	str	r1, [r0, #0]
   32f2e:	f3bf 8f4f 	dsb	sy
   32f32:	bf00      	nop
   32f34:	e7fd      	b.n	32f32 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
   32f36:	0000      	.short	0x0000
   32f38:	e000ed0c 	.word	0xe000ed0c
   32f3c:	05fa0004 	.word	0x05fa0004

00032f40 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
   32f40:	b672      	cpsid	i
   32f42:	4a03      	ldr	r2, [pc, #12]	; (32f50 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
   32f44:	6852      	ldr	r2, [r2, #4]
   32f46:	b102      	cbz	r2, 32f4a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
   32f48:	4790      	blx	r2
   32f4a:	f7ff ffe7 	bl	32f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   32f4e:	0000      	.short	0x0000
   32f50:	20000334 	.word	0x20000334
   32f54:	4806      	ldr	r0, [pc, #24]	; (32f70 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
   32f56:	b510      	push	{r4, lr}
   32f58:	2100      	movs	r1, #0
   32f5a:	6001      	str	r1, [r0, #0]
   32f5c:	2101      	movs	r1, #1
   32f5e:	6001      	str	r1, [r0, #0]
   32f60:	4608      	mov	r0, r1
   32f62:	f004 fa0f 	bl	37384 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   32f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32f6a:	2001      	movs	r0, #1
   32f6c:	f004 b9fd 	b.w	3736a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   32f70:	40001ffc 	.word	0x40001ffc
   32f74:	4807      	ldr	r0, [pc, #28]	; (32f94 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
   32f76:	b510      	push	{r4, lr}
   32f78:	2101      	movs	r1, #1
   32f7a:	6041      	str	r1, [r0, #4]
   32f7c:	1e89      	subs	r1, r1, #2
   32f7e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
   32f82:	200c      	movs	r0, #12
   32f84:	f004 f9fe 	bl	37384 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
   32f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32f8c:	200c      	movs	r0, #12
   32f8e:	f004 b9ec 	b.w	3736a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   32f92:	0000      	.short	0x0000
   32f94:	4000c000 	.word	0x4000c000

00032f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
   32f98:	b50e      	push	{r1, r2, r3, lr}
   32f9a:	b672      	cpsid	i
   32f9c:	4a0f      	ldr	r2, [pc, #60]	; (32fdc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
   32f9e:	6855      	ldr	r5, [r2, #4]
   32fa0:	b1d5      	cbz	r5, 32fd8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
   32fa2:	2200      	movs	r2, #0
   32fa4:	4603      	mov	r3, r0
   32fa6:	466e      	mov	r6, sp
   32fa8:	240a      	movs	r4, #10
   32faa:	e003      	b.n	32fb4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
   32fac:	fbb0 f0f4 	udiv	r0, r0, r4
   32fb0:	1c52      	adds	r2, r2, #1
   32fb2:	b2d2      	uxtb	r2, r2
   32fb4:	2800      	cmp	r0, #0
   32fb6:	d1f9      	bne.n	32fac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
   32fb8:	54b0      	strb	r0, [r6, r2]
   32fba:	e009      	b.n	32fd0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
   32fbc:	fbb3 f0f4 	udiv	r0, r3, r4
   32fc0:	fb04 3010 	mls	r0, r4, r0, r3
   32fc4:	fbb3 f3f4 	udiv	r3, r3, r4
   32fc8:	1e52      	subs	r2, r2, #1
   32fca:	b2d2      	uxtb	r2, r2
   32fcc:	3030      	adds	r0, #48	; 0x30
   32fce:	54b0      	strb	r0, [r6, r2]
   32fd0:	2a00      	cmp	r2, #0
   32fd2:	d1f3      	bne.n	32fbc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
   32fd4:	4630      	mov	r0, r6
   32fd6:	47a8      	blx	r5
   32fd8:	f7ff ffa0 	bl	32f1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
   32fdc:	20000334 	.word	0x20000334

00032fe0 <mpsl_init>:
   32fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32fe4:	4c18      	ldr	r4, [pc, #96]	; (33048 <mpsl_init+0x68>)
   32fe6:	4606      	mov	r6, r0
   32fe8:	4617      	mov	r7, r2
   32fea:	7860      	ldrb	r0, [r4, #1]
   32fec:	460d      	mov	r5, r1
   32fee:	b118      	cbz	r0, 32ff8 <mpsl_init+0x18>
   32ff0:	f04f 30ff 	mov.w	r0, #4294967295
   32ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32ff8:	f7fc fb62 	bl	2f6c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
   32ffc:	b906      	cbnz	r6, 33000 <mpsl_init+0x20>
   32ffe:	4e13      	ldr	r6, [pc, #76]	; (3304c <mpsl_init+0x6c>)
   33000:	6067      	str	r7, [r4, #4]
   33002:	7025      	strb	r5, [r4, #0]
   33004:	f7ff ffa6 	bl	32f54 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
   33008:	f7ff ffb4 	bl	32f74 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
   3300c:	4630      	mov	r0, r6
   3300e:	f7ff fe65 	bl	32cdc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
   33012:	0006      	movs	r6, r0
   33014:	d1ee      	bne.n	32ff4 <mpsl_init+0x14>
   33016:	f7fe fe29 	bl	31c6c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
   3301a:	f7ff fedd 	bl	32dd8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
   3301e:	f004 f918 	bl	37252 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
   33022:	4628      	mov	r0, r5
   33024:	f004 f9a1 	bl	3736a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
   33028:	2001      	movs	r0, #1
   3302a:	2d00      	cmp	r5, #0
   3302c:	db09      	blt.n	33042 <mpsl_init+0x62>
   3302e:	f005 011f 	and.w	r1, r5, #31
   33032:	fa00 f101 	lsl.w	r1, r0, r1
   33036:	096a      	lsrs	r2, r5, #5
   33038:	0092      	lsls	r2, r2, #2
   3303a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
   3303e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   33042:	7060      	strb	r0, [r4, #1]
   33044:	4630      	mov	r0, r6
   33046:	e7d5      	b.n	32ff4 <mpsl_init+0x14>
   33048:	20000334 	.word	0x20000334
   3304c:	000373a6 	.word	0x000373a6

00033050 <mpsl_is_initialized>:
   33050:	4801      	ldr	r0, [pc, #4]	; (33058 <mpsl_is_initialized+0x8>)
   33052:	7840      	ldrb	r0, [r0, #1]
   33054:	4770      	bx	lr
   33056:	0000      	.short	0x0000
   33058:	20000334 	.word	0x20000334

0003305c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
   3305c:	4807      	ldr	r0, [pc, #28]	; (3307c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
   3305e:	f990 0000 	ldrsb.w	r0, [r0]
   33062:	2800      	cmp	r0, #0
   33064:	db09      	blt.n	3307a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
   33066:	f000 021f 	and.w	r2, r0, #31
   3306a:	2101      	movs	r1, #1
   3306c:	4091      	lsls	r1, r2
   3306e:	0940      	lsrs	r0, r0, #5
   33070:	0080      	lsls	r0, r0, #2
   33072:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   33076:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
   3307a:	4770      	bx	lr
   3307c:	20000334 	.word	0x20000334

00033080 <mpsl_temperature_get>:
   33080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33084:	2501      	movs	r5, #1
   33086:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   3308a:	0329      	lsls	r1, r5, #12
   3308c:	f04f 0800 	mov.w	r8, #0
   33090:	4640      	mov	r0, r8
   33092:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
   33096:	f3bf 8f4f 	dsb	sy
   3309a:	f3bf 8f6f 	isb	sy
   3309e:	4c16      	ldr	r4, [pc, #88]	; (330f8 <mpsl_temperature_get+0x78>)
   330a0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   330a4:	200c      	movs	r0, #12
   330a6:	f004 f98c 	bl	373c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   330aa:	4e14      	ldr	r6, [pc, #80]	; (330fc <mpsl_temperature_get+0x7c>)
   330ac:	6830      	ldr	r0, [r6, #0]
   330ae:	43c0      	mvns	r0, r0
   330b0:	f340 1700 	sbfx	r7, r0, #4, #1
   330b4:	6830      	ldr	r0, [r6, #0]
   330b6:	f040 0010 	orr.w	r0, r0, #16
   330ba:	6030      	str	r0, [r6, #0]
   330bc:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
   330c0:	6025      	str	r5, [r4, #0]
   330c2:	1c7f      	adds	r7, r7, #1
   330c4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   330c8:	b108      	cbz	r0, 330ce <mpsl_temperature_get+0x4e>
   330ca:	b11f      	cbz	r7, 330d4 <mpsl_temperature_get+0x54>
   330cc:	e006      	b.n	330dc <mpsl_temperature_get+0x5c>
   330ce:	f004 fa1c 	bl	3750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
   330d2:	e7f7      	b.n	330c4 <mpsl_temperature_get+0x44>
   330d4:	6830      	ldr	r0, [r6, #0]
   330d6:	f020 0010 	bic.w	r0, r0, #16
   330da:	6030      	str	r0, [r6, #0]
   330dc:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
   330e0:	6065      	str	r5, [r4, #4]
   330e2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
   330e6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   330ea:	200c      	movs	r0, #12
   330ec:	f004 f969 	bl	373c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
   330f0:	4630      	mov	r0, r6
   330f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   330f6:	0000      	.short	0x0000
   330f8:	4000c000 	.word	0x4000c000
   330fc:	e000ed10 	.word	0xe000ed10

00033100 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
   33100:	b510      	push	{r4, lr}
   33102:	4602      	mov	r2, r0
   33104:	2005      	movs	r0, #5
   33106:	490c      	ldr	r1, [pc, #48]	; (33138 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
   33108:	e004      	b.n	33114 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
   3310a:	bf00      	nop
   3310c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
   33110:	791b      	ldrb	r3, [r3, #4]
   33112:	b133      	cbz	r3, 33122 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
   33114:	1e40      	subs	r0, r0, #1
   33116:	b2c0      	uxtb	r0, r0
   33118:	d2f8      	bcs.n	3310c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
   3311a:	2148      	movs	r1, #72	; 0x48
   3311c:	2069      	movs	r0, #105	; 0x69
   3311e:	f7ff ff3b 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   33122:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
   33126:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   3312a:	2200      	movs	r2, #0
   3312c:	714a      	strb	r2, [r1, #5]
   3312e:	718a      	strb	r2, [r1, #6]
   33130:	2201      	movs	r2, #1
   33132:	710a      	strb	r2, [r1, #4]
   33134:	bd10      	pop	{r4, pc}
   33136:	0000      	.short	0x0000
   33138:	200012b0 	.word	0x200012b0

0003313c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
   3313c:	b510      	push	{r4, lr}
   3313e:	2805      	cmp	r0, #5
   33140:	d301      	bcc.n	33146 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
   33142:	2158      	movs	r1, #88	; 0x58
   33144:	e006      	b.n	33154 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
   33146:	490a      	ldr	r1, [pc, #40]	; (33170 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
   33148:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
   3314c:	7901      	ldrb	r1, [r0, #4]
   3314e:	2901      	cmp	r1, #1
   33150:	d003      	beq.n	3315a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
   33152:	2159      	movs	r1, #89	; 0x59
   33154:	2069      	movs	r0, #105	; 0x69
   33156:	f7ff ff1f 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   3315a:	7941      	ldrb	r1, [r0, #5]
   3315c:	7982      	ldrb	r2, [r0, #6]
   3315e:	1c49      	adds	r1, r1, #1
   33160:	b2c9      	uxtb	r1, r1
   33162:	428a      	cmp	r2, r1
   33164:	d000      	beq.n	33168 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
   33166:	7141      	strb	r1, [r0, #5]
   33168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3316c:	f7ff bf76 	b.w	3305c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
   33170:	200012b0 	.word	0x200012b0

00033174 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
   33174:	b510      	push	{r4, lr}
   33176:	2805      	cmp	r0, #5
   33178:	d303      	bcc.n	33182 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
   3317a:	214f      	movs	r1, #79	; 0x4f
   3317c:	2069      	movs	r0, #105	; 0x69
   3317e:	f7ff ff0b 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   33182:	4a03      	ldr	r2, [pc, #12]	; (33190 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
   33184:	2100      	movs	r1, #0
   33186:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
   3318a:	7101      	strb	r1, [r0, #4]
   3318c:	bd10      	pop	{r4, pc}
   3318e:	0000      	.short	0x0000
   33190:	200012b0 	.word	0x200012b0

00033194 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
   33194:	b570      	push	{r4, r5, r6, lr}
   33196:	2505      	movs	r5, #5
   33198:	4e0e      	ldr	r6, [pc, #56]	; (331d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
   3319a:	4c0f      	ldr	r4, [pc, #60]	; (331d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
   3319c:	e016      	b.n	331cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   3319e:	7821      	ldrb	r1, [r4, #0]
   331a0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   331a4:	7902      	ldrb	r2, [r0, #4]
   331a6:	2a01      	cmp	r2, #1
   331a8:	d108      	bne.n	331bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   331aa:	7942      	ldrb	r2, [r0, #5]
   331ac:	7983      	ldrb	r3, [r0, #6]
   331ae:	429a      	cmp	r2, r3
   331b0:	d004      	beq.n	331bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
   331b2:	7942      	ldrb	r2, [r0, #5]
   331b4:	7182      	strb	r2, [r0, #6]
   331b6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   331ba:	4780      	blx	r0
   331bc:	7820      	ldrb	r0, [r4, #0]
   331be:	1c40      	adds	r0, r0, #1
   331c0:	b2c0      	uxtb	r0, r0
   331c2:	7020      	strb	r0, [r4, #0]
   331c4:	2805      	cmp	r0, #5
   331c6:	d301      	bcc.n	331cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
   331c8:	2000      	movs	r0, #0
   331ca:	7020      	strb	r0, [r4, #0]
   331cc:	1e6d      	subs	r5, r5, #1
   331ce:	b2ed      	uxtb	r5, r5
   331d0:	d2e5      	bcs.n	3319e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
   331d2:	bd70      	pop	{r4, r5, r6, pc}
   331d4:	200012b0 	.word	0x200012b0
   331d8:	20000386 	.word	0x20000386

000331dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
   331dc:	b500      	push	{lr}
   331de:	f004 f91f 	bl	37420 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   331e2:	b940      	cbnz	r0, 331f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   331e4:	f004 f926 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   331e8:	b928      	cbnz	r0, 331f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   331ea:	f004 f93a 	bl	37462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   331ee:	b910      	cbnz	r0, 331f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
   331f0:	f004 f94b 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   331f4:	b108      	cbz	r0, 331fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
   331f6:	4802      	ldr	r0, [pc, #8]	; (33200 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
   331f8:	bd00      	pop	{pc}
   331fa:	4802      	ldr	r0, [pc, #8]	; (33204 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
   331fc:	bd00      	pop	{pc}
   331fe:	0000      	.short	0x0000
   33200:	4000050c 	.word	0x4000050c
   33204:	4001e700 	.word	0x4001e700
   33208:	b510      	push	{r4, lr}
   3320a:	f004 f93e 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   3320e:	b330      	cbz	r0, 3325e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
   33210:	f3ef 8010 	mrs	r0, PRIMASK
   33214:	b1c8      	cbz	r0, 3324a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
   33216:	2100      	movs	r1, #0
   33218:	b672      	cpsid	i
   3321a:	4812      	ldr	r0, [pc, #72]	; (33264 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
   3321c:	6802      	ldr	r2, [r0, #0]
   3321e:	6803      	ldr	r3, [r0, #0]
   33220:	f3c2 1200 	ubfx	r2, r2, #4, #1
   33224:	f043 0310 	orr.w	r3, r3, #16
   33228:	6003      	str	r3, [r0, #0]
   3322a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   3322e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   33232:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   33236:	431c      	orrs	r4, r3
   33238:	d000      	beq.n	3323c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
   3323a:	bf40      	sev
   3323c:	bf20      	wfe
   3323e:	bf00      	nop
   33240:	bf00      	nop
   33242:	bf00      	nop
   33244:	bf00      	nop
   33246:	b112      	cbz	r2, 3324e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
   33248:	e005      	b.n	33256 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
   3324a:	2101      	movs	r1, #1
   3324c:	e7e4      	b.n	33218 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
   3324e:	6802      	ldr	r2, [r0, #0]
   33250:	f022 0210 	bic.w	r2, r2, #16
   33254:	6002      	str	r2, [r0, #0]
   33256:	2900      	cmp	r1, #0
   33258:	d000      	beq.n	3325c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
   3325a:	b662      	cpsie	i
   3325c:	bd10      	pop	{r4, pc}
   3325e:	bf20      	wfe
   33260:	bd10      	pop	{r4, pc}
   33262:	0000      	.short	0x0000
   33264:	e000ed10 	.word	0xe000ed10

00033268 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
   33268:	4901      	ldr	r1, [pc, #4]	; (33270 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
   3326a:	2001      	movs	r0, #1
   3326c:	7088      	strb	r0, [r1, #2]
   3326e:	4770      	bx	lr
   33270:	2000033c 	.word	0x2000033c

00033274 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
   33274:	0003778b 000377c3 000377ad 0003779b     .w...w...w...w..
   33284:	000377a7 00037795 00037789 00037787     .w...w...w...w..
   33294:	000377bf 000377b3 000377a1 0003778f     .w...w...w...w..
   332a4:	00037781 00037779 0003777d 00037773     .w..yw..}w..sw..

000332b4 <mpsl_fem_disable>:
   332b4:	4801      	ldr	r0, [pc, #4]	; (332bc <mpsl_fem_disable+0x8>)
   332b6:	6800      	ldr	r0, [r0, #0]
   332b8:	6800      	ldr	r0, [r0, #0]
   332ba:	4700      	bx	r0
   332bc:	20000350 	.word	0x20000350

000332c0 <mpsl_fem_lna_configuration_clear>:
   332c0:	4801      	ldr	r0, [pc, #4]	; (332c8 <mpsl_fem_lna_configuration_clear+0x8>)
   332c2:	6800      	ldr	r0, [r0, #0]
   332c4:	6940      	ldr	r0, [r0, #20]
   332c6:	4700      	bx	r0
   332c8:	20000350 	.word	0x20000350

000332cc <mpsl_fem_lna_configuration_set>:
   332cc:	4a01      	ldr	r2, [pc, #4]	; (332d4 <mpsl_fem_lna_configuration_set+0x8>)
   332ce:	6812      	ldr	r2, [r2, #0]
   332d0:	68d2      	ldr	r2, [r2, #12]
   332d2:	4710      	bx	r2
   332d4:	20000350 	.word	0x20000350

000332d8 <mpsl_fem_lna_is_configured>:
   332d8:	4901      	ldr	r1, [pc, #4]	; (332e0 <mpsl_fem_lna_is_configured+0x8>)
   332da:	6809      	ldr	r1, [r1, #0]
   332dc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   332de:	4708      	bx	r1
   332e0:	20000350 	.word	0x20000350

000332e4 <mpsl_fem_pa_configuration_clear>:
   332e4:	4801      	ldr	r0, [pc, #4]	; (332ec <mpsl_fem_pa_configuration_clear+0x8>)
   332e6:	6800      	ldr	r0, [r0, #0]
   332e8:	6900      	ldr	r0, [r0, #16]
   332ea:	4700      	bx	r0
   332ec:	20000350 	.word	0x20000350

000332f0 <mpsl_fem_pa_configuration_set>:
   332f0:	4a01      	ldr	r2, [pc, #4]	; (332f8 <mpsl_fem_pa_configuration_set+0x8>)
   332f2:	6812      	ldr	r2, [r2, #0]
   332f4:	6892      	ldr	r2, [r2, #8]
   332f6:	4710      	bx	r2
   332f8:	20000350 	.word	0x20000350

000332fc <mpsl_fem_pa_gain_set>:
   332fc:	4901      	ldr	r1, [pc, #4]	; (33304 <mpsl_fem_pa_gain_set+0x8>)
   332fe:	6809      	ldr	r1, [r1, #0]
   33300:	6a49      	ldr	r1, [r1, #36]	; 0x24
   33302:	4708      	bx	r1
   33304:	20000350 	.word	0x20000350

00033308 <mpsl_fem_pa_is_configured>:
   33308:	4901      	ldr	r1, [pc, #4]	; (33310 <mpsl_fem_pa_is_configured+0x8>)
   3330a:	6809      	ldr	r1, [r1, #0]
   3330c:	6a89      	ldr	r1, [r1, #40]	; 0x28
   3330e:	4708      	bx	r1
   33310:	20000350 	.word	0x20000350

00033314 <mpsl_fem_tx_power_split>:
   33314:	b430      	push	{r4, r5}
   33316:	4c03      	ldr	r4, [pc, #12]	; (33324 <mpsl_fem_tx_power_split+0x10>)
   33318:	6824      	ldr	r4, [r4, #0]
   3331a:	6864      	ldr	r4, [r4, #4]
   3331c:	46a4      	mov	ip, r4
   3331e:	bc30      	pop	{r4, r5}
   33320:	4760      	bx	ip
   33322:	0000      	.short	0x0000
   33324:	20000350 	.word	0x20000350

00033328 <mpsl_fem_device_config_254_apply_get>:
   33328:	4801      	ldr	r0, [pc, #4]	; (33330 <mpsl_fem_device_config_254_apply_get+0x8>)
   3332a:	7800      	ldrb	r0, [r0, #0]
   3332c:	4770      	bx	lr
   3332e:	0000      	.short	0x0000
   33330:	20000387 	.word	0x20000387

00033334 <__udivmoddi4>:
   33334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33338:	4686      	mov	lr, r0
   3333a:	468c      	mov	ip, r1
   3333c:	4608      	mov	r0, r1
   3333e:	9e08      	ldr	r6, [sp, #32]
   33340:	4615      	mov	r5, r2
   33342:	4674      	mov	r4, lr
   33344:	4619      	mov	r1, r3
   33346:	2b00      	cmp	r3, #0
   33348:	f040 80c2 	bne.w	334d0 <__udivmoddi4+0x19c>
   3334c:	4285      	cmp	r5, r0
   3334e:	fab2 f282 	clz	r2, r2
   33352:	d945      	bls.n	333e0 <__udivmoddi4+0xac>
   33354:	b14a      	cbz	r2, 3336a <__udivmoddi4+0x36>
   33356:	f1c2 0320 	rsb	r3, r2, #32
   3335a:	fa00 fc02 	lsl.w	ip, r0, r2
   3335e:	fa2e f303 	lsr.w	r3, lr, r3
   33362:	4095      	lsls	r5, r2
   33364:	ea43 0c0c 	orr.w	ip, r3, ip
   33368:	4094      	lsls	r4, r2
   3336a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   3336e:	b2a8      	uxth	r0, r5
   33370:	fbbc f8fe 	udiv	r8, ip, lr
   33374:	0c23      	lsrs	r3, r4, #16
   33376:	fb0e cc18 	mls	ip, lr, r8, ip
   3337a:	fb08 f900 	mul.w	r9, r8, r0
   3337e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   33382:	4599      	cmp	r9, r3
   33384:	d928      	bls.n	333d8 <__udivmoddi4+0xa4>
   33386:	18eb      	adds	r3, r5, r3
   33388:	f108 37ff 	add.w	r7, r8, #4294967295
   3338c:	d204      	bcs.n	33398 <__udivmoddi4+0x64>
   3338e:	4599      	cmp	r9, r3
   33390:	d902      	bls.n	33398 <__udivmoddi4+0x64>
   33392:	f1a8 0702 	sub.w	r7, r8, #2
   33396:	442b      	add	r3, r5
   33398:	eba3 0309 	sub.w	r3, r3, r9
   3339c:	b2a4      	uxth	r4, r4
   3339e:	fbb3 fcfe 	udiv	ip, r3, lr
   333a2:	fb0e 331c 	mls	r3, lr, ip, r3
   333a6:	fb0c f000 	mul.w	r0, ip, r0
   333aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   333ae:	42a0      	cmp	r0, r4
   333b0:	d914      	bls.n	333dc <__udivmoddi4+0xa8>
   333b2:	192c      	adds	r4, r5, r4
   333b4:	f10c 33ff 	add.w	r3, ip, #4294967295
   333b8:	d204      	bcs.n	333c4 <__udivmoddi4+0x90>
   333ba:	42a0      	cmp	r0, r4
   333bc:	d902      	bls.n	333c4 <__udivmoddi4+0x90>
   333be:	f1ac 0302 	sub.w	r3, ip, #2
   333c2:	442c      	add	r4, r5
   333c4:	1a24      	subs	r4, r4, r0
   333c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   333ca:	b11e      	cbz	r6, 333d4 <__udivmoddi4+0xa0>
   333cc:	40d4      	lsrs	r4, r2
   333ce:	2300      	movs	r3, #0
   333d0:	6034      	str	r4, [r6, #0]
   333d2:	6073      	str	r3, [r6, #4]
   333d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   333d8:	4647      	mov	r7, r8
   333da:	e7dd      	b.n	33398 <__udivmoddi4+0x64>
   333dc:	4663      	mov	r3, ip
   333de:	e7f1      	b.n	333c4 <__udivmoddi4+0x90>
   333e0:	bb92      	cbnz	r2, 33448 <__udivmoddi4+0x114>
   333e2:	1b43      	subs	r3, r0, r5
   333e4:	2101      	movs	r1, #1
   333e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   333ea:	b2af      	uxth	r7, r5
   333ec:	fbb3 fcfe 	udiv	ip, r3, lr
   333f0:	0c20      	lsrs	r0, r4, #16
   333f2:	fb0e 331c 	mls	r3, lr, ip, r3
   333f6:	fb0c f807 	mul.w	r8, ip, r7
   333fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   333fe:	4598      	cmp	r8, r3
   33400:	d962      	bls.n	334c8 <__udivmoddi4+0x194>
   33402:	18eb      	adds	r3, r5, r3
   33404:	f10c 30ff 	add.w	r0, ip, #4294967295
   33408:	d204      	bcs.n	33414 <__udivmoddi4+0xe0>
   3340a:	4598      	cmp	r8, r3
   3340c:	d902      	bls.n	33414 <__udivmoddi4+0xe0>
   3340e:	f1ac 0002 	sub.w	r0, ip, #2
   33412:	442b      	add	r3, r5
   33414:	eba3 0308 	sub.w	r3, r3, r8
   33418:	b2a4      	uxth	r4, r4
   3341a:	fbb3 fcfe 	udiv	ip, r3, lr
   3341e:	fb0e 331c 	mls	r3, lr, ip, r3
   33422:	fb0c f707 	mul.w	r7, ip, r7
   33426:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   3342a:	42a7      	cmp	r7, r4
   3342c:	d94e      	bls.n	334cc <__udivmoddi4+0x198>
   3342e:	192c      	adds	r4, r5, r4
   33430:	f10c 33ff 	add.w	r3, ip, #4294967295
   33434:	d204      	bcs.n	33440 <__udivmoddi4+0x10c>
   33436:	42a7      	cmp	r7, r4
   33438:	d902      	bls.n	33440 <__udivmoddi4+0x10c>
   3343a:	f1ac 0302 	sub.w	r3, ip, #2
   3343e:	442c      	add	r4, r5
   33440:	1be4      	subs	r4, r4, r7
   33442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   33446:	e7c0      	b.n	333ca <__udivmoddi4+0x96>
   33448:	f1c2 0320 	rsb	r3, r2, #32
   3344c:	fa20 f103 	lsr.w	r1, r0, r3
   33450:	4095      	lsls	r5, r2
   33452:	4090      	lsls	r0, r2
   33454:	fa2e f303 	lsr.w	r3, lr, r3
   33458:	4303      	orrs	r3, r0
   3345a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   3345e:	b2af      	uxth	r7, r5
   33460:	fbb1 fcfe 	udiv	ip, r1, lr
   33464:	fb0e 101c 	mls	r0, lr, ip, r1
   33468:	0c19      	lsrs	r1, r3, #16
   3346a:	fb0c f807 	mul.w	r8, ip, r7
   3346e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   33472:	4588      	cmp	r8, r1
   33474:	fa04 f402 	lsl.w	r4, r4, r2
   33478:	d922      	bls.n	334c0 <__udivmoddi4+0x18c>
   3347a:	1869      	adds	r1, r5, r1
   3347c:	f10c 30ff 	add.w	r0, ip, #4294967295
   33480:	d204      	bcs.n	3348c <__udivmoddi4+0x158>
   33482:	4588      	cmp	r8, r1
   33484:	d902      	bls.n	3348c <__udivmoddi4+0x158>
   33486:	f1ac 0002 	sub.w	r0, ip, #2
   3348a:	4429      	add	r1, r5
   3348c:	eba1 0108 	sub.w	r1, r1, r8
   33490:	b29b      	uxth	r3, r3
   33492:	fbb1 fcfe 	udiv	ip, r1, lr
   33496:	fb0e 111c 	mls	r1, lr, ip, r1
   3349a:	fb0c f707 	mul.w	r7, ip, r7
   3349e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   334a2:	429f      	cmp	r7, r3
   334a4:	d90e      	bls.n	334c4 <__udivmoddi4+0x190>
   334a6:	18eb      	adds	r3, r5, r3
   334a8:	f10c 31ff 	add.w	r1, ip, #4294967295
   334ac:	d204      	bcs.n	334b8 <__udivmoddi4+0x184>
   334ae:	429f      	cmp	r7, r3
   334b0:	d902      	bls.n	334b8 <__udivmoddi4+0x184>
   334b2:	f1ac 0102 	sub.w	r1, ip, #2
   334b6:	442b      	add	r3, r5
   334b8:	1bdb      	subs	r3, r3, r7
   334ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   334be:	e792      	b.n	333e6 <__udivmoddi4+0xb2>
   334c0:	4660      	mov	r0, ip
   334c2:	e7e3      	b.n	3348c <__udivmoddi4+0x158>
   334c4:	4661      	mov	r1, ip
   334c6:	e7f7      	b.n	334b8 <__udivmoddi4+0x184>
   334c8:	4660      	mov	r0, ip
   334ca:	e7a3      	b.n	33414 <__udivmoddi4+0xe0>
   334cc:	4663      	mov	r3, ip
   334ce:	e7b7      	b.n	33440 <__udivmoddi4+0x10c>
   334d0:	4283      	cmp	r3, r0
   334d2:	d906      	bls.n	334e2 <__udivmoddi4+0x1ae>
   334d4:	b916      	cbnz	r6, 334dc <__udivmoddi4+0x1a8>
   334d6:	2100      	movs	r1, #0
   334d8:	4608      	mov	r0, r1
   334da:	e77b      	b.n	333d4 <__udivmoddi4+0xa0>
   334dc:	e9c6 e000 	strd	lr, r0, [r6]
   334e0:	e7f9      	b.n	334d6 <__udivmoddi4+0x1a2>
   334e2:	fab3 f783 	clz	r7, r3
   334e6:	b98f      	cbnz	r7, 3350c <__udivmoddi4+0x1d8>
   334e8:	4283      	cmp	r3, r0
   334ea:	d301      	bcc.n	334f0 <__udivmoddi4+0x1bc>
   334ec:	4572      	cmp	r2, lr
   334ee:	d808      	bhi.n	33502 <__udivmoddi4+0x1ce>
   334f0:	ebbe 0402 	subs.w	r4, lr, r2
   334f4:	eb60 0303 	sbc.w	r3, r0, r3
   334f8:	2001      	movs	r0, #1
   334fa:	469c      	mov	ip, r3
   334fc:	b91e      	cbnz	r6, 33506 <__udivmoddi4+0x1d2>
   334fe:	2100      	movs	r1, #0
   33500:	e768      	b.n	333d4 <__udivmoddi4+0xa0>
   33502:	4638      	mov	r0, r7
   33504:	e7fa      	b.n	334fc <__udivmoddi4+0x1c8>
   33506:	e9c6 4c00 	strd	r4, ip, [r6]
   3350a:	e7f8      	b.n	334fe <__udivmoddi4+0x1ca>
   3350c:	f1c7 0c20 	rsb	ip, r7, #32
   33510:	40bb      	lsls	r3, r7
   33512:	fa22 f40c 	lsr.w	r4, r2, ip
   33516:	431c      	orrs	r4, r3
   33518:	fa2e f10c 	lsr.w	r1, lr, ip
   3351c:	fa20 f30c 	lsr.w	r3, r0, ip
   33520:	40b8      	lsls	r0, r7
   33522:	4301      	orrs	r1, r0
   33524:	ea4f 4914 	mov.w	r9, r4, lsr #16
   33528:	fa0e f507 	lsl.w	r5, lr, r7
   3352c:	fbb3 f8f9 	udiv	r8, r3, r9
   33530:	fa1f fe84 	uxth.w	lr, r4
   33534:	fb09 3018 	mls	r0, r9, r8, r3
   33538:	0c0b      	lsrs	r3, r1, #16
   3353a:	fb08 fa0e 	mul.w	sl, r8, lr
   3353e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   33542:	459a      	cmp	sl, r3
   33544:	fa02 f207 	lsl.w	r2, r2, r7
   33548:	d940      	bls.n	335cc <__udivmoddi4+0x298>
   3354a:	18e3      	adds	r3, r4, r3
   3354c:	f108 30ff 	add.w	r0, r8, #4294967295
   33550:	d204      	bcs.n	3355c <__udivmoddi4+0x228>
   33552:	459a      	cmp	sl, r3
   33554:	d902      	bls.n	3355c <__udivmoddi4+0x228>
   33556:	f1a8 0002 	sub.w	r0, r8, #2
   3355a:	4423      	add	r3, r4
   3355c:	eba3 030a 	sub.w	r3, r3, sl
   33560:	b289      	uxth	r1, r1
   33562:	fbb3 f8f9 	udiv	r8, r3, r9
   33566:	fb09 3318 	mls	r3, r9, r8, r3
   3356a:	fb08 fe0e 	mul.w	lr, r8, lr
   3356e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   33572:	458e      	cmp	lr, r1
   33574:	d92c      	bls.n	335d0 <__udivmoddi4+0x29c>
   33576:	1861      	adds	r1, r4, r1
   33578:	f108 33ff 	add.w	r3, r8, #4294967295
   3357c:	d204      	bcs.n	33588 <__udivmoddi4+0x254>
   3357e:	458e      	cmp	lr, r1
   33580:	d902      	bls.n	33588 <__udivmoddi4+0x254>
   33582:	f1a8 0302 	sub.w	r3, r8, #2
   33586:	4421      	add	r1, r4
   33588:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   3358c:	fba0 9802 	umull	r9, r8, r0, r2
   33590:	eba1 010e 	sub.w	r1, r1, lr
   33594:	4541      	cmp	r1, r8
   33596:	46ce      	mov	lr, r9
   33598:	4643      	mov	r3, r8
   3359a:	d302      	bcc.n	335a2 <__udivmoddi4+0x26e>
   3359c:	d106      	bne.n	335ac <__udivmoddi4+0x278>
   3359e:	454d      	cmp	r5, r9
   335a0:	d204      	bcs.n	335ac <__udivmoddi4+0x278>
   335a2:	ebb9 0e02 	subs.w	lr, r9, r2
   335a6:	eb68 0304 	sbc.w	r3, r8, r4
   335aa:	3801      	subs	r0, #1
   335ac:	2e00      	cmp	r6, #0
   335ae:	d0a6      	beq.n	334fe <__udivmoddi4+0x1ca>
   335b0:	ebb5 020e 	subs.w	r2, r5, lr
   335b4:	eb61 0103 	sbc.w	r1, r1, r3
   335b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   335bc:	fa22 f307 	lsr.w	r3, r2, r7
   335c0:	ea4c 0303 	orr.w	r3, ip, r3
   335c4:	40f9      	lsrs	r1, r7
   335c6:	e9c6 3100 	strd	r3, r1, [r6]
   335ca:	e798      	b.n	334fe <__udivmoddi4+0x1ca>
   335cc:	4640      	mov	r0, r8
   335ce:	e7c5      	b.n	3355c <__udivmoddi4+0x228>
   335d0:	4643      	mov	r3, r8
   335d2:	e7d9      	b.n	33588 <__udivmoddi4+0x254>
   335d4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   335d8:	4681      	mov	r9, r0
   335da:	f100 0007 	add.w	r0, r0, #7
   335de:	f020 0007 	bic.w	r0, r0, #7
   335e2:	ea5f 0802 	movs.w	r8, r2
   335e6:	9000      	str	r0, [sp, #0]
   335e8:	784a      	ldrb	r2, [r1, #1]
   335ea:	f88d 2004 	strb.w	r2, [sp, #4]
   335ee:	788a      	ldrb	r2, [r1, #2]
   335f0:	460c      	mov	r4, r1
   335f2:	f88d 2005 	strb.w	r2, [sp, #5]
   335f6:	d000      	beq.n	335fa <__udivmoddi4+0x2c6>
   335f8:	2000      	movs	r0, #0
   335fa:	a901      	add	r1, sp, #4
   335fc:	f7f4 fd6a 	bl	280d4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
   33600:	9900      	ldr	r1, [sp, #0]
   33602:	2600      	movs	r6, #0
   33604:	4408      	add	r0, r1
   33606:	9000      	str	r0, [sp, #0]
   33608:	7820      	ldrb	r0, [r4, #0]
   3360a:	7861      	ldrb	r1, [r4, #1]
   3360c:	4635      	mov	r5, r6
   3360e:	4408      	add	r0, r1
   33610:	b2c7      	uxtb	r7, r0
   33612:	e008      	b.n	33626 <__udivmoddi4+0x2f2>
   33614:	7a23      	ldrb	r3, [r4, #8]
   33616:	79e2      	ldrb	r2, [r4, #7]
   33618:	79a1      	ldrb	r1, [r4, #6]
   3361a:	7960      	ldrb	r0, [r4, #5]
   3361c:	f000 fe2a 	bl	34274 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
   33620:	1c6d      	adds	r5, r5, #1
   33622:	4406      	add	r6, r0
   33624:	b2ed      	uxtb	r5, r5
   33626:	42bd      	cmp	r5, r7
   33628:	d3f4      	bcc.n	33614 <__udivmoddi4+0x2e0>
   3362a:	9800      	ldr	r0, [sp, #0]
   3362c:	1cc0      	adds	r0, r0, #3
   3362e:	f020 0003 	bic.w	r0, r0, #3
   33632:	9000      	str	r0, [sp, #0]
   33634:	f1b8 0f00 	cmp.w	r8, #0
   33638:	d000      	beq.n	3363c <__udivmoddi4+0x308>
   3363a:	2000      	movs	r0, #0
   3363c:	4632      	mov	r2, r6
   3363e:	4639      	mov	r1, r7
   33640:	f7f4 fe82 	bl	28348 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
   33644:	9900      	ldr	r1, [sp, #0]
   33646:	4642      	mov	r2, r8
   33648:	4408      	add	r0, r1
   3364a:	9000      	str	r0, [sp, #0]
   3364c:	4621      	mov	r1, r4
   3364e:	4668      	mov	r0, sp
   33650:	f000 f805 	bl	3365e <__udivmoddi4+0x32a>
   33654:	9900      	ldr	r1, [sp, #0]
   33656:	eba1 0009 	sub.w	r0, r1, r9
   3365a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
   3365e:	b570      	push	{r4, r5, r6, lr}
   33660:	4605      	mov	r5, r0
   33662:	7888      	ldrb	r0, [r1, #2]
   33664:	4616      	mov	r6, r2
   33666:	460c      	mov	r4, r1
   33668:	b188      	cbz	r0, 3368e <__udivmoddi4+0x35a>
   3366a:	6828      	ldr	r0, [r5, #0]
   3366c:	1cc0      	adds	r0, r0, #3
   3366e:	f020 0003 	bic.w	r0, r0, #3
   33672:	6028      	str	r0, [r5, #0]
   33674:	7de1      	ldrb	r1, [r4, #23]
   33676:	78e2      	ldrb	r2, [r4, #3]
   33678:	8a63      	ldrh	r3, [r4, #18]
   3367a:	4411      	add	r1, r2
   3367c:	b2ca      	uxtb	r2, r1
   3367e:	78a1      	ldrb	r1, [r4, #2]
   33680:	b106      	cbz	r6, 33684 <__udivmoddi4+0x350>
   33682:	2000      	movs	r0, #0
   33684:	f7f4 ff14 	bl	284b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
   33688:	6829      	ldr	r1, [r5, #0]
   3368a:	4408      	add	r0, r1
   3368c:	6028      	str	r0, [r5, #0]
   3368e:	7d20      	ldrb	r0, [r4, #20]
   33690:	2800      	cmp	r0, #0
   33692:	d00f      	beq.n	336b4 <__udivmoddi4+0x380>
   33694:	78a0      	ldrb	r0, [r4, #2]
   33696:	2800      	cmp	r0, #0
   33698:	d00c      	beq.n	336b4 <__udivmoddi4+0x380>
   3369a:	6828      	ldr	r0, [r5, #0]
   3369c:	1dc0      	adds	r0, r0, #7
   3369e:	f020 0007 	bic.w	r0, r0, #7
   336a2:	6028      	str	r0, [r5, #0]
   336a4:	7d21      	ldrb	r1, [r4, #20]
   336a6:	b106      	cbz	r6, 336aa <__udivmoddi4+0x376>
   336a8:	2000      	movs	r0, #0
   336aa:	f7f6 fdfb 	bl	2a2a4 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
   336ae:	6829      	ldr	r1, [r5, #0]
   336b0:	4408      	add	r0, r1
   336b2:	6028      	str	r0, [r5, #0]
   336b4:	bd70      	pop	{r4, r5, r6, pc}

000336b6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
   336b6:	b50e      	push	{r1, r2, r3, lr}
   336b8:	4601      	mov	r1, r0
   336ba:	4668      	mov	r0, sp
   336bc:	f000 f818 	bl	336f0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
   336c0:	4668      	mov	r0, sp
   336c2:	f001 fbd1 	bl	34e68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
   336c6:	bd0e      	pop	{r1, r2, r3, pc}
   336c8:	b570      	push	{r4, r5, r6, lr}
   336ca:	460c      	mov	r4, r1
   336cc:	4605      	mov	r5, r0
   336ce:	f7f4 fb3f 	bl	27d50 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
   336d2:	2800      	cmp	r0, #0
   336d4:	d002      	beq.n	336dc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
   336d6:	2d3e      	cmp	r5, #62	; 0x3e
   336d8:	d001      	beq.n	336de <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
   336da:	2001      	movs	r0, #1
   336dc:	bd70      	pop	{r4, r5, r6, pc}
   336de:	2c12      	cmp	r4, #18
   336e0:	d004      	beq.n	336ec <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
   336e2:	4620      	mov	r0, r4
   336e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   336e8:	f7f4 bb44 	b.w	27d74 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   336ec:	2000      	movs	r0, #0
   336ee:	bd70      	pop	{r4, r5, r6, pc}

000336f0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
   336f0:	880a      	ldrh	r2, [r1, #0]
   336f2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   336f6:	8082      	strh	r2, [r0, #4]
   336f8:	884a      	ldrh	r2, [r1, #2]
   336fa:	80c2      	strh	r2, [r0, #6]
   336fc:	784a      	ldrb	r2, [r1, #1]
   336fe:	0993      	lsrs	r3, r2, #6
   33700:	2200      	movs	r2, #0
   33702:	7242      	strb	r2, [r0, #9]
   33704:	784b      	ldrb	r3, [r1, #1]
   33706:	f3c3 1301 	ubfx	r3, r3, #4, #2
   3370a:	b11b      	cbz	r3, 33714 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   3370c:	2b01      	cmp	r3, #1
   3370e:	d005      	beq.n	3371c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
   33710:	2b02      	cmp	r3, #2
   33712:	d005      	beq.n	33720 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
   33714:	7202      	strb	r2, [r0, #8]
   33716:	1d09      	adds	r1, r1, #4
   33718:	6001      	str	r1, [r0, #0]
   3371a:	4770      	bx	lr
   3371c:	2201      	movs	r2, #1
   3371e:	e7f9      	b.n	33714 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
   33720:	2202      	movs	r2, #2
   33722:	e7f7      	b.n	33714 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

00033724 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
   33724:	b510      	push	{r4, lr}
   33726:	460c      	mov	r4, r1
   33728:	7909      	ldrb	r1, [r1, #4]
   3372a:	7001      	strb	r1, [r0, #0]
   3372c:	7841      	ldrb	r1, [r0, #1]
   3372e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   33732:	7041      	strb	r1, [r0, #1]
   33734:	88a2      	ldrh	r2, [r4, #4]
   33736:	f3c2 2203 	ubfx	r2, r2, #8, #4
   3373a:	4311      	orrs	r1, r2
   3373c:	7041      	strb	r1, [r0, #1]
   3373e:	79a2      	ldrb	r2, [r4, #6]
   33740:	7082      	strb	r2, [r0, #2]
   33742:	88e2      	ldrh	r2, [r4, #6]
   33744:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
   33748:	0a12      	lsrs	r2, r2, #8
   3374a:	70c2      	strb	r2, [r0, #3]
   3374c:	7041      	strb	r1, [r0, #1]
   3374e:	7a22      	ldrb	r2, [r4, #8]
   33750:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   33754:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   33758:	7041      	strb	r1, [r0, #1]
   3375a:	7a62      	ldrb	r2, [r4, #9]
   3375c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
   33760:	7041      	strb	r1, [r0, #1]
   33762:	6821      	ldr	r1, [r4, #0]
   33764:	1d02      	adds	r2, r0, #4
   33766:	4291      	cmp	r1, r2
   33768:	d006      	beq.n	33778 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
   3376a:	88e2      	ldrh	r2, [r4, #6]
   3376c:	2afb      	cmp	r2, #251	; 0xfb
   3376e:	d300      	bcc.n	33772 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
   33770:	22fb      	movs	r2, #251	; 0xfb
   33772:	1d00      	adds	r0, r0, #4
   33774:	f003 ff23 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   33778:	79a0      	ldrb	r0, [r4, #6]
   3377a:	1d00      	adds	r0, r0, #4
   3377c:	b2c0      	uxtb	r0, r0
   3377e:	bd10      	pop	{r4, pc}

00033780 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
   33780:	b430      	push	{r4, r5}
   33782:	790a      	ldrb	r2, [r1, #4]
   33784:	7002      	strb	r2, [r0, #0]
   33786:	7842      	ldrb	r2, [r0, #1]
   33788:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   3378c:	7042      	strb	r2, [r0, #1]
   3378e:	888b      	ldrh	r3, [r1, #4]
   33790:	f3c3 2303 	ubfx	r3, r3, #8, #4
   33794:	431a      	orrs	r2, r3
   33796:	7042      	strb	r2, [r0, #1]
   33798:	798b      	ldrb	r3, [r1, #6]
   3379a:	7083      	strb	r3, [r0, #2]
   3379c:	78c3      	ldrb	r3, [r0, #3]
   3379e:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
   337a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   337a6:	70c3      	strb	r3, [r0, #3]
   337a8:	88cc      	ldrh	r4, [r1, #6]
   337aa:	f3c4 2405 	ubfx	r4, r4, #8, #6
   337ae:	4323      	orrs	r3, r4
   337b0:	70c3      	strb	r3, [r0, #3]
   337b2:	7042      	strb	r2, [r0, #1]
   337b4:	7a0c      	ldrb	r4, [r1, #8]
   337b6:	f004 0403 	and.w	r4, r4, #3
   337ba:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
   337be:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   337c2:	7042      	strb	r2, [r0, #1]
   337c4:	7a4c      	ldrb	r4, [r1, #9]
   337c6:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
   337ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   337ce:	7042      	strb	r2, [r0, #1]
   337d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
   337d4:	70c2      	strb	r2, [r0, #3]
   337d6:	680b      	ldr	r3, [r1, #0]
   337d8:	1d02      	adds	r2, r0, #4
   337da:	4293      	cmp	r3, r2
   337dc:	d005      	beq.n	337ea <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
   337de:	88ca      	ldrh	r2, [r1, #6]
   337e0:	bc30      	pop	{r4, r5}
   337e2:	4619      	mov	r1, r3
   337e4:	1d00      	adds	r0, r0, #4
   337e6:	f003 beea 	b.w	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   337ea:	bc30      	pop	{r4, r5}
   337ec:	4770      	bx	lr

000337ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
   337ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   337f2:	460d      	mov	r5, r1
   337f4:	4604      	mov	r4, r0
   337f6:	f891 c000 	ldrb.w	ip, [r1]
   337fa:	2000      	movs	r0, #0
   337fc:	230c      	movs	r3, #12
   337fe:	2705      	movs	r7, #5
   33800:	2203      	movs	r2, #3
   33802:	263e      	movs	r6, #62	; 0x3e
   33804:	21ff      	movs	r1, #255	; 0xff
   33806:	f1bc 0f1e 	cmp.w	ip, #30
   3380a:	d27e      	bcs.n	3390a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
   3380c:	e8df f00c 	tbb	[pc, ip]
   33810:	424029e7 	.word	0x424029e7
   33814:	806d63e7 	.word	0x806d63e7
   33818:	b9aeac99 	.word	0xb9aeac99
   3381c:	0ff3dfc4 	.word	0x0ff3dfc4
   33820:	cf48e7e7 	.word	0xcf48e7e7
   33824:	eff0fcd2 	.word	0xeff0fcd2
   33828:	ebecedee 	.word	0xebecedee
   3382c:	e9ea      	.short	0xe9ea
   3382e:	200e      	movs	r0, #14
   33830:	7020      	strb	r0, [r4, #0]
   33832:	7968      	ldrb	r0, [r5, #5]
   33834:	70e0      	strb	r0, [r4, #3]
   33836:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   3383a:	0a00      	lsrs	r0, r0, #8
   3383c:	7120      	strb	r0, [r4, #4]
   3383e:	7928      	ldrb	r0, [r5, #4]
   33840:	70a0      	strb	r0, [r4, #2]
   33842:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   33846:	3883      	subs	r0, #131	; 0x83
   33848:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   3384c:	d003      	beq.n	33856 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
   3384e:	2136      	movs	r1, #54	; 0x36
   33850:	20c7      	movs	r0, #199	; 0xc7
   33852:	f7f4 f8fd 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   33856:	1de9      	adds	r1, r5, #7
   33858:	1d60      	adds	r0, r4, #5
   3385a:	f003 feb0 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   3385e:	2007      	movs	r0, #7
   33860:	e0bb      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33862:	7023      	strb	r3, [r4, #0]
   33864:	7928      	ldrb	r0, [r5, #4]
   33866:	70a0      	strb	r0, [r4, #2]
   33868:	7968      	ldrb	r0, [r5, #5]
   3386a:	70e0      	strb	r0, [r4, #3]
   3386c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   33870:	0a00      	lsrs	r0, r0, #8
   33872:	7120      	strb	r0, [r4, #4]
   33874:	79e8      	ldrb	r0, [r5, #7]
   33876:	7160      	strb	r0, [r4, #5]
   33878:	7a28      	ldrb	r0, [r5, #8]
   3387a:	71a0      	strb	r0, [r4, #6]
   3387c:	8928      	ldrh	r0, [r5, #8]
   3387e:	0a00      	lsrs	r0, r0, #8
   33880:	71e0      	strb	r0, [r4, #7]
   33882:	7aa8      	ldrb	r0, [r5, #10]
   33884:	7220      	strb	r0, [r4, #8]
   33886:	8968      	ldrh	r0, [r5, #10]
   33888:	0a00      	lsrs	r0, r0, #8
   3388a:	7260      	strb	r0, [r4, #9]
   3388c:	2008      	movs	r0, #8
   3388e:	e0a4      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33890:	2010      	movs	r0, #16
   33892:	e000      	b.n	33896 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
   33894:	201a      	movs	r0, #26
   33896:	7020      	strb	r0, [r4, #0]
   33898:	7928      	ldrb	r0, [r5, #4]
   3389a:	70a0      	strb	r0, [r4, #2]
   3389c:	2001      	movs	r0, #1
   3389e:	e09c      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   338a0:	2029      	movs	r0, #41	; 0x29
   338a2:	f7f4 fa67 	bl	27d74 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   338a6:	b148      	cbz	r0, 338bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
   338a8:	7026      	strb	r6, [r4, #0]
   338aa:	2029      	movs	r0, #41	; 0x29
   338ac:	70a0      	strb	r0, [r4, #2]
   338ae:	2221      	movs	r2, #33	; 0x21
   338b0:	1d29      	adds	r1, r5, #4
   338b2:	1ce0      	adds	r0, r4, #3
   338b4:	f003 fe83 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   338b8:	2022      	movs	r0, #34	; 0x22
   338ba:	e08e      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   338bc:	200a      	movs	r0, #10
   338be:	f7f4 fa59 	bl	27d74 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
   338c2:	2800      	cmp	r0, #0
   338c4:	4629      	mov	r1, r5
   338c6:	4620      	mov	r0, r4
   338c8:	d002      	beq.n	338d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
   338ca:	f000 f95b 	bl	33b84 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
   338ce:	e082      	b.n	339d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
   338d0:	f000 f92f 	bl	33b32 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
   338d4:	e07f      	b.n	339d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
   338d6:	7026      	strb	r6, [r4, #0]
   338d8:	2014      	movs	r0, #20
   338da:	70a0      	strb	r0, [r4, #2]
   338dc:	7928      	ldrb	r0, [r5, #4]
   338de:	70e0      	strb	r0, [r4, #3]
   338e0:	88a8      	ldrh	r0, [r5, #4]
   338e2:	0a00      	lsrs	r0, r0, #8
   338e4:	7120      	strb	r0, [r4, #4]
   338e6:	79a8      	ldrb	r0, [r5, #6]
   338e8:	e0c0      	b.n	33a6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
   338ea:	223e      	movs	r2, #62	; 0x3e
   338ec:	7022      	strb	r2, [r4, #0]
   338ee:	2204      	movs	r2, #4
   338f0:	70a2      	strb	r2, [r4, #2]
   338f2:	6868      	ldr	r0, [r5, #4]
   338f4:	f8c4 0003 	str.w	r0, [r4, #3]
   338f8:	68a8      	ldr	r0, [r5, #8]
   338fa:	f8c4 0007 	str.w	r0, [r4, #7]
   338fe:	89a8      	ldrh	r0, [r5, #12]
   33900:	f8a4 000b 	strh.w	r0, [r4, #11]
   33904:	7ba8      	ldrb	r0, [r5, #14]
   33906:	7360      	strb	r0, [r4, #13]
   33908:	e000      	b.n	3390c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
   3390a:	e068      	b.n	339de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
   3390c:	200c      	movs	r0, #12
   3390e:	e064      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33910:	7026      	strb	r6, [r4, #0]
   33912:	70a2      	strb	r2, [r4, #2]
   33914:	7928      	ldrb	r0, [r5, #4]
   33916:	70e0      	strb	r0, [r4, #3]
   33918:	79a8      	ldrb	r0, [r5, #6]
   3391a:	7120      	strb	r0, [r4, #4]
   3391c:	88e8      	ldrh	r0, [r5, #6]
   3391e:	0a00      	lsrs	r0, r0, #8
   33920:	7160      	strb	r0, [r4, #5]
   33922:	7a28      	ldrb	r0, [r5, #8]
   33924:	71a0      	strb	r0, [r4, #6]
   33926:	8928      	ldrh	r0, [r5, #8]
   33928:	0a00      	lsrs	r0, r0, #8
   3392a:	71e0      	strb	r0, [r4, #7]
   3392c:	7aa8      	ldrb	r0, [r5, #10]
   3392e:	7220      	strb	r0, [r4, #8]
   33930:	8968      	ldrh	r0, [r5, #10]
   33932:	0a00      	lsrs	r0, r0, #8
   33934:	7260      	strb	r0, [r4, #9]
   33936:	7b28      	ldrb	r0, [r5, #12]
   33938:	72a0      	strb	r0, [r4, #10]
   3393a:	89a8      	ldrh	r0, [r5, #12]
   3393c:	0a00      	lsrs	r0, r0, #8
   3393e:	72e0      	strb	r0, [r4, #11]
   33940:	e0d1      	b.n	33ae6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
   33942:	7026      	strb	r6, [r4, #0]
   33944:	70a7      	strb	r7, [r4, #2]
   33946:	7928      	ldrb	r0, [r5, #4]
   33948:	70e0      	strb	r0, [r4, #3]
   3394a:	88a8      	ldrh	r0, [r5, #4]
   3394c:	0a00      	lsrs	r0, r0, #8
   3394e:	7120      	strb	r0, [r4, #4]
   33950:	f8d5 0006 	ldr.w	r0, [r5, #6]
   33954:	f8c4 0005 	str.w	r0, [r4, #5]
   33958:	f8d5 000a 	ldr.w	r0, [r5, #10]
   3395c:	f8c4 0009 	str.w	r0, [r4, #9]
   33960:	89e8      	ldrh	r0, [r5, #14]
   33962:	f8a4 000d 	strh.w	r0, [r4, #13]
   33966:	e0e2      	b.n	33b2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
   33968:	2011      	movs	r0, #17
   3396a:	e045      	b.n	339f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
   3396c:	7027      	strb	r7, [r4, #0]
   3396e:	7928      	ldrb	r0, [r5, #4]
   33970:	70a0      	strb	r0, [r4, #2]
   33972:	7968      	ldrb	r0, [r5, #5]
   33974:	70e0      	strb	r0, [r4, #3]
   33976:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   3397a:	0a00      	lsrs	r0, r0, #8
   3397c:	7120      	strb	r0, [r4, #4]
   3397e:	79e8      	ldrb	r0, [r5, #7]
   33980:	e074      	b.n	33a6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
   33982:	2008      	movs	r0, #8
   33984:	7020      	strb	r0, [r4, #0]
   33986:	7928      	ldrb	r0, [r5, #4]
   33988:	70a0      	strb	r0, [r4, #2]
   3398a:	79a8      	ldrb	r0, [r5, #6]
   3398c:	70e0      	strb	r0, [r4, #3]
   3398e:	88e8      	ldrh	r0, [r5, #6]
   33990:	0a00      	lsrs	r0, r0, #8
   33992:	7120      	strb	r0, [r4, #4]
   33994:	7a28      	ldrb	r0, [r5, #8]
   33996:	e069      	b.n	33a6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
   33998:	2030      	movs	r0, #48	; 0x30
   3399a:	7020      	strb	r0, [r4, #0]
   3399c:	7928      	ldrb	r0, [r5, #4]
   3399e:	70a0      	strb	r0, [r4, #2]
   339a0:	79a8      	ldrb	r0, [r5, #6]
   339a2:	70e0      	strb	r0, [r4, #3]
   339a4:	88e8      	ldrh	r0, [r5, #6]
   339a6:	0a00      	lsrs	r0, r0, #8
   339a8:	7120      	strb	r0, [r4, #4]
   339aa:	2003      	movs	r0, #3
   339ac:	e015      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   339ae:	7026      	strb	r6, [r4, #0]
   339b0:	2007      	movs	r0, #7
   339b2:	e060      	b.n	33a76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
   339b4:	7026      	strb	r6, [r4, #0]
   339b6:	70a3      	strb	r3, [r4, #2]
   339b8:	7928      	ldrb	r0, [r5, #4]
   339ba:	70e0      	strb	r0, [r4, #3]
   339bc:	79a8      	ldrb	r0, [r5, #6]
   339be:	7120      	strb	r0, [r4, #4]
   339c0:	88e8      	ldrh	r0, [r5, #6]
   339c2:	0a00      	lsrs	r0, r0, #8
   339c4:	7160      	strb	r0, [r4, #5]
   339c6:	7a28      	ldrb	r0, [r5, #8]
   339c8:	71a0      	strb	r0, [r4, #6]
   339ca:	7a68      	ldrb	r0, [r5, #9]
   339cc:	e029      	b.n	33a22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
   339ce:	1d29      	adds	r1, r5, #4
   339d0:	4620      	mov	r0, r4
   339d2:	f7f4 f98f 	bl	27cf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
   339d6:	2800      	cmp	r0, #0
   339d8:	d001      	beq.n	339de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
   339da:	7060      	strb	r0, [r4, #1]
   339dc:	1c80      	adds	r0, r0, #2
   339de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   339e2:	e08f      	b.n	33b04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
   339e4:	e063      	b.n	33aae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
   339e6:	e044      	b.n	33a72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
   339e8:	e06f      	b.n	33aca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
   339ea:	e07e      	b.n	33aea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
   339ec:	e036      	b.n	33a5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
   339ee:	e01e      	b.n	33a2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
   339f0:	e01a      	b.n	33a28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
   339f2:	e009      	b.n	33a08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
   339f4:	e7ff      	b.n	339f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
   339f6:	2057      	movs	r0, #87	; 0x57
   339f8:	7020      	strb	r0, [r4, #0]
   339fa:	7928      	ldrb	r0, [r5, #4]
   339fc:	70a0      	strb	r0, [r4, #2]
   339fe:	88a8      	ldrh	r0, [r5, #4]
   33a00:	0a00      	lsrs	r0, r0, #8
   33a02:	70e0      	strb	r0, [r4, #3]
   33a04:	2002      	movs	r0, #2
   33a06:	e7e8      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33a08:	7026      	strb	r6, [r4, #0]
   33a0a:	2012      	movs	r0, #18
   33a0c:	70a0      	strb	r0, [r4, #2]
   33a0e:	7928      	ldrb	r0, [r5, #4]
   33a10:	70e0      	strb	r0, [r4, #3]
   33a12:	7968      	ldrb	r0, [r5, #5]
   33a14:	7120      	strb	r0, [r4, #4]
   33a16:	79a8      	ldrb	r0, [r5, #6]
   33a18:	7160      	strb	r0, [r4, #5]
   33a1a:	88e8      	ldrh	r0, [r5, #6]
   33a1c:	0a00      	lsrs	r0, r0, #8
   33a1e:	71a0      	strb	r0, [r4, #6]
   33a20:	7a28      	ldrb	r0, [r5, #8]
   33a22:	71e0      	strb	r0, [r4, #7]
   33a24:	2006      	movs	r0, #6
   33a26:	e7d8      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33a28:	7026      	strb	r6, [r4, #0]
   33a2a:	2020      	movs	r0, #32
   33a2c:	e041      	b.n	33ab2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
   33a2e:	7026      	strb	r6, [r4, #0]
   33a30:	2021      	movs	r0, #33	; 0x21
   33a32:	70a0      	strb	r0, [r4, #2]
   33a34:	7928      	ldrb	r0, [r5, #4]
   33a36:	70e0      	strb	r0, [r4, #3]
   33a38:	7968      	ldrb	r0, [r5, #5]
   33a3a:	7120      	strb	r0, [r4, #4]
   33a3c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
   33a40:	0a00      	lsrs	r0, r0, #8
   33a42:	7160      	strb	r0, [r4, #5]
   33a44:	79e8      	ldrb	r0, [r5, #7]
   33a46:	71a0      	strb	r0, [r4, #6]
   33a48:	7a28      	ldrb	r0, [r5, #8]
   33a4a:	71e0      	strb	r0, [r4, #7]
   33a4c:	7a68      	ldrb	r0, [r5, #9]
   33a4e:	7220      	strb	r0, [r4, #8]
   33a50:	7aa8      	ldrb	r0, [r5, #10]
   33a52:	7260      	strb	r0, [r4, #9]
   33a54:	7ae8      	ldrb	r0, [r5, #11]
   33a56:	72a0      	strb	r0, [r4, #10]
   33a58:	2009      	movs	r0, #9
   33a5a:	e7be      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33a5c:	7021      	strb	r1, [r4, #0]
   33a5e:	20a1      	movs	r0, #161	; 0xa1
   33a60:	70a0      	strb	r0, [r4, #2]
   33a62:	7928      	ldrb	r0, [r5, #4]
   33a64:	70e0      	strb	r0, [r4, #3]
   33a66:	7968      	ldrb	r0, [r5, #5]
   33a68:	7120      	strb	r0, [r4, #4]
   33a6a:	2000      	movs	r0, #0
   33a6c:	7160      	strb	r0, [r4, #5]
   33a6e:	2004      	movs	r0, #4
   33a70:	e7b3      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33a72:	7021      	strb	r1, [r4, #0]
   33a74:	20a2      	movs	r0, #162	; 0xa2
   33a76:	70a0      	strb	r0, [r4, #2]
   33a78:	7928      	ldrb	r0, [r5, #4]
   33a7a:	70e0      	strb	r0, [r4, #3]
   33a7c:	88a8      	ldrh	r0, [r5, #4]
   33a7e:	0a00      	lsrs	r0, r0, #8
   33a80:	7120      	strb	r0, [r4, #4]
   33a82:	79a8      	ldrb	r0, [r5, #6]
   33a84:	7160      	strb	r0, [r4, #5]
   33a86:	88e8      	ldrh	r0, [r5, #6]
   33a88:	0a00      	lsrs	r0, r0, #8
   33a8a:	71a0      	strb	r0, [r4, #6]
   33a8c:	7a28      	ldrb	r0, [r5, #8]
   33a8e:	71e0      	strb	r0, [r4, #7]
   33a90:	8928      	ldrh	r0, [r5, #8]
   33a92:	0a00      	lsrs	r0, r0, #8
   33a94:	7220      	strb	r0, [r4, #8]
   33a96:	7aa8      	ldrb	r0, [r5, #10]
   33a98:	7260      	strb	r0, [r4, #9]
   33a9a:	8968      	ldrh	r0, [r5, #10]
   33a9c:	0a00      	lsrs	r0, r0, #8
   33a9e:	72a0      	strb	r0, [r4, #10]
   33aa0:	7b28      	ldrb	r0, [r5, #12]
   33aa2:	72e0      	strb	r0, [r4, #11]
   33aa4:	89a8      	ldrh	r0, [r5, #12]
   33aa6:	0a00      	lsrs	r0, r0, #8
   33aa8:	7320      	strb	r0, [r4, #12]
   33aaa:	200b      	movs	r0, #11
   33aac:	e795      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33aae:	7021      	strb	r1, [r4, #0]
   33ab0:	20a3      	movs	r0, #163	; 0xa3
   33ab2:	70a0      	strb	r0, [r4, #2]
   33ab4:	7928      	ldrb	r0, [r5, #4]
   33ab6:	70e0      	strb	r0, [r4, #3]
   33ab8:	88a8      	ldrh	r0, [r5, #4]
   33aba:	0a00      	lsrs	r0, r0, #8
   33abc:	7120      	strb	r0, [r4, #4]
   33abe:	79a8      	ldrb	r0, [r5, #6]
   33ac0:	7160      	strb	r0, [r4, #5]
   33ac2:	79e8      	ldrb	r0, [r5, #7]
   33ac4:	71a0      	strb	r0, [r4, #6]
   33ac6:	2005      	movs	r0, #5
   33ac8:	e787      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33aca:	7026      	strb	r6, [r4, #0]
   33acc:	2013      	movs	r0, #19
   33ace:	70a0      	strb	r0, [r4, #2]
   33ad0:	7928      	ldrb	r0, [r5, #4]
   33ad2:	70e0      	strb	r0, [r4, #3]
   33ad4:	7968      	ldrb	r0, [r5, #5]
   33ad6:	7120      	strb	r0, [r4, #4]
   33ad8:	f8d5 0006 	ldr.w	r0, [r5, #6]
   33adc:	f8c4 0005 	str.w	r0, [r4, #5]
   33ae0:	8968      	ldrh	r0, [r5, #10]
   33ae2:	f8a4 0009 	strh.w	r0, [r4, #9]
   33ae6:	200a      	movs	r0, #10
   33ae8:	e777      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
   33aea:	7021      	strb	r1, [r4, #0]
   33aec:	20a4      	movs	r0, #164	; 0xa4
   33aee:	70a0      	strb	r0, [r4, #2]
   33af0:	7928      	ldrb	r0, [r5, #4]
   33af2:	70e0      	strb	r0, [r4, #3]
   33af4:	88a8      	ldrh	r0, [r5, #4]
   33af6:	0a00      	lsrs	r0, r0, #8
   33af8:	7120      	strb	r0, [r4, #4]
   33afa:	79a8      	ldrb	r0, [r5, #6]
   33afc:	7160      	strb	r0, [r4, #5]
   33afe:	79e8      	ldrb	r0, [r5, #7]
   33b00:	71a0      	strb	r0, [r4, #6]
   33b02:	e6ac      	b.n	3385e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
   33b04:	7021      	strb	r1, [r4, #0]
   33b06:	2080      	movs	r0, #128	; 0x80
   33b08:	70a0      	strb	r0, [r4, #2]
   33b0a:	88a9      	ldrh	r1, [r5, #4]
   33b0c:	f8a4 1003 	strh.w	r1, [r4, #3]
   33b10:	88e9      	ldrh	r1, [r5, #6]
   33b12:	f8a4 1005 	strh.w	r1, [r4, #5]
   33b16:	7a29      	ldrb	r1, [r5, #8]
   33b18:	71e1      	strb	r1, [r4, #7]
   33b1a:	8969      	ldrh	r1, [r5, #10]
   33b1c:	8121      	strh	r1, [r4, #8]
   33b1e:	89a9      	ldrh	r1, [r5, #12]
   33b20:	8161      	strh	r1, [r4, #10]
   33b22:	89e9      	ldrh	r1, [r5, #14]
   33b24:	81a1      	strh	r1, [r4, #12]
   33b26:	7c29      	ldrb	r1, [r5, #16]
   33b28:	f001 0101 	and.w	r1, r1, #1
   33b2c:	73a1      	strb	r1, [r4, #14]
   33b2e:	200d      	movs	r0, #13
   33b30:	e753      	b.n	339da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

00033b32 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
   33b32:	223e      	movs	r2, #62	; 0x3e
   33b34:	7002      	strb	r2, [r0, #0]
   33b36:	2201      	movs	r2, #1
   33b38:	7082      	strb	r2, [r0, #2]
   33b3a:	790a      	ldrb	r2, [r1, #4]
   33b3c:	70c2      	strb	r2, [r0, #3]
   33b3e:	f811 2f05 	ldrb.w	r2, [r1, #5]!
   33b42:	7102      	strb	r2, [r0, #4]
   33b44:	880a      	ldrh	r2, [r1, #0]
   33b46:	0a12      	lsrs	r2, r2, #8
   33b48:	7142      	strb	r2, [r0, #5]
   33b4a:	788a      	ldrb	r2, [r1, #2]
   33b4c:	7182      	strb	r2, [r0, #6]
   33b4e:	78ca      	ldrb	r2, [r1, #3]
   33b50:	71c2      	strb	r2, [r0, #7]
   33b52:	684a      	ldr	r2, [r1, #4]
   33b54:	6082      	str	r2, [r0, #8]
   33b56:	890a      	ldrh	r2, [r1, #8]
   33b58:	8182      	strh	r2, [r0, #12]
   33b5a:	7d8a      	ldrb	r2, [r1, #22]
   33b5c:	7382      	strb	r2, [r0, #14]
   33b5e:	8aca      	ldrh	r2, [r1, #22]
   33b60:	0a12      	lsrs	r2, r2, #8
   33b62:	73c2      	strb	r2, [r0, #15]
   33b64:	7e0a      	ldrb	r2, [r1, #24]
   33b66:	7402      	strb	r2, [r0, #16]
   33b68:	8b0a      	ldrh	r2, [r1, #24]
   33b6a:	0a12      	lsrs	r2, r2, #8
   33b6c:	7442      	strb	r2, [r0, #17]
   33b6e:	7e8a      	ldrb	r2, [r1, #26]
   33b70:	7482      	strb	r2, [r0, #18]
   33b72:	8b4a      	ldrh	r2, [r1, #26]
   33b74:	0a12      	lsrs	r2, r2, #8
   33b76:	74c2      	strb	r2, [r0, #19]
   33b78:	7f09      	ldrb	r1, [r1, #28]
   33b7a:	7501      	strb	r1, [r0, #20]
   33b7c:	2113      	movs	r1, #19
   33b7e:	7041      	strb	r1, [r0, #1]
   33b80:	4608      	mov	r0, r1
   33b82:	4770      	bx	lr
   33b84:	223e      	movs	r2, #62	; 0x3e
   33b86:	7002      	strb	r2, [r0, #0]
   33b88:	220a      	movs	r2, #10
   33b8a:	7082      	strb	r2, [r0, #2]
   33b8c:	790a      	ldrb	r2, [r1, #4]
   33b8e:	70c2      	strb	r2, [r0, #3]
   33b90:	f811 2f05 	ldrb.w	r2, [r1, #5]!
   33b94:	7102      	strb	r2, [r0, #4]
   33b96:	880a      	ldrh	r2, [r1, #0]
   33b98:	0a12      	lsrs	r2, r2, #8
   33b9a:	7142      	strb	r2, [r0, #5]
   33b9c:	788a      	ldrb	r2, [r1, #2]
   33b9e:	7182      	strb	r2, [r0, #6]
   33ba0:	78ca      	ldrb	r2, [r1, #3]
   33ba2:	71c2      	strb	r2, [r0, #7]
   33ba4:	684a      	ldr	r2, [r1, #4]
   33ba6:	6082      	str	r2, [r0, #8]
   33ba8:	890a      	ldrh	r2, [r1, #8]
   33baa:	8182      	strh	r2, [r0, #12]
   33bac:	f8d1 200a 	ldr.w	r2, [r1, #10]
   33bb0:	f8c0 200e 	str.w	r2, [r0, #14]
   33bb4:	89ca      	ldrh	r2, [r1, #14]
   33bb6:	8242      	strh	r2, [r0, #18]
   33bb8:	690a      	ldr	r2, [r1, #16]
   33bba:	6142      	str	r2, [r0, #20]
   33bbc:	8a8a      	ldrh	r2, [r1, #20]
   33bbe:	8302      	strh	r2, [r0, #24]
   33bc0:	7d8a      	ldrb	r2, [r1, #22]
   33bc2:	7682      	strb	r2, [r0, #26]
   33bc4:	8aca      	ldrh	r2, [r1, #22]
   33bc6:	0a12      	lsrs	r2, r2, #8
   33bc8:	76c2      	strb	r2, [r0, #27]
   33bca:	7e0a      	ldrb	r2, [r1, #24]
   33bcc:	7702      	strb	r2, [r0, #28]
   33bce:	8b0a      	ldrh	r2, [r1, #24]
   33bd0:	0a12      	lsrs	r2, r2, #8
   33bd2:	7742      	strb	r2, [r0, #29]
   33bd4:	7e8a      	ldrb	r2, [r1, #26]
   33bd6:	7782      	strb	r2, [r0, #30]
   33bd8:	8b4a      	ldrh	r2, [r1, #26]
   33bda:	0a12      	lsrs	r2, r2, #8
   33bdc:	77c2      	strb	r2, [r0, #31]
   33bde:	7f09      	ldrb	r1, [r1, #28]
   33be0:	f880 1020 	strb.w	r1, [r0, #32]
   33be4:	211f      	movs	r1, #31
   33be6:	7041      	strb	r1, [r0, #1]
   33be8:	4608      	mov	r0, r1
   33bea:	4770      	bx	lr
   33bec:	094a      	lsrs	r2, r1, #5
   33bee:	f001 011f 	and.w	r1, r1, #31
   33bf2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   33bf6:	40c8      	lsrs	r0, r1
   33bf8:	f000 0001 	and.w	r0, r0, #1
   33bfc:	4770      	bx	lr

00033bfe <sdc_hci_data_put>:
   33bfe:	b510      	push	{r4, lr}
   33c00:	f06f 0415 	mvn.w	r4, #21
   33c04:	b120      	cbz	r0, 33c10 <sdc_hci_data_put+0x12>
   33c06:	f7ff fd56 	bl	336b6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
   33c0a:	b108      	cbz	r0, 33c10 <sdc_hci_data_put+0x12>
   33c0c:	2000      	movs	r0, #0
   33c0e:	bd10      	pop	{r4, pc}
   33c10:	4620      	mov	r0, r4
   33c12:	bd10      	pop	{r4, pc}

00033c14 <sdc_hci_get>:
   33c14:	b510      	push	{r4, lr}
   33c16:	460c      	mov	r4, r1
   33c18:	b130      	cbz	r0, 33c28 <sdc_hci_get+0x14>
   33c1a:	b12c      	cbz	r4, 33c28 <sdc_hci_get+0x14>
   33c1c:	f7f4 f814 	bl	27c48 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
   33c20:	b128      	cbz	r0, 33c2e <sdc_hci_get+0x1a>
   33c22:	7020      	strb	r0, [r4, #0]
   33c24:	2000      	movs	r0, #0
   33c26:	bd10      	pop	{r4, pc}
   33c28:	f06f 0015 	mvn.w	r0, #21
   33c2c:	bd10      	pop	{r4, pc}
   33c2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   33c32:	bd10      	pop	{r4, pc}

00033c34 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
   33c34:	f002 bf62 	b.w	36afc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

00033c38 <sdc_hci_cmd_cb_read_transmit_power_level>:
   33c38:	f002 bf7d 	b.w	36b36 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

00033c3c <sdc_hci_cmd_cb_set_event_mask>:
   33c3c:	b510      	push	{r4, lr}
   33c3e:	f7f4 f8a9 	bl	27d94 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
   33c42:	2000      	movs	r0, #0
   33c44:	bd10      	pop	{r4, pc}

00033c46 <sdc_hci_cmd_cb_set_event_mask_page_2>:
   33c46:	b510      	push	{r4, lr}
   33c48:	f7f4 f8b4 	bl	27db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
   33c4c:	2000      	movs	r0, #0
   33c4e:	bd10      	pop	{r4, pc}

00033c50 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
   33c50:	f002 bf92 	b.w	36b78 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

00033c54 <sdc_hci_cmd_vs_conn_event_extend>:
   33c54:	b508      	push	{r3, lr}
   33c56:	7800      	ldrb	r0, [r0, #0]
   33c58:	f88d 0000 	strb.w	r0, [sp]
   33c5c:	4668      	mov	r0, sp
   33c5e:	f002 fe6e 	bl	3693e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
   33c62:	bd08      	pop	{r3, pc}

00033c64 <sdc_hci_cmd_vs_conn_update>:
   33c64:	2001      	movs	r0, #1
   33c66:	4770      	bx	lr

00033c68 <sdc_hci_cmd_vs_event_length_set>:
   33c68:	f7f9 bfe2 	b.w	2dc30 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00033c6c <sdc_hci_cmd_vs_llpm_mode_set>:
   33c6c:	2001      	movs	r0, #1
   33c6e:	4770      	bx	lr

00033c70 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
   33c70:	7881      	ldrb	r1, [r0, #2]
   33c72:	8800      	ldrh	r0, [r0, #0]
   33c74:	f002 be13 	b.w	3689e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

00033c78 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
   33c78:	7800      	ldrb	r0, [r0, #0]
   33c7a:	b100      	cbz	r0, 33c7e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
   33c7c:	2001      	movs	r0, #1
   33c7e:	f002 be09 	b.w	36894 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00033c82 <sdc_hci_cmd_vs_set_adv_randomness>:
   33c82:	f002 be36 	b.w	368f2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

00033c86 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
   33c86:	b510      	push	{r4, lr}
   33c88:	4604      	mov	r4, r0
   33c8a:	f7ff f9f9 	bl	33080 <mpsl_temperature_get>
   33c8e:	17c1      	asrs	r1, r0, #31
   33c90:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   33c94:	1080      	asrs	r0, r0, #2
   33c96:	287f      	cmp	r0, #127	; 0x7f
   33c98:	dd01      	ble.n	33c9e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
   33c9a:	207f      	movs	r0, #127	; 0x7f
   33c9c:	e004      	b.n	33ca8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   33c9e:	f06f 017e 	mvn.w	r1, #126	; 0x7e
   33ca2:	4288      	cmp	r0, r1
   33ca4:	da00      	bge.n	33ca8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
   33ca6:	4608      	mov	r0, r1
   33ca8:	7020      	strb	r0, [r4, #0]
   33caa:	2000      	movs	r0, #0
   33cac:	bd10      	pop	{r4, pc}

00033cae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
   33cae:	f002 be35 	b.w	3691c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00033cb2 <sdc_hci_cmd_ip_read_bd_addr>:
   33cb2:	f002 bf34 	b.w	36b1e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00033cb6 <sdc_hci_cmd_ip_read_local_version_information>:
   33cb6:	f7f9 bfc9 	b.w	2dc4c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00033cba <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
   33cba:	f002 bbc2 	b.w	36442 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00033cbe <sdc_hci_cmd_le_clear_filter_accept_list>:
   33cbe:	f002 bbd7 	b.w	36470 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00033cc2 <sdc_hci_cmd_le_encrypt>:
   33cc2:	f002 bbe2 	b.w	3648a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00033cc6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
   33cc6:	8802      	ldrh	r2, [r0, #0]
   33cc8:	800a      	strh	r2, [r1, #0]
   33cca:	f002 bbe7 	b.w	3649c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

00033cce <sdc_hci_cmd_le_long_term_key_request_reply>:
   33cce:	8802      	ldrh	r2, [r0, #0]
   33cd0:	800a      	strh	r2, [r1, #0]
   33cd2:	f002 bbfc 	b.w	364ce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

00033cd6 <sdc_hci_cmd_le_rand>:
   33cd6:	f002 bc24 	b.w	36522 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00033cda <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
   33cda:	f002 bc28 	b.w	3652e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00033cde <sdc_hci_cmd_le_read_buffer_size>:
   33cde:	f7f9 beb5 	b.w	2da4c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00033ce2 <sdc_hci_cmd_le_read_channel_map>:
   33ce2:	f7f9 bebd 	b.w	2da60 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

00033ce6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
   33ce6:	f002 bc62 	b.w	365ae <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00033cea <sdc_hci_cmd_le_read_max_data_length>:
   33cea:	f002 bc2b 	b.w	36544 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

00033cee <sdc_hci_cmd_le_read_phy>:
   33cee:	f7f9 bedf 	b.w	2dab0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

00033cf2 <sdc_hci_cmd_le_read_remote_features>:
   33cf2:	f002 bc30 	b.w	36556 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

00033cf6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
   33cf6:	f7f9 bf01 	b.w	2dafc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

00033cfa <sdc_hci_cmd_le_read_transmit_power>:
   33cfa:	f002 bc48 	b.w	3658e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00033cfe <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
   33cfe:	f002 bc5d 	b.w	365bc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00033d02 <sdc_hci_cmd_le_set_adv_data>:
   33d02:	f002 bc70 	b.w	365e6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00033d06 <sdc_hci_cmd_le_set_adv_enable>:
   33d06:	f002 bc83 	b.w	36610 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

00033d0a <sdc_hci_cmd_le_set_adv_params>:
   33d0a:	f002 bcb4 	b.w	36676 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00033d0e <sdc_hci_cmd_le_set_data_length>:
   33d0e:	f002 bd47 	b.w	367a0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

00033d12 <sdc_hci_cmd_le_set_data_related_address_changes>:
   33d12:	f002 bd65 	b.w	367e0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00033d16 <sdc_hci_cmd_le_set_default_phy>:
   33d16:	f7f9 befb 	b.w	2db10 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

00033d1a <sdc_hci_cmd_le_set_event_mask>:
   33d1a:	b510      	push	{r4, lr}
   33d1c:	f7f4 f832 	bl	27d84 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
   33d20:	2000      	movs	r0, #0
   33d22:	bd10      	pop	{r4, pc}

00033d24 <sdc_hci_cmd_le_set_phy>:
   33d24:	f002 bd69 	b.w	367fa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

00033d28 <sdc_hci_cmd_le_set_random_address>:
   33d28:	f002 bd80 	b.w	3682c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00033d2c <sdc_hci_cmd_le_set_scan_response_data>:
   33d2c:	f002 bd8c 	b.w	36848 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

00033d30 <sdc_hci_cmd_le_write_suggested_default_data_length>:
   33d30:	f002 bd9f 	b.w	36872 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

00033d34 <sdc_hci_cmd_lc_disconnect>:
   33d34:	f002 bb37 	b.w	363a6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

00033d38 <sdc_hci_cmd_lc_read_remote_version_information>:
   33d38:	f7f9 bf92 	b.w	2dc60 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
   33d3c:	b570      	push	{r4, r5, r6, lr}
   33d3e:	880b      	ldrh	r3, [r1, #0]
   33d40:	7cc4      	ldrb	r4, [r0, #19]
   33d42:	f100 0518 	add.w	r5, r0, #24
   33d46:	f3c3 060e 	ubfx	r6, r3, #0, #15
   33d4a:	8802      	ldrh	r2, [r0, #0]
   33d4c:	4435      	add	r5, r6
   33d4e:	1d64      	adds	r4, r4, #5
   33d50:	882d      	ldrh	r5, [r5, #0]
   33d52:	4422      	add	r2, r4
   33d54:	b292      	uxth	r2, r2
   33d56:	4425      	add	r5, r4
   33d58:	1e54      	subs	r4, r2, #1
   33d5a:	442c      	add	r4, r5
   33d5c:	fb94 f4f2 	sdiv	r4, r4, r2
   33d60:	fb02 6204 	mla	r2, r2, r4, r6
   33d64:	8840      	ldrh	r0, [r0, #2]
   33d66:	b292      	uxth	r2, r2
   33d68:	4290      	cmp	r0, r2
   33d6a:	d903      	bls.n	33d74 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
   33d6c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
   33d70:	4310      	orrs	r0, r2
   33d72:	e002      	b.n	33d7a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
   33d74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   33d78:	4398      	bics	r0, r3
   33d7a:	8008      	strh	r0, [r1, #0]
   33d7c:	bd70      	pop	{r4, r5, r6, pc}
   33d7e:	0442      	lsls	r2, r0, #17
   33d80:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
   33d84:	d107      	bne.n	33d96 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
   33d86:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
   33d8a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
   33d8e:	4288      	cmp	r0, r1
   33d90:	d001      	beq.n	33d96 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
   33d92:	2001      	movs	r0, #1
   33d94:	4770      	bx	lr
   33d96:	2000      	movs	r0, #0
   33d98:	4770      	bx	lr

00033d9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
   33d9a:	8881      	ldrh	r1, [r0, #4]
   33d9c:	88c0      	ldrh	r0, [r0, #6]
   33d9e:	4288      	cmp	r0, r1
   33da0:	d101      	bne.n	33da6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
   33da2:	2001      	movs	r0, #1
   33da4:	4770      	bx	lr
   33da6:	2000      	movs	r0, #0
   33da8:	4770      	bx	lr

00033daa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
   33daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33dae:	460f      	mov	r7, r1
   33db0:	4604      	mov	r4, r0
   33db2:	f100 0118 	add.w	r1, r0, #24
   33db6:	8880      	ldrh	r0, [r0, #4]
   33db8:	2600      	movs	r6, #0
   33dba:	f3c0 000e 	ubfx	r0, r0, #0, #15
   33dbe:	1845      	adds	r5, r0, r1
   33dc0:	603e      	str	r6, [r7, #0]
   33dc2:	89e0      	ldrh	r0, [r4, #14]
   33dc4:	2800      	cmp	r0, #0
   33dc6:	d016      	beq.n	33df6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
   33dc8:	8961      	ldrh	r1, [r4, #10]
   33dca:	4408      	add	r0, r1
   33dcc:	b280      	uxth	r0, r0
   33dce:	8160      	strh	r0, [r4, #10]
   33dd0:	8829      	ldrh	r1, [r5, #0]
   33dd2:	4288      	cmp	r0, r1
   33dd4:	d905      	bls.n	33de2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
   33dd6:	f240 1151 	movw	r1, #337	; 0x151
   33dda:	f04f 0014 	mov.w	r0, #20
   33dde:	f7f3 fe37 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   33de2:	d106      	bne.n	33df2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
   33de4:	f104 0104 	add.w	r1, r4, #4
   33de8:	4620      	mov	r0, r4
   33dea:	f7ff ffa7 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   33dee:	8166      	strh	r6, [r4, #10]
   33df0:	603d      	str	r5, [r7, #0]
   33df2:	81e6      	strh	r6, [r4, #14]
   33df4:	2001      	movs	r0, #1
   33df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033dfa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
   33dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33dfe:	4604      	mov	r4, r0
   33e00:	f100 0318 	add.w	r3, r0, #24
   33e04:	88c0      	ldrh	r0, [r0, #6]
   33e06:	460e      	mov	r6, r1
   33e08:	f3c0 070e 	ubfx	r7, r0, #0, #15
   33e0c:	8a20      	ldrh	r0, [r4, #16]
   33e0e:	19d9      	adds	r1, r3, r7
   33e10:	b108      	cbz	r0, 33e16 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
   33e12:	42b0      	cmp	r0, r6
   33e14:	d202      	bcs.n	33e1c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
   33e16:	2000      	movs	r0, #0
   33e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33e1c:	89a0      	ldrh	r0, [r4, #12]
   33e1e:	2500      	movs	r5, #0
   33e20:	b140      	cbz	r0, 33e34 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
   33e22:	f8b1 c000 	ldrh.w	ip, [r1]
   33e26:	4560      	cmp	r0, ip
   33e28:	d006      	beq.n	33e38 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
   33e2a:	f44f 7101 	mov.w	r1, #516	; 0x204
   33e2e:	2014      	movs	r0, #20
   33e30:	f7f3 fe0e 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   33e34:	800d      	strh	r5, [r1, #0]
   33e36:	e00e      	b.n	33e56 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
   33e38:	f894 c013 	ldrb.w	ip, [r4, #19]
   33e3c:	4418      	add	r0, r3
   33e3e:	f10c 0c05 	add.w	ip, ip, #5
   33e42:	44bc      	add	ip, r7
   33e44:	4460      	add	r0, ip
   33e46:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   33e4a:	f820 cc03 	strh.w	ip, [r0, #-3]
   33e4e:	f894 c016 	ldrb.w	ip, [r4, #22]
   33e52:	f800 cc01 	strb.w	ip, [r0, #-1]
   33e56:	89a0      	ldrh	r0, [r4, #12]
   33e58:	4430      	add	r0, r6
   33e5a:	81a0      	strh	r0, [r4, #12]
   33e5c:	8808      	ldrh	r0, [r1, #0]
   33e5e:	4430      	add	r0, r6
   33e60:	8008      	strh	r0, [r1, #0]
   33e62:	b12a      	cbz	r2, 33e70 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
   33e64:	1da1      	adds	r1, r4, #6
   33e66:	4620      	mov	r0, r4
   33e68:	f7ff ff68 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   33e6c:	81a5      	strh	r5, [r4, #12]
   33e6e:	e00a      	b.n	33e86 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
   33e70:	7ce0      	ldrb	r0, [r4, #19]
   33e72:	89a1      	ldrh	r1, [r4, #12]
   33e74:	1d40      	adds	r0, r0, #5
   33e76:	4438      	add	r0, r7
   33e78:	4419      	add	r1, r3
   33e7a:	4408      	add	r0, r1
   33e7c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
   33e80:	82a1      	strh	r1, [r4, #20]
   33e82:	7880      	ldrb	r0, [r0, #2]
   33e84:	75a0      	strb	r0, [r4, #22]
   33e86:	8225      	strh	r5, [r4, #16]
   33e88:	2001      	movs	r0, #1
   33e8a:	e7c5      	b.n	33e18 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

00033e8c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
   33e8c:	1c80      	adds	r0, r0, #2
   33e8e:	4770      	bx	lr

00033e90 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
   33e90:	b510      	push	{r4, lr}
   33e92:	4604      	mov	r4, r0
   33e94:	88c0      	ldrh	r0, [r0, #6]
   33e96:	88a1      	ldrh	r1, [r4, #4]
   33e98:	4281      	cmp	r1, r0
   33e9a:	d003      	beq.n	33ea4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
   33e9c:	8960      	ldrh	r0, [r4, #10]
   33e9e:	b908      	cbnz	r0, 33ea4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
   33ea0:	89e0      	ldrh	r0, [r4, #14]
   33ea2:	b108      	cbz	r0, 33ea8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
   33ea4:	2000      	movs	r0, #0
   33ea6:	bd10      	pop	{r4, pc}
   33ea8:	1d21      	adds	r1, r4, #4
   33eaa:	4620      	mov	r0, r4
   33eac:	f7ff ff46 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   33eb0:	2000      	movs	r0, #0
   33eb2:	81e0      	strh	r0, [r4, #14]
   33eb4:	2001      	movs	r0, #1
   33eb6:	bd10      	pop	{r4, pc}

00033eb8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
   33eb8:	b510      	push	{r4, lr}
   33eba:	4604      	mov	r4, r0
   33ebc:	f100 0218 	add.w	r2, r0, #24
   33ec0:	88c0      	ldrh	r0, [r0, #6]
   33ec2:	f3c0 000e 	ubfx	r0, r0, #0, #15
   33ec6:	4402      	add	r2, r0
   33ec8:	8820      	ldrh	r0, [r4, #0]
   33eca:	2845      	cmp	r0, #69	; 0x45
   33ecc:	d200      	bcs.n	33ed0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
   33ece:	2045      	movs	r0, #69	; 0x45
   33ed0:	4288      	cmp	r0, r1
   33ed2:	d204      	bcs.n	33ede <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
   33ed4:	f44f 7182 	mov.w	r1, #260	; 0x104
   33ed8:	2014      	movs	r0, #20
   33eda:	f7f3 fdb9 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   33ede:	7ca0      	ldrb	r0, [r4, #18]
   33ee0:	2800      	cmp	r0, #0
   33ee2:	d003      	beq.n	33eec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
   33ee4:	8810      	ldrh	r0, [r2, #0]
   33ee6:	4288      	cmp	r0, r1
   33ee8:	d201      	bcs.n	33eee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
   33eea:	2000      	movs	r0, #0
   33eec:	bd10      	pop	{r4, pc}
   33eee:	8011      	strh	r1, [r2, #0]
   33ef0:	1da1      	adds	r1, r4, #6
   33ef2:	4620      	mov	r0, r4
   33ef4:	f7ff ff22 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   33ef8:	2000      	movs	r0, #0
   33efa:	74a0      	strb	r0, [r4, #18]
   33efc:	2001      	movs	r0, #1
   33efe:	bd10      	pop	{r4, pc}

00033f00 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
   33f00:	b510      	push	{r4, lr}
   33f02:	88c4      	ldrh	r4, [r0, #6]
   33f04:	8883      	ldrh	r3, [r0, #4]
   33f06:	4601      	mov	r1, r0
   33f08:	f100 0218 	add.w	r2, r0, #24
   33f0c:	f3c3 000e 	ubfx	r0, r3, #0, #15
   33f10:	4410      	add	r0, r2
   33f12:	42a3      	cmp	r3, r4
   33f14:	d002      	beq.n	33f1c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
   33f16:	8949      	ldrh	r1, [r1, #10]
   33f18:	2900      	cmp	r1, #0
   33f1a:	d000      	beq.n	33f1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
   33f1c:	2000      	movs	r0, #0
   33f1e:	bd10      	pop	{r4, pc}

00033f20 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
   33f20:	8803      	ldrh	r3, [r0, #0]
   33f22:	2b45      	cmp	r3, #69	; 0x45
   33f24:	d200      	bcs.n	33f28 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
   33f26:	2345      	movs	r3, #69	; 0x45
   33f28:	8013      	strh	r3, [r2, #0]
   33f2a:	88c2      	ldrh	r2, [r0, #6]
   33f2c:	f3c2 030e 	ubfx	r3, r2, #0, #15
   33f30:	f100 0218 	add.w	r2, r0, #24
   33f34:	441a      	add	r2, r3
   33f36:	600a      	str	r2, [r1, #0]
   33f38:	8980      	ldrh	r0, [r0, #12]
   33f3a:	4770      	bx	lr

00033f3c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
   33f3c:	7cc0      	ldrb	r0, [r0, #19]
   33f3e:	1d40      	adds	r0, r0, #5
   33f40:	4408      	add	r0, r1
   33f42:	1ec0      	subs	r0, r0, #3
   33f44:	6010      	str	r0, [r2, #0]
   33f46:	8808      	ldrh	r0, [r1, #0]
   33f48:	4770      	bx	lr

00033f4a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
   33f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f4e:	460e      	mov	r6, r1
   33f50:	88c1      	ldrh	r1, [r0, #6]
   33f52:	8902      	ldrh	r2, [r0, #8]
   33f54:	4604      	mov	r4, r0
   33f56:	f100 0818 	add.w	r8, r0, #24
   33f5a:	8800      	ldrh	r0, [r0, #0]
   33f5c:	f3c1 050e 	ubfx	r5, r1, #0, #15
   33f60:	f3c2 070e 	ubfx	r7, r2, #0, #15
   33f64:	2845      	cmp	r0, #69	; 0x45
   33f66:	d200      	bcs.n	33f6a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
   33f68:	2045      	movs	r0, #69	; 0x45
   33f6a:	42b0      	cmp	r0, r6
   33f6c:	d203      	bcs.n	33f76 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
   33f6e:	21c6      	movs	r1, #198	; 0xc6
   33f70:	2014      	movs	r0, #20
   33f72:	f7f3 fd6d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   33f76:	4610      	mov	r0, r2
   33f78:	f7ff ff01 	bl	33d7e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   33f7c:	b110      	cbz	r0, 33f84 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
   33f7e:	2000      	movs	r0, #0
   33f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33f84:	42af      	cmp	r7, r5
   33f86:	d908      	bls.n	33f9a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   33f88:	7ce1      	ldrb	r1, [r4, #19]
   33f8a:	1b78      	subs	r0, r7, r5
   33f8c:	1a40      	subs	r0, r0, r1
   33f8e:	1f40      	subs	r0, r0, #5
   33f90:	4286      	cmp	r6, r0
   33f92:	dd02      	ble.n	33f9a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
   33f94:	2000      	movs	r0, #0
   33f96:	74a0      	strb	r0, [r4, #18]
   33f98:	e7f1      	b.n	33f7e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
   33f9a:	eb08 0005 	add.w	r0, r8, r5
   33f9e:	2101      	movs	r1, #1
   33fa0:	8006      	strh	r6, [r0, #0]
   33fa2:	74a1      	strb	r1, [r4, #18]
   33fa4:	e7ec      	b.n	33f80 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

00033fa6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
   33fa6:	b538      	push	{r3, r4, r5, lr}
   33fa8:	88c4      	ldrh	r4, [r0, #6]
   33faa:	8881      	ldrh	r1, [r0, #4]
   33fac:	f100 0218 	add.w	r2, r0, #24
   33fb0:	f3c1 030e 	ubfx	r3, r1, #0, #15
   33fb4:	441a      	add	r2, r3
   33fb6:	42a1      	cmp	r1, r4
   33fb8:	d010      	beq.n	33fdc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   33fba:	8943      	ldrh	r3, [r0, #10]
   33fbc:	89c5      	ldrh	r5, [r0, #14]
   33fbe:	8812      	ldrh	r2, [r2, #0]
   33fc0:	442b      	add	r3, r5
   33fc2:	4293      	cmp	r3, r2
   33fc4:	d308      	bcc.n	33fd8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
   33fc6:	f8ad 1000 	strh.w	r1, [sp]
   33fca:	4669      	mov	r1, sp
   33fcc:	f7ff feb6 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   33fd0:	f8bd 0000 	ldrh.w	r0, [sp]
   33fd4:	42a0      	cmp	r0, r4
   33fd6:	d001      	beq.n	33fdc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
   33fd8:	2001      	movs	r0, #1
   33fda:	bd38      	pop	{r3, r4, r5, pc}
   33fdc:	2000      	movs	r0, #0
   33fde:	bd38      	pop	{r3, r4, r5, pc}

00033fe0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
   33fe0:	b570      	push	{r4, r5, r6, lr}
   33fe2:	88c6      	ldrh	r6, [r0, #6]
   33fe4:	8885      	ldrh	r5, [r0, #4]
   33fe6:	4603      	mov	r3, r0
   33fe8:	f100 0418 	add.w	r4, r0, #24
   33fec:	f3c5 000e 	ubfx	r0, r5, #0, #15
   33ff0:	4420      	add	r0, r4
   33ff2:	42b5      	cmp	r5, r6
   33ff4:	d102      	bne.n	33ffc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
   33ff6:	2000      	movs	r0, #0
   33ff8:	81d8      	strh	r0, [r3, #14]
   33ffa:	bd70      	pop	{r4, r5, r6, pc}
   33ffc:	8804      	ldrh	r4, [r0, #0]
   33ffe:	895d      	ldrh	r5, [r3, #10]
   34000:	7cde      	ldrb	r6, [r3, #19]
   34002:	1b64      	subs	r4, r4, r5
   34004:	4435      	add	r5, r6
   34006:	4428      	add	r0, r5
   34008:	880d      	ldrh	r5, [r1, #0]
   3400a:	b2a4      	uxth	r4, r4
   3400c:	1c80      	adds	r0, r0, #2
   3400e:	42a5      	cmp	r5, r4
   34010:	d900      	bls.n	34014 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
   34012:	800c      	strh	r4, [r1, #0]
   34014:	895c      	ldrh	r4, [r3, #10]
   34016:	b124      	cbz	r4, 34022 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
   34018:	2400      	movs	r4, #0
   3401a:	7014      	strb	r4, [r2, #0]
   3401c:	8809      	ldrh	r1, [r1, #0]
   3401e:	81d9      	strh	r1, [r3, #14]
   34020:	bd70      	pop	{r4, r5, r6, pc}
   34022:	2401      	movs	r4, #1
   34024:	e7f9      	b.n	3401a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

00034026 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
   34026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3402a:	461d      	mov	r5, r3
   3402c:	4616      	mov	r6, r2
   3402e:	9f06      	ldr	r7, [sp, #24]
   34030:	460b      	mov	r3, r1
   34032:	4604      	mov	r4, r0
   34034:	463a      	mov	r2, r7
   34036:	4629      	mov	r1, r5
   34038:	4630      	mov	r0, r6
   3403a:	f000 f839 	bl	340b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   3403e:	4283      	cmp	r3, r0
   34040:	d201      	bcs.n	34046 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
   34042:	219e      	movs	r1, #158	; 0x9e
   34044:	e012      	b.n	3406c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
   34046:	07a0      	lsls	r0, r4, #30
   34048:	d001      	beq.n	3404e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
   3404a:	219f      	movs	r1, #159	; 0x9f
   3404c:	e00e      	b.n	3406c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
   3404e:	2218      	movs	r2, #24
   34050:	2100      	movs	r1, #0
   34052:	4620      	mov	r0, r4
   34054:	f003 fb2d 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   34058:	19a8      	adds	r0, r5, r6
   3405a:	1d40      	adds	r0, r0, #5
   3405c:	4378      	muls	r0, r7
   3405e:	b280      	uxth	r0, r0
   34060:	74e5      	strb	r5, [r4, #19]
   34062:	8060      	strh	r0, [r4, #2]
   34064:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   34068:	d903      	bls.n	34072 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
   3406a:	21a4      	movs	r1, #164	; 0xa4
   3406c:	2014      	movs	r0, #20
   3406e:	f7f3 fcef 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34072:	8026      	strh	r6, [r4, #0]
   34074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034078 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
   34078:	b570      	push	{r4, r5, r6, lr}
   3407a:	460b      	mov	r3, r1
   3407c:	4604      	mov	r4, r0
   3407e:	f100 0118 	add.w	r1, r0, #24
   34082:	8902      	ldrh	r2, [r0, #8]
   34084:	8880      	ldrh	r0, [r0, #4]
   34086:	f3c2 050e 	ubfx	r5, r2, #0, #15
   3408a:	440d      	add	r5, r1
   3408c:	4282      	cmp	r2, r0
   3408e:	d101      	bne.n	34094 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
   34090:	2000      	movs	r0, #0
   34092:	bd70      	pop	{r4, r5, r6, pc}
   34094:	b123      	cbz	r3, 340a0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
   34096:	7ce2      	ldrb	r2, [r4, #19]
   34098:	1ca9      	adds	r1, r5, #2
   3409a:	4618      	mov	r0, r3
   3409c:	f003 fa8f 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   340a0:	882d      	ldrh	r5, [r5, #0]
   340a2:	f104 0108 	add.w	r1, r4, #8
   340a6:	4620      	mov	r0, r4
   340a8:	f7ff fe48 	bl	33d3c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
   340ac:	4628      	mov	r0, r5
   340ae:	bd70      	pop	{r4, r5, r6, pc}

000340b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
   340b0:	4401      	add	r1, r0
   340b2:	1d49      	adds	r1, r1, #5
   340b4:	4351      	muls	r1, r2
   340b6:	b28a      	uxth	r2, r1
   340b8:	2100      	movs	r1, #0
   340ba:	2845      	cmp	r0, #69	; 0x45
   340bc:	d202      	bcs.n	340c4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
   340be:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
   340c2:	b281      	uxth	r1, r0
   340c4:	3218      	adds	r2, #24
   340c6:	1850      	adds	r0, r2, r1
   340c8:	b280      	uxth	r0, r0
   340ca:	4770      	bx	lr

000340cc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
   340cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   340d0:	4688      	mov	r8, r1
   340d2:	88c1      	ldrh	r1, [r0, #6]
   340d4:	4604      	mov	r4, r0
   340d6:	8900      	ldrh	r0, [r0, #8]
   340d8:	f3c1 060e 	ubfx	r6, r1, #0, #15
   340dc:	f104 0518 	add.w	r5, r4, #24
   340e0:	f3c0 070e 	ubfx	r7, r0, #0, #15
   340e4:	eb05 0906 	add.w	r9, r5, r6
   340e8:	f7ff fe49 	bl	33d7e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
   340ec:	2200      	movs	r2, #0
   340ee:	b998      	cbnz	r0, 34118 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
   340f0:	8820      	ldrh	r0, [r4, #0]
   340f2:	2845      	cmp	r0, #69	; 0x45
   340f4:	d200      	bcs.n	340f8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
   340f6:	2045      	movs	r0, #69	; 0x45
   340f8:	42b7      	cmp	r7, r6
   340fa:	d906      	bls.n	3410a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   340fc:	7ce3      	ldrb	r3, [r4, #19]
   340fe:	1bb9      	subs	r1, r7, r6
   34100:	1ac9      	subs	r1, r1, r3
   34102:	1f49      	subs	r1, r1, #5
   34104:	4281      	cmp	r1, r0
   34106:	da00      	bge.n	3410a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
   34108:	4608      	mov	r0, r1
   3410a:	89a1      	ldrh	r1, [r4, #12]
   3410c:	b111      	cbz	r1, 34114 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
   3410e:	f8b9 3000 	ldrh.w	r3, [r9]
   34112:	1ac0      	subs	r0, r0, r3
   34114:	4540      	cmp	r0, r8
   34116:	da03      	bge.n	34120 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
   34118:	8222      	strh	r2, [r4, #16]
   3411a:	2000      	movs	r0, #0
   3411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34120:	7ce0      	ldrb	r0, [r4, #19]
   34122:	4429      	add	r1, r5
   34124:	1d40      	adds	r0, r0, #5
   34126:	4430      	add	r0, r6
   34128:	4408      	add	r0, r1
   3412a:	f8a4 8010 	strh.w	r8, [r4, #16]
   3412e:	1ec0      	subs	r0, r0, #3
   34130:	e7f4      	b.n	3411c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00034132 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
   34132:	b570      	push	{r4, r5, r6, lr}
   34134:	2300      	movs	r3, #0
   34136:	f1a1 0208 	sub.w	r2, r1, #8
   3413a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
   3413e:	42a2      	cmp	r2, r4
   34140:	d304      	bcc.n	3414c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
   34142:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   34146:	2015      	movs	r0, #21
   34148:	f7f3 fc82 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3414c:	6802      	ldr	r2, [r0, #0]
   3414e:	b90a      	cbnz	r2, 34154 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
   34150:	e01e      	b.n	34190 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   34152:	4610      	mov	r0, r2
   34154:	6802      	ldr	r2, [r0, #0]
   34156:	8893      	ldrh	r3, [r2, #4]
   34158:	428b      	cmp	r3, r1
   3415a:	d002      	beq.n	34162 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
   3415c:	6813      	ldr	r3, [r2, #0]
   3415e:	2b00      	cmp	r3, #0
   34160:	d1f7      	bne.n	34152 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
   34162:	8894      	ldrh	r4, [r2, #4]
   34164:	4613      	mov	r3, r2
   34166:	428c      	cmp	r4, r1
   34168:	d101      	bne.n	3416e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
   3416a:	6811      	ldr	r1, [r2, #0]
   3416c:	e00d      	b.n	3418a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
   3416e:	f101 0508 	add.w	r5, r1, #8
   34172:	b2ae      	uxth	r6, r5
   34174:	2500      	movs	r5, #0
   34176:	42b4      	cmp	r4, r6
   34178:	d309      	bcc.n	3418e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
   3417a:	1a64      	subs	r4, r4, r1
   3417c:	4411      	add	r1, r2
   3417e:	600d      	str	r5, [r1, #0]
   34180:	808c      	strh	r4, [r1, #4]
   34182:	6802      	ldr	r2, [r0, #0]
   34184:	6812      	ldr	r2, [r2, #0]
   34186:	6002      	str	r2, [r0, #0]
   34188:	600a      	str	r2, [r1, #0]
   3418a:	6001      	str	r1, [r0, #0]
   3418c:	e000      	b.n	34190 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
   3418e:	2300      	movs	r3, #0
   34190:	4618      	mov	r0, r3
   34192:	bd70      	pop	{r4, r5, r6, pc}

00034194 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
   34194:	b510      	push	{r4, lr}
   34196:	000c      	movs	r4, r1
   34198:	d004      	beq.n	341a4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
   3419a:	2c08      	cmp	r4, #8
   3419c:	d207      	bcs.n	341ae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
   3419e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
   341a2:	e00a      	b.n	341ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
   341a4:	b108      	cbz	r0, 341aa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
   341a6:	2100      	movs	r1, #0
   341a8:	6001      	str	r1, [r0, #0]
   341aa:	2000      	movs	r0, #0
   341ac:	bd10      	pop	{r4, pc}
   341ae:	b158      	cbz	r0, 341c8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
   341b0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   341b4:	d304      	bcc.n	341c0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
   341b6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   341ba:	2015      	movs	r0, #21
   341bc:	f7f3 fc48 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   341c0:	b2a1      	uxth	r1, r4
   341c2:	6800      	ldr	r0, [r0, #0]
   341c4:	f000 f814 	bl	341f0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
   341c8:	1d20      	adds	r0, r4, #4
   341ca:	bd10      	pop	{r4, pc}

000341cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
   341cc:	2100      	movs	r1, #0
   341ce:	6802      	ldr	r2, [r0, #0]
   341d0:	e003      	b.n	341da <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
   341d2:	8893      	ldrh	r3, [r2, #4]
   341d4:	6812      	ldr	r2, [r2, #0]
   341d6:	4419      	add	r1, r3
   341d8:	b289      	uxth	r1, r1
   341da:	2a00      	cmp	r2, #0
   341dc:	d1f9      	bne.n	341d2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
   341de:	f000 b807 	b.w	341f0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

000341e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
   341e2:	2300      	movs	r3, #0
   341e4:	600b      	str	r3, [r1, #0]
   341e6:	808a      	strh	r2, [r1, #4]
   341e8:	6802      	ldr	r2, [r0, #0]
   341ea:	600a      	str	r2, [r1, #0]
   341ec:	6001      	str	r1, [r0, #0]
   341ee:	4770      	bx	lr
   341f0:	2300      	movs	r3, #0
   341f2:	6043      	str	r3, [r0, #4]
   341f4:	1d02      	adds	r2, r0, #4
   341f6:	8101      	strh	r1, [r0, #8]
   341f8:	6002      	str	r2, [r0, #0]
   341fa:	4770      	bx	lr
   341fc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   34200:	8159      	strh	r1, [r3, #10]
   34202:	4611      	mov	r1, r2
   34204:	f000 b814 	b.w	34230 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
   34208:	b170      	cbz	r0, 34228 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
   3420a:	7882      	ldrb	r2, [r0, #2]
   3420c:	fbb1 f3f2 	udiv	r3, r1, r2
   34210:	fb02 1213 	mls	r2, r2, r3, r1
   34214:	b2d2      	uxtb	r2, r2
   34216:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   3421a:	895b      	ldrh	r3, [r3, #10]
   3421c:	428b      	cmp	r3, r1
   3421e:	d101      	bne.n	34224 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
   34220:	4610      	mov	r0, r2
   34222:	4770      	bx	lr
   34224:	78c3      	ldrb	r3, [r0, #3]
   34226:	b10b      	cbz	r3, 3422c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
   34228:	20ff      	movs	r0, #255	; 0xff
   3422a:	4770      	bx	lr
   3422c:	f7f3 bef2 	b.w	28014 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
   34230:	8802      	ldrh	r2, [r0, #0]
   34232:	fb01 0102 	mla	r1, r1, r2, r0
   34236:	7880      	ldrb	r0, [r0, #2]
   34238:	220a      	movs	r2, #10
   3423a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   3423e:	4408      	add	r0, r1
   34240:	4770      	bx	lr

00034242 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
   34242:	b51c      	push	{r2, r3, r4, lr}
   34244:	4604      	mov	r4, r0
   34246:	2000      	movs	r0, #0
   34248:	9001      	str	r0, [sp, #4]
   3424a:	9000      	str	r0, [sp, #0]
   3424c:	f88d 4006 	strb.w	r4, [sp, #6]
   34250:	e00a      	b.n	34268 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   34252:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   34256:	4621      	mov	r1, r4
   34258:	f7f3 ffca 	bl	281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   3425c:	b120      	cbz	r0, 34268 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
   3425e:	f240 217e 	movw	r1, #638	; 0x27e
   34262:	2017      	movs	r0, #23
   34264:	f7f3 fbf4 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34268:	4668      	mov	r0, sp
   3426a:	f7f3 ff71 	bl	28150 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   3426e:	2800      	cmp	r0, #0
   34270:	d0ef      	beq.n	34252 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
   34272:	bd1c      	pop	{r2, r3, r4, pc}

00034274 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
   34274:	b570      	push	{r4, r5, r6, lr}
   34276:	460e      	mov	r6, r1
   34278:	461d      	mov	r5, r3
   3427a:	4611      	mov	r1, r2
   3427c:	f000 f813 	bl	342a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
   34280:	4604      	mov	r4, r0
   34282:	4629      	mov	r1, r5
   34284:	4630      	mov	r0, r6
   34286:	f000 f804 	bl	34292 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
   3428a:	4420      	add	r0, r4
   3428c:	1d00      	adds	r0, r0, #4
   3428e:	b280      	uxth	r0, r0
   34290:	bd70      	pop	{r4, r5, r6, pc}
   34292:	b510      	push	{r4, lr}
   34294:	460a      	mov	r2, r1
   34296:	2109      	movs	r1, #9
   34298:	f7ff ff0a 	bl	340b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   3429c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   342a0:	1cc0      	adds	r0, r0, #3
   342a2:	4008      	ands	r0, r1
   342a4:	bd10      	pop	{r4, pc}
   342a6:	b510      	push	{r4, lr}
   342a8:	460a      	mov	r2, r1
   342aa:	210a      	movs	r1, #10
   342ac:	f7ff ff00 	bl	340b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
   342b0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   342b4:	1cc0      	adds	r0, r0, #3
   342b6:	4008      	ands	r0, r1
   342b8:	bd10      	pop	{r4, pc}
   342ba:	b109      	cbz	r1, 342c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
   342bc:	2100      	movs	r1, #0
   342be:	e000      	b.n	342c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
   342c0:	2102      	movs	r1, #2
   342c2:	1843      	adds	r3, r0, r1
   342c4:	7d1a      	ldrb	r2, [r3, #20]
   342c6:	2a02      	cmp	r2, #2
   342c8:	d008      	beq.n	342dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
   342ca:	7d5b      	ldrb	r3, [r3, #21]
   342cc:	2b02      	cmp	r3, #2
   342ce:	d009      	beq.n	342e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
   342d0:	2a03      	cmp	r2, #3
   342d2:	d003      	beq.n	342dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
   342d4:	2b03      	cmp	r3, #3
   342d6:	d005      	beq.n	342e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
   342d8:	2000      	movs	r0, #0
   342da:	4770      	bx	lr
   342dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   342e0:	8b00      	ldrh	r0, [r0, #24]
   342e2:	4770      	bx	lr
   342e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   342e8:	8b40      	ldrh	r0, [r0, #26]
   342ea:	4770      	bx	lr
   342ec:	b109      	cbz	r1, 342f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
   342ee:	2100      	movs	r1, #0
   342f0:	e000      	b.n	342f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
   342f2:	2102      	movs	r1, #2
   342f4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   342f8:	8b01      	ldrh	r1, [r0, #24]
   342fa:	b911      	cbnz	r1, 34302 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
   342fc:	8b40      	ldrh	r0, [r0, #26]
   342fe:	2800      	cmp	r0, #0
   34300:	d000      	beq.n	34304 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
   34302:	2001      	movs	r0, #1
   34304:	4770      	bx	lr
   34306:	b538      	push	{r3, r4, r5, lr}
   34308:	7883      	ldrb	r3, [r0, #2]
   3430a:	f88d 3000 	strb.w	r3, [sp]
   3430e:	9b00      	ldr	r3, [sp, #0]
   34310:	9300      	str	r3, [sp, #0]
   34312:	f89d 3000 	ldrb.w	r3, [sp]
   34316:	b95b      	cbnz	r3, 34330 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
   34318:	2400      	movs	r4, #0
   3431a:	b10a      	cbz	r2, 34320 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
   3431c:	2300      	movs	r3, #0
   3431e:	e000      	b.n	34322 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
   34320:	2302      	movs	r3, #2
   34322:	18c2      	adds	r2, r0, r3
   34324:	7d15      	ldrb	r5, [r2, #20]
   34326:	2d02      	cmp	r5, #2
   34328:	d004      	beq.n	34334 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
   3432a:	7d52      	ldrb	r2, [r2, #21]
   3432c:	2a02      	cmp	r2, #2
   3432e:	d004      	beq.n	3433a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
   34330:	2000      	movs	r0, #0
   34332:	bd38      	pop	{r3, r4, r5, pc}
   34334:	461a      	mov	r2, r3
   34336:	1c5b      	adds	r3, r3, #1
   34338:	e000      	b.n	3433c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
   3433a:	1c5a      	adds	r2, r3, #1
   3433c:	b179      	cbz	r1, 3435e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
   3433e:	18c5      	adds	r5, r0, r3
   34340:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   34344:	752c      	strb	r4, [r5, #20]
   34346:	831c      	strh	r4, [r3, #24]
   34348:	2303      	movs	r3, #3
   3434a:	1884      	adds	r4, r0, r2
   3434c:	7523      	strb	r3, [r4, #20]
   3434e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   34352:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   34356:	685b      	ldr	r3, [r3, #4]
   34358:	600b      	str	r3, [r1, #0]
   3435a:	8b00      	ldrh	r0, [r0, #24]
   3435c:	8088      	strh	r0, [r1, #4]
   3435e:	2001      	movs	r0, #1
   34360:	bd38      	pop	{r3, r4, r5, pc}
   34362:	b510      	push	{r4, lr}
   34364:	b109      	cbz	r1, 3436a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
   34366:	2100      	movs	r1, #0
   34368:	e000      	b.n	3436c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
   3436a:	2102      	movs	r1, #2
   3436c:	1843      	adds	r3, r0, r1
   3436e:	7d1c      	ldrb	r4, [r3, #20]
   34370:	4294      	cmp	r4, r2
   34372:	d103      	bne.n	3437c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
   34374:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   34378:	8b00      	ldrh	r0, [r0, #24]
   3437a:	bd10      	pop	{r4, pc}
   3437c:	7d5b      	ldrb	r3, [r3, #21]
   3437e:	4293      	cmp	r3, r2
   34380:	d103      	bne.n	3438a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
   34382:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   34386:	8b40      	ldrh	r0, [r0, #26]
   34388:	bd10      	pop	{r4, pc}
   3438a:	2000      	movs	r0, #0
   3438c:	bd10      	pop	{r4, pc}
   3438e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
   34392:	d201      	bcs.n	34398 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
   34394:	0841      	lsrs	r1, r0, #1
   34396:	e000      	b.n	3439a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
   34398:	21ff      	movs	r1, #255	; 0xff
   3439a:	1a40      	subs	r0, r0, r1
   3439c:	f240 6172 	movw	r1, #1650	; 0x672
   343a0:	4288      	cmp	r0, r1
   343a2:	db00      	blt.n	343a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
   343a4:	4608      	mov	r0, r1
   343a6:	b280      	uxth	r0, r0
   343a8:	4770      	bx	lr

000343aa <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
   343aa:	2101      	movs	r1, #1
   343ac:	f7ff bf85 	b.w	342ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

000343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
   343b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   343b4:	4606      	mov	r6, r0
   343b6:	f342 0780 	sbfx	r7, r2, #2, #1
   343ba:	7848      	ldrb	r0, [r1, #1]
   343bc:	460c      	mov	r4, r1
   343be:	f022 0504 	bic.w	r5, r2, #4
   343c2:	1c7f      	adds	r7, r7, #1
   343c4:	b100      	cbz	r0, 343c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
   343c6:	b90d      	cbnz	r5, 343cc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
   343c8:	4328      	orrs	r0, r5
   343ca:	d104      	bne.n	343d6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
   343cc:	b145      	cbz	r5, 343e0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
   343ce:	2100      	movs	r1, #0
   343d0:	4620      	mov	r0, r4
   343d2:	f7f4 f82d 	bl	28430 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
   343d6:	20ff      	movs	r0, #255	; 0xff
   343d8:	70a0      	strb	r0, [r4, #2]
   343da:	b11f      	cbz	r7, 343e4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
   343dc:	2000      	movs	r0, #0
   343de:	e002      	b.n	343e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
   343e0:	2101      	movs	r1, #1
   343e2:	e7f5      	b.n	343d0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
   343e4:	2002      	movs	r0, #2
   343e6:	1821      	adds	r1, r4, r0
   343e8:	7d09      	ldrb	r1, [r1, #20]
   343ea:	2903      	cmp	r1, #3
   343ec:	d102      	bne.n	343f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   343ee:	2d02      	cmp	r5, #2
   343f0:	d000      	beq.n	343f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
   343f2:	1c40      	adds	r0, r0, #1
   343f4:	1822      	adds	r2, r4, r0
   343f6:	2101      	movs	r1, #1
   343f8:	7511      	strb	r1, [r2, #20]
   343fa:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   343fe:	2200      	movs	r2, #0
   34400:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   34404:	830a      	strh	r2, [r1, #24]
   34406:	6840      	ldr	r0, [r0, #4]
   34408:	70a2      	strb	r2, [r4, #2]
   3440a:	4631      	mov	r1, r6
   3440c:	f362 010f 	bfi	r1, r2, #0, #16
   34410:	e9c6 0100 	strd	r0, r1, [r6]
   34414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034418 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
   34418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3441c:	461e      	mov	r6, r3
   3441e:	4613      	mov	r3, r2
   34420:	4604      	mov	r4, r0
   34422:	b109      	cbz	r1, 34428 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
   34424:	2000      	movs	r0, #0
   34426:	e000      	b.n	3442a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
   34428:	2002      	movs	r0, #2
   3442a:	21ff      	movs	r1, #255	; 0xff
   3442c:	70a1      	strb	r1, [r4, #2]
   3442e:	1821      	adds	r1, r4, r0
   34430:	7d0a      	ldrb	r2, [r1, #20]
   34432:	2a01      	cmp	r2, #1
   34434:	d003      	beq.n	3443e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
   34436:	7d49      	ldrb	r1, [r1, #21]
   34438:	2901      	cmp	r1, #1
   3443a:	d10c      	bne.n	34456 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
   3443c:	1c40      	adds	r0, r0, #1
   3443e:	eb04 0540 	add.w	r5, r4, r0, lsl #1
   34442:	2700      	movs	r7, #0
   34444:	8b29      	ldrh	r1, [r5, #24]
   34446:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   3444a:	198a      	adds	r2, r1, r6
   3444c:	4562      	cmp	r2, ip
   3444e:	d905      	bls.n	3445c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
   34450:	4420      	add	r0, r4
   34452:	832f      	strh	r7, [r5, #24]
   34454:	7507      	strb	r7, [r0, #20]
   34456:	2000      	movs	r0, #0
   34458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3445c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   34460:	4632      	mov	r2, r6
   34462:	6840      	ldr	r0, [r0, #4]
   34464:	4408      	add	r0, r1
   34466:	4619      	mov	r1, r3
   34468:	f003 f8a9 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   3446c:	8b28      	ldrh	r0, [r5, #24]
   3446e:	4430      	add	r0, r6
   34470:	8328      	strh	r0, [r5, #24]
   34472:	70a7      	strb	r7, [r4, #2]
   34474:	2001      	movs	r0, #1
   34476:	e7ef      	b.n	34458 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

00034478 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
   34478:	b510      	push	{r4, lr}
   3447a:	2101      	movs	r1, #1
   3447c:	f7ff ff36 	bl	342ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
   34480:	2800      	cmp	r0, #0
   34482:	d000      	beq.n	34486 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
   34484:	2001      	movs	r0, #1
   34486:	bd10      	pop	{r4, pc}

00034488 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
   34488:	2201      	movs	r2, #1
   3448a:	f7ff bf3c 	b.w	34306 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0003448e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
   3448e:	2200      	movs	r2, #0
   34490:	f7ff bf39 	b.w	34306 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

00034494 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
   34494:	b510      	push	{r4, lr}
   34496:	2100      	movs	r1, #0
   34498:	f7ff ff28 	bl	342ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
   3449c:	2800      	cmp	r0, #0
   3449e:	d000      	beq.n	344a2 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
   344a0:	2001      	movs	r0, #1
   344a2:	bd10      	pop	{r4, pc}

000344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
   344a4:	b570      	push	{r4, r5, r6, lr}
   344a6:	b109      	cbz	r1, 344ac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
   344a8:	2300      	movs	r3, #0
   344aa:	e000      	b.n	344ae <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
   344ac:	2302      	movs	r3, #2
   344ae:	21ff      	movs	r1, #255	; 0xff
   344b0:	7081      	strb	r1, [r0, #2]
   344b2:	18c1      	adds	r1, r0, r3
   344b4:	2402      	movs	r4, #2
   344b6:	7d0d      	ldrb	r5, [r1, #20]
   344b8:	2d01      	cmp	r5, #1
   344ba:	d007      	beq.n	344cc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
   344bc:	7d4d      	ldrb	r5, [r1, #21]
   344be:	2d01      	cmp	r5, #1
   344c0:	d009      	beq.n	344d6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
   344c2:	f44f 718b 	mov.w	r1, #278	; 0x116
   344c6:	2009      	movs	r0, #9
   344c8:	f7f3 fac2 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   344cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   344d0:	831a      	strh	r2, [r3, #24]
   344d2:	750c      	strb	r4, [r1, #20]
   344d4:	e003      	b.n	344de <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
   344d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   344da:	835a      	strh	r2, [r3, #26]
   344dc:	754c      	strb	r4, [r1, #21]
   344de:	2100      	movs	r1, #0
   344e0:	7081      	strb	r1, [r0, #2]
   344e2:	bd70      	pop	{r4, r5, r6, pc}

000344e4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
   344e4:	2101      	movs	r1, #1
   344e6:	7001      	strb	r1, [r0, #0]
   344e8:	4770      	bx	lr

000344ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
   344ea:	2201      	movs	r2, #1
   344ec:	4611      	mov	r1, r2
   344ee:	f7ff bf38 	b.w	34362 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

000344f2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
   344f2:	2201      	movs	r2, #1
   344f4:	2100      	movs	r1, #0
   344f6:	f7ff bf34 	b.w	34362 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

000344fa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
   344fa:	2100      	movs	r1, #0
   344fc:	f7ff bedd 	b.w	342ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
   34500:	2800      	cmp	r0, #0
   34502:	db09      	blt.n	34518 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
   34504:	f000 021f 	and.w	r2, r0, #31
   34508:	2101      	movs	r1, #1
   3450a:	4091      	lsls	r1, r2
   3450c:	0940      	lsrs	r0, r0, #5
   3450e:	0080      	lsls	r0, r0, #2
   34510:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   34514:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   34518:	4770      	bx	lr
   3451a:	2800      	cmp	r0, #0
   3451c:	db0d      	blt.n	3453a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
   3451e:	f000 021f 	and.w	r2, r0, #31
   34522:	2101      	movs	r1, #1
   34524:	4091      	lsls	r1, r2
   34526:	0940      	lsrs	r0, r0, #5
   34528:	0080      	lsls	r0, r0, #2
   3452a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   3452e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   34532:	f3bf 8f4f 	dsb	sy
   34536:	f3bf 8f6f 	isb	sy
   3453a:	4770      	bx	lr
   3453c:	b510      	push	{r4, lr}
   3453e:	200e      	movs	r0, #14
   34540:	f7ff ffeb 	bl	3451a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   34544:	200e      	movs	r0, #14
   34546:	f7ff ffdb 	bl	34500 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   3454a:	200f      	movs	r0, #15
   3454c:	f7ff ffe5 	bl	3451a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
   34550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34554:	200f      	movs	r0, #15
   34556:	f7ff bfd3 	b.w	34500 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
   3455a:	2800      	cmp	r0, #0
   3455c:	db09      	blt.n	34572 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
   3455e:	f000 021f 	and.w	r2, r0, #31
   34562:	2101      	movs	r1, #1
   34564:	4091      	lsls	r1, r2
   34566:	0940      	lsrs	r0, r0, #5
   34568:	0080      	lsls	r0, r0, #2
   3456a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   3456e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   34572:	4770      	bx	lr
   34574:	5840      	ldr	r0, [r0, r1]
   34576:	2800      	cmp	r0, #0
   34578:	d000      	beq.n	3457c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
   3457a:	2001      	movs	r0, #1
   3457c:	4770      	bx	lr

0003457e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
   3457e:	b510      	push	{r4, lr}
   34580:	4604      	mov	r4, r0
   34582:	4620      	mov	r0, r4
   34584:	f7f4 f85c 	bl	28640 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
   34588:	2811      	cmp	r0, #17
   3458a:	d0fa      	beq.n	34582 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
   3458c:	bd10      	pop	{r4, pc}

0003458e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
   3458e:	b510      	push	{r4, lr}
   34590:	f7ff fff5 	bl	3457e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
   34594:	2800      	cmp	r0, #0
   34596:	d003      	beq.n	345a0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
   34598:	21a9      	movs	r1, #169	; 0xa9
   3459a:	201d      	movs	r0, #29
   3459c:	f7f3 fa58 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   345a0:	bd10      	pop	{r4, pc}

000345a2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
   345a2:	f7f4 b9ab 	b.w	288fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

000345a6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
   345a6:	f7f4 b999 	b.w	288dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

000345aa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
   345aa:	b510      	push	{r4, lr}
   345ac:	4050      	eors	r0, r2
   345ae:	780a      	ldrb	r2, [r1, #0]
   345b0:	781c      	ldrb	r4, [r3, #0]
   345b2:	4062      	eors	r2, r4
   345b4:	4410      	add	r0, r2
   345b6:	784a      	ldrb	r2, [r1, #1]
   345b8:	785c      	ldrb	r4, [r3, #1]
   345ba:	4062      	eors	r2, r4
   345bc:	4410      	add	r0, r2
   345be:	788a      	ldrb	r2, [r1, #2]
   345c0:	789c      	ldrb	r4, [r3, #2]
   345c2:	4062      	eors	r2, r4
   345c4:	4410      	add	r0, r2
   345c6:	78ca      	ldrb	r2, [r1, #3]
   345c8:	78dc      	ldrb	r4, [r3, #3]
   345ca:	4062      	eors	r2, r4
   345cc:	4410      	add	r0, r2
   345ce:	790a      	ldrb	r2, [r1, #4]
   345d0:	791c      	ldrb	r4, [r3, #4]
   345d2:	7949      	ldrb	r1, [r1, #5]
   345d4:	4062      	eors	r2, r4
   345d6:	4410      	add	r0, r2
   345d8:	795a      	ldrb	r2, [r3, #5]
   345da:	4051      	eors	r1, r2
   345dc:	42c1      	cmn	r1, r0
   345de:	d101      	bne.n	345e4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
   345e0:	2001      	movs	r0, #1
   345e2:	bd10      	pop	{r4, pc}
   345e4:	2000      	movs	r0, #0
   345e6:	bd10      	pop	{r4, pc}

000345e8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
   345e8:	b510      	push	{r4, lr}
   345ea:	2900      	cmp	r1, #0
   345ec:	4604      	mov	r4, r0
   345ee:	f04f 0106 	mov.w	r1, #6
   345f2:	d002      	beq.n	345fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
   345f4:	f7f3 face 	bl	27b94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   345f8:	e001      	b.n	345fe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
   345fa:	f7f3 fad9 	bl	27bb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   345fe:	7960      	ldrb	r0, [r4, #5]
   34600:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   34604:	7160      	strb	r0, [r4, #5]
   34606:	bd10      	pop	{r4, pc}

00034608 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
   34608:	4770      	bx	lr

0003460a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
   3460a:	b530      	push	{r4, r5, lr}
   3460c:	460c      	mov	r4, r1
   3460e:	4605      	mov	r5, r0
   34610:	b08d      	sub	sp, #52	; 0x34
   34612:	f04f 0103 	mov.w	r1, #3
   34616:	f104 0003 	add.w	r0, r4, #3
   3461a:	b112      	cbz	r2, 34622 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
   3461c:	f7f3 faba 	bl	27b94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   34620:	e001      	b.n	34626 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
   34622:	f7f3 fac5 	bl	27bb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   34626:	7960      	ldrb	r0, [r4, #5]
   34628:	220d      	movs	r2, #13
   3462a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3462e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   34632:	7160      	strb	r0, [r4, #5]
   34634:	2100      	movs	r1, #0
   34636:	a804      	add	r0, sp, #16
   34638:	f003 f83b 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   3463c:	78e0      	ldrb	r0, [r4, #3]
   3463e:	f88d 001f 	strb.w	r0, [sp, #31]
   34642:	7920      	ldrb	r0, [r4, #4]
   34644:	f88d 001e 	strb.w	r0, [sp, #30]
   34648:	7960      	ldrb	r0, [r4, #5]
   3464a:	f88d 001d 	strb.w	r0, [sp, #29]
   3464e:	2210      	movs	r2, #16
   34650:	4629      	mov	r1, r5
   34652:	4668      	mov	r0, sp
   34654:	f002 ffb3 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   34658:	4668      	mov	r0, sp
   3465a:	f7ff ff98 	bl	3458e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   3465e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   34662:	7020      	strb	r0, [r4, #0]
   34664:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   34668:	7060      	strb	r0, [r4, #1]
   3466a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   3466e:	70a0      	strb	r0, [r4, #2]
   34670:	b00d      	add	sp, #52	; 0x34
   34672:	bd30      	pop	{r4, r5, pc}

00034674 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
   34674:	f7f4 bcac 	b.w	28fd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
   34678:	07c1      	lsls	r1, r0, #31
   3467a:	d001      	beq.n	34680 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
   3467c:	2001      	movs	r0, #1
   3467e:	4770      	bx	lr
   34680:	0780      	lsls	r0, r0, #30
   34682:	d501      	bpl.n	34688 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
   34684:	2002      	movs	r0, #2
   34686:	4770      	bx	lr
   34688:	2000      	movs	r0, #0
   3468a:	4770      	bx	lr
   3468c:	b510      	push	{r4, lr}
   3468e:	2801      	cmp	r0, #1
   34690:	d008      	beq.n	346a4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
   34692:	2802      	cmp	r0, #2
   34694:	d004      	beq.n	346a0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
   34696:	f240 4121 	movw	r1, #1057	; 0x421
   3469a:	2006      	movs	r0, #6
   3469c:	f7f3 f9d8 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   346a0:	2001      	movs	r0, #1
   346a2:	bd10      	pop	{r4, pc}
   346a4:	2000      	movs	r0, #0
   346a6:	bd10      	pop	{r4, pc}
   346a8:	2900      	cmp	r1, #0
   346aa:	d004      	beq.n	346b6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
   346ac:	2801      	cmp	r0, #1
   346ae:	d003      	beq.n	346b8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
   346b0:	2901      	cmp	r1, #1
   346b2:	d001      	beq.n	346b8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
   346b4:	2002      	movs	r0, #2
   346b6:	4770      	bx	lr
   346b8:	2001      	movs	r0, #1
   346ba:	4770      	bx	lr
   346bc:	f7ff bc90 	b.w	33fe0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

000346c0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
   346c0:	2101      	movs	r1, #1
   346c2:	f7f4 beff 	b.w	294c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

000346c6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
   346c6:	b510      	push	{r4, lr}
   346c8:	f002 fd4c 	bl	37164 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
   346cc:	b118      	cbz	r0, 346d6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
   346ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   346d2:	f7f9 bee5 	b.w	2e4a0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
   346d6:	20ff      	movs	r0, #255	; 0xff
   346d8:	bd10      	pop	{r4, pc}

000346da <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
   346da:	b510      	push	{r4, lr}
   346dc:	f7f4 ff1e 	bl	2951c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
   346e0:	2808      	cmp	r0, #8
   346e2:	d003      	beq.n	346ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
   346e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   346e8:	f7f4 bf04 	b.w	294f4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
   346ec:	bd10      	pop	{r4, pc}

000346ee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
   346ee:	b570      	push	{r4, r5, r6, lr}
   346f0:	460e      	mov	r6, r1
   346f2:	b08c      	sub	sp, #48	; 0x30
   346f4:	4614      	mov	r4, r2
   346f6:	4601      	mov	r1, r0
   346f8:	461d      	mov	r5, r3
   346fa:	2210      	movs	r2, #16
   346fc:	4668      	mov	r0, sp
   346fe:	f000 f929 	bl	34954 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   34702:	2210      	movs	r2, #16
   34704:	4631      	mov	r1, r6
   34706:	a804      	add	r0, sp, #16
   34708:	f000 f924 	bl	34954 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   3470c:	4668      	mov	r0, sp
   3470e:	f7ff ff3e 	bl	3458e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
   34712:	a908      	add	r1, sp, #32
   34714:	f04f 0210 	mov.w	r2, #16
   34718:	4628      	mov	r0, r5
   3471a:	b11c      	cbz	r4, 34724 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
   3471c:	f000 f91a 	bl	34954 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
   34720:	b00c      	add	sp, #48	; 0x30
   34722:	bd70      	pop	{r4, r5, r6, pc}
   34724:	f002 ff4b 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   34728:	e7fa      	b.n	34720 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0003472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
   3472a:	b510      	push	{r4, lr}
   3472c:	460c      	mov	r4, r1
   3472e:	2100      	movs	r1, #0
   34730:	f7f3 fcbc 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   34734:	6060      	str	r0, [r4, #4]
   34736:	b118      	cbz	r0, 34740 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
   34738:	2001      	movs	r0, #1
   3473a:	7020      	strb	r0, [r4, #0]
   3473c:	2000      	movs	r0, #0
   3473e:	bd10      	pop	{r4, pc}
   34740:	2002      	movs	r0, #2
   34742:	bd10      	pop	{r4, pc}

00034744 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
   34744:	f240 41e2 	movw	r1, #1250	; 0x4e2
   34748:	4348      	muls	r0, r1
   3474a:	4770      	bx	lr

0003474c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
   3474c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   34750:	fbb0 f0f1 	udiv	r0, r0, r1
   34754:	b280      	uxth	r0, r0
   34756:	4770      	bx	lr

00034758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
   34758:	b510      	push	{r4, lr}
   3475a:	f1a2 0310 	sub.w	r3, r2, #16
   3475e:	290d      	cmp	r1, #13
   34760:	d24d      	bcs.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   34762:	e8df f001 	tbb	[pc, r1]
   34766:	0907      	.short	0x0907
   34768:	1d1a150e 	.word	0x1d1a150e
   3476c:	4e2c2921 	.word	0x4e2c2921
   34770:	0048362f 	.word	0x0048362f
   34774:	b3f2      	cbz	r2, 347f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
   34776:	e042      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   34778:	2a06      	cmp	r2, #6
   3477a:	d03e      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   3477c:	2a07      	cmp	r2, #7
   3477e:	d03c      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   34780:	e03d      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   34782:	2a0b      	cmp	r2, #11
   34784:	d039      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   34786:	2a0c      	cmp	r2, #12
   34788:	d037      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   3478a:	2a0a      	cmp	r2, #10
   3478c:	d035      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   3478e:	e036      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   34790:	2a0d      	cmp	r2, #13
   34792:	d032      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   34794:	2a0e      	cmp	r2, #14
   34796:	d030      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   34798:	e031      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   3479a:	2b0c      	cmp	r3, #12
   3479c:	d92d      	bls.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   3479e:	e02e      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347a0:	3a11      	subs	r2, #17
   347a2:	2a0b      	cmp	r2, #11
   347a4:	d929      	bls.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347a6:	e02a      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347a8:	2b03      	cmp	r3, #3
   347aa:	d926      	bls.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347ac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
   347b0:	b1f8      	cbz	r0, 347f2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
   347b2:	2a1c      	cmp	r2, #28
   347b4:	d921      	bls.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347b6:	e022      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347b8:	2a04      	cmp	r2, #4
   347ba:	d01e      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347bc:	e01f      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347be:	2a01      	cmp	r2, #1
   347c0:	d01b      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347c2:	e01c      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347c4:	2a1d      	cmp	r2, #29
   347c6:	d018      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347c8:	2a1e      	cmp	r2, #30
   347ca:	d016      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347cc:	2a1f      	cmp	r2, #31
   347ce:	d014      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347d0:	e015      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347d2:	2a20      	cmp	r2, #32
   347d4:	d011      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347d6:	2a21      	cmp	r2, #33	; 0x21
   347d8:	d00f      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347da:	2a22      	cmp	r2, #34	; 0x22
   347dc:	d00d      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347de:	2a23      	cmp	r2, #35	; 0x23
   347e0:	d00b      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347e2:	2a24      	cmp	r2, #36	; 0x24
   347e4:	d009      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347e6:	2a25      	cmp	r2, #37	; 0x25
   347e8:	d007      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347ea:	2a26      	cmp	r2, #38	; 0x26
   347ec:	d005      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347ee:	2a2e      	cmp	r2, #46	; 0x2e
   347f0:	d003      	beq.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347f2:	e004      	b.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347f4:	e001      	b.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
   347f6:	2a28      	cmp	r2, #40	; 0x28
   347f8:	d101      	bne.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   347fa:	2001      	movs	r0, #1
   347fc:	bd10      	pop	{r4, pc}
   347fe:	2000      	movs	r0, #0
   34800:	bd10      	pop	{r4, pc}
   34802:	2a0f      	cmp	r2, #15
   34804:	d1fb      	bne.n	347fe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
   34806:	e7f8      	b.n	347fa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

00034808 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
   34808:	280b      	cmp	r0, #11
   3480a:	d019      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   3480c:	280c      	cmp	r0, #12
   3480e:	d017      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34810:	280a      	cmp	r0, #10
   34812:	d015      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34814:	280d      	cmp	r0, #13
   34816:	d013      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34818:	280e      	cmp	r0, #14
   3481a:	d011      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   3481c:	2820      	cmp	r0, #32
   3481e:	d00f      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34820:	2821      	cmp	r0, #33	; 0x21
   34822:	d00d      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34824:	2822      	cmp	r0, #34	; 0x22
   34826:	d00b      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34828:	2823      	cmp	r0, #35	; 0x23
   3482a:	d009      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   3482c:	2824      	cmp	r0, #36	; 0x24
   3482e:	d007      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34830:	2825      	cmp	r0, #37	; 0x25
   34832:	d005      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34834:	2826      	cmp	r0, #38	; 0x26
   34836:	d003      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   34838:	282e      	cmp	r0, #46	; 0x2e
   3483a:	d001      	beq.n	34840 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
   3483c:	2000      	movs	r0, #0
   3483e:	4770      	bx	lr
   34840:	2001      	movs	r0, #1
   34842:	4770      	bx	lr

00034844 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
   34844:	f011 0f0c 	tst.w	r1, #12
   34848:	d018      	beq.n	3487c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
   3484a:	074a      	lsls	r2, r1, #29
   3484c:	f44f 7116 	mov.w	r1, #600	; 0x258
   34850:	2a00      	cmp	r2, #0
   34852:	da02      	bge.n	3485a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
   34854:	f04f 0210 	mov.w	r2, #16
   34858:	e001      	b.n	3485e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
   3485a:	f04f 0240 	mov.w	r2, #64	; 0x40
   3485e:	da01      	bge.n	34864 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
   34860:	f04f 0196 	mov.w	r1, #150	; 0x96
   34864:	f501 71bc 	add.w	r1, r1, #376	; 0x178
   34868:	eba0 0301 	sub.w	r3, r0, r1
   3486c:	4288      	cmp	r0, r1
   3486e:	d903      	bls.n	34878 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   34870:	fb93 f0f2 	sdiv	r0, r3, r2
   34874:	b280      	uxth	r0, r0
   34876:	4770      	bx	lr
   34878:	2000      	movs	r0, #0
   3487a:	4770      	bx	lr
   3487c:	2902      	cmp	r1, #2
   3487e:	d008      	beq.n	34892 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
   34880:	2870      	cmp	r0, #112	; 0x70
   34882:	d9f9      	bls.n	34878 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   34884:	3870      	subs	r0, #112	; 0x70
   34886:	17c1      	asrs	r1, r0, #31
   34888:	eb00 7051 	add.w	r0, r0, r1, lsr #29
   3488c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   34890:	4770      	bx	lr
   34892:	283c      	cmp	r0, #60	; 0x3c
   34894:	d9f0      	bls.n	34878 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
   34896:	383c      	subs	r0, #60	; 0x3c
   34898:	17c1      	asrs	r1, r0, #31
   3489a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
   3489e:	f3c0 008f 	ubfx	r0, r0, #2, #16
   348a2:	4770      	bx	lr

000348a4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
   348a4:	6809      	ldr	r1, [r1, #0]
   348a6:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
   348aa:	4770      	bx	lr

000348ac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
   348ac:	07c1      	lsls	r1, r0, #31
   348ae:	d001      	beq.n	348b4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
   348b0:	2001      	movs	r0, #1
   348b2:	4770      	bx	lr
   348b4:	0781      	lsls	r1, r0, #30
   348b6:	d501      	bpl.n	348bc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
   348b8:	2002      	movs	r0, #2
   348ba:	4770      	bx	lr
   348bc:	0740      	lsls	r0, r0, #29
   348be:	d501      	bpl.n	348c4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
   348c0:	2008      	movs	r0, #8
   348c2:	4770      	bx	lr
   348c4:	2000      	movs	r0, #0
   348c6:	4770      	bx	lr

000348c8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
   348c8:	b510      	push	{r4, lr}
   348ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
   348ce:	2901      	cmp	r1, #1
   348d0:	d006      	beq.n	348e0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
   348d2:	2902      	cmp	r1, #2
   348d4:	d005      	beq.n	348e2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
   348d6:	f44f 7168 	mov.w	r1, #928	; 0x3a0
   348da:	2029      	movs	r0, #41	; 0x29
   348dc:	f7f3 f8b8 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   348e0:	b108      	cbz	r0, 348e6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
   348e2:	4610      	mov	r0, r2
   348e4:	bd10      	pop	{r4, pc}
   348e6:	f240 40e2 	movw	r0, #1250	; 0x4e2
   348ea:	bd10      	pop	{r4, pc}

000348ec <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
   348ec:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
   348f0:	f001 bcf8 	b.w	362e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

000348f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
   348f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   348f8:	4607      	mov	r7, r0
   348fa:	460e      	mov	r6, r1
   348fc:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
   34900:	f7fc fbdc 	bl	310bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
   34904:	b198      	cbz	r0, 3492e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
   34906:	b31e      	cbz	r6, 34950 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
   34908:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   3490c:	1b40      	subs	r0, r0, r5
   3490e:	2300      	movs	r3, #0
   34910:	eb61 0104 	sbc.w	r1, r1, r4
   34914:	461a      	mov	r2, r3
   34916:	1a1b      	subs	r3, r3, r0
   34918:	418a      	sbcs	r2, r1
   3491a:	da19      	bge.n	34950 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
   3491c:	1c42      	adds	r2, r0, #1
   3491e:	f171 0100 	sbcs.w	r1, r1, #0
   34922:	db07      	blt.n	34934 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
   34924:	f240 211a 	movw	r1, #538	; 0x21a
   34928:	2029      	movs	r0, #41	; 0x29
   3492a:	f7f3 f891 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3492e:	f44f 7104 	mov.w	r1, #528	; 0x210
   34932:	e7f9      	b.n	34928 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
   34934:	4430      	add	r0, r6
   34936:	1e40      	subs	r0, r0, #1
   34938:	fbb0 f1f6 	udiv	r1, r0, r6
   3493c:	fb01 f006 	mul.w	r0, r1, r6
   34940:	1828      	adds	r0, r5, r0
   34942:	f144 0400 	adc.w	r4, r4, #0
   34946:	e9c7 0404 	strd	r0, r4, [r7, #16]
   3494a:	4608      	mov	r0, r1
   3494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34950:	2000      	movs	r0, #0
   34952:	e7fb      	b.n	3494c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

00034954 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
   34954:	b530      	push	{r4, r5, lr}
   34956:	4613      	mov	r3, r2
   34958:	e006      	b.n	34968 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
   3495a:	18cc      	adds	r4, r1, r3
   3495c:	1ad5      	subs	r5, r2, r3
   3495e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   34962:	1e5b      	subs	r3, r3, #1
   34964:	5544      	strb	r4, [r0, r5]
   34966:	b2db      	uxtb	r3, r3
   34968:	2b00      	cmp	r3, #0
   3496a:	d1f6      	bne.n	3495a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
   3496c:	bd30      	pop	{r4, r5, pc}

0003496e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
   3496e:	2300      	movs	r3, #0
   34970:	6403      	str	r3, [r0, #64]	; 0x40
   34972:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   34976:	f240 2371 	movw	r3, #625	; 0x271
   3497a:	435a      	muls	r2, r3
   3497c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   34980:	1e52      	subs	r2, r2, #1
   34982:	fbb2 f1f1 	udiv	r1, r2, r1
   34986:	6441      	str	r1, [r0, #68]	; 0x44
   34988:	4770      	bx	lr

0003498a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
   3498a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   3498e:	4607      	mov	r7, r0
   34990:	4690      	mov	r8, r2
   34992:	468b      	mov	fp, r1
   34994:	2601      	movs	r6, #1
   34996:	4608      	mov	r0, r1
   34998:	f000 f9e5 	bl	34d66 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   3499c:	4682      	mov	sl, r0
   3499e:	4658      	mov	r0, fp
   349a0:	f000 f9e3 	bl	34d6a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   349a4:	4681      	mov	r9, r0
   349a6:	f7ff ff81 	bl	348ac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   349aa:	4604      	mov	r4, r0
   349ac:	4650      	mov	r0, sl
   349ae:	f7ff ff7d 	bl	348ac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
   349b2:	4605      	mov	r5, r0
   349b4:	ea54 0005 	orrs.w	r0, r4, r5
   349b8:	d100      	bne.n	349bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
   349ba:	2600      	movs	r6, #0
   349bc:	f7f9 fc98 	bl	2e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   349c0:	ea10 0f09 	tst.w	r0, r9
   349c4:	d100      	bne.n	349c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
   349c6:	2400      	movs	r4, #0
   349c8:	f7f9 fc92 	bl	2e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   349cc:	ea10 0f0a 	tst.w	r0, sl
   349d0:	d100      	bne.n	349d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
   349d2:	2500      	movs	r5, #0
   349d4:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
   349d8:	42a0      	cmp	r0, r4
   349da:	d100      	bne.n	349de <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
   349dc:	2400      	movs	r4, #0
   349de:	f888 4000 	strb.w	r4, [r8]
   349e2:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
   349e6:	42a8      	cmp	r0, r5
   349e8:	d100      	bne.n	349ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
   349ea:	2500      	movs	r5, #0
   349ec:	f888 5001 	strb.w	r5, [r8, #1]
   349f0:	b974      	cbnz	r4, 34a10 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   349f2:	b96d      	cbnz	r5, 34a10 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   349f4:	4658      	mov	r0, fp
   349f6:	f000 f9a4 	bl	34d42 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   349fa:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
   349fe:	1a40      	subs	r0, r0, r1
   34a00:	b200      	sxth	r0, r0
   34a02:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   34a06:	4288      	cmp	r0, r1
   34a08:	dc01      	bgt.n	34a0e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
   34a0a:	2800      	cmp	r0, #0
   34a0c:	dc00      	bgt.n	34a10 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
   34a0e:	2600      	movs	r6, #0
   34a10:	4630      	mov	r0, r6
   34a12:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

00034a16 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
   34a16:	f240 41e2 	movw	r1, #1250	; 0x4e2
   34a1a:	4348      	muls	r0, r1
   34a1c:	4770      	bx	lr

00034a1e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
   34a1e:	f240 2171 	movw	r1, #625	; 0x271
   34a22:	fb10 f001 	smulbb	r0, r0, r1
   34a26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   34a2a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
   34a2e:	4770      	bx	lr

00034a30 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
   34a30:	b510      	push	{r4, lr}
   34a32:	2300      	movs	r3, #0
   34a34:	461a      	mov	r2, r3
   34a36:	e003      	b.n	34a40 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
   34a38:	5c84      	ldrb	r4, [r0, r2]
   34a3a:	4323      	orrs	r3, r4
   34a3c:	1c52      	adds	r2, r2, #1
   34a3e:	b2d2      	uxtb	r2, r2
   34a40:	428a      	cmp	r2, r1
   34a42:	d3f9      	bcc.n	34a38 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
   34a44:	b10b      	cbz	r3, 34a4a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
   34a46:	2000      	movs	r0, #0
   34a48:	bd10      	pop	{r4, pc}
   34a4a:	2001      	movs	r0, #1
   34a4c:	bd10      	pop	{r4, pc}

00034a4e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
   34a4e:	2100      	movs	r1, #0
   34a50:	4608      	mov	r0, r1
   34a52:	f7f4 be51 	b.w	296f8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
   34a56:	4401      	add	r1, r0
   34a58:	2914      	cmp	r1, #20
   34a5a:	dd01      	ble.n	34a60 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
   34a5c:	2014      	movs	r0, #20
   34a5e:	4770      	bx	lr
   34a60:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   34a64:	4281      	cmp	r1, r0
   34a66:	dbfa      	blt.n	34a5e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
   34a68:	b248      	sxtb	r0, r1
   34a6a:	4770      	bx	lr

00034a6c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
   34a6c:	b570      	push	{r4, r5, r6, lr}
   34a6e:	4605      	mov	r5, r0
   34a70:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
   34a74:	b286      	uxth	r6, r0
   34a76:	4610      	mov	r0, r2
   34a78:	7aec      	ldrb	r4, [r5, #11]
   34a7a:	4631      	mov	r1, r6
   34a7c:	f000 f863 	bl	34b46 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
   34a80:	4070      	eors	r0, r6
   34a82:	2125      	movs	r1, #37	; 0x25
   34a84:	fbb0 f2f1 	udiv	r2, r0, r1
   34a88:	fb01 0112 	mls	r1, r1, r2, r0
   34a8c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
   34a90:	f001 0307 	and.w	r3, r1, #7
   34a94:	7852      	ldrb	r2, [r2, #1]
   34a96:	2601      	movs	r6, #1
   34a98:	409e      	lsls	r6, r3
   34a9a:	4232      	tst	r2, r6
   34a9c:	d001      	beq.n	34aa2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
   34a9e:	4608      	mov	r0, r1
   34aa0:	bd70      	pop	{r4, r5, r6, pc}
   34aa2:	4344      	muls	r4, r0
   34aa4:	0c21      	lsrs	r1, r4, #16
   34aa6:	4628      	mov	r0, r5
   34aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34aac:	f7f4 be72 	b.w	29794 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

00034ab0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
   34ab0:	b510      	push	{r4, lr}
   34ab2:	4604      	mov	r4, r0
   34ab4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   34ab8:	b108      	cbz	r0, 34abe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
   34aba:	2825      	cmp	r0, #37	; 0x25
   34abc:	d901      	bls.n	34ac2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
   34abe:	2012      	movs	r0, #18
   34ac0:	bd10      	pop	{r4, pc}
   34ac2:	b132      	cbz	r2, 34ad2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
   34ac4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   34ac8:	b128      	cbz	r0, 34ad6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
   34aca:	2801      	cmp	r0, #1
   34acc:	d009      	beq.n	34ae2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
   34ace:	201f      	movs	r0, #31
   34ad0:	bd10      	pop	{r4, pc}
   34ad2:	2000      	movs	r0, #0
   34ad4:	bd10      	pop	{r4, pc}
   34ad6:	4620      	mov	r0, r4
   34ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34adc:	4611      	mov	r1, r2
   34ade:	f7f4 be11 	b.w	29704 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
   34ae2:	8aa2      	ldrh	r2, [r4, #20]
   34ae4:	6949      	ldr	r1, [r1, #20]
   34ae6:	f104 0025 	add.w	r0, r4, #37	; 0x25
   34aea:	f7ff ffbf 	bl	34a6c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
   34aee:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
   34af2:	e7ee      	b.n	34ad2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

00034af4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
   34af4:	b570      	push	{r4, r5, r6, lr}
   34af6:	4604      	mov	r4, r0
   34af8:	1c40      	adds	r0, r0, #1
   34afa:	4288      	cmp	r0, r1
   34afc:	d004      	beq.n	34b08 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
   34afe:	6808      	ldr	r0, [r1, #0]
   34b00:	f8c4 0001 	str.w	r0, [r4, #1]
   34b04:	7908      	ldrb	r0, [r1, #4]
   34b06:	7160      	strb	r0, [r4, #5]
   34b08:	7960      	ldrb	r0, [r4, #5]
   34b0a:	f000 001f 	and.w	r0, r0, #31
   34b0e:	7160      	strb	r0, [r4, #5]
   34b10:	2000      	movs	r0, #0
   34b12:	72e0      	strb	r0, [r4, #11]
   34b14:	4605      	mov	r5, r0
   34b16:	1966      	adds	r6, r4, r5
   34b18:	7870      	ldrb	r0, [r6, #1]
   34b1a:	f000 faed 	bl	350f8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
   34b1e:	71b0      	strb	r0, [r6, #6]
   34b20:	7ae1      	ldrb	r1, [r4, #11]
   34b22:	1c6d      	adds	r5, r5, #1
   34b24:	4408      	add	r0, r1
   34b26:	b2ed      	uxtb	r5, r5
   34b28:	72e0      	strb	r0, [r4, #11]
   34b2a:	2d05      	cmp	r5, #5
   34b2c:	d3f3      	bcc.n	34b16 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
   34b2e:	bd70      	pop	{r4, r5, r6, pc}
   34b30:	b2c1      	uxtb	r1, r0
   34b32:	fa91 f1a1 	rbit	r1, r1
   34b36:	0a00      	lsrs	r0, r0, #8
   34b38:	0e09      	lsrs	r1, r1, #24
   34b3a:	fa90 f0a0 	rbit	r0, r0
   34b3e:	0e00      	lsrs	r0, r0, #24
   34b40:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
   34b44:	4770      	bx	lr
   34b46:	b570      	push	{r4, r5, r6, lr}
   34b48:	460d      	mov	r5, r1
   34b4a:	4048      	eors	r0, r1
   34b4c:	2400      	movs	r4, #0
   34b4e:	f7ff ffef 	bl	34b30 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
   34b52:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   34b56:	1c64      	adds	r4, r4, #1
   34b58:	4428      	add	r0, r5
   34b5a:	b2e4      	uxtb	r4, r4
   34b5c:	b280      	uxth	r0, r0
   34b5e:	2c03      	cmp	r4, #3
   34b60:	d3f5      	bcc.n	34b4e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
   34b62:	bd70      	pop	{r4, r5, r6, pc}

00034b64 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
   34b64:	7802      	ldrb	r2, [r0, #0]
   34b66:	f002 020f 	and.w	r2, r2, #15
   34b6a:	2a03      	cmp	r2, #3
   34b6c:	d003      	beq.n	34b76 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
   34b6e:	2a05      	cmp	r2, #5
   34b70:	d104      	bne.n	34b7c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
   34b72:	f000 b92e 	b.w	34dd2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
   34b76:	7840      	ldrb	r0, [r0, #1]
   34b78:	280c      	cmp	r0, #12
   34b7a:	d001      	beq.n	34b80 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
   34b7c:	2000      	movs	r0, #0
   34b7e:	4770      	bx	lr
   34b80:	2001      	movs	r0, #1
   34b82:	4770      	bx	lr

00034b84 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
   34b84:	b570      	push	{r4, r5, r6, lr}
   34b86:	4614      	mov	r4, r2
   34b88:	4605      	mov	r5, r0
   34b8a:	2a1f      	cmp	r2, #31
   34b8c:	d903      	bls.n	34b96 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
   34b8e:	21ee      	movs	r1, #238	; 0xee
   34b90:	202a      	movs	r0, #42	; 0x2a
   34b92:	f7f2 ff5d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34b96:	f105 0009 	add.w	r0, r5, #9
   34b9a:	f002 fd10 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   34b9e:	1da4      	adds	r4, r4, #6
   34ba0:	706c      	strb	r4, [r5, #1]
   34ba2:	bd70      	pop	{r4, r5, r6, pc}

00034ba4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
   34ba4:	b510      	push	{r4, lr}
   34ba6:	7802      	ldrb	r2, [r0, #0]
   34ba8:	f001 030f 	and.w	r3, r1, #15
   34bac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   34bb0:	431a      	orrs	r2, r3
   34bb2:	7002      	strb	r2, [r0, #0]
   34bb4:	2907      	cmp	r1, #7
   34bb6:	d20c      	bcs.n	34bd2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
   34bb8:	e8df f001 	tbb	[pc, r1]
   34bbc:	06040604 	.word	0x06040604
   34bc0:	00040804 	.word	0x00040804
   34bc4:	2106      	movs	r1, #6
   34bc6:	e002      	b.n	34bce <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
   34bc8:	210c      	movs	r1, #12
   34bca:	e000      	b.n	34bce <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
   34bcc:	2122      	movs	r1, #34	; 0x22
   34bce:	7041      	strb	r1, [r0, #1]
   34bd0:	bd10      	pop	{r4, pc}
   34bd2:	21a8      	movs	r1, #168	; 0xa8
   34bd4:	202a      	movs	r0, #42	; 0x2a
   34bd6:	f7f2 ff3b 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00034bda <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
   34bda:	680a      	ldr	r2, [r1, #0]
   34bdc:	f840 2f09 	str.w	r2, [r0, #9]!
   34be0:	8889      	ldrh	r1, [r1, #4]
   34be2:	8081      	strh	r1, [r0, #4]
   34be4:	4770      	bx	lr

00034be6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
   34be6:	7802      	ldrb	r2, [r0, #0]
   34be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   34bec:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
   34bf0:	7002      	strb	r2, [r0, #0]
   34bf2:	4770      	bx	lr

00034bf4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
   34bf4:	680a      	ldr	r2, [r1, #0]
   34bf6:	f840 2f03 	str.w	r2, [r0, #3]!
   34bfa:	8889      	ldrh	r1, [r1, #4]
   34bfc:	8081      	strh	r1, [r0, #4]
   34bfe:	4770      	bx	lr

00034c00 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
   34c00:	7802      	ldrb	r2, [r0, #0]
   34c02:	2340      	movs	r3, #64	; 0x40
   34c04:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   34c08:	ea03 1181 	and.w	r1, r3, r1, lsl #6
   34c0c:	430a      	orrs	r2, r1
   34c0e:	7002      	strb	r2, [r0, #0]
   34c10:	4770      	bx	lr

00034c12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
   34c12:	b570      	push	{r4, r5, r6, lr}
   34c14:	4614      	mov	r4, r2
   34c16:	4605      	mov	r5, r0
   34c18:	2a1f      	cmp	r2, #31
   34c1a:	d904      	bls.n	34c26 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
   34c1c:	f44f 7188 	mov.w	r1, #272	; 0x110
   34c20:	202a      	movs	r0, #42	; 0x2a
   34c22:	f7f2 ff15 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34c26:	f105 0009 	add.w	r0, r5, #9
   34c2a:	f002 fcc8 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   34c2e:	1da4      	adds	r4, r4, #6
   34c30:	706c      	strb	r4, [r5, #1]
   34c32:	bd70      	pop	{r4, r5, r6, pc}

00034c34 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
   34c34:	6842      	ldr	r2, [r0, #4]
   34c36:	600a      	str	r2, [r1, #0]
   34c38:	7a00      	ldrb	r0, [r0, #8]
   34c3a:	7108      	strb	r0, [r1, #4]
   34c3c:	4770      	bx	lr

00034c3e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
   34c3e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   34c42:	4770      	bx	lr

00034c44 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
   34c44:	b570      	push	{r4, r5, r6, lr}
   34c46:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   34c4a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
   34c4e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
   34c52:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   34c56:	88c0      	ldrh	r0, [r0, #6]
   34c58:	b131      	cbz	r1, 34c68 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
   34c5a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   34c5e:	d903      	bls.n	34c68 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
   34c60:	f640 5107 	movw	r1, #3335	; 0xd07
   34c64:	428a      	cmp	r2, r1
   34c66:	d90b      	bls.n	34c80 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
   34c68:	1f91      	subs	r1, r2, #6
   34c6a:	f640 467a 	movw	r6, #3194	; 0xc7a
   34c6e:	42b1      	cmp	r1, r6
   34c70:	d810      	bhi.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c72:	b17b      	cbz	r3, 34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c74:	2b08      	cmp	r3, #8
   34c76:	d80d      	bhi.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c78:	4293      	cmp	r3, r2
   34c7a:	d20b      	bcs.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c7c:	4295      	cmp	r5, r2
   34c7e:	d809      	bhi.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c80:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   34c84:	d206      	bcs.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c86:	f640 4176 	movw	r1, #3190	; 0xc76
   34c8a:	380a      	subs	r0, #10
   34c8c:	4288      	cmp	r0, r1
   34c8e:	d801      	bhi.n	34c94 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
   34c90:	2001      	movs	r0, #1
   34c92:	bd70      	pop	{r4, r5, r6, pc}
   34c94:	2000      	movs	r0, #0
   34c96:	bd70      	pop	{r4, r5, r6, pc}

00034c98 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
   34c98:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   34c9c:	4770      	bx	lr

00034c9e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
   34c9e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
   34ca2:	4770      	bx	lr

00034ca4 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
   34ca4:	f8b0 000b 	ldrh.w	r0, [r0, #11]
   34ca8:	4770      	bx	lr

00034caa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
   34caa:	b510      	push	{r4, lr}
   34cac:	29fb      	cmp	r1, #251	; 0xfb
   34cae:	d904      	bls.n	34cba <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
   34cb0:	f240 61a1 	movw	r1, #1697	; 0x6a1
   34cb4:	202a      	movs	r0, #42	; 0x2a
   34cb6:	f7f2 fecb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34cba:	7041      	strb	r1, [r0, #1]
   34cbc:	bd10      	pop	{r4, pc}

00034cbe <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
   34cbe:	8980      	ldrh	r0, [r0, #12]
   34cc0:	8008      	strh	r0, [r1, #0]
   34cc2:	4770      	bx	lr

00034cc4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
   34cc4:	f8d0 0016 	ldr.w	r0, [r0, #22]
   34cc8:	6008      	str	r0, [r1, #0]
   34cca:	4770      	bx	lr

00034ccc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
   34ccc:	6842      	ldr	r2, [r0, #4]
   34cce:	600a      	str	r2, [r1, #0]
   34cd0:	6880      	ldr	r0, [r0, #8]
   34cd2:	6048      	str	r0, [r1, #4]
   34cd4:	4770      	bx	lr

00034cd6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
   34cd6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
   34cda:	600a      	str	r2, [r1, #0]
   34cdc:	6840      	ldr	r0, [r0, #4]
   34cde:	6048      	str	r0, [r1, #4]
   34ce0:	4770      	bx	lr

00034ce2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
   34ce2:	6809      	ldr	r1, [r1, #0]
   34ce4:	60c1      	str	r1, [r0, #12]
   34ce6:	4770      	bx	lr

00034ce8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
   34ce8:	680a      	ldr	r2, [r1, #0]
   34cea:	6042      	str	r2, [r0, #4]
   34cec:	6849      	ldr	r1, [r1, #4]
   34cee:	6081      	str	r1, [r0, #8]
   34cf0:	4770      	bx	lr

00034cf2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
   34cf2:	7800      	ldrb	r0, [r0, #0]
   34cf4:	f000 0003 	and.w	r0, r0, #3
   34cf8:	4770      	bx	lr

00034cfa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
   34cfa:	8880      	ldrh	r0, [r0, #4]
   34cfc:	4770      	bx	lr

00034cfe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
   34cfe:	88c0      	ldrh	r0, [r0, #6]
   34d00:	4770      	bx	lr

00034d02 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
   34d02:	8900      	ldrh	r0, [r0, #8]
   34d04:	4770      	bx	lr

00034d06 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
   34d06:	8940      	ldrh	r0, [r0, #10]
   34d08:	4770      	bx	lr

00034d0a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
   34d0a:	8901      	ldrh	r1, [r0, #8]
   34d0c:	291b      	cmp	r1, #27
   34d0e:	d30c      	bcc.n	34d2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
   34d10:	8941      	ldrh	r1, [r0, #10]
   34d12:	f44f 72a4 	mov.w	r2, #328	; 0x148
   34d16:	4291      	cmp	r1, r2
   34d18:	d307      	bcc.n	34d2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
   34d1a:	8881      	ldrh	r1, [r0, #4]
   34d1c:	291b      	cmp	r1, #27
   34d1e:	d304      	bcc.n	34d2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
   34d20:	88c0      	ldrh	r0, [r0, #6]
   34d22:	4290      	cmp	r0, r2
   34d24:	d301      	bcc.n	34d2a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
   34d26:	2001      	movs	r0, #1
   34d28:	4770      	bx	lr
   34d2a:	2000      	movs	r0, #0
   34d2c:	4770      	bx	lr

00034d2e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
   34d2e:	7901      	ldrb	r1, [r0, #4]
   34d30:	0749      	lsls	r1, r1, #29
   34d32:	d004      	beq.n	34d3e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
   34d34:	7940      	ldrb	r0, [r0, #5]
   34d36:	0740      	lsls	r0, r0, #29
   34d38:	d001      	beq.n	34d3e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
   34d3a:	2001      	movs	r0, #1
   34d3c:	4770      	bx	lr
   34d3e:	2000      	movs	r0, #0
   34d40:	4770      	bx	lr

00034d42 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
   34d42:	88c0      	ldrh	r0, [r0, #6]
   34d44:	4770      	bx	lr

00034d46 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
   34d46:	7901      	ldrb	r1, [r0, #4]
   34d48:	7940      	ldrb	r0, [r0, #5]
   34d4a:	f001 0107 	and.w	r1, r1, #7
   34d4e:	1e4a      	subs	r2, r1, #1
   34d50:	f000 0007 	and.w	r0, r0, #7
   34d54:	4011      	ands	r1, r2
   34d56:	1e42      	subs	r2, r0, #1
   34d58:	4010      	ands	r0, r2
   34d5a:	4301      	orrs	r1, r0
   34d5c:	d001      	beq.n	34d62 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
   34d5e:	2000      	movs	r0, #0
   34d60:	4770      	bx	lr
   34d62:	2001      	movs	r0, #1
   34d64:	4770      	bx	lr

00034d66 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
   34d66:	7900      	ldrb	r0, [r0, #4]
   34d68:	4770      	bx	lr

00034d6a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
   34d6a:	7940      	ldrb	r0, [r0, #5]
   34d6c:	4770      	bx	lr

00034d6e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
   34d6e:	7900      	ldrb	r0, [r0, #4]
   34d70:	4770      	bx	lr

00034d72 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
   34d72:	7101      	strb	r1, [r0, #4]
   34d74:	4770      	bx	lr

00034d76 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
   34d76:	7940      	ldrb	r0, [r0, #5]
   34d78:	4770      	bx	lr

00034d7a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
   34d7a:	7141      	strb	r1, [r0, #5]
   34d7c:	4770      	bx	lr

00034d7e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
   34d7e:	b510      	push	{r4, lr}
   34d80:	2a1b      	cmp	r2, #27
   34d82:	d904      	bls.n	34d8e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
   34d84:	f240 417e 	movw	r1, #1150	; 0x47e
   34d88:	202a      	movs	r0, #42	; 0x2a
   34d8a:	f7f2 fe61 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34d8e:	7042      	strb	r2, [r0, #1]
   34d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   34d94:	1cc0      	adds	r0, r0, #3
   34d96:	f002 bc12 	b.w	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

00034d9a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
   34d9a:	7802      	ldrb	r2, [r0, #0]
   34d9c:	f001 0103 	and.w	r1, r1, #3
   34da0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   34da4:	430a      	orrs	r2, r1
   34da6:	7002      	strb	r2, [r0, #0]
   34da8:	4770      	bx	lr

00034daa <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
   34daa:	7101      	strb	r1, [r0, #4]
   34dac:	0a09      	lsrs	r1, r1, #8
   34dae:	7141      	strb	r1, [r0, #5]
   34db0:	4770      	bx	lr

00034db2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
   34db2:	7181      	strb	r1, [r0, #6]
   34db4:	0a09      	lsrs	r1, r1, #8
   34db6:	71c1      	strb	r1, [r0, #7]
   34db8:	4770      	bx	lr

00034dba <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
   34dba:	7201      	strb	r1, [r0, #8]
   34dbc:	0a09      	lsrs	r1, r1, #8
   34dbe:	7241      	strb	r1, [r0, #9]
   34dc0:	4770      	bx	lr

00034dc2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
   34dc2:	7281      	strb	r1, [r0, #10]
   34dc4:	0a09      	lsrs	r1, r1, #8
   34dc6:	72c1      	strb	r1, [r0, #11]
   34dc8:	4770      	bx	lr

00034dca <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
   34dca:	7900      	ldrb	r0, [r0, #4]
   34dcc:	4770      	bx	lr

00034dce <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
   34dce:	7900      	ldrb	r0, [r0, #4]
   34dd0:	4770      	bx	lr
   34dd2:	b570      	push	{r4, r5, r6, lr}
   34dd4:	f8d0 201f 	ldr.w	r2, [r0, #31]
   34dd8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   34ddc:	f012 0fff 	tst.w	r2, #255	; 0xff
   34de0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   34de4:	d108      	bne.n	34df8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
   34de6:	f3c2 2407 	ubfx	r4, r2, #8, #8
   34dea:	b92c      	cbnz	r4, 34df8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
   34dec:	f3c2 4407 	ubfx	r4, r2, #16, #8
   34df0:	b914      	cbnz	r4, 34df8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
   34df2:	0e12      	lsrs	r2, r2, #24
   34df4:	d100      	bne.n	34df8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
   34df6:	b34b      	cbz	r3, 34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34df8:	7846      	ldrb	r6, [r0, #1]
   34dfa:	f8b0 2019 	ldrh.w	r2, [r0, #25]
   34dfe:	f8b0 401b 	ldrh.w	r4, [r0, #27]
   34e02:	f8b0 5017 	ldrh.w	r5, [r0, #23]
   34e06:	7d83      	ldrb	r3, [r0, #22]
   34e08:	2e22      	cmp	r6, #34	; 0x22
   34e0a:	d11f      	bne.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e0c:	b131      	cbz	r1, 34e1c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
   34e0e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
   34e12:	d903      	bls.n	34e1c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
   34e14:	f640 5107 	movw	r1, #3335	; 0xd07
   34e18:	428a      	cmp	r2, r1
   34e1a:	d90b      	bls.n	34e34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
   34e1c:	1f91      	subs	r1, r2, #6
   34e1e:	f640 467a 	movw	r6, #3194	; 0xc7a
   34e22:	42b1      	cmp	r1, r6
   34e24:	d812      	bhi.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e26:	b18b      	cbz	r3, 34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e28:	2b08      	cmp	r3, #8
   34e2a:	d80f      	bhi.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e2c:	4293      	cmp	r3, r2
   34e2e:	d20d      	bcs.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e30:	4295      	cmp	r5, r2
   34e32:	d80b      	bhi.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e34:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   34e38:	d208      	bcs.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e3a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
   34e3e:	f640 4176 	movw	r1, #3190	; 0xc76
   34e42:	380a      	subs	r0, #10
   34e44:	4288      	cmp	r0, r1
   34e46:	d801      	bhi.n	34e4c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
   34e48:	2001      	movs	r0, #1
   34e4a:	bd70      	pop	{r4, r5, r6, pc}
   34e4c:	2000      	movs	r0, #0
   34e4e:	bd70      	pop	{r4, r5, r6, pc}

00034e50 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
   34e50:	6841      	ldr	r1, [r0, #4]
   34e52:	2200      	movs	r2, #0
   34e54:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
   34e58:	2b00      	cmp	r3, #0
   34e5a:	d004      	beq.n	34e66 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
   34e5c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
   34e60:	6840      	ldr	r0, [r0, #4]
   34e62:	f000 bdfc 	b.w	35a5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   34e66:	4770      	bx	lr

00034e68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
   34e68:	b510      	push	{r4, lr}
   34e6a:	7a01      	ldrb	r1, [r0, #8]
   34e6c:	b119      	cbz	r1, 34e76 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
   34e6e:	2901      	cmp	r1, #1
   34e70:	d006      	beq.n	34e80 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
   34e72:	2000      	movs	r0, #0
   34e74:	bd10      	pop	{r4, pc}
   34e76:	88c2      	ldrh	r2, [r0, #6]
   34e78:	6803      	ldr	r3, [r0, #0]
   34e7a:	8880      	ldrh	r0, [r0, #4]
   34e7c:	2102      	movs	r1, #2
   34e7e:	e003      	b.n	34e88 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
   34e80:	88c2      	ldrh	r2, [r0, #6]
   34e82:	6803      	ldr	r3, [r0, #0]
   34e84:	8880      	ldrh	r0, [r0, #4]
   34e86:	2101      	movs	r1, #1
   34e88:	f7f4 fcee 	bl	29868 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
   34e8c:	b908      	cbnz	r0, 34e92 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
   34e8e:	f7f4 fd3b 	bl	29908 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
   34e92:	2001      	movs	r0, #1
   34e94:	bd10      	pop	{r4, pc}

00034e96 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
   34e96:	2203      	movs	r2, #3
   34e98:	f000 b806 	b.w	34ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

00034e9c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
   34e9c:	2203      	movs	r2, #3
   34e9e:	f000 b817 	b.w	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

00034ea2 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
   34ea2:	2204      	movs	r2, #4
   34ea4:	f000 b814 	b.w	34ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

00034ea8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
   34ea8:	b508      	push	{r3, lr}
   34eaa:	7a03      	ldrb	r3, [r0, #8]
   34eac:	f88d 3000 	strb.w	r3, [sp]
   34eb0:	9b00      	ldr	r3, [sp, #0]
   34eb2:	9300      	str	r3, [sp, #0]
   34eb4:	f89d 3000 	ldrb.w	r3, [sp]
   34eb8:	b123      	cbz	r3, 34ec4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
   34eba:	f240 21c2 	movw	r1, #706	; 0x2c2
   34ebe:	2010      	movs	r0, #16
   34ec0:	f7f2 fdc6 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   34ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   34ec8:	f7f4 be90 	b.w	29bec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

00034ecc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
   34ecc:	f7f4 bebc 	b.w	29c48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

00034ed0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
   34ed0:	7a03      	ldrb	r3, [r0, #8]
   34ed2:	b082      	sub	sp, #8
   34ed4:	f88d 3000 	strb.w	r3, [sp]
   34ed8:	9b00      	ldr	r3, [sp, #0]
   34eda:	9300      	str	r3, [sp, #0]
   34edc:	f89d 3000 	ldrb.w	r3, [sp]
   34ee0:	b113      	cbz	r3, 34ee8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
   34ee2:	7202      	strb	r2, [r0, #8]
   34ee4:	b002      	add	sp, #8
   34ee6:	4770      	bx	lr
   34ee8:	b002      	add	sp, #8
   34eea:	f7f4 be7f 	b.w	29bec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
   34eee:	2000      	movs	r0, #0
   34ef0:	7048      	strb	r0, [r1, #1]
   34ef2:	2003      	movs	r0, #3
   34ef4:	7008      	strb	r0, [r1, #0]
   34ef6:	2001      	movs	r0, #1
   34ef8:	7108      	strb	r0, [r1, #4]
   34efa:	4770      	bx	lr

00034efc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
   34efc:	b510      	push	{r4, lr}
   34efe:	888c      	ldrh	r4, [r1, #4]
   34f00:	890a      	ldrh	r2, [r1, #8]
   34f02:	884b      	ldrh	r3, [r1, #2]
   34f04:	88c9      	ldrh	r1, [r1, #6]
   34f06:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
   34f0a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
   34f0e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
   34f12:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
   34f16:	bd10      	pop	{r4, pc}

00034f18 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
   34f18:	b570      	push	{r4, r5, r6, lr}
   34f1a:	4615      	mov	r5, r2
   34f1c:	460c      	mov	r4, r1
   34f1e:	f000 f8b8 	bl	35092 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
   34f22:	3096      	adds	r0, #150	; 0x96
   34f24:	4428      	add	r0, r5
   34f26:	42a0      	cmp	r0, r4
   34f28:	d801      	bhi.n	34f2e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
   34f2a:	1a20      	subs	r0, r4, r0
   34f2c:	bd70      	pop	{r4, r5, r6, pc}
   34f2e:	2000      	movs	r0, #0
   34f30:	bd70      	pop	{r4, r5, r6, pc}

00034f32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
   34f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34f36:	4604      	mov	r4, r0
   34f38:	f000 f87f 	bl	3503a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
   34f3c:	4680      	mov	r8, r0
   34f3e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
   34f42:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
   34f46:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
   34f48:	8f26      	ldrh	r6, [r4, #56]	; 0x38
   34f4a:	4285      	cmp	r5, r0
   34f4c:	d300      	bcc.n	34f50 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
   34f4e:	4605      	mov	r5, r0
   34f50:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
   34f54:	4620      	mov	r0, r4
   34f56:	f000 f868 	bl	3502a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
   34f5a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   34f5e:	2902      	cmp	r1, #2
   34f60:	d108      	bne.n	34f74 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
   34f62:	42af      	cmp	r7, r5
   34f64:	d200      	bcs.n	34f68 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
   34f66:	463d      	mov	r5, r7
   34f68:	4286      	cmp	r6, r0
   34f6a:	d200      	bcs.n	34f6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
   34f6c:	4630      	mov	r0, r6
   34f6e:	2100      	movs	r1, #0
   34f70:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   34f74:	86a5      	strh	r5, [r4, #52]	; 0x34
   34f76:	8720      	strh	r0, [r4, #56]	; 0x38
   34f78:	42bd      	cmp	r5, r7
   34f7a:	d101      	bne.n	34f80 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
   34f7c:	42b0      	cmp	r0, r6
   34f7e:	d001      	beq.n	34f84 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
   34f80:	2001      	movs	r0, #1
   34f82:	e000      	b.n	34f86 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
   34f84:	2000      	movs	r0, #0
   34f86:	ea40 0008 	orr.w	r0, r0, r8
   34f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00034f8e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
   34f8e:	221b      	movs	r2, #27
   34f90:	8402      	strh	r2, [r0, #32]
   34f92:	8382      	strh	r2, [r0, #28]
   34f94:	82c2      	strh	r2, [r0, #22]
   34f96:	8282      	strh	r2, [r0, #20]
   34f98:	8142      	strh	r2, [r0, #10]
   34f9a:	8202      	strh	r2, [r0, #16]
   34f9c:	8102      	strh	r2, [r0, #8]
   34f9e:	8542      	strh	r2, [r0, #42]	; 0x2a
   34fa0:	8582      	strh	r2, [r0, #44]	; 0x2c
   34fa2:	8482      	strh	r2, [r0, #36]	; 0x24
   34fa4:	2900      	cmp	r1, #0
   34fa6:	d10a      	bne.n	34fbe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
   34fa8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   34fac:	8441      	strh	r1, [r0, #34]	; 0x22
   34fae:	83c1      	strh	r1, [r0, #30]
   34fb0:	8341      	strh	r1, [r0, #26]
   34fb2:	8301      	strh	r1, [r0, #24]
   34fb4:	81c1      	strh	r1, [r0, #14]
   34fb6:	8241      	strh	r1, [r0, #18]
   34fb8:	8181      	strh	r1, [r0, #12]
   34fba:	85c1      	strh	r1, [r0, #46]	; 0x2e
   34fbc:	8601      	strh	r1, [r0, #48]	; 0x30
   34fbe:	4770      	bx	lr

00034fc0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
   34fc0:	6800      	ldr	r0, [r0, #0]
   34fc2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
   34fc6:	4290      	cmp	r0, r2
   34fc8:	d903      	bls.n	34fd2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
   34fca:	1a40      	subs	r0, r0, r1
   34fcc:	389c      	subs	r0, #156	; 0x9c
   34fce:	0840      	lsrs	r0, r0, #1
   34fd0:	4770      	bx	lr
   34fd2:	2000      	movs	r0, #0
   34fd4:	4770      	bx	lr

00034fd6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
   34fd6:	6840      	ldr	r0, [r0, #4]
   34fd8:	4770      	bx	lr

00034fda <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
   34fda:	b570      	push	{r4, r5, r6, lr}
   34fdc:	460c      	mov	r4, r1
   34fde:	4605      	mov	r5, r0
   34fe0:	f000 f857 	bl	35092 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
   34fe4:	4420      	add	r0, r4
   34fe6:	6328      	str	r0, [r5, #48]	; 0x30
   34fe8:	bd70      	pop	{r4, r5, r6, pc}

00034fea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
   34fea:	b510      	push	{r4, lr}
   34fec:	9c02      	ldr	r4, [sp, #8]
   34fee:	8281      	strh	r1, [r0, #20]
   34ff0:	82c2      	strh	r2, [r0, #22]
   34ff2:	8303      	strh	r3, [r0, #24]
   34ff4:	8344      	strh	r4, [r0, #26]
   34ff6:	bd10      	pop	{r4, pc}
   34ff8:	1d00      	adds	r0, r0, #4
   34ffa:	b510      	push	{r4, lr}
   34ffc:	b280      	uxth	r0, r0
   34ffe:	2901      	cmp	r1, #1
   35000:	d006      	beq.n	35010 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
   35002:	2902      	cmp	r1, #2
   35004:	d007      	beq.n	35016 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
   35006:	f240 2123 	movw	r1, #547	; 0x223
   3500a:	2006      	movs	r0, #6
   3500c:	f7f2 fd20 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35010:	00c0      	lsls	r0, r0, #3
   35012:	3050      	adds	r0, #80	; 0x50
   35014:	e001      	b.n	3501a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
   35016:	0080      	lsls	r0, r0, #2
   35018:	302c      	adds	r0, #44	; 0x2c
   3501a:	b280      	uxth	r0, r0
   3501c:	bd10      	pop	{r4, pc}
   3501e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
   35020:	8b00      	ldrh	r0, [r0, #24]
   35022:	4281      	cmp	r1, r0
   35024:	d200      	bcs.n	35028 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
   35026:	4608      	mov	r0, r1
   35028:	4770      	bx	lr
   3502a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   3502e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
   35032:	4281      	cmp	r1, r0
   35034:	d200      	bcs.n	35038 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
   35036:	4608      	mov	r0, r1
   35038:	4770      	bx	lr
   3503a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3503e:	4606      	mov	r6, r0
   35040:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
   35044:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
   35048:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
   3504c:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
   35050:	42a0      	cmp	r0, r4
   35052:	d200      	bcs.n	35056 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
   35054:	4604      	mov	r4, r0
   35056:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   3505a:	4605      	mov	r5, r0
   3505c:	f7ff ffdf 	bl	3501e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
   35060:	4607      	mov	r7, r0
   35062:	4628      	mov	r0, r5
   35064:	f7ff ffdb 	bl	3501e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
   35068:	816c      	strh	r4, [r5, #10]
   3506a:	81ef      	strh	r7, [r5, #14]
   3506c:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
   3506e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
   35070:	42a1      	cmp	r1, r4
   35072:	d200      	bcs.n	35076 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
   35074:	4621      	mov	r1, r4
   35076:	4282      	cmp	r2, r0
   35078:	d300      	bcc.n	3507c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
   3507a:	4610      	mov	r0, r2
   3507c:	8229      	strh	r1, [r5, #16]
   3507e:	8268      	strh	r0, [r5, #18]
   35080:	454c      	cmp	r4, r9
   35082:	d101      	bne.n	35088 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
   35084:	4547      	cmp	r7, r8
   35086:	d002      	beq.n	3508e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
   35088:	2001      	movs	r0, #1
   3508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3508e:	2000      	movs	r0, #0
   35090:	e7fb      	b.n	3508a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
   35092:	2196      	movs	r1, #150	; 0x96
   35094:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
   35098:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
   3509c:	f000 b800 	b.w	350a0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
   350a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   350a4:	460d      	mov	r5, r1
   350a6:	4606      	mov	r6, r0
   350a8:	4698      	mov	r8, r3
   350aa:	4617      	mov	r7, r2
   350ac:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   350ae:	4611      	mov	r1, r2
   350b0:	f7ff ffa2 	bl	34ff8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
   350b4:	4604      	mov	r4, r0
   350b6:	4639      	mov	r1, r7
   350b8:	4630      	mov	r0, r6
   350ba:	f7ff ffb6 	bl	3502a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
   350be:	42a0      	cmp	r0, r4
   350c0:	d200      	bcs.n	350c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
   350c2:	4604      	mov	r4, r0
   350c4:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
   350c6:	4641      	mov	r1, r8
   350c8:	f7ff ff96 	bl	34ff8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
   350cc:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
   350ce:	4281      	cmp	r1, r0
   350d0:	d200      	bcs.n	350d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
   350d2:	4608      	mov	r0, r1
   350d4:	4420      	add	r0, r4
   350d6:	4428      	add	r0, r5
   350d8:	1d80      	adds	r0, r0, #6
   350da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   350de:	b510      	push	{r4, lr}
   350e0:	4604      	mov	r4, r0
   350e2:	2108      	movs	r1, #8
   350e4:	4620      	mov	r0, r4
   350e6:	f7f2 fd63 	bl	27bb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   350ea:	6820      	ldr	r0, [r4, #0]
   350ec:	2800      	cmp	r0, #0
   350ee:	d102      	bne.n	350f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
   350f0:	6860      	ldr	r0, [r4, #4]
   350f2:	2800      	cmp	r0, #0
   350f4:	d0f5      	beq.n	350e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
   350f6:	bd10      	pop	{r4, pc}

000350f8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
   350f8:	f000 0155 	and.w	r1, r0, #85	; 0x55
   350fc:	2255      	movs	r2, #85	; 0x55
   350fe:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   35102:	4408      	add	r0, r1
   35104:	f000 0133 	and.w	r1, r0, #51	; 0x33
   35108:	2233      	movs	r2, #51	; 0x33
   3510a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
   3510e:	4408      	add	r0, r1
   35110:	f000 010f 	and.w	r1, r0, #15
   35114:	eb01 1010 	add.w	r0, r1, r0, lsr #4
   35118:	4770      	bx	lr

0003511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
   3511a:	6840      	ldr	r0, [r0, #4]
   3511c:	2100      	movs	r1, #0
   3511e:	f820 1fd8 	strh.w	r1, [r0, #216]!
   35122:	7881      	ldrb	r1, [r0, #2]
   35124:	1c49      	adds	r1, r1, #1
   35126:	7081      	strb	r1, [r0, #2]
   35128:	4770      	bx	lr

0003512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
   3512a:	b510      	push	{r4, lr}
   3512c:	6840      	ldr	r0, [r0, #4]
   3512e:	f810 1fda 	ldrb.w	r1, [r0, #218]!
   35132:	1e49      	subs	r1, r1, #1
   35134:	b249      	sxtb	r1, r1
   35136:	7001      	strb	r1, [r0, #0]
   35138:	2900      	cmp	r1, #0
   3513a:	da03      	bge.n	35144 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
   3513c:	2135      	movs	r1, #53	; 0x35
   3513e:	204a      	movs	r0, #74	; 0x4a
   35140:	f7f2 fc86 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35144:	bd10      	pop	{r4, pc}

00035146 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
   35146:	6840      	ldr	r0, [r0, #4]
   35148:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
   3514c:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
   35150:	4770      	bx	lr

00035152 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
   35152:	6840      	ldr	r0, [r0, #4]
   35154:	2100      	movs	r1, #0
   35156:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
   3515a:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
   3515e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
   35162:	4770      	bx	lr

00035164 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
   35164:	b510      	push	{r4, lr}
   35166:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
   3516a:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
   3516e:	2000      	movs	r0, #0
   35170:	7048      	strb	r0, [r1, #1]
   35172:	230a      	movs	r3, #10
   35174:	700b      	strb	r3, [r1, #0]
   35176:	7108      	strb	r0, [r1, #4]
   35178:	f8a1 4005 	strh.w	r4, [r1, #5]
   3517c:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
   35180:	71c8      	strb	r0, [r1, #7]
   35182:	4620      	mov	r0, r4
   35184:	f7f3 f926 	bl	283d4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
   35188:	f7fe fe07 	bl	33d9a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
   3518c:	b140      	cbz	r0, 351a0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
   3518e:	4620      	mov	r0, r4
   35190:	f7ff fa07 	bl	345a2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   35194:	4620      	mov	r0, r4
   35196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3519a:	2100      	movs	r1, #0
   3519c:	f7f3 b828 	b.w	281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   351a0:	2173      	movs	r1, #115	; 0x73
   351a2:	2063      	movs	r0, #99	; 0x63
   351a4:	f7f2 fc54 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000351a8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
   351a8:	b570      	push	{r4, r5, r6, lr}
   351aa:	6844      	ldr	r4, [r0, #4]
   351ac:	460d      	mov	r5, r1
   351ae:	7803      	ldrb	r3, [r0, #0]
   351b0:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
   351b4:	3480      	adds	r4, #128	; 0x80
   351b6:	2101      	movs	r1, #1
   351b8:	4620      	mov	r0, r4
   351ba:	f7ff facd 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   351be:	b108      	cbz	r0, 351c4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
   351c0:	2000      	movs	r0, #0
   351c2:	bd70      	pop	{r4, r5, r6, pc}
   351c4:	4628      	mov	r0, r5
   351c6:	f7ff fe00 	bl	34dca <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
   351ca:	f884 0020 	strb.w	r0, [r4, #32]
   351ce:	2006      	movs	r0, #6
   351d0:	77e0      	strb	r0, [r4, #31]
   351d2:	e7f5      	b.n	351c0 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

000351d4 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
   351d4:	b510      	push	{r4, lr}
   351d6:	6844      	ldr	r4, [r0, #4]
   351d8:	7803      	ldrb	r3, [r0, #0]
   351da:	2101      	movs	r1, #1
   351dc:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
   351e0:	3480      	adds	r4, #128	; 0x80
   351e2:	4620      	mov	r0, r4
   351e4:	f7ff fab8 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   351e8:	2800      	cmp	r0, #0
   351ea:	d101      	bne.n	351f0 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
   351ec:	2007      	movs	r0, #7
   351ee:	77e0      	strb	r0, [r4, #31]
   351f0:	bd10      	pop	{r4, pc}

000351f2 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
   351f2:	2200      	movs	r2, #0
   351f4:	704a      	strb	r2, [r1, #1]
   351f6:	2307      	movs	r3, #7
   351f8:	700b      	strb	r3, [r1, #0]
   351fa:	f100 030a 	add.w	r3, r0, #10
   351fe:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
   35202:	84c2      	strh	r2, [r0, #38]	; 0x26
   35204:	6818      	ldr	r0, [r3, #0]
   35206:	6048      	str	r0, [r1, #4]
   35208:	6858      	ldr	r0, [r3, #4]
   3520a:	6088      	str	r0, [r1, #8]
   3520c:	8918      	ldrh	r0, [r3, #8]
   3520e:	8188      	strh	r0, [r1, #12]
   35210:	710a      	strb	r2, [r1, #4]
   35212:	4770      	bx	lr

00035214 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
   35214:	b510      	push	{r4, lr}
   35216:	6844      	ldr	r4, [r0, #4]
   35218:	7803      	ldrb	r3, [r0, #0]
   3521a:	2100      	movs	r1, #0
   3521c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   35220:	3480      	adds	r4, #128	; 0x80
   35222:	4620      	mov	r0, r4
   35224:	f7ff fa98 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   35228:	b110      	cbz	r0, 35230 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
   3522a:	201d      	movs	r0, #29
   3522c:	7760      	strb	r0, [r4, #29]
   3522e:	bd10      	pop	{r4, pc}
   35230:	2122      	movs	r1, #34	; 0x22
   35232:	2045      	movs	r0, #69	; 0x45
   35234:	f7f2 fc0c 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00035238 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
   35238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3523c:	4606      	mov	r6, r0
   3523e:	7803      	ldrb	r3, [r0, #0]
   35240:	6840      	ldr	r0, [r0, #4]
   35242:	468b      	mov	fp, r1
   35244:	f100 0480 	add.w	r4, r0, #128	; 0x80
   35248:	4605      	mov	r5, r0
   3524a:	2700      	movs	r7, #0
   3524c:	7f62      	ldrb	r2, [r4, #29]
   3524e:	210a      	movs	r1, #10
   35250:	4620      	mov	r0, r4
   35252:	f7ff fa81 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   35256:	b358      	cbz	r0, 352b0 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
   35258:	4658      	mov	r0, fp
   3525a:	f7ff fd56 	bl	34d0a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
   3525e:	b1f0      	cbz	r0, 3529e <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
   35260:	4658      	mov	r0, fp
   35262:	f7ff fd4c 	bl	34cfe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
   35266:	4682      	mov	sl, r0
   35268:	4658      	mov	r0, fp
   3526a:	f7ff fd4c 	bl	34d06 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
   3526e:	4681      	mov	r9, r0
   35270:	4658      	mov	r0, fp
   35272:	f7ff fd42 	bl	34cfa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
   35276:	4680      	mov	r8, r0
   35278:	4658      	mov	r0, fp
   3527a:	f7ff fd42 	bl	34d02 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
   3527e:	4601      	mov	r1, r0
   35280:	464b      	mov	r3, r9
   35282:	4642      	mov	r2, r8
   35284:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   35288:	f8cd a000 	str.w	sl, [sp]
   3528c:	f7ff fead 	bl	34fea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
   35290:	4628      	mov	r0, r5
   35292:	f7ff fe4e 	bl	34f32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
   35296:	2105      	movs	r1, #5
   35298:	6870      	ldr	r0, [r6, #4]
   3529a:	f7f6 f8c1 	bl	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   3529e:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
   352a2:	7767      	strb	r7, [r4, #29]
   352a4:	4630      	mov	r0, r6
   352a6:	f000 f805 	bl	352b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
   352aa:	2000      	movs	r0, #0
   352ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   352b0:	2001      	movs	r0, #1
   352b2:	e7fb      	b.n	352ac <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

000352b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
   352b4:	6841      	ldr	r1, [r0, #4]
   352b6:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
   352ba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
   352be:	2801      	cmp	r0, #1
   352c0:	d004      	beq.n	352cc <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
   352c2:	f831 0b2c 	ldrh.w	r0, [r1], #44
   352c6:	3218      	adds	r2, #24
   352c8:	f7f4 bcd4 	b.w	29c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
   352cc:	2002      	movs	r0, #2
   352ce:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
   352d2:	4770      	bx	lr

000352d4 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
   352d4:	2200      	movs	r2, #0
   352d6:	704a      	strb	r2, [r1, #1]
   352d8:	220b      	movs	r2, #11
   352da:	700a      	strb	r2, [r1, #0]
   352dc:	f100 020a 	add.w	r2, r0, #10
   352e0:	7a83      	ldrb	r3, [r0, #10]
   352e2:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
   352e6:	710b      	strb	r3, [r1, #4]
   352e8:	8800      	ldrh	r0, [r0, #0]
   352ea:	80c8      	strh	r0, [r1, #6]
   352ec:	7910      	ldrb	r0, [r2, #4]
   352ee:	7208      	strb	r0, [r1, #8]
   352f0:	4770      	bx	lr

000352f2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
   352f2:	2200      	movs	r2, #0
   352f4:	704a      	strb	r2, [r1, #1]
   352f6:	220c      	movs	r2, #12
   352f8:	700a      	strb	r2, [r1, #0]
   352fa:	7a82      	ldrb	r2, [r0, #10]
   352fc:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
   35300:	710a      	strb	r2, [r1, #4]
   35302:	8800      	ldrh	r0, [r0, #0]
   35304:	80c8      	strh	r0, [r1, #6]
   35306:	4770      	bx	lr

00035308 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
   35308:	2200      	movs	r2, #0
   3530a:	704a      	strb	r2, [r1, #1]
   3530c:	2208      	movs	r2, #8
   3530e:	700a      	strb	r2, [r1, #0]
   35310:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
   35314:	8812      	ldrh	r2, [r2, #0]
   35316:	808a      	strh	r2, [r1, #4]
   35318:	68c2      	ldr	r2, [r0, #12]
   3531a:	f8c1 2006 	str.w	r2, [r1, #6]
   3531e:	6902      	ldr	r2, [r0, #16]
   35320:	f8c1 200a 	str.w	r2, [r1, #10]
   35324:	8a80      	ldrh	r0, [r0, #20]
   35326:	81c8      	strh	r0, [r1, #14]
   35328:	4770      	bx	lr
   3532a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   3532e:	f001 0307 	and.w	r3, r1, #7
   35332:	7802      	ldrb	r2, [r0, #0]
   35334:	2101      	movs	r1, #1
   35336:	4099      	lsls	r1, r3
   35338:	430a      	orrs	r2, r1
   3533a:	7002      	strb	r2, [r0, #0]
   3533c:	4770      	bx	lr

0003533e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
   3533e:	b510      	push	{r4, lr}
   35340:	6844      	ldr	r4, [r0, #4]
   35342:	7803      	ldrb	r3, [r0, #0]
   35344:	2100      	movs	r1, #0
   35346:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   3534a:	3480      	adds	r4, #128	; 0x80
   3534c:	4620      	mov	r0, r4
   3534e:	f7ff fa03 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   35352:	b110      	cbz	r0, 3535a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
   35354:	2004      	movs	r0, #4
   35356:	7760      	strb	r0, [r4, #29]
   35358:	bd10      	pop	{r4, pc}
   3535a:	21ab      	movs	r1, #171	; 0xab
   3535c:	201c      	movs	r0, #28
   3535e:	f7f2 fb77 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00035362 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
   35362:	b510      	push	{r4, lr}
   35364:	6841      	ldr	r1, [r0, #4]
   35366:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
   3536a:	07d2      	lsls	r2, r2, #31
   3536c:	d00b      	beq.n	35386 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
   3536e:	f811 2fda 	ldrb.w	r2, [r1, #218]!
   35372:	1e52      	subs	r2, r2, #1
   35374:	b252      	sxtb	r2, r2
   35376:	700a      	strb	r2, [r1, #0]
   35378:	6840      	ldr	r0, [r0, #4]
   3537a:	2a00      	cmp	r2, #0
   3537c:	da05      	bge.n	3538a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
   3537e:	21ba      	movs	r1, #186	; 0xba
   35380:	201c      	movs	r0, #28
   35382:	f7f2 fb65 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35386:	21b8      	movs	r1, #184	; 0xb8
   35388:	e7fa      	b.n	35380 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
   3538a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
   3538e:	f021 0101 	bic.w	r1, r1, #1
   35392:	6001      	str	r1, [r0, #0]
   35394:	bd10      	pop	{r4, pc}
   35396:	2200      	movs	r2, #0
   35398:	704a      	strb	r2, [r1, #1]
   3539a:	2206      	movs	r2, #6
   3539c:	700a      	strb	r2, [r1, #0]
   3539e:	f850 2f09 	ldr.w	r2, [r0, #9]!
   353a2:	604a      	str	r2, [r1, #4]
   353a4:	6842      	ldr	r2, [r0, #4]
   353a6:	608a      	str	r2, [r1, #8]
   353a8:	8902      	ldrh	r2, [r0, #8]
   353aa:	818a      	strh	r2, [r1, #12]
   353ac:	7a80      	ldrb	r0, [r0, #10]
   353ae:	7388      	strb	r0, [r1, #14]
   353b0:	4770      	bx	lr

000353b2 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
   353b2:	2200      	movs	r2, #0
   353b4:	704a      	strb	r2, [r1, #1]
   353b6:	220e      	movs	r2, #14
   353b8:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
   353bc:	700a      	strb	r2, [r1, #0]
   353be:	8800      	ldrh	r0, [r0, #0]
   353c0:	8088      	strh	r0, [r1, #4]
   353c2:	4770      	bx	lr

000353c4 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
   353c4:	b510      	push	{r4, lr}
   353c6:	6844      	ldr	r4, [r0, #4]
   353c8:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
   353cc:	3480      	adds	r4, #128	; 0x80
   353ce:	f011 0f04 	tst.w	r1, #4
   353d2:	d001      	beq.n	353d8 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
   353d4:	2001      	movs	r0, #1
   353d6:	bd10      	pop	{r4, pc}
   353d8:	f7ff fe9f 	bl	3511a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
   353dc:	68e0      	ldr	r0, [r4, #12]
   353de:	f040 0004 	orr.w	r0, r0, #4
   353e2:	60e0      	str	r0, [r4, #12]
   353e4:	2000      	movs	r0, #0
   353e6:	bd10      	pop	{r4, pc}

000353e8 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
   353e8:	b510      	push	{r4, lr}
   353ea:	6844      	ldr	r4, [r0, #4]
   353ec:	7803      	ldrb	r3, [r0, #0]
   353ee:	2100      	movs	r1, #0
   353f0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   353f4:	3480      	adds	r4, #128	; 0x80
   353f6:	4620      	mov	r0, r4
   353f8:	f7ff f9ae 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   353fc:	b110      	cbz	r0, 35404 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
   353fe:	200f      	movs	r0, #15
   35400:	7760      	strb	r0, [r4, #29]
   35402:	bd10      	pop	{r4, pc}
   35404:	216e      	movs	r1, #110	; 0x6e
   35406:	204b      	movs	r0, #75	; 0x4b
   35408:	f7f2 fb22 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0003540c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
   3540c:	b510      	push	{r4, lr}
   3540e:	6844      	ldr	r4, [r0, #4]
   35410:	7803      	ldrb	r3, [r0, #0]
   35412:	2109      	movs	r1, #9
   35414:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   35418:	3480      	adds	r4, #128	; 0x80
   3541a:	4620      	mov	r0, r4
   3541c:	f7ff f99c 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   35420:	2800      	cmp	r0, #0
   35422:	d005      	beq.n	35430 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
   35424:	2000      	movs	r0, #0
   35426:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
   3542a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
   3542e:	7760      	strb	r0, [r4, #29]
   35430:	bd10      	pop	{r4, pc}

00035432 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
   35432:	6841      	ldr	r1, [r0, #4]
   35434:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
   35438:	f022 0204 	bic.w	r2, r2, #4
   3543c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
   35440:	f7ff be73 	b.w	3512a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

00035444 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
   35444:	b510      	push	{r4, lr}
   35446:	2300      	movs	r3, #0
   35448:	704b      	strb	r3, [r1, #1]
   3544a:	2401      	movs	r4, #1
   3544c:	700c      	strb	r4, [r1, #0]
   3544e:	f100 0209 	add.w	r2, r0, #9
   35452:	710b      	strb	r3, [r1, #4]
   35454:	f830 0cde 	ldrh.w	r0, [r0, #-222]
   35458:	f8a1 0005 	strh.w	r0, [r1, #5]
   3545c:	f812 0b01 	ldrb.w	r0, [r2], #1
   35460:	71c8      	strb	r0, [r1, #7]
   35462:	8810      	ldrh	r0, [r2, #0]
   35464:	8108      	strh	r0, [r1, #8]
   35466:	8850      	ldrh	r0, [r2, #2]
   35468:	8148      	strh	r0, [r1, #10]
   3546a:	bd10      	pop	{r4, pc}

0003546c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
   3546c:	b570      	push	{r4, r5, r6, lr}
   3546e:	7803      	ldrb	r3, [r0, #0]
   35470:	6840      	ldr	r0, [r0, #4]
   35472:	2500      	movs	r5, #0
   35474:	f100 0480 	add.w	r4, r0, #128	; 0x80
   35478:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   3547c:	f500 7098 	add.w	r0, r0, #304	; 0x130
   35480:	0789      	lsls	r1, r1, #30
   35482:	d40e      	bmi.n	354a2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
   35484:	7f62      	ldrb	r2, [r4, #29]
   35486:	2100      	movs	r1, #0
   35488:	4620      	mov	r0, r4
   3548a:	f7ff f965 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   3548e:	b130      	cbz	r0, 3549e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
   35490:	2001      	movs	r0, #1
   35492:	7760      	strb	r0, [r4, #29]
   35494:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
   35498:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
   3549c:	bd70      	pop	{r4, r5, r6, pc}
   3549e:	216e      	movs	r1, #110	; 0x6e
   354a0:	e00b      	b.n	354ba <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
   354a2:	7b21      	ldrb	r1, [r4, #12]
   354a4:	0789      	lsls	r1, r1, #30
   354a6:	d50f      	bpl.n	354c8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
   354a8:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
   354ac:	1e49      	subs	r1, r1, #1
   354ae:	b249      	sxtb	r1, r1
   354b0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
   354b4:	2900      	cmp	r1, #0
   354b6:	da03      	bge.n	354c0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
   354b8:	2180      	movs	r1, #128	; 0x80
   354ba:	2040      	movs	r0, #64	; 0x40
   354bc:	f7f2 fac8 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   354c0:	68e1      	ldr	r1, [r4, #12]
   354c2:	f021 0102 	bic.w	r1, r1, #2
   354c6:	60e1      	str	r1, [r4, #12]
   354c8:	7485      	strb	r5, [r0, #18]
   354ca:	bd70      	pop	{r4, r5, r6, pc}
   354cc:	2200      	movs	r2, #0
   354ce:	704a      	strb	r2, [r1, #1]
   354d0:	2219      	movs	r2, #25
   354d2:	700a      	strb	r2, [r1, #0]
   354d4:	f8d0 000a 	ldr.w	r0, [r0, #10]
   354d8:	6048      	str	r0, [r1, #4]
   354da:	4770      	bx	lr
   354dc:	b510      	push	{r4, lr}
   354de:	4604      	mov	r4, r0
   354e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   354e4:	e9d4 1000 	ldrd	r1, r0, [r4]
   354e8:	4050      	eors	r0, r2
   354ea:	ea70 0101 	orns	r1, r0, r1
   354ee:	d008      	beq.n	35502 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
   354f0:	f001 fed3 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   354f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   354f8:	1a80      	subs	r0, r0, r2
   354fa:	4199      	sbcs	r1, r3
   354fc:	d301      	bcc.n	35502 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
   354fe:	2001      	movs	r0, #1
   35500:	bd10      	pop	{r4, pc}
   35502:	2000      	movs	r0, #0
   35504:	bd10      	pop	{r4, pc}

00035506 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
   35506:	b508      	push	{r3, lr}
   35508:	f000 f804 	bl	35514 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
   3550c:	466a      	mov	r2, sp
   3550e:	f7f4 ff07 	bl	2a320 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
   35512:	bd08      	pop	{r3, pc}
   35514:	b530      	push	{r4, r5, lr}
   35516:	784c      	ldrb	r4, [r1, #1]
   35518:	4603      	mov	r3, r0
   3551a:	7808      	ldrb	r0, [r1, #0]
   3551c:	788d      	ldrb	r5, [r1, #2]
   3551e:	0e22      	lsrs	r2, r4, #24
   35520:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   35524:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   35528:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
   3552c:	78cd      	ldrb	r5, [r1, #3]
   3552e:	790c      	ldrb	r4, [r1, #4]
   35530:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
   35534:	4322      	orrs	r2, r4
   35536:	7949      	ldrb	r1, [r1, #5]
   35538:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
   3553c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   35540:	4611      	mov	r1, r2
   35542:	2b01      	cmp	r3, #1
   35544:	d101      	bne.n	3554a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
   35546:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
   3554a:	bd30      	pop	{r4, r5, pc}
   3554c:	2801      	cmp	r0, #1
   3554e:	d102      	bne.n	35556 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
   35550:	7948      	ldrb	r0, [r1, #5]
   35552:	0980      	lsrs	r0, r0, #6
   35554:	d001      	beq.n	3555a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
   35556:	2000      	movs	r0, #0
   35558:	4770      	bx	lr
   3555a:	2001      	movs	r0, #1
   3555c:	4770      	bx	lr
   3555e:	2801      	cmp	r0, #1
   35560:	d106      	bne.n	35570 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
   35562:	7948      	ldrb	r0, [r1, #5]
   35564:	2101      	movs	r1, #1
   35566:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
   3556a:	d101      	bne.n	35570 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
   3556c:	2001      	movs	r0, #1
   3556e:	4770      	bx	lr
   35570:	2000      	movs	r0, #0
   35572:	4770      	bx	lr
   35574:	2802      	cmp	r0, #2
   35576:	d003      	beq.n	35580 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
   35578:	2803      	cmp	r0, #3
   3557a:	d001      	beq.n	35580 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
   3557c:	2000      	movs	r0, #0
   3557e:	4770      	bx	lr
   35580:	2001      	movs	r0, #1
   35582:	4770      	bx	lr

00035584 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
   35584:	b510      	push	{r4, lr}
   35586:	4604      	mov	r4, r0
   35588:	7c00      	ldrb	r0, [r0, #16]
   3558a:	f7ff fff3 	bl	35574 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
   3558e:	b148      	cbz	r0, 355a4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   35590:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
   35594:	f104 0158 	add.w	r1, r4, #88	; 0x58
   35598:	f7ff f89f 	bl	346da <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
   3559c:	2808      	cmp	r0, #8
   3559e:	d001      	beq.n	355a4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
   355a0:	2001      	movs	r0, #1
   355a2:	bd10      	pop	{r4, pc}
   355a4:	7c20      	ldrb	r0, [r4, #16]
   355a6:	b118      	cbz	r0, 355b0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   355a8:	2802      	cmp	r0, #2
   355aa:	d001      	beq.n	355b0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
   355ac:	7de0      	ldrb	r0, [r4, #23]
   355ae:	bd10      	pop	{r4, pc}
   355b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   355b4:	2000      	movs	r0, #0
   355b6:	f7f3 b9db 	b.w	28970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

000355ba <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
   355ba:	b508      	push	{r3, lr}
   355bc:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   355c0:	f88d 1000 	strb.w	r1, [sp]
   355c4:	9900      	ldr	r1, [sp, #0]
   355c6:	9100      	str	r1, [sp, #0]
   355c8:	f89d 1000 	ldrb.w	r1, [sp]
   355cc:	b941      	cbnz	r1, 355e0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
   355ce:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
   355d2:	f88d 1000 	strb.w	r1, [sp]
   355d6:	9900      	ldr	r1, [sp, #0]
   355d8:	9100      	str	r1, [sp, #0]
   355da:	f89d 1000 	ldrb.w	r1, [sp]
   355de:	b109      	cbz	r1, 355e4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
   355e0:	2001      	movs	r0, #1
   355e2:	bd08      	pop	{r3, pc}
   355e4:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
   355e8:	f88d 0000 	strb.w	r0, [sp]
   355ec:	9800      	ldr	r0, [sp, #0]
   355ee:	9000      	str	r0, [sp, #0]
   355f0:	f89d 0000 	ldrb.w	r0, [sp]
   355f4:	2000      	movs	r0, #0
   355f6:	bd08      	pop	{r3, pc}

000355f8 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
   355f8:	20ff      	movs	r0, #255	; 0xff
   355fa:	7008      	strb	r0, [r1, #0]
   355fc:	6b48      	ldr	r0, [r1, #52]	; 0x34
   355fe:	f7fe bf71 	b.w	344e4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00035602 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
   35602:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   35604:	460d      	mov	r5, r1
   35606:	4604      	mov	r4, r0
   35608:	f44f 728c 	mov.w	r2, #280	; 0x118
   3560c:	2100      	movs	r1, #0
   3560e:	f002 f850 	bl	376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
   35612:	20ff      	movs	r0, #255	; 0xff
   35614:	7020      	strb	r0, [r4, #0]
   35616:	207f      	movs	r0, #127	; 0x7f
   35618:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
   3561c:	2013      	movs	r0, #19
   3561e:	8060      	strh	r0, [r4, #2]
   35620:	f242 7010 	movw	r0, #10000	; 0x2710
   35624:	8460      	strh	r0, [r4, #34]	; 0x22
   35626:	f7f2 ff93 	bl	28550 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
   3562a:	4601      	mov	r1, r0
   3562c:	6360      	str	r0, [r4, #52]	; 0x34
   3562e:	2200      	movs	r2, #0
   35630:	4668      	mov	r0, sp
   35632:	f7fe febd 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   35636:	2200      	movs	r2, #0
   35638:	2101      	movs	r1, #1
   3563a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   3563c:	f7fe ff32 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   35640:	2204      	movs	r2, #4
   35642:	4668      	mov	r0, sp
   35644:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35646:	f7fe feb3 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   3564a:	2200      	movs	r2, #0
   3564c:	4611      	mov	r1, r2
   3564e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   35650:	f7fe ff28 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   35654:	73a5      	strb	r5, [r4, #14]
   35656:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3565a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
   3565e:	f000 b958 	b.w	35912 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

00035662 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
   35662:	7880      	ldrb	r0, [r0, #2]
   35664:	f3c0 0080 	ubfx	r0, r0, #2, #1
   35668:	b108      	cbz	r0, 3566e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
   3566a:	2000      	movs	r0, #0
   3566c:	4770      	bx	lr
   3566e:	201f      	movs	r0, #31
   35670:	4770      	bx	lr

00035672 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
   35672:	f7f5 bbbb 	b.w	2adec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

00035676 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
   35676:	6880      	ldr	r0, [r0, #8]
   35678:	4770      	bx	lr

0003567a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
   3567a:	2001      	movs	r0, #1
   3567c:	4770      	bx	lr

0003567e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
   3567e:	b510      	push	{r4, lr}
   35680:	4604      	mov	r4, r0
   35682:	3028      	adds	r0, #40	; 0x28
   35684:	f000 f905 	bl	35892 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
   35688:	8861      	ldrh	r1, [r4, #2]
   3568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3568e:	2228      	movs	r2, #40	; 0x28
   35690:	f7f5 bd7c 	b.w	2b18c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00035694 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
   35694:	2200      	movs	r2, #0
   35696:	8602      	strh	r2, [r0, #48]	; 0x30
   35698:	8843      	ldrh	r3, [r0, #2]
   3569a:	2b1d      	cmp	r3, #29
   3569c:	d001      	beq.n	356a2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
   3569e:	7341      	strb	r1, [r0, #13]
   356a0:	4770      	bx	lr
   356a2:	7342      	strb	r2, [r0, #13]
   356a4:	4770      	bx	lr

000356a6 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
   356a6:	b510      	push	{r4, lr}
   356a8:	2400      	movs	r4, #0
   356aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
   356ac:	f7fe fef2 	bl	34494 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
   356b0:	4384      	bics	r4, r0
   356b2:	f084 0001 	eor.w	r0, r4, #1
   356b6:	bd10      	pop	{r4, pc}

000356b8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
   356b8:	2000      	movs	r0, #0
   356ba:	4770      	bx	lr

000356bc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
   356bc:	7880      	ldrb	r0, [r0, #2]
   356be:	f000 0001 	and.w	r0, r0, #1
   356c2:	4770      	bx	lr

000356c4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
   356c4:	7880      	ldrb	r0, [r0, #2]
   356c6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   356ca:	4770      	bx	lr

000356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
   356cc:	2001      	movs	r0, #1
   356ce:	4770      	bx	lr

000356d0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
   356d0:	7880      	ldrb	r0, [r0, #2]
   356d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   356d6:	4770      	bx	lr

000356d8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
   356d8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   356dc:	4770      	bx	lr

000356de <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
   356de:	7800      	ldrb	r0, [r0, #0]
   356e0:	28ff      	cmp	r0, #255	; 0xff
   356e2:	d001      	beq.n	356e8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
   356e4:	2001      	movs	r0, #1
   356e6:	4770      	bx	lr
   356e8:	2000      	movs	r0, #0
   356ea:	4770      	bx	lr

000356ec <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
   356ec:	f800 1f20 	strb.w	r1, [r0, #32]!
   356f0:	7042      	strb	r2, [r0, #1]
   356f2:	4770      	bx	lr

000356f4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
   356f4:	680a      	ldr	r2, [r1, #0]
   356f6:	f840 2f11 	str.w	r2, [r0, #17]!
   356fa:	8889      	ldrh	r1, [r1, #4]
   356fc:	8081      	strh	r1, [r0, #4]
   356fe:	2101      	movs	r1, #1
   35700:	7181      	strb	r1, [r0, #6]
   35702:	4770      	bx	lr

00035704 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
   35704:	7b00      	ldrb	r0, [r0, #12]
   35706:	4770      	bx	lr

00035708 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
   35708:	2001      	movs	r0, #1
   3570a:	4770      	bx	lr

0003570c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
   3570c:	61c1      	str	r1, [r0, #28]
   3570e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   35712:	724a      	strb	r2, [r1, #9]
   35714:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
   35718:	f8c1 200a 	str.w	r2, [r1, #10]
   3571c:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
   35720:	81c8      	strh	r0, [r1, #14]
   35722:	4770      	bx	lr

00035724 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
   35724:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
   35728:	4770      	bx	lr

0003572a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
   3572a:	7bc0      	ldrb	r0, [r0, #15]
   3572c:	2800      	cmp	r0, #0
   3572e:	d000      	beq.n	35732 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
   35730:	2001      	movs	r0, #1
   35732:	4770      	bx	lr
   35734:	7802      	ldrb	r2, [r0, #0]
   35736:	2320      	movs	r3, #32
   35738:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   3573c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
   35740:	430a      	orrs	r2, r1
   35742:	7002      	strb	r2, [r0, #0]
   35744:	4770      	bx	lr
   35746:	2101      	movs	r1, #1
   35748:	f7f4 bfa0 	b.w	2a68c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
   3574c:	2101      	movs	r1, #1
   3574e:	f7f4 bf9d 	b.w	2a68c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
   35752:	2200      	movs	r2, #0
   35754:	704a      	strb	r2, [r1, #1]
   35756:	2205      	movs	r2, #5
   35758:	700a      	strb	r2, [r1, #0]
   3575a:	f8d0 000a 	ldr.w	r0, [r0, #10]
   3575e:	6048      	str	r0, [r1, #4]
   35760:	4770      	bx	lr
   35762:	b510      	push	{r4, lr}
   35764:	460c      	mov	r4, r1
   35766:	2100      	movs	r1, #0
   35768:	7061      	strb	r1, [r4, #1]
   3576a:	2112      	movs	r1, #18
   3576c:	7021      	strb	r1, [r4, #0]
   3576e:	f100 0109 	add.w	r1, r0, #9
   35772:	2221      	movs	r2, #33	; 0x21
   35774:	1d20      	adds	r0, r4, #4
   35776:	f001 ff22 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   3577a:	2001      	movs	r0, #1
   3577c:	71e0      	strb	r0, [r4, #7]
   3577e:	7920      	ldrb	r0, [r4, #4]
   35780:	2800      	cmp	r0, #0
   35782:	d015      	beq.n	357b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
   35784:	f8b4 4005 	ldrh.w	r4, [r4, #5]
   35788:	2100      	movs	r1, #0
   3578a:	4620      	mov	r0, r4
   3578c:	f7f2 fc8e 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   35790:	2800      	cmp	r0, #0
   35792:	d00d      	beq.n	357b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
   35794:	8800      	ldrh	r0, [r0, #0]
   35796:	f7fe ff04 	bl	345a2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   3579a:	2100      	movs	r1, #0
   3579c:	4620      	mov	r0, r4
   3579e:	f7f2 fd27 	bl	281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   357a2:	2800      	cmp	r0, #0
   357a4:	d004      	beq.n	357b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
   357a6:	f240 2151 	movw	r1, #593	; 0x251
   357aa:	202d      	movs	r0, #45	; 0x2d
   357ac:	f7f2 f950 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   357b0:	bd10      	pop	{r4, pc}
   357b2:	2200      	movs	r2, #0
   357b4:	704a      	strb	r2, [r1, #1]
   357b6:	221a      	movs	r2, #26
   357b8:	700a      	strb	r2, [r1, #0]
   357ba:	f850 2f09 	ldr.w	r2, [r0, #9]!
   357be:	604a      	str	r2, [r1, #4]
   357c0:	6842      	ldr	r2, [r0, #4]
   357c2:	608a      	str	r2, [r1, #8]
   357c4:	7a00      	ldrb	r0, [r0, #8]
   357c6:	7308      	strb	r0, [r1, #12]
   357c8:	4770      	bx	lr
   357ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   357ce:	4604      	mov	r4, r0
   357d0:	460f      	mov	r7, r1
   357d2:	7e40      	ldrb	r0, [r0, #25]
   357d4:	f7f3 fe08 	bl	293e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
   357d8:	4606      	mov	r6, r0
   357da:	7e20      	ldrb	r0, [r4, #24]
   357dc:	f104 0551 	add.w	r5, r4, #81	; 0x51
   357e0:	b120      	cbz	r0, 357ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
   357e2:	b11e      	cbz	r6, 357ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
   357e4:	7e60      	ldrb	r0, [r4, #25]
   357e6:	f7f3 fdf3 	bl	293d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
   357ea:	b1a0      	cbz	r0, 35816 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
   357ec:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   357f0:	2800      	cmp	r0, #0
   357f2:	d024      	beq.n	3583e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
   357f4:	7ea0      	ldrb	r0, [r4, #26]
   357f6:	2800      	cmp	r0, #0
   357f8:	d021      	beq.n	3583e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
   357fa:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
   357fe:	4629      	mov	r1, r5
   35800:	f7ff fead 	bl	3555e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
   35804:	b1a8      	cbz	r0, 35832 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
   35806:	f7f3 fddf 	bl	293c8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
   3580a:	463a      	mov	r2, r7
   3580c:	4629      	mov	r1, r5
   3580e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35812:	f7fe befa 	b.w	3460a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   35816:	2001      	movs	r0, #1
   35818:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
   3581c:	463a      	mov	r2, r7
   3581e:	4629      	mov	r1, r5
   35820:	4630      	mov	r0, r6
   35822:	f7fe fef2 	bl	3460a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
   35826:	7e61      	ldrb	r1, [r4, #25]
   35828:	4628      	mov	r0, r5
   3582a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3582e:	f7f3 bde7 	b.w	29400 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
   35832:	4639      	mov	r1, r7
   35834:	4628      	mov	r0, r5
   35836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3583a:	f7fe bed5 	b.w	345e8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
   3583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35842:	b510      	push	{r4, lr}
   35844:	4604      	mov	r4, r0
   35846:	4608      	mov	r0, r1
   35848:	f7f9 fb50 	bl	2eeec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
   3584c:	7921      	ldrb	r1, [r4, #4]
   3584e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35852:	2025      	movs	r0, #37	; 0x25
   35854:	f7f9 bb20 	b.w	2ee98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
   35858:	b570      	push	{r4, r5, r6, lr}
   3585a:	4614      	mov	r4, r2
   3585c:	461d      	mov	r5, r3
   3585e:	4606      	mov	r6, r0
   35860:	f001 fd1b 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   35864:	1900      	adds	r0, r0, r4
   35866:	4169      	adcs	r1, r5
   35868:	e9c6 0100 	strd	r0, r1, [r6]
   3586c:	bd70      	pop	{r4, r5, r6, pc}

0003586e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
   3586e:	b570      	push	{r4, r5, r6, lr}
   35870:	7001      	strb	r1, [r0, #0]
   35872:	7042      	strb	r2, [r0, #1]
   35874:	4614      	mov	r4, r2
   35876:	460d      	mov	r5, r1
   35878:	7880      	ldrb	r0, [r0, #2]
   3587a:	f000 f87f 	bl	3597c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   3587e:	fb10 f005 	smulbb	r0, r0, r5
   35882:	4360      	muls	r0, r4
   35884:	28ff      	cmp	r0, #255	; 0xff
   35886:	d303      	bcc.n	35890 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
   35888:	215c      	movs	r1, #92	; 0x5c
   3588a:	202e      	movs	r0, #46	; 0x2e
   3588c:	f7f2 f8e0 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35890:	bd70      	pop	{r4, r5, r6, pc}

00035892 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
   35892:	b510      	push	{r4, lr}
   35894:	4604      	mov	r4, r0
   35896:	7880      	ldrb	r0, [r0, #2]
   35898:	f000 f870 	bl	3597c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   3589c:	7861      	ldrb	r1, [r4, #1]
   3589e:	7822      	ldrb	r2, [r4, #0]
   358a0:	fb11 f102 	smulbb	r1, r1, r2
   358a4:	4348      	muls	r0, r1
   358a6:	b2c0      	uxtb	r0, r0
   358a8:	bd10      	pop	{r4, pc}

000358aa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
   358aa:	b510      	push	{r4, lr}
   358ac:	4604      	mov	r4, r0
   358ae:	f000 f84d 	bl	3594c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
   358b2:	7961      	ldrb	r1, [r4, #5]
   358b4:	1c49      	adds	r1, r1, #1
   358b6:	b2c9      	uxtb	r1, r1
   358b8:	7161      	strb	r1, [r4, #5]
   358ba:	7862      	ldrb	r2, [r4, #1]
   358bc:	4291      	cmp	r1, r2
   358be:	d10b      	bne.n	358d8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   358c0:	2200      	movs	r2, #0
   358c2:	7162      	strb	r2, [r4, #5]
   358c4:	78e1      	ldrb	r1, [r4, #3]
   358c6:	4301      	orrs	r1, r0
   358c8:	70e1      	strb	r1, [r4, #3]
   358ca:	78a3      	ldrb	r3, [r4, #2]
   358cc:	4299      	cmp	r1, r3
   358ce:	d103      	bne.n	358d8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
   358d0:	70e2      	strb	r2, [r4, #3]
   358d2:	7921      	ldrb	r1, [r4, #4]
   358d4:	1c49      	adds	r1, r1, #1
   358d6:	7121      	strb	r1, [r4, #4]
   358d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   358dc:	f000 b825 	b.w	3592a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

000358e0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
   358e0:	7081      	strb	r1, [r0, #2]
   358e2:	4770      	bx	lr

000358e4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
   358e4:	b570      	push	{r4, r5, r6, lr}
   358e6:	4604      	mov	r4, r0
   358e8:	7880      	ldrb	r0, [r0, #2]
   358ea:	f000 f847 	bl	3597c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   358ee:	7861      	ldrb	r1, [r4, #1]
   358f0:	fb11 f500 	smulbb	r5, r1, r0
   358f4:	78e0      	ldrb	r0, [r4, #3]
   358f6:	f000 f841 	bl	3597c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
   358fa:	7861      	ldrb	r1, [r4, #1]
   358fc:	7962      	ldrb	r2, [r4, #5]
   358fe:	fb10 2001 	smlabb	r0, r0, r1, r2
   35902:	7821      	ldrb	r1, [r4, #0]
   35904:	7922      	ldrb	r2, [r4, #4]
   35906:	1a89      	subs	r1, r1, r2
   35908:	fb11 f105 	smulbb	r1, r1, r5
   3590c:	1a08      	subs	r0, r1, r0
   3590e:	b2c0      	uxtb	r0, r0
   35910:	bd70      	pop	{r4, r5, r6, pc}

00035912 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
   35912:	2100      	movs	r1, #0
   35914:	6001      	str	r1, [r0, #0]
   35916:	8081      	strh	r1, [r0, #4]
   35918:	2101      	movs	r1, #1
   3591a:	7041      	strb	r1, [r0, #1]
   3591c:	7001      	strb	r1, [r0, #0]
   3591e:	4770      	bx	lr

00035920 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
   35920:	2100      	movs	r1, #0
   35922:	70c1      	strb	r1, [r0, #3]
   35924:	7141      	strb	r1, [r0, #5]
   35926:	7101      	strb	r1, [r0, #4]
   35928:	4770      	bx	lr
   3592a:	b510      	push	{r4, lr}
   3592c:	2801      	cmp	r0, #1
   3592e:	d007      	beq.n	35940 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
   35930:	2802      	cmp	r0, #2
   35932:	d007      	beq.n	35944 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
   35934:	2804      	cmp	r0, #4
   35936:	d007      	beq.n	35948 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
   35938:	2139      	movs	r1, #57	; 0x39
   3593a:	202e      	movs	r0, #46	; 0x2e
   3593c:	f7f2 f888 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35940:	2025      	movs	r0, #37	; 0x25
   35942:	bd10      	pop	{r4, pc}
   35944:	2026      	movs	r0, #38	; 0x26
   35946:	bd10      	pop	{r4, pc}
   35948:	2027      	movs	r0, #39	; 0x27
   3594a:	bd10      	pop	{r4, pc}
   3594c:	4601      	mov	r1, r0
   3594e:	2000      	movs	r0, #0
   35950:	788a      	ldrb	r2, [r1, #2]
   35952:	07d3      	lsls	r3, r2, #31
   35954:	d002      	beq.n	3595c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
   35956:	78cb      	ldrb	r3, [r1, #3]
   35958:	07db      	lsls	r3, r3, #31
   3595a:	d006      	beq.n	3596a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
   3595c:	0793      	lsls	r3, r2, #30
   3595e:	d506      	bpl.n	3596e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   35960:	78cb      	ldrb	r3, [r1, #3]
   35962:	079b      	lsls	r3, r3, #30
   35964:	d403      	bmi.n	3596e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
   35966:	2002      	movs	r0, #2
   35968:	4770      	bx	lr
   3596a:	2001      	movs	r0, #1
   3596c:	4770      	bx	lr
   3596e:	0752      	lsls	r2, r2, #29
   35970:	d5fc      	bpl.n	3596c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   35972:	78c9      	ldrb	r1, [r1, #3]
   35974:	0749      	lsls	r1, r1, #29
   35976:	d4f9      	bmi.n	3596c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
   35978:	2004      	movs	r0, #4
   3597a:	4770      	bx	lr
   3597c:	f3c0 0180 	ubfx	r1, r0, #2, #1
   35980:	f3c0 0240 	ubfx	r2, r0, #1, #1
   35984:	4411      	add	r1, r2
   35986:	f000 0001 	and.w	r0, r0, #1
   3598a:	4408      	add	r0, r1
   3598c:	4770      	bx	lr

0003598e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
   3598e:	f240 315a 	movw	r1, #858	; 0x35a
   35992:	4348      	muls	r0, r1
   35994:	4770      	bx	lr

00035996 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
   35996:	f240 20ef 	movw	r0, #751	; 0x2ef
   3599a:	4770      	bx	lr
   3599c:	041c020e 	.word	0x041c020e
   359a0:	0c600630 	.word	0x0c600630
   359a4:	06b4035a 	.word	0x06b4035a
   359a8:	0bf505c5 	.word	0x0bf505c5
   359ac:	01a31225 	.word	0x01a31225
   359b0:	05bf03b1 	.word	0x05bf03b1
   359b4:	064902ef 	.word	0x064902ef
   359b8:	09a3      	.short	0x09a3

000359ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
   359ba:	b510      	push	{r4, lr}
   359bc:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
   359c0:	b109      	cbz	r1, 359c6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
   359c2:	2000      	movs	r0, #0
   359c4:	bd10      	pop	{r4, pc}
   359c6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
   359ca:	b131      	cbz	r1, 359da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
   359cc:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
   359d0:	428a      	cmp	r2, r1
   359d2:	d902      	bls.n	359da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
   359d4:	f7f4 fe42 	bl	2a65c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   359d8:	e7f3      	b.n	359c2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
   359da:	2001      	movs	r0, #1
   359dc:	bd10      	pop	{r4, pc}

000359de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
   359de:	b510      	push	{r4, lr}
   359e0:	b131      	cbz	r1, 359f0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
   359e2:	2901      	cmp	r1, #1
   359e4:	d008      	beq.n	359f8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
   359e6:	f240 71d3 	movw	r1, #2003	; 0x7d3
   359ea:	2030      	movs	r0, #48	; 0x30
   359ec:	f7f2 f830 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   359f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   359f4:	f000 b9c7 	b.w	35d86 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
   359f8:	2100      	movs	r1, #0
   359fa:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
   359fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35a02:	f000 b923 	b.w	35c4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

00035a06 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
   35a06:	b510      	push	{r4, lr}
   35a08:	4604      	mov	r4, r0
   35a0a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
   35a0e:	2800      	cmp	r0, #0
   35a10:	d019      	beq.n	35a46 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
   35a12:	2001      	movs	r0, #1
   35a14:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
   35a18:	4601      	mov	r1, r0
   35a1a:	4620      	mov	r0, r4
   35a1c:	f7ff fe82 	bl	35724 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
   35a20:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   35a24:	b170      	cbz	r0, 35a44 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
   35a26:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
   35a2a:	f7fb fd01 	bl	31430 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   35a2e:	7820      	ldrb	r0, [r4, #0]
   35a30:	f7fb fe76 	bl	31720 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   35a34:	f814 09c8 	ldrb.w	r0, [r4], #-200
   35a38:	f7fb fe50 	bl	316dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   35a3c:	b120      	cbz	r0, 35a48 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
   35a3e:	2000      	movs	r0, #0
   35a40:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
   35a44:	2000      	movs	r0, #0
   35a46:	bd10      	pop	{r4, pc}
   35a48:	f240 210b 	movw	r1, #523	; 0x20b
   35a4c:	2030      	movs	r0, #48	; 0x30
   35a4e:	f7f1 ffff 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00035a52 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
   35a52:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   35a56:	4770      	bx	lr

00035a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
   35a58:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
   35a5c:	4770      	bx	lr

00035a5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
   35a5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   35a60:	4604      	mov	r4, r0
   35a62:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
   35a66:	2800      	cmp	r0, #0
   35a68:	d15f      	bne.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35a6a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   35a6e:	2803      	cmp	r0, #3
   35a70:	d15b      	bne.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35a72:	f001 fc12 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   35a76:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
   35a7a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
   35a7e:	1ac0      	subs	r0, r0, r3
   35a80:	eb61 0102 	sbc.w	r1, r1, r2
   35a84:	2300      	movs	r3, #0
   35a86:	461a      	mov	r2, r3
   35a88:	1a1b      	subs	r3, r3, r0
   35a8a:	418a      	sbcs	r2, r1
   35a8c:	da4d      	bge.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35a8e:	1c42      	adds	r2, r0, #1
   35a90:	f171 0100 	sbcs.w	r1, r1, #0
   35a94:	db02      	blt.n	35a9c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
   35a96:	f240 610b 	movw	r1, #1547	; 0x60b
   35a9a:	e036      	b.n	35b0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
   35a9c:	6921      	ldr	r1, [r4, #16]
   35a9e:	b111      	cbz	r1, 35aa6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
   35aa0:	fbb0 f0f1 	udiv	r0, r0, r1
   35aa4:	e000      	b.n	35aa8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
   35aa6:	2000      	movs	r0, #0
   35aa8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   35aac:	1c40      	adds	r0, r0, #1
   35aae:	4408      	add	r0, r1
   35ab0:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
   35ab4:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   35ab8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
   35abc:	1a08      	subs	r0, r1, r0
   35abe:	b200      	sxth	r0, r0
   35ac0:	2800      	cmp	r0, #0
   35ac2:	dd32      	ble.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35ac4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   35ac8:	f7fb fcb2 	bl	31430 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
   35acc:	2800      	cmp	r0, #0
   35ace:	d02c      	beq.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35ad0:	20ff      	movs	r0, #255	; 0xff
   35ad2:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
   35ad6:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
   35ada:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
   35ade:	ae01      	add	r6, sp, #4
   35ae0:	1a40      	subs	r0, r0, r1
   35ae2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
   35ae6:	1e40      	subs	r0, r0, #1
   35ae8:	4408      	add	r0, r1
   35aea:	b285      	uxth	r5, r0
   35aec:	e017      	b.n	35b1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
   35aee:	9600      	str	r6, [sp, #0]
   35af0:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
   35af4:	2300      	movs	r3, #0
   35af6:	2201      	movs	r2, #1
   35af8:	4620      	mov	r0, r4
   35afa:	f7f5 fe4f 	bl	2b79c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   35afe:	2800      	cmp	r0, #0
   35b00:	d013      	beq.n	35b2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
   35b02:	2801      	cmp	r0, #1
   35b04:	d004      	beq.n	35b10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
   35b06:	f240 6144 	movw	r1, #1604	; 0x644
   35b0a:	2030      	movs	r0, #48	; 0x30
   35b0c:	f7f1 ffa0 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35b10:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   35b14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   35b18:	4408      	add	r0, r1
   35b1a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
   35b1e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
   35b22:	1a28      	subs	r0, r5, r0
   35b24:	b200      	sxth	r0, r0
   35b26:	2800      	cmp	r0, #0
   35b28:	dae1      	bge.n	35aee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
   35b2a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   35b2c:	2000      	movs	r0, #0
   35b2e:	4770      	bx	lr
   35b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35b34:	4604      	mov	r4, r0
   35b36:	f000 f8ff 	bl	35d38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
   35b3a:	2700      	movs	r7, #0
   35b3c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
   35b40:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
   35b44:	2601      	movs	r6, #1
   35b46:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
   35b4a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   35b4c:	463d      	mov	r5, r7
   35b4e:	b130      	cbz	r0, 35b5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
   35b50:	f001 fba3 	bl	3729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
   35b54:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   35b56:	fbb0 f2f1 	udiv	r2, r0, r1
   35b5a:	fb01 0512 	mls	r5, r1, r2, r0
   35b5e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   35b62:	2100      	movs	r1, #0
   35b64:	4680      	mov	r8, r0
   35b66:	f7fe fec5 	bl	348f4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
   35b6a:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
   35b6e:	1949      	adds	r1, r1, r5
   35b70:	4178      	adcs	r0, r7
   35b72:	e9c4 1000 	strd	r1, r0, [r4]
   35b76:	8920      	ldrh	r0, [r4, #8]
   35b78:	3cf8      	subs	r4, #248	; 0xf8
   35b7a:	1c40      	adds	r0, r0, #1
   35b7c:	280a      	cmp	r0, #10
   35b7e:	d201      	bcs.n	35b84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
   35b80:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
   35b84:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   35b88:	b138      	cbz	r0, 35b9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   35b8a:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
   35b8e:	1c40      	adds	r0, r0, #1
   35b90:	280a      	cmp	r0, #10
   35b92:	d302      	bcc.n	35b9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
   35b94:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
   35b98:	e002      	b.n	35ba0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
   35b9a:	2002      	movs	r0, #2
   35b9c:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
   35ba0:	4620      	mov	r0, r4
   35ba2:	f000 f823 	bl	35bec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   35ba6:	b120      	cbz	r0, 35bb2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
   35ba8:	4620      	mov	r0, r4
   35baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35bae:	f000 b80e 	b.w	35bce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   35bb2:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   35bb6:	4641      	mov	r1, r8
   35bb8:	f000 f8bc 	bl	35d34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   35bbc:	2800      	cmp	r0, #0
   35bbe:	d104      	bne.n	35bca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
   35bc0:	f240 61e7 	movw	r1, #1767	; 0x6e7
   35bc4:	2030      	movs	r0, #48	; 0x30
   35bc6:	f7f1 ff43 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35bce:	b510      	push	{r4, lr}
   35bd0:	4604      	mov	r4, r0
   35bd2:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
   35bd6:	f7fb fd81 	bl	316dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   35bda:	2000      	movs	r0, #0
   35bdc:	7620      	strb	r0, [r4, #24]
   35bde:	bd10      	pop	{r4, pc}
   35be0:	b510      	push	{r4, lr}
   35be2:	f7ff fd4c 	bl	3567e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
   35be6:	f200 1015 	addw	r0, r0, #277	; 0x115
   35bea:	bd10      	pop	{r4, pc}
   35bec:	b570      	push	{r4, r5, r6, lr}
   35bee:	4605      	mov	r5, r0
   35bf0:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
   35bf4:	b108      	cbz	r0, 35bfa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
   35bf6:	2001      	movs	r0, #1
   35bf8:	bd70      	pop	{r4, r5, r6, pc}
   35bfa:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
   35bfe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   35c02:	4050      	eors	r0, r2
   35c04:	ea70 0101 	orns	r1, r0, r1
   35c08:	d012      	beq.n	35c30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
   35c0a:	2400      	movs	r4, #0
   35c0c:	4621      	mov	r1, r4
   35c0e:	4628      	mov	r0, r5
   35c10:	f7ff ffe6 	bl	35be0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   35c14:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
   35c18:	1840      	adds	r0, r0, r1
   35c1a:	4154      	adcs	r4, r2
   35c1c:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
   35c20:	3df8      	subs	r5, #248	; 0xf8
   35c22:	1a10      	subs	r0, r2, r0
   35c24:	41a1      	sbcs	r1, r4
   35c26:	d503      	bpl.n	35c30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
   35c28:	4628      	mov	r0, r5
   35c2a:	f7f4 fd17 	bl	2a65c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
   35c2e:	e7e2      	b.n	35bf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
   35c30:	2000      	movs	r0, #0
   35c32:	bd70      	pop	{r4, r5, r6, pc}
   35c34:	b510      	push	{r4, lr}
   35c36:	4604      	mov	r4, r0
   35c38:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
   35c3c:	f000 f988 	bl	35f50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
   35c40:	4601      	mov	r1, r0
   35c42:	4620      	mov	r0, r4
   35c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35c48:	f7ff b9c7 	b.w	34fda <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
   35c4c:	b510      	push	{r4, lr}
   35c4e:	f7f8 ff7f 	bl	2eb50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
   35c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35c56:	f7fb be9f 	b.w	31998 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
   35c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35c5e:	4604      	mov	r4, r0
   35c60:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
   35c64:	2800      	cmp	r0, #0
   35c66:	d051      	beq.n	35d0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
   35c68:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   35c6c:	2803      	cmp	r0, #3
   35c6e:	d14d      	bne.n	35d0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
   35c70:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
   35c74:	f001 fa2a 	bl	370cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
   35c78:	4605      	mov	r5, r0
   35c7a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   35c7e:	f7f5 fc59 	bl	2b534 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   35c82:	4428      	add	r0, r5
   35c84:	b286      	uxth	r6, r0
   35c86:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   35c8a:	f7f5 fc53 	bl	2b534 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
   35c8e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
   35c92:	fa1f f880 	uxth.w	r8, r0
   35c96:	4648      	mov	r0, r9
   35c98:	f7f9 f818 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   35c9c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
   35ca0:	1a0d      	subs	r5, r1, r0
   35ca2:	4648      	mov	r0, r9
   35ca4:	f7f9 f83e 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   35ca8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   35cac:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   35cb0:	fbb0 f0fa 	udiv	r0, r0, sl
   35cb4:	1a2d      	subs	r5, r5, r0
   35cb6:	4648      	mov	r0, r9
   35cb8:	f7f9 f808 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   35cbc:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
   35cc0:	1a0f      	subs	r7, r1, r0
   35cc2:	4648      	mov	r0, r9
   35cc4:	f7f9 f82e 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   35cc8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   35ccc:	4401      	add	r1, r0
   35cce:	fbb1 f0fa 	udiv	r0, r1, sl
   35cd2:	1a39      	subs	r1, r7, r0
   35cd4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
   35cd8:	4370      	muls	r0, r6
   35cda:	fbb0 f2f8 	udiv	r2, r0, r8
   35cde:	2029      	movs	r0, #41	; 0x29
   35ce0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
   35ce4:	3260      	adds	r2, #96	; 0x60
   35ce6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
   35cea:	eb00 0052 	add.w	r0, r0, r2, lsr #1
   35cee:	42a9      	cmp	r1, r5
   35cf0:	d801      	bhi.n	35cf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
   35cf2:	4285      	cmp	r5, r0
   35cf4:	d901      	bls.n	35cfa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
   35cf6:	f7fd f849 	bl	32d8c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
   35cfa:	4631      	mov	r1, r6
   35cfc:	6920      	ldr	r0, [r4, #16]
   35cfe:	f7fd f8ad 	bl	32e5c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
   35d02:	2100      	movs	r1, #0
   35d04:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
   35d08:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
   35d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35d10:	b570      	push	{r4, r5, r6, lr}
   35d12:	460c      	mov	r4, r1
   35d14:	4605      	mov	r5, r0
   35d16:	f7f9 f805 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   35d1a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
   35d1e:	4408      	add	r0, r1
   35d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   35d24:	fbb0 f6f1 	udiv	r6, r0, r1
   35d28:	4628      	mov	r0, r5
   35d2a:	f7f8 ffcf 	bl	2eccc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   35d2e:	4430      	add	r0, r6
   35d30:	4420      	add	r0, r4
   35d32:	bd70      	pop	{r4, r5, r6, pc}
   35d34:	f7fa bf1e 	b.w	30b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   35d38:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   35d3a:	4604      	mov	r4, r0
   35d3c:	f7ff fcc6 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   35d40:	b1f8      	cbz	r0, 35d82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
   35d42:	4620      	mov	r0, r4
   35d44:	f7ff fcba 	bl	356bc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   35d48:	b918      	cbnz	r0, 35d52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
   35d4a:	4620      	mov	r0, r4
   35d4c:	f7ff fcc0 	bl	356d0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   35d50:	b140      	cbz	r0, 35d64 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
   35d52:	245a      	movs	r4, #90	; 0x5a
   35d54:	4668      	mov	r0, sp
   35d56:	f7fd fad7 	bl	33308 <mpsl_fem_pa_is_configured>
   35d5a:	f89d 0000 	ldrb.w	r0, [sp]
   35d5e:	b118      	cbz	r0, 35d68 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
   35d60:	2501      	movs	r5, #1
   35d62:	e002      	b.n	35d6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
   35d64:	2450      	movs	r4, #80	; 0x50
   35d66:	e7f5      	b.n	35d54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
   35d68:	2500      	movs	r5, #0
   35d6a:	a801      	add	r0, sp, #4
   35d6c:	f7fd fab4 	bl	332d8 <mpsl_fem_lna_is_configured>
   35d70:	f89d 0004 	ldrb.w	r0, [sp, #4]
   35d74:	b100      	cbz	r0, 35d78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
   35d76:	2001      	movs	r0, #1
   35d78:	4305      	orrs	r5, r0
   35d7a:	d000      	beq.n	35d7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
   35d7c:	340a      	adds	r4, #10
   35d7e:	4620      	mov	r0, r4
   35d80:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   35d82:	2061      	movs	r0, #97	; 0x61
   35d84:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   35d86:	b570      	push	{r4, r5, r6, lr}
   35d88:	4604      	mov	r4, r0
   35d8a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
   35d8c:	2500      	movs	r5, #0
   35d8e:	b130      	cbz	r0, 35d9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
   35d90:	f7f4 f852 	bl	29e38 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
   35d94:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   35d96:	fbb0 f2f1 	udiv	r2, r0, r1
   35d9a:	fb01 0512 	mls	r5, r1, r2, r0
   35d9e:	4620      	mov	r0, r4
   35da0:	f7ff fc69 	bl	35676 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
   35da4:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
   35da8:	4428      	add	r0, r5
   35daa:	34e8      	adds	r4, #232	; 0xe8
   35dac:	2500      	movs	r5, #0
   35dae:	1882      	adds	r2, r0, r2
   35db0:	eb45 0001 	adc.w	r0, r5, r1
   35db4:	e9c4 2004 	strd	r2, r0, [r4, #16]
   35db8:	f804 5b0b 	strb.w	r5, [r4], #11
   35dbc:	2001      	movs	r0, #1
   35dbe:	f804 0901 	strb.w	r0, [r4], #-1
   35dc2:	2002      	movs	r0, #2
   35dc4:	f804 09f2 	strb.w	r0, [r4], #-242
   35dc8:	4620      	mov	r0, r4
   35dca:	f7ff ffb5 	bl	35d38 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
   35dce:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
   35dd2:	4620      	mov	r0, r4
   35dd4:	f7ff ff0a 	bl	35bec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
   35dd8:	b930      	cbnz	r0, 35de8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
   35dda:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
   35dde:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   35de2:	f7ff ffa7 	bl	35d34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
   35de6:	b128      	cbz	r0, 35df4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
   35de8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
   35dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35df0:	f7ff bf2c 	b.w	35c4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
   35df4:	f240 712d 	movw	r1, #1837	; 0x72d
   35df8:	2030      	movs	r0, #48	; 0x30
   35dfa:	f7f1 fe29 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35dfe:	b510      	push	{r4, lr}
   35e00:	4604      	mov	r4, r0
   35e02:	2000      	movs	r0, #0
   35e04:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   35e08:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   35e0c:	f7fb fc66 	bl	316dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   35e10:	2020      	movs	r0, #32
   35e12:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
   35e16:	bd10      	pop	{r4, pc}
   35e18:	b510      	push	{r4, lr}
   35e1a:	b140      	cbz	r0, 35e2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
   35e1c:	2909      	cmp	r1, #9
   35e1e:	d22f      	bcs.n	35e80 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
   35e20:	e8df f001 	tbb	[pc, r1]
   35e24:	1e1e1607 	.word	0x1e1e1607
   35e28:	26222e1a 	.word	0x26222e1a
   35e2c:	002a      	.short	0x002a
   35e2e:	21cd      	movs	r1, #205	; 0xcd
   35e30:	e023      	b.n	35e7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   35e32:	4604      	mov	r4, r0
   35e34:	f7f4 fbe2 	bl	2a5fc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
   35e38:	b110      	cbz	r0, 35e40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
   35e3a:	f240 2187 	movw	r1, #647	; 0x287
   35e3e:	e01c      	b.n	35e7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   35e40:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   35e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
   35e4c:	f7fb be80 	b.w	31b50 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   35e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e54:	f000 b8b1 	b.w	35fba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
   35e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e5c:	f7f9 b84c 	b.w	2eef8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   35e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e64:	f7ff be64 	b.w	35b30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
   35e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e6c:	f7ff bc01 	b.w	35672 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   35e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35e74:	f7ff beab 	b.w	35bce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
   35e78:	21ed      	movs	r1, #237	; 0xed
   35e7a:	2030      	movs	r0, #48	; 0x30
   35e7c:	f7f1 fde8 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35e80:	21f1      	movs	r1, #241	; 0xf1
   35e82:	e7fa      	b.n	35e7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
   35e84:	b510      	push	{r4, lr}
   35e86:	0004      	movs	r4, r0
   35e88:	d009      	beq.n	35e9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
   35e8a:	2200      	movs	r2, #0
   35e8c:	2909      	cmp	r1, #9
   35e8e:	d25d      	bcs.n	35f4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
   35e90:	e8df f001 	tbb	[pc, r1]
   35e94:	43433b07 	.word	0x43433b07
   35e98:	4f485c3f 	.word	0x4f485c3f
   35e9c:	0058      	.short	0x0058
   35e9e:	2196      	movs	r1, #150	; 0x96
   35ea0:	e051      	b.n	35f46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   35ea2:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
   35ea6:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
   35eaa:	4620      	mov	r0, r4
   35eac:	b189      	cbz	r1, 35ed2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
   35eae:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
   35eb2:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
   35eb6:	428a      	cmp	r2, r1
   35eb8:	d106      	bne.n	35ec8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
   35eba:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
   35ebe:	1a51      	subs	r1, r2, r1
   35ec0:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   35ec4:	4611      	mov	r1, r2
   35ec6:	e00d      	b.n	35ee4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
   35ec8:	1a51      	subs	r1, r2, r1
   35eca:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   35ece:	b291      	uxth	r1, r2
   35ed0:	e008      	b.n	35ee4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
   35ed2:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
   35ed6:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
   35eda:	1a89      	subs	r1, r1, r2
   35edc:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
   35ee0:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
   35ee4:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
   35ee8:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
   35eec:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
   35ef0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
   35ef4:	f7f5 ffec 	bl	2bed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
   35ef8:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
   35efc:	2800      	cmp	r0, #0
   35efe:	d020      	beq.n	35f42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
   35f00:	4620      	mov	r0, r4
   35f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35f06:	f7f5 bbcd 	b.w	2b6a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
   35f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35f0e:	f000 b8a0 	b.w	36052 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
   35f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35f16:	f7f8 bfef 	b.w	2eef8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
   35f1a:	4620      	mov	r0, r4
   35f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35f20:	f7f5 be46 	b.w	2bbb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
   35f24:	2001      	movs	r0, #1
   35f26:	f7fa fbe5 	bl	306f4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
   35f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35f2e:	f7fe bba1 	b.w	34674 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
   35f32:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
   35f36:	2804      	cmp	r0, #4
   35f38:	d001      	beq.n	35f3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
   35f3a:	21bb      	movs	r1, #187	; 0xbb
   35f3c:	e003      	b.n	35f46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   35f3e:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
   35f42:	bd10      	pop	{r4, pc}
   35f44:	21c1      	movs	r1, #193	; 0xc1
   35f46:	2030      	movs	r0, #48	; 0x30
   35f48:	f7f1 fd82 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35f4c:	21c5      	movs	r1, #197	; 0xc5
   35f4e:	e7fa      	b.n	35f46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
   35f50:	b510      	push	{r4, lr}
   35f52:	f7f8 fee7 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   35f56:	f64d 7141 	movw	r1, #57153	; 0xdf41
   35f5a:	4408      	add	r0, r1
   35f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   35f60:	fbb0 f0f1 	udiv	r0, r0, r1
   35f64:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
   35f68:	bd10      	pop	{r4, pc}
   35f6a:	b538      	push	{r3, r4, r5, lr}
   35f6c:	2500      	movs	r5, #0
   35f6e:	4604      	mov	r4, r0
   35f70:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
   35f74:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
   35f78:	462b      	mov	r3, r5
   35f7a:	462a      	mov	r2, r5
   35f7c:	4629      	mov	r1, r5
   35f7e:	9500      	str	r5, [sp, #0]
   35f80:	f7f5 fc0c 	bl	2b79c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
   35f84:	b120      	cbz	r0, 35f90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
   35f86:	f240 211f 	movw	r1, #543	; 0x21f
   35f8a:	2030      	movs	r0, #48	; 0x30
   35f8c:	f7f1 fd60 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   35f90:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
   35f94:	2001      	movs	r0, #1
   35f96:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
   35f9a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
   35f9e:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
   35fa2:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
   35fa6:	3494      	adds	r4, #148	; 0x94
   35fa8:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
   35fac:	8820      	ldrh	r0, [r4, #0]
   35fae:	1e40      	subs	r0, r0, #1
   35fb0:	8020      	strh	r0, [r4, #0]
   35fb2:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
   35fb6:	2000      	movs	r0, #0
   35fb8:	bd38      	pop	{r3, r4, r5, pc}
   35fba:	b570      	push	{r4, r5, r6, lr}
   35fbc:	4605      	mov	r5, r0
   35fbe:	f7ff fb81 	bl	356c4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   35fc2:	b9c8      	cbnz	r0, 35ff8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
   35fc4:	2100      	movs	r1, #0
   35fc6:	4628      	mov	r0, r5
   35fc8:	f7ff fe0a 	bl	35be0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
   35fcc:	4604      	mov	r4, r0
   35fce:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   35fd2:	42a0      	cmp	r0, r4
   35fd4:	d20e      	bcs.n	35ff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   35fd6:	1a20      	subs	r0, r4, r0
   35fd8:	2867      	cmp	r0, #103	; 0x67
   35fda:	d200      	bcs.n	35fde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
   35fdc:	2067      	movs	r0, #103	; 0x67
   35fde:	2103      	movs	r1, #3
   35fe0:	f7fa fb98 	bl	30714 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   35fe4:	b130      	cbz	r0, 35ff4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
   35fe6:	4628      	mov	r0, r5
   35fe8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
   35fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35ff0:	f7ff bb3f 	b.w	35672 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
   35ff4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
   35ff8:	4628      	mov	r0, r5
   35ffa:	f7f4 fb1b 	bl	2a634 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
   35ffe:	2800      	cmp	r0, #0
   36000:	d004      	beq.n	3600c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
   36002:	f240 21bd 	movw	r1, #701	; 0x2bd
   36006:	2030      	movs	r0, #48	; 0x30
   36008:	f7f1 fd22 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3600c:	bd70      	pop	{r4, r5, r6, pc}
   3600e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   36012:	f001 0307 	and.w	r3, r1, #7
   36016:	7802      	ldrb	r2, [r0, #0]
   36018:	2101      	movs	r1, #1
   3601a:	4099      	lsls	r1, r3
   3601c:	438a      	bics	r2, r1
   3601e:	7002      	strb	r2, [r0, #0]
   36020:	4770      	bx	lr

00036022 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
   36022:	b510      	push	{r4, lr}
   36024:	460c      	mov	r4, r1
   36026:	f7f2 f963 	bl	282f0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
   3602a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   3602e:	2820      	cmp	r0, #32
   36030:	d00c      	beq.n	3604c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
   36032:	f7fb fb75 	bl	31720 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
   36036:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
   3603a:	f7fb fb4f 	bl	316dc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   3603e:	2800      	cmp	r0, #0
   36040:	d104      	bne.n	3604c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
   36042:	f640 4129 	movw	r1, #3113	; 0xc29
   36046:	2031      	movs	r0, #49	; 0x31
   36048:	f7f1 fd02 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3604c:	bd10      	pop	{r4, pc}

0003604e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
   3604e:	2000      	movs	r0, #0
   36050:	4770      	bx	lr

00036052 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
   36052:	f7f2 bde1 	b.w	28c18 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

00036056 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
   36056:	2100      	movs	r1, #0
   36058:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
   3605c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   36060:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
   36064:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
   36068:	b109      	cbz	r1, 3606e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
   3606a:	2102      	movs	r1, #2
   3606c:	e000      	b.n	36070 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
   3606e:	2103      	movs	r1, #3
   36070:	f7f5 b9d6 	b.w	2b420 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
   36074:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
   36078:	28fe      	cmp	r0, #254	; 0xfe
   3607a:	d001      	beq.n	36080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
   3607c:	2001      	movs	r0, #1
   3607e:	4770      	bx	lr
   36080:	2000      	movs	r0, #0
   36082:	4770      	bx	lr
   36084:	b510      	push	{r4, lr}
   36086:	2801      	cmp	r0, #1
   36088:	d006      	beq.n	36098 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   3608a:	2802      	cmp	r0, #2
   3608c:	d004      	beq.n	36098 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
   3608e:	f240 21d7 	movw	r1, #727	; 0x2d7
   36092:	2006      	movs	r0, #6
   36094:	f7f1 fcdc 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   36098:	bd10      	pop	{r4, pc}
   3609a:	2801      	cmp	r0, #1
   3609c:	d002      	beq.n	360a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
   3609e:	2802      	cmp	r0, #2
   360a0:	d105      	bne.n	360ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   360a2:	e002      	b.n	360aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
   360a4:	2901      	cmp	r1, #1
   360a6:	d004      	beq.n	360b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   360a8:	e001      	b.n	360ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
   360aa:	2902      	cmp	r1, #2
   360ac:	d001      	beq.n	360b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
   360ae:	2000      	movs	r0, #0
   360b0:	4770      	bx	lr
   360b2:	2001      	movs	r0, #1
   360b4:	4770      	bx	lr
   360b6:	1a40      	subs	r0, r0, r1
   360b8:	b200      	sxth	r0, r0
   360ba:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   360be:	4288      	cmp	r0, r1
   360c0:	dc01      	bgt.n	360c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
   360c2:	2800      	cmp	r0, #0
   360c4:	dc01      	bgt.n	360ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
   360c6:	2001      	movs	r0, #1
   360c8:	4770      	bx	lr
   360ca:	2000      	movs	r0, #0
   360cc:	4770      	bx	lr
   360ce:	6840      	ldr	r0, [r0, #4]
   360d0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   360d4:	2912      	cmp	r1, #18
   360d6:	d001      	beq.n	360dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
   360d8:	2002      	movs	r0, #2
   360da:	4770      	bx	lr
   360dc:	2113      	movs	r1, #19
   360de:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   360e2:	2000      	movs	r0, #0
   360e4:	4770      	bx	lr
   360e6:	b510      	push	{r4, lr}
   360e8:	6843      	ldr	r3, [r0, #4]
   360ea:	4604      	mov	r4, r0
   360ec:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
   360f0:	2808      	cmp	r0, #8
   360f2:	d20d      	bcs.n	36110 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
   360f4:	f500 7210 	add.w	r2, r0, #576	; 0x240
   360f8:	f1c0 0008 	rsb	r0, r0, #8
   360fc:	b2c1      	uxtb	r1, r0
   360fe:	1898      	adds	r0, r3, r2
   36100:	f7f1 fd48 	bl	27b94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   36104:	6861      	ldr	r1, [r4, #4]
   36106:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
   3610a:	4410      	add	r0, r2
   3610c:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
   36110:	6862      	ldr	r2, [r4, #4]
   36112:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
   36116:	3908      	subs	r1, #8
   36118:	2904      	cmp	r1, #4
   3611a:	d20d      	bcs.n	36138 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
   3611c:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   36120:	f1c1 0104 	rsb	r1, r1, #4
   36124:	b2c9      	uxtb	r1, r1
   36126:	4410      	add	r0, r2
   36128:	f7f1 fd34 	bl	27b94 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
   3612c:	6861      	ldr	r1, [r4, #4]
   3612e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
   36132:	4410      	add	r0, r2
   36134:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
   36138:	6860      	ldr	r0, [r4, #4]
   3613a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
   3613e:	290c      	cmp	r1, #12
   36140:	d30f      	bcc.n	36162 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
   36142:	d005      	beq.n	36150 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
   36144:	f640 01c2 	movw	r1, #2242	; 0x8c2
   36148:	f04f 0031 	mov.w	r0, #49	; 0x31
   3614c:	f7f1 fc80 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   36150:	2100      	movs	r1, #0
   36152:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
   36156:	2101      	movs	r1, #1
   36158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3615c:	2004      	movs	r0, #4
   3615e:	f7f6 bd43 	b.w	2cbe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
   36162:	bd10      	pop	{r4, pc}
   36164:	6842      	ldr	r2, [r0, #4]
   36166:	2131      	movs	r1, #49	; 0x31
   36168:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
   3616c:	6840      	ldr	r0, [r0, #4]
   3616e:	2100      	movs	r1, #0
   36170:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
   36174:	4770      	bx	lr
   36176:	b510      	push	{r4, lr}
   36178:	6841      	ldr	r1, [r0, #4]
   3617a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
   3617e:	2a15      	cmp	r2, #21
   36180:	d004      	beq.n	3618c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
   36182:	f240 7183 	movw	r1, #1923	; 0x783
   36186:	2031      	movs	r0, #49	; 0x31
   36188:	f7f1 fc62 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3618c:	2201      	movs	r2, #1
   3618e:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
   36192:	6840      	ldr	r0, [r0, #4]
   36194:	2116      	movs	r1, #22
   36196:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   3619a:	bd10      	pop	{r4, pc}
   3619c:	f7ff b8e1 	b.w	35362 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
   361a0:	b510      	push	{r4, lr}
   361a2:	6841      	ldr	r1, [r0, #4]
   361a4:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
   361a8:	2a11      	cmp	r2, #17
   361aa:	d004      	beq.n	361b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
   361ac:	f240 717b 	movw	r1, #1915	; 0x77b
   361b0:	2031      	movs	r0, #49	; 0x31
   361b2:	f7f1 fc4d 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   361b6:	2201      	movs	r2, #1
   361b8:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
   361bc:	6840      	ldr	r0, [r0, #4]
   361be:	2112      	movs	r1, #18
   361c0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   361c4:	bd10      	pop	{r4, pc}
   361c6:	b510      	push	{r4, lr}
   361c8:	6841      	ldr	r1, [r0, #4]
   361ca:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
   361ce:	2822      	cmp	r0, #34	; 0x22
   361d0:	d005      	beq.n	361de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
   361d2:	b120      	cbz	r0, 361de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
   361d4:	f240 71e7 	movw	r1, #2023	; 0x7e7
   361d8:	2031      	movs	r0, #49	; 0x31
   361da:	f7f1 fc39 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   361de:	2023      	movs	r0, #35	; 0x23
   361e0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
   361e4:	bd10      	pop	{r4, pc}
   361e6:	b510      	push	{r4, lr}
   361e8:	6840      	ldr	r0, [r0, #4]
   361ea:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   361ee:	2916      	cmp	r1, #22
   361f0:	d004      	beq.n	361fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
   361f2:	f44f 61f2 	mov.w	r1, #1936	; 0x790
   361f6:	2031      	movs	r0, #49	; 0x31
   361f8:	f7f1 fc2a 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   361fc:	211a      	movs	r1, #26
   361fe:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   36202:	bd10      	pop	{r4, pc}
   36204:	f7ff b89b 	b.w	3533e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
   36208:	b510      	push	{r4, lr}
   3620a:	6840      	ldr	r0, [r0, #4]
   3620c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   36210:	2916      	cmp	r1, #22
   36212:	d004      	beq.n	3621e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
   36214:	f240 718a 	movw	r1, #1930	; 0x78a
   36218:	2031      	movs	r0, #49	; 0x31
   3621a:	f7f1 fc19 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3621e:	2118      	movs	r1, #24
   36220:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
   36224:	bd10      	pop	{r4, pc}
   36226:	f7ff b921 	b.w	3546c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
   3622a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   3622e:	f001 0107 	and.w	r1, r1, #7
   36232:	7800      	ldrb	r0, [r0, #0]
   36234:	40c8      	lsrs	r0, r1
   36236:	f000 0001 	and.w	r0, r0, #1
   3623a:	4770      	bx	lr

0003623c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
   3623c:	b510      	push	{r4, lr}
   3623e:	2801      	cmp	r0, #1
   36240:	d006      	beq.n	36250 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
   36242:	2802      	cmp	r0, #2
   36244:	d006      	beq.n	36254 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
   36246:	f240 2175 	movw	r1, #629	; 0x275
   3624a:	2078      	movs	r0, #120	; 0x78
   3624c:	f7f1 fc00 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   36250:	2000      	movs	r0, #0
   36252:	bd10      	pop	{r4, pc}
   36254:	2001      	movs	r0, #1
   36256:	bd10      	pop	{r4, pc}

00036258 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
   36258:	207f      	movs	r0, #127	; 0x7f
   3625a:	f000 b88c 	b.w	36376 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0003625e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
   3625e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   36262:	f000 b888 	b.w	36376 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

00036266 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
   36266:	b510      	push	{r4, lr}
   36268:	4604      	mov	r4, r0
   3626a:	f7f8 f83b 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   3626e:	1e64      	subs	r4, r4, #1
   36270:	b2e2      	uxtb	r2, r4
   36272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36276:	f000 b85b 	b.w	36330 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0003627a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
   3627a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3627e:	4607      	mov	r7, r0
   36280:	461e      	mov	r6, r3
   36282:	4690      	mov	r8, r2
   36284:	460c      	mov	r4, r1
   36286:	4608      	mov	r0, r1
   36288:	f7ff ffed 	bl	36266 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
   3628c:	b1e8      	cbz	r0, 362ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
   3628e:	687d      	ldr	r5, [r7, #4]
   36290:	2121      	movs	r1, #33	; 0x21
   36292:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   36296:	3580      	adds	r5, #128	; 0x80
   36298:	f7ff ffc7 	bl	3622a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
   3629c:	b1b8      	cbz	r0, 362ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
   3629e:	1e64      	subs	r4, r4, #1
   362a0:	6f29      	ldr	r1, [r5, #112]	; 0x70
   362a2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   362a4:	b2e2      	uxtb	r2, r4
   362a6:	f000 f843 	bl	36330 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
   362aa:	b180      	cbz	r0, 362ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
   362ac:	6878      	ldr	r0, [r7, #4]
   362ae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
   362b2:	f88d 1000 	strb.w	r1, [sp]
   362b6:	9900      	ldr	r1, [sp, #0]
   362b8:	9100      	str	r1, [sp, #0]
   362ba:	f89d 1000 	ldrb.w	r1, [sp]
   362be:	f200 1047 	addw	r0, r0, #327	; 0x147
   362c2:	b131      	cbz	r1, 362d2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
   362c4:	203a      	movs	r0, #58	; 0x3a
   362c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   362ca:	2011      	movs	r0, #17
   362cc:	e7fb      	b.n	362c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
   362ce:	201a      	movs	r0, #26
   362d0:	e7f9      	b.n	362c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
   362d2:	1c81      	adds	r1, r0, #2
   362d4:	700e      	strb	r6, [r1, #0]
   362d6:	2101      	movs	r1, #1
   362d8:	40a1      	lsls	r1, r4
   362da:	7001      	strb	r1, [r0, #0]
   362dc:	f880 8001 	strb.w	r8, [r0, #1]
   362e0:	2000      	movs	r0, #0
   362e2:	e7f0      	b.n	362c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

000362e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
   362e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   362e8:	460d      	mov	r5, r1
   362ea:	4606      	mov	r6, r0
   362ec:	f7ff ffb4 	bl	36258 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
   362f0:	4607      	mov	r7, r0
   362f2:	f7ff ffb4 	bl	3625e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
   362f6:	2400      	movs	r4, #0
   362f8:	4285      	cmp	r5, r0
   362fa:	d100      	bne.n	362fe <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
   362fc:	2401      	movs	r4, #1
   362fe:	42bd      	cmp	r5, r7
   36300:	d101      	bne.n	36306 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
   36302:	f044 0402 	orr.w	r4, r4, #2
   36306:	f000 f826 	bl	36356 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
   3630a:	2200      	movs	r2, #0
   3630c:	4601      	mov	r1, r0
   3630e:	2301      	movs	r3, #1
   36310:	fa03 f002 	lsl.w	r0, r3, r2
   36314:	4208      	tst	r0, r1
   36316:	d005      	beq.n	36324 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
   36318:	eb06 0042 	add.w	r0, r6, r2, lsl #1
   3631c:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
   36320:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
   36324:	1c52      	adds	r2, r2, #1
   36326:	b2d2      	uxtb	r2, r2
   36328:	2a02      	cmp	r2, #2
   3632a:	d3f1      	bcc.n	36310 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
   3632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36330:	b510      	push	{r4, lr}
   36332:	4614      	mov	r4, r2
   36334:	4602      	mov	r2, r0
   36336:	2000      	movs	r0, #0
   36338:	4603      	mov	r3, r0
   3633a:	2c02      	cmp	r4, #2
   3633c:	d205      	bcs.n	3634a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
   3633e:	4610      	mov	r0, r2
   36340:	f000 f810 	bl	36364 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
   36344:	2101      	movs	r1, #1
   36346:	40a1      	lsls	r1, r4
   36348:	b2cb      	uxtb	r3, r1
   3634a:	4203      	tst	r3, r0
   3634c:	d001      	beq.n	36352 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
   3634e:	2001      	movs	r0, #1
   36350:	bd10      	pop	{r4, pc}
   36352:	2000      	movs	r0, #0
   36354:	bd10      	pop	{r4, pc}
   36356:	b510      	push	{r4, lr}
   36358:	f7f7 ffc4 	bl	2e2e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   3635c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36360:	f000 b800 	b.w	36364 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
   36364:	0a00      	lsrs	r0, r0, #8
   36366:	2201      	movs	r2, #1
   36368:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   3636c:	07c0      	lsls	r0, r0, #31
   3636e:	d000      	beq.n	36372 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
   36370:	2203      	movs	r2, #3
   36372:	4610      	mov	r0, r2
   36374:	4770      	bx	lr
   36376:	b508      	push	{r3, lr}
   36378:	2301      	movs	r3, #1
   3637a:	f640 1288 	movw	r2, #2440	; 0x988
   3637e:	4669      	mov	r1, sp
   36380:	f7fc ffc8 	bl	33314 <mpsl_fem_tx_power_split>
   36384:	bd08      	pop	{r3, pc}
   36386:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
   3638a:	f001 0107 	and.w	r1, r1, #7
   3638e:	7800      	ldrb	r0, [r0, #0]
   36390:	40c8      	lsrs	r0, r1
   36392:	f000 0001 	and.w	r0, r0, #1
   36396:	4770      	bx	lr
   36398:	b118      	cbz	r0, 363a2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
   3639a:	2802      	cmp	r0, #2
   3639c:	d001      	beq.n	363a2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
   3639e:	2001      	movs	r0, #1
   363a0:	4770      	bx	lr
   363a2:	2000      	movs	r0, #0
   363a4:	4770      	bx	lr

000363a6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
   363a6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   363a8:	7881      	ldrb	r1, [r0, #2]
   363aa:	2500      	movs	r5, #0
   363ac:	4604      	mov	r4, r0
   363ae:	291a      	cmp	r1, #26
   363b0:	d024      	beq.n	363fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
   363b2:	dc0e      	bgt.n	363d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
   363b4:	2916      	cmp	r1, #22
   363b6:	d22b      	bcs.n	36410 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   363b8:	e8df f001 	tbb	[pc, r1]
   363bc:	2a2a2a2a 	.word	0x2a2a2a2a
   363c0:	2a2a202a 	.word	0x2a2a202a
   363c4:	2a2a2a2a 	.word	0x2a2a2a2a
   363c8:	2a2a2a2a 	.word	0x2a2a2a2a
   363cc:	202a2a2a 	.word	0x202a2a2a
   363d0:	2020      	.short	0x2020
   363d2:	292a      	cmp	r1, #42	; 0x2a
   363d4:	d01c      	beq.n	36410 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   363d6:	dc0b      	bgt.n	363f0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
   363d8:	f1a1 011e 	sub.w	r1, r1, #30
   363dc:	290c      	cmp	r1, #12
   363de:	d217      	bcs.n	36410 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   363e0:	e8df f001 	tbb	[pc, r1]
   363e4:	16161616 	.word	0x16161616
   363e8:	16161616 	.word	0x16161616
   363ec:	0c161616 	.word	0x0c161616
   363f0:	393a      	subs	r1, #58	; 0x3a
   363f2:	2902      	cmp	r1, #2
   363f4:	d20c      	bcs.n	36410 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   363f6:	e8df f001 	tbb	[pc, r1]
   363fa:	010b      	.short	0x010b
   363fc:	8820      	ldrh	r0, [r4, #0]
   363fe:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   36402:	d205      	bcs.n	36410 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
   36404:	4669      	mov	r1, sp
   36406:	f7fe f990 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   3640a:	b118      	cbz	r0, 36414 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
   3640c:	2002      	movs	r0, #2
   3640e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   36410:	2012      	movs	r0, #18
   36412:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   36414:	9901      	ldr	r1, [sp, #4]
   36416:	4668      	mov	r0, sp
   36418:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
   3641c:	f88d 2008 	strb.w	r2, [sp, #8]
   36420:	9a02      	ldr	r2, [sp, #8]
   36422:	9202      	str	r2, [sp, #8]
   36424:	f89d 2008 	ldrb.w	r2, [sp, #8]
   36428:	f501 7198 	add.w	r1, r1, #304	; 0x130
   3642c:	b10a      	cbz	r2, 36432 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
   3642e:	200c      	movs	r0, #12
   36430:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   36432:	78a2      	ldrb	r2, [r4, #2]
   36434:	704a      	strb	r2, [r1, #1]
   36436:	22ff      	movs	r2, #255	; 0xff
   36438:	700a      	strb	r2, [r1, #0]
   3643a:	f7fe fd09 	bl	34e50 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   3643e:	4628      	mov	r0, r5
   36440:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00036442 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
   36442:	b510      	push	{r4, lr}
   36444:	4604      	mov	r4, r0
   36446:	f7f7 fe77 	bl	2e138 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   3644a:	b108      	cbz	r0, 36450 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
   3644c:	200c      	movs	r0, #12
   3644e:	bd10      	pop	{r4, pc}
   36450:	7820      	ldrb	r0, [r4, #0]
   36452:	b118      	cbz	r0, 3645c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   36454:	2801      	cmp	r0, #1
   36456:	d001      	beq.n	3645c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
   36458:	2012      	movs	r0, #18
   3645a:	bd10      	pop	{r4, pc}
   3645c:	f7ff ff9c 	bl	36398 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   36460:	1c61      	adds	r1, r4, #1
   36462:	f7f3 fef3 	bl	2a24c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
   36466:	b108      	cbz	r0, 3646c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
   36468:	2000      	movs	r0, #0
   3646a:	bd10      	pop	{r4, pc}
   3646c:	2007      	movs	r0, #7
   3646e:	bd10      	pop	{r4, pc}

00036470 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
   36470:	b510      	push	{r4, lr}
   36472:	f7f7 fe61 	bl	2e138 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   36476:	b108      	cbz	r0, 3647c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
   36478:	200c      	movs	r0, #12
   3647a:	bd10      	pop	{r4, pc}
   3647c:	f7f3 ff44 	bl	2a308 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   36480:	2000      	movs	r0, #0
   36482:	f7f3 f819 	bl	294b8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
   36486:	2000      	movs	r0, #0
   36488:	bd10      	pop	{r4, pc}

0003648a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
   3648a:	b510      	push	{r4, lr}
   3648c:	460b      	mov	r3, r1
   3648e:	2201      	movs	r2, #1
   36490:	f100 0110 	add.w	r1, r0, #16
   36494:	f7fe f92b 	bl	346ee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
   36498:	2000      	movs	r0, #0
   3649a:	bd10      	pop	{r4, pc}

0003649c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
   3649c:	b510      	push	{r4, lr}
   3649e:	8800      	ldrh	r0, [r0, #0]
   364a0:	2100      	movs	r1, #0
   364a2:	f7f1 fe03 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   364a6:	b118      	cbz	r0, 364b0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
   364a8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
   364ac:	b111      	cbz	r1, 364b4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
   364ae:	e007      	b.n	364c0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
   364b0:	2002      	movs	r0, #2
   364b2:	bd10      	pop	{r4, pc}
   364b4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
   364b8:	2915      	cmp	r1, #21
   364ba:	d003      	beq.n	364c4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   364bc:	2916      	cmp	r1, #22
   364be:	d001      	beq.n	364c4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
   364c0:	200c      	movs	r0, #12
   364c2:	bd10      	pop	{r4, pc}
   364c4:	2102      	movs	r1, #2
   364c6:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
   364ca:	2000      	movs	r0, #0
   364cc:	bd10      	pop	{r4, pc}

000364ce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
   364ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   364d0:	4605      	mov	r5, r0
   364d2:	8800      	ldrh	r0, [r0, #0]
   364d4:	2100      	movs	r1, #0
   364d6:	f7f1 fde9 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   364da:	0004      	movs	r4, r0
   364dc:	d003      	beq.n	364e6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
   364de:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
   364e2:	b110      	cbz	r0, 364ea <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
   364e4:	e011      	b.n	3650a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   364e6:	2002      	movs	r0, #2
   364e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   364ea:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
   364ee:	2815      	cmp	r0, #21
   364f0:	d001      	beq.n	364f6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
   364f2:	2816      	cmp	r0, #22
   364f4:	d109      	bne.n	3650a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
   364f6:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
   364fa:	f88d 0000 	strb.w	r0, [sp]
   364fe:	9800      	ldr	r0, [sp, #0]
   36500:	9000      	str	r0, [sp, #0]
   36502:	f89d 0000 	ldrb.w	r0, [sp]
   36506:	2601      	movs	r6, #1
   36508:	b108      	cbz	r0, 3650e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
   3650a:	200c      	movs	r0, #12
   3650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3650e:	2210      	movs	r2, #16
   36510:	1ca9      	adds	r1, r5, #2
   36512:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
   36516:	f001 f852 	bl	375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   3651a:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
   3651e:	2000      	movs	r0, #0
   36520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036522 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
   36522:	b510      	push	{r4, lr}
   36524:	2108      	movs	r1, #8
   36526:	f7f1 fb43 	bl	27bb0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
   3652a:	2000      	movs	r0, #0
   3652c:	bd10      	pop	{r4, pc}

0003652e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
   3652e:	b510      	push	{r4, lr}
   36530:	4604      	mov	r4, r0
   36532:	f7f7 fcdf 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   36536:	f7ff f8cf 	bl	356d8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   3653a:	f7f3 f8bf 	bl	296bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   3653e:	7020      	strb	r0, [r4, #0]
   36540:	2000      	movs	r0, #0
   36542:	bd10      	pop	{r4, pc}

00036544 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
   36544:	21fb      	movs	r1, #251	; 0xfb
   36546:	8001      	strh	r1, [r0, #0]
   36548:	f640 0248 	movw	r2, #2120	; 0x848
   3654c:	8042      	strh	r2, [r0, #2]
   3654e:	8081      	strh	r1, [r0, #4]
   36550:	80c2      	strh	r2, [r0, #6]
   36552:	2000      	movs	r0, #0
   36554:	4770      	bx	lr

00036556 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
   36556:	b51c      	push	{r2, r3, r4, lr}
   36558:	8800      	ldrh	r0, [r0, #0]
   3655a:	4669      	mov	r1, sp
   3655c:	f7fe f8e5 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   36560:	2800      	cmp	r0, #0
   36562:	d10d      	bne.n	36580 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
   36564:	f89d 0000 	ldrb.w	r0, [sp]
   36568:	9c01      	ldr	r4, [sp, #4]
   3656a:	2801      	cmp	r0, #1
   3656c:	f504 7498 	add.w	r4, r4, #304	; 0x130
   36570:	d103      	bne.n	3657a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
   36572:	9801      	ldr	r0, [sp, #4]
   36574:	f000 fce2 	bl	36f3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   36578:	b118      	cbz	r0, 36582 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
   3657a:	7ce0      	ldrb	r0, [r4, #19]
   3657c:	b118      	cbz	r0, 36586 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
   3657e:	203a      	movs	r0, #58	; 0x3a
   36580:	bd1c      	pop	{r2, r3, r4, pc}
   36582:	2002      	movs	r0, #2
   36584:	bd1c      	pop	{r2, r3, r4, pc}
   36586:	2001      	movs	r0, #1
   36588:	74e0      	strb	r0, [r4, #19]
   3658a:	2000      	movs	r0, #0
   3658c:	bd1c      	pop	{r2, r3, r4, pc}

0003658e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
   3658e:	b510      	push	{r4, lr}
   36590:	4604      	mov	r4, r0
   36592:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   36596:	f000 fd0d 	bl	36fb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   3659a:	f7f3 f88f 	bl	296bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   3659e:	7020      	strb	r0, [r4, #0]
   365a0:	f000 fcc9 	bl	36f36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   365a4:	f7f3 f88a 	bl	296bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   365a8:	7060      	strb	r0, [r4, #1]
   365aa:	2000      	movs	r0, #0
   365ac:	bd10      	pop	{r4, pc}

000365ae <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
   365ae:	b510      	push	{r4, lr}
   365b0:	4604      	mov	r4, r0
   365b2:	f7f3 feaf 	bl	2a314 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
   365b6:	7020      	strb	r0, [r4, #0]
   365b8:	2000      	movs	r0, #0
   365ba:	bd10      	pop	{r4, pc}

000365bc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
   365bc:	b510      	push	{r4, lr}
   365be:	4604      	mov	r4, r0
   365c0:	f7f7 fdba 	bl	2e138 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
   365c4:	b108      	cbz	r0, 365ca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
   365c6:	200c      	movs	r0, #12
   365c8:	bd10      	pop	{r4, pc}
   365ca:	7820      	ldrb	r0, [r4, #0]
   365cc:	b108      	cbz	r0, 365d2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
   365ce:	2801      	cmp	r0, #1
   365d0:	d107      	bne.n	365e2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   365d2:	f7ff fee1 	bl	36398 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
   365d6:	1c61      	adds	r1, r4, #1
   365d8:	f7f3 fe76 	bl	2a2c8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
   365dc:	b108      	cbz	r0, 365e2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
   365de:	2000      	movs	r0, #0
   365e0:	bd10      	pop	{r4, pc}
   365e2:	2012      	movs	r0, #18
   365e4:	bd10      	pop	{r4, pc}

000365e6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
   365e6:	b51c      	push	{r2, r3, r4, lr}
   365e8:	4604      	mov	r4, r0
   365ea:	f7f7 fc83 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   365ee:	2000      	movs	r0, #0
   365f0:	f88d 0002 	strb.w	r0, [sp, #2]
   365f4:	2103      	movs	r1, #3
   365f6:	f88d 1001 	strb.w	r1, [sp, #1]
   365fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   365fe:	f88d 1003 	strb.w	r1, [sp, #3]
   36602:	f88d 0000 	strb.w	r0, [sp]
   36606:	4668      	mov	r0, sp
   36608:	9401      	str	r4, [sp, #4]
   3660a:	f000 f9a2 	bl	36952 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
   3660e:	bd1c      	pop	{r2, r3, r4, pc}

00036610 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
   36610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   36612:	4605      	mov	r5, r0
   36614:	f7f7 fc6e 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   36618:	4606      	mov	r6, r0
   3661a:	7828      	ldrb	r0, [r5, #0]
   3661c:	2400      	movs	r4, #0
   3661e:	b160      	cbz	r0, 3663a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   36620:	f88d 4000 	strb.w	r4, [sp]
   36624:	2001      	movs	r0, #1
   36626:	f10d 0101 	add.w	r1, sp, #1
   3662a:	f7f2 f975 	bl	28918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   3662e:	b120      	cbz	r0, 3663a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
   36630:	4668      	mov	r0, sp
   36632:	f000 f897 	bl	36764 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
   36636:	2800      	cmp	r0, #0
   36638:	d112      	bne.n	36660 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   3663a:	f88d 400c 	strb.w	r4, [sp, #12]
   3663e:	4630      	mov	r0, r6
   36640:	f7ff f840 	bl	356c4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
   36644:	b118      	cbz	r0, 3664e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
   36646:	2080      	movs	r0, #128	; 0x80
   36648:	f8ad 000d 	strh.w	r0, [sp, #13]
   3664c:	e001      	b.n	36652 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
   3664e:	f8ad 400d 	strh.w	r4, [sp, #13]
   36652:	f88d 400f 	strb.w	r4, [sp, #15]
   36656:	7828      	ldrb	r0, [r5, #0]
   36658:	2801      	cmp	r0, #1
   3665a:	d003      	beq.n	36664 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
   3665c:	b138      	cbz	r0, 3666e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
   3665e:	2012      	movs	r0, #18
   36660:	b004      	add	sp, #16
   36662:	bd70      	pop	{r4, r5, r6, pc}
   36664:	a903      	add	r1, sp, #12
   36666:	4630      	mov	r0, r6
   36668:	f7f7 fc60 	bl	2df2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
   3666c:	e7f8      	b.n	36660 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
   3666e:	4630      	mov	r0, r6
   36670:	f000 fc7a 	bl	36f68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
   36674:	e7f4      	b.n	36660 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00036676 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
   36676:	b530      	push	{r4, r5, lr}
   36678:	b08b      	sub	sp, #44	; 0x2c
   3667a:	4604      	mov	r4, r0
   3667c:	f7f7 fc3a 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   36680:	4602      	mov	r2, r0
   36682:	7920      	ldrb	r0, [r4, #4]
   36684:	2804      	cmp	r0, #4
   36686:	d803      	bhi.n	36690 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
   36688:	8860      	ldrh	r0, [r4, #2]
   3668a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   3668e:	d902      	bls.n	36696 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
   36690:	2012      	movs	r0, #18
   36692:	b00b      	add	sp, #44	; 0x2c
   36694:	bd30      	pop	{r4, r5, pc}
   36696:	2500      	movs	r5, #0
   36698:	f88d 5004 	strb.w	r5, [sp, #4]
   3669c:	7921      	ldrb	r1, [r4, #4]
   3669e:	9500      	str	r5, [sp, #0]
   366a0:	f89d 0000 	ldrb.w	r0, [sp]
   366a4:	2905      	cmp	r1, #5
   366a6:	f040 0010 	orr.w	r0, r0, #16
   366aa:	f88d 0000 	strb.w	r0, [sp]
   366ae:	d254      	bcs.n	3675a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
   366b0:	e8df f001 	tbb	[pc, r1]
   366b4:	11050803 	.word	0x11050803
   366b8:	000b      	.short	0x000b
   366ba:	f040 0001 	orr.w	r0, r0, #1
   366be:	f040 0002 	orr.w	r0, r0, #2
   366c2:	e006      	b.n	366d2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
   366c4:	f040 0009 	orr.w	r0, r0, #9
   366c8:	e001      	b.n	366ce <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
   366ca:	f040 0001 	orr.w	r0, r0, #1
   366ce:	f040 0004 	orr.w	r0, r0, #4
   366d2:	f88d 0000 	strb.w	r0, [sp]
   366d6:	f8bd 0000 	ldrh.w	r0, [sp]
   366da:	9000      	str	r0, [sp, #0]
   366dc:	f8bd 0000 	ldrh.w	r0, [sp]
   366e0:	f8ad 0005 	strh.w	r0, [sp, #5]
   366e4:	8821      	ldrh	r1, [r4, #0]
   366e6:	f8dd 0006 	ldr.w	r0, [sp, #6]
   366ea:	f361 201f 	bfi	r0, r1, #8, #24
   366ee:	f8cd 0006 	str.w	r0, [sp, #6]
   366f2:	8861      	ldrh	r1, [r4, #2]
   366f4:	f8dd 0009 	ldr.w	r0, [sp, #9]
   366f8:	f361 201f 	bfi	r0, r1, #8, #24
   366fc:	f8cd 0009 	str.w	r0, [sp, #9]
   36700:	7b60      	ldrb	r0, [r4, #13]
   36702:	f88d 000d 	strb.w	r0, [sp, #13]
   36706:	7960      	ldrb	r0, [r4, #5]
   36708:	f88d 000e 	strb.w	r0, [sp, #14]
   3670c:	79a0      	ldrb	r0, [r4, #6]
   3670e:	f88d 000f 	strb.w	r0, [sp, #15]
   36712:	f8d4 0007 	ldr.w	r0, [r4, #7]
   36716:	9004      	str	r0, [sp, #16]
   36718:	f8b4 000b 	ldrh.w	r0, [r4, #11]
   3671c:	f8ad 0014 	strh.w	r0, [sp, #20]
   36720:	7ba0      	ldrb	r0, [r4, #14]
   36722:	f88d 0016 	strb.w	r0, [sp, #22]
   36726:	207f      	movs	r0, #127	; 0x7f
   36728:	f88d 0017 	strb.w	r0, [sp, #23]
   3672c:	2001      	movs	r0, #1
   3672e:	f88d 0018 	strb.w	r0, [sp, #24]
   36732:	f88d 5019 	strb.w	r5, [sp, #25]
   36736:	f88d 001a 	strb.w	r0, [sp, #26]
   3673a:	f88d 501b 	strb.w	r5, [sp, #27]
   3673e:	4610      	mov	r0, r2
   36740:	f7fe ffe0 	bl	35704 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
   36744:	f88d 001c 	strb.w	r0, [sp, #28]
   36748:	f88d 501d 	strb.w	r5, [sp, #29]
   3674c:	f88d 501e 	strb.w	r5, [sp, #30]
   36750:	a909      	add	r1, sp, #36	; 0x24
   36752:	a801      	add	r0, sp, #4
   36754:	f7f7 fa04 	bl	2db60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
   36758:	e79b      	b.n	36692 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
   3675a:	f241 31a9 	movw	r1, #5033	; 0x13a9
   3675e:	2039      	movs	r0, #57	; 0x39
   36760:	f7f1 f976 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00036764 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
   36764:	b570      	push	{r4, r5, r6, lr}
   36766:	4604      	mov	r4, r0
   36768:	7800      	ldrb	r0, [r0, #0]
   3676a:	2101      	movs	r1, #1
   3676c:	f7f1 fc9e 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   36770:	0005      	movs	r5, r0
   36772:	d007      	beq.n	36784 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
   36774:	f7ff f970 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   36778:	b160      	cbz	r0, 36794 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   3677a:	4628      	mov	r0, r5
   3677c:	f7fe ffa8 	bl	356d0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   36780:	b110      	cbz	r0, 36788 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   36782:	e005      	b.n	36790 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   36784:	2042      	movs	r0, #66	; 0x42
   36786:	bd70      	pop	{r4, r5, r6, pc}
   36788:	4628      	mov	r0, r5
   3678a:	f7fe ff97 	bl	356bc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   3678e:	b108      	cbz	r0, 36794 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   36790:	200c      	movs	r0, #12
   36792:	bd70      	pop	{r4, r5, r6, pc}
   36794:	1c61      	adds	r1, r4, #1
   36796:	4628      	mov	r0, r5
   36798:	f7fe ffac 	bl	356f4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   3679c:	2000      	movs	r0, #0
   3679e:	bd70      	pop	{r4, r5, r6, pc}

000367a0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   367a0:	b50e      	push	{r1, r2, r3, lr}
   367a2:	8882      	ldrh	r2, [r0, #4]
   367a4:	f244 2390 	movw	r3, #17040	; 0x4290
   367a8:	429a      	cmp	r2, r3
   367aa:	d901      	bls.n	367b0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   367ac:	2012      	movs	r0, #18
   367ae:	bd0e      	pop	{r1, r2, r3, pc}
   367b0:	f640 0348 	movw	r3, #2120	; 0x848
   367b4:	429a      	cmp	r2, r3
   367b6:	d300      	bcc.n	367ba <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   367b8:	461a      	mov	r2, r3
   367ba:	8803      	ldrh	r3, [r0, #0]
   367bc:	f8ad 3000 	strh.w	r3, [sp]
   367c0:	8843      	ldrh	r3, [r0, #2]
   367c2:	f8ad 3002 	strh.w	r3, [sp, #2]
   367c6:	f8ad 2004 	strh.w	r2, [sp, #4]
   367ca:	8843      	ldrh	r3, [r0, #2]
   367cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   367d0:	f8ad 2008 	strh.w	r2, [sp, #8]
   367d4:	8800      	ldrh	r0, [r0, #0]
   367d6:	8008      	strh	r0, [r1, #0]
   367d8:	4668      	mov	r0, sp
   367da:	f7f7 fc29 	bl	2e030 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
   367de:	bd0e      	pop	{r1, r2, r3, pc}

000367e0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
   367e0:	b510      	push	{r4, lr}
   367e2:	4604      	mov	r4, r0
   367e4:	f7f7 fb86 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   367e8:	7861      	ldrb	r1, [r4, #1]
   367ea:	f3c1 0240 	ubfx	r2, r1, #1, #1
   367ee:	f001 0101 	and.w	r1, r1, #1
   367f2:	f7fe ff7b 	bl	356ec <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
   367f6:	2000      	movs	r0, #0
   367f8:	bd10      	pop	{r4, pc}

000367fa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   367fa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   367fc:	4604      	mov	r4, r0
   367fe:	f10d 0007 	add.w	r0, sp, #7
   36802:	9000      	str	r0, [sp, #0]
   36804:	7922      	ldrb	r2, [r4, #4]
   36806:	78e1      	ldrb	r1, [r4, #3]
   36808:	78a0      	ldrb	r0, [r4, #2]
   3680a:	f10d 0306 	add.w	r3, sp, #6
   3680e:	f000 fbd9 	bl	36fc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   36812:	2800      	cmp	r0, #0
   36814:	d109      	bne.n	3682a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   36816:	8820      	ldrh	r0, [r4, #0]
   36818:	f8ad 0004 	strh.w	r0, [sp, #4]
   3681c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   36820:	f8ad 0008 	strh.w	r0, [sp, #8]
   36824:	a801      	add	r0, sp, #4
   36826:	f000 f94f 	bl	36ac8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   3682a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0003682c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   3682c:	b510      	push	{r4, lr}
   3682e:	4604      	mov	r4, r0
   36830:	2001      	movs	r0, #1
   36832:	f000 fa5e 	bl	36cf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   36836:	b128      	cbz	r0, 36844 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   36838:	4621      	mov	r1, r4
   3683a:	2001      	movs	r0, #1
   3683c:	f7f2 f884 	bl	28948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   36840:	2000      	movs	r0, #0
   36842:	bd10      	pop	{r4, pc}
   36844:	200c      	movs	r0, #12
   36846:	bd10      	pop	{r4, pc}

00036848 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   36848:	b51c      	push	{r2, r3, r4, lr}
   3684a:	4604      	mov	r4, r0
   3684c:	f7f7 fb52 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   36850:	2000      	movs	r0, #0
   36852:	f88d 0000 	strb.w	r0, [sp]
   36856:	f88d 0002 	strb.w	r0, [sp, #2]
   3685a:	2003      	movs	r0, #3
   3685c:	f88d 0001 	strb.w	r0, [sp, #1]
   36860:	f814 0b01 	ldrb.w	r0, [r4], #1
   36864:	f88d 0003 	strb.w	r0, [sp, #3]
   36868:	4668      	mov	r0, sp
   3686a:	9401      	str	r4, [sp, #4]
   3686c:	f000 f8da 	bl	36a24 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   36870:	bd1c      	pop	{r2, r3, r4, pc}

00036872 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   36872:	b51c      	push	{r2, r3, r4, lr}
   36874:	8801      	ldrh	r1, [r0, #0]
   36876:	f8ad 1000 	strh.w	r1, [sp]
   3687a:	8841      	ldrh	r1, [r0, #2]
   3687c:	f8ad 1002 	strh.w	r1, [sp, #2]
   36880:	8801      	ldrh	r1, [r0, #0]
   36882:	f8ad 1004 	strh.w	r1, [sp, #4]
   36886:	8840      	ldrh	r0, [r0, #2]
   36888:	f8ad 0006 	strh.w	r0, [sp, #6]
   3688c:	4668      	mov	r0, sp
   3688e:	f7f7 fc6f 	bl	2e170 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
   36892:	bd1c      	pop	{r2, r3, r4, pc}

00036894 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   36894:	b510      	push	{r4, lr}
   36896:	f7f2 f87b 	bl	28990 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
   3689a:	2000      	movs	r0, #0
   3689c:	bd10      	pop	{r4, pc}

0003689e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   3689e:	b510      	push	{r4, lr}
   368a0:	460c      	mov	r4, r1
   368a2:	2100      	movs	r1, #0
   368a4:	f7f1 fc02 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   368a8:	b118      	cbz	r0, 368b2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   368aa:	2c02      	cmp	r4, #2
   368ac:	d903      	bls.n	368b6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   368ae:	2012      	movs	r0, #18
   368b0:	bd10      	pop	{r4, pc}
   368b2:	2002      	movs	r0, #2
   368b4:	bd10      	pop	{r4, pc}
   368b6:	f014 0101 	ands.w	r1, r4, #1
   368ba:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
   368be:	f3c4 0240 	ubfx	r2, r4, #1, #1
   368c2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
   368c6:	d004      	beq.n	368d2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   368c8:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
   368cc:	b109      	cbz	r1, 368d2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   368ce:	f7ff f8c6 	bl	35a5e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   368d2:	2000      	movs	r0, #0
   368d4:	bd10      	pop	{r4, pc}

000368d6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   368d6:	b51c      	push	{r2, r3, r4, lr}
   368d8:	460c      	mov	r4, r1
   368da:	4669      	mov	r1, sp
   368dc:	f7fd ff25 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   368e0:	2800      	cmp	r0, #0
   368e2:	d105      	bne.n	368f0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   368e4:	2100      	movs	r1, #0
   368e6:	4622      	mov	r2, r4
   368e8:	9801      	ldr	r0, [sp, #4]
   368ea:	f000 face 	bl	36e8a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   368ee:	2000      	movs	r0, #0
   368f0:	bd1c      	pop	{r2, r3, r4, pc}

000368f2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   368f2:	b510      	push	{r4, lr}
   368f4:	4604      	mov	r4, r0
   368f6:	7800      	ldrb	r0, [r0, #0]
   368f8:	28ff      	cmp	r0, #255	; 0xff
   368fa:	d009      	beq.n	36910 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   368fc:	2101      	movs	r1, #1
   368fe:	f7f1 fbd5 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   36902:	b118      	cbz	r0, 3690c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   36904:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   36908:	8441      	strh	r1, [r0, #34]	; 0x22
   3690a:	e005      	b.n	36918 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   3690c:	2042      	movs	r0, #66	; 0x42
   3690e:	bd10      	pop	{r4, pc}
   36910:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   36914:	f7f4 fd30 	bl	2b378 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   36918:	2000      	movs	r0, #0
   3691a:	bd10      	pop	{r4, pc}

0003691c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   3691c:	b510      	push	{r4, lr}
   3691e:	4604      	mov	r4, r0
   36920:	f7f7 fc66 	bl	2e1f0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   36924:	b118      	cbz	r0, 3692e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   36926:	2000      	movs	r0, #0
   36928:	f000 f9e3 	bl	36cf2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   3692c:	b128      	cbz	r0, 3693a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   3692e:	4621      	mov	r1, r4
   36930:	2000      	movs	r0, #0
   36932:	f7f2 f809 	bl	28948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   36936:	2000      	movs	r0, #0
   36938:	bd10      	pop	{r4, pc}
   3693a:	200c      	movs	r0, #12
   3693c:	bd10      	pop	{r4, pc}

0003693e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   3693e:	b510      	push	{r4, lr}
   36940:	7800      	ldrb	r0, [r0, #0]
   36942:	b100      	cbz	r0, 36946 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   36944:	2001      	movs	r0, #1
   36946:	f7f4 fd41 	bl	2b3cc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   3694a:	2000      	movs	r0, #0
   3694c:	bd10      	pop	{r4, pc}

0003694e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   3694e:	f7f7 bb6f 	b.w	2e030 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

00036952 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   36952:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   36956:	4606      	mov	r6, r0
   36958:	7845      	ldrb	r5, [r0, #1]
   3695a:	7800      	ldrb	r0, [r0, #0]
   3695c:	2101      	movs	r1, #1
   3695e:	f7f1 fba5 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   36962:	0004      	movs	r4, r0
   36964:	d01e      	beq.n	369a4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   36966:	f7fe fe7c 	bl	35662 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   3696a:	78f1      	ldrb	r1, [r6, #3]
   3696c:	4281      	cmp	r1, r0
   3696e:	d800      	bhi.n	36972 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   36970:	4608      	mov	r0, r1
   36972:	4607      	mov	r7, r0
   36974:	2d04      	cmp	r5, #4
   36976:	d018      	beq.n	369aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   36978:	6b60      	ldr	r0, [r4, #52]	; 0x34
   3697a:	f7fd fdb6 	bl	344ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   3697e:	4438      	add	r0, r7
   36980:	b281      	uxth	r1, r0
   36982:	4620      	mov	r0, r4
   36984:	2201      	movs	r2, #1
   36986:	f000 f9c6 	bl	36d16 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   3698a:	2800      	cmp	r0, #0
   3698c:	d10b      	bne.n	369a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   3698e:	2d03      	cmp	r5, #3
   36990:	d000      	beq.n	36994 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   36992:	b1df      	cbz	r7, 369cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   36994:	4620      	mov	r0, r4
   36996:	f7fe fe99 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   3699a:	7871      	ldrb	r1, [r6, #1]
   3699c:	2903      	cmp	r1, #3
   3699e:	d010      	beq.n	369c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   369a0:	b9a0      	cbnz	r0, 369cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   369a2:	e004      	b.n	369ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   369a4:	2042      	movs	r0, #66	; 0x42
   369a6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   369aa:	b97f      	cbnz	r7, 369cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   369ac:	e7f2      	b.n	36994 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   369ae:	2904      	cmp	r1, #4
   369b0:	d107      	bne.n	369c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   369b2:	4620      	mov	r0, r4
   369b4:	f7ff f850 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   369b8:	b140      	cbz	r0, 369cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   369ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
   369bc:	f7fd fd5c 	bl	34478 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   369c0:	b120      	cbz	r0, 369cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   369c2:	2d01      	cmp	r5, #1
   369c4:	d004      	beq.n	369d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   369c6:	2d03      	cmp	r5, #3
   369c8:	d002      	beq.n	369d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   369ca:	e00e      	b.n	369ea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   369cc:	2012      	movs	r0, #18
   369ce:	e7ea      	b.n	369a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   369d0:	4620      	mov	r0, r4
   369d2:	f7fe fe7b 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   369d6:	b108      	cbz	r0, 369dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   369d8:	2200      	movs	r2, #0
   369da:	e002      	b.n	369e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   369dc:	2d01      	cmp	r5, #1
   369de:	d013      	beq.n	36a08 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   369e0:	2201      	movs	r2, #1
   369e2:	4668      	mov	r0, sp
   369e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   369e6:	f7fd fce3 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   369ea:	2d04      	cmp	r5, #4
   369ec:	d018      	beq.n	36a20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   369ee:	6872      	ldr	r2, [r6, #4]
   369f0:	463b      	mov	r3, r7
   369f2:	2101      	movs	r1, #1
   369f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   369f6:	f7fd fd0f 	bl	34418 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   369fa:	b138      	cbz	r0, 36a0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   369fc:	7870      	ldrb	r0, [r6, #1]
   369fe:	2802      	cmp	r0, #2
   36a00:	d006      	beq.n	36a10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   36a02:	2803      	cmp	r0, #3
   36a04:	d004      	beq.n	36a10 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   36a06:	e00b      	b.n	36a20 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   36a08:	2202      	movs	r2, #2
   36a0a:	e7ea      	b.n	369e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   36a0c:	2007      	movs	r0, #7
   36a0e:	e7ca      	b.n	369a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   36a10:	6b60      	ldr	r0, [r4, #52]	; 0x34
   36a12:	f7fd fd6a 	bl	344ea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   36a16:	4602      	mov	r2, r0
   36a18:	2101      	movs	r1, #1
   36a1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   36a1c:	f7fd fd42 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   36a20:	2000      	movs	r0, #0
   36a22:	e7c0      	b.n	369a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00036a24 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   36a24:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   36a28:	4607      	mov	r7, r0
   36a2a:	7845      	ldrb	r5, [r0, #1]
   36a2c:	78c6      	ldrb	r6, [r0, #3]
   36a2e:	7800      	ldrb	r0, [r0, #0]
   36a30:	2101      	movs	r1, #1
   36a32:	f7f1 fb3b 	bl	280ac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   36a36:	0004      	movs	r4, r0
   36a38:	d003      	beq.n	36a42 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   36a3a:	f7fe fe49 	bl	356d0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   36a3e:	b118      	cbz	r0, 36a48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   36a40:	e003      	b.n	36a4a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   36a42:	2042      	movs	r0, #66	; 0x42
   36a44:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   36a48:	2600      	movs	r6, #0
   36a4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   36a4c:	f7fd fd51 	bl	344f2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   36a50:	4430      	add	r0, r6
   36a52:	b281      	uxth	r1, r0
   36a54:	4688      	mov	r8, r1
   36a56:	4620      	mov	r0, r4
   36a58:	2201      	movs	r2, #1
   36a5a:	f000 f95c 	bl	36d16 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   36a5e:	2800      	cmp	r0, #0
   36a60:	d1f0      	bne.n	36a44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   36a62:	2d04      	cmp	r5, #4
   36a64:	d008      	beq.n	36a78 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   36a66:	2d03      	cmp	r5, #3
   36a68:	d00a      	beq.n	36a80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   36a6a:	b12e      	cbz	r6, 36a78 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   36a6c:	4620      	mov	r0, r4
   36a6e:	f7fe fff3 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   36a72:	b118      	cbz	r0, 36a7c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   36a74:	200c      	movs	r0, #12
   36a76:	e7e5      	b.n	36a44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   36a78:	2012      	movs	r0, #18
   36a7a:	e7e3      	b.n	36a44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   36a7c:	2d01      	cmp	r5, #1
   36a7e:	d10c      	bne.n	36a9a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   36a80:	4620      	mov	r0, r4
   36a82:	f7fe fe23 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   36a86:	b108      	cbz	r0, 36a8c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   36a88:	2204      	movs	r2, #4
   36a8a:	e002      	b.n	36a92 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   36a8c:	2d01      	cmp	r5, #1
   36a8e:	d010      	beq.n	36ab2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   36a90:	2205      	movs	r2, #5
   36a92:	4668      	mov	r0, sp
   36a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36a96:	f7fd fc8b 	bl	343b0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   36a9a:	687a      	ldr	r2, [r7, #4]
   36a9c:	4633      	mov	r3, r6
   36a9e:	2100      	movs	r1, #0
   36aa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   36aa2:	f7fd fcb9 	bl	34418 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   36aa6:	b130      	cbz	r0, 36ab6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   36aa8:	2d02      	cmp	r5, #2
   36aaa:	d006      	beq.n	36aba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   36aac:	2d03      	cmp	r5, #3
   36aae:	d004      	beq.n	36aba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   36ab0:	e008      	b.n	36ac4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   36ab2:	2206      	movs	r2, #6
   36ab4:	e7ed      	b.n	36a92 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   36ab6:	2007      	movs	r0, #7
   36ab8:	e7c4      	b.n	36a44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   36aba:	4642      	mov	r2, r8
   36abc:	2100      	movs	r1, #0
   36abe:	6b60      	ldr	r0, [r4, #52]	; 0x34
   36ac0:	f7fd fcf0 	bl	344a4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   36ac4:	2000      	movs	r0, #0
   36ac6:	e7bd      	b.n	36a44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00036ac8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   36ac8:	b510      	push	{r4, lr}
   36aca:	4604      	mov	r4, r0
   36acc:	8880      	ldrh	r0, [r0, #4]
   36ace:	b128      	cbz	r0, 36adc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   36ad0:	2801      	cmp	r0, #1
   36ad2:	d003      	beq.n	36adc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   36ad4:	2802      	cmp	r0, #2
   36ad6:	d001      	beq.n	36adc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   36ad8:	2012      	movs	r0, #18
   36ada:	bd10      	pop	{r4, pc}
   36adc:	78e0      	ldrb	r0, [r4, #3]
   36ade:	f000 f9b1 	bl	36e44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   36ae2:	b148      	cbz	r0, 36af8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   36ae4:	78a0      	ldrb	r0, [r4, #2]
   36ae6:	f000 f9ad 	bl	36e44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   36aea:	b128      	cbz	r0, 36af8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   36aec:	4620      	mov	r0, r4
   36aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36af2:	2101      	movs	r1, #1
   36af4:	f000 b862 	b.w	36bbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   36af8:	2011      	movs	r0, #17
   36afa:	bd10      	pop	{r4, pc}

00036afc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   36afc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   36afe:	460c      	mov	r4, r1
   36b00:	4605      	mov	r5, r0
   36b02:	8800      	ldrh	r0, [r0, #0]
   36b04:	4669      	mov	r1, sp
   36b06:	f7fd fe10 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   36b0a:	2800      	cmp	r0, #0
   36b0c:	d106      	bne.n	36b1c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   36b0e:	9801      	ldr	r0, [sp, #4]
   36b10:	8829      	ldrh	r1, [r5, #0]
   36b12:	8021      	strh	r1, [r4, #0]
   36b14:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   36b18:	8060      	strh	r0, [r4, #2]
   36b1a:	2000      	movs	r0, #0
   36b1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00036b1e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   36b1e:	b510      	push	{r4, lr}
   36b20:	4604      	mov	r4, r0
   36b22:	4601      	mov	r1, r0
   36b24:	2000      	movs	r0, #0
   36b26:	f7f1 fef7 	bl	28918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   36b2a:	b910      	cbnz	r0, 36b32 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   36b2c:	2000      	movs	r0, #0
   36b2e:	6020      	str	r0, [r4, #0]
   36b30:	80a0      	strh	r0, [r4, #4]
   36b32:	2000      	movs	r0, #0
   36b34:	bd10      	pop	{r4, pc}

00036b36 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   36b36:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   36b38:	460c      	mov	r4, r1
   36b3a:	4605      	mov	r5, r0
   36b3c:	8800      	ldrh	r0, [r0, #0]
   36b3e:	4669      	mov	r1, sp
   36b40:	f7fd fdf3 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   36b44:	b108      	cbz	r0, 36b4a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   36b46:	2002      	movs	r0, #2
   36b48:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   36b4a:	78a8      	ldrb	r0, [r5, #2]
   36b4c:	b158      	cbz	r0, 36b66 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   36b4e:	f000 f9f2 	bl	36f36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   36b52:	70a0      	strb	r0, [r4, #2]
   36b54:	8828      	ldrh	r0, [r5, #0]
   36b56:	8020      	strh	r0, [r4, #0]
   36b58:	f994 0002 	ldrsb.w	r0, [r4, #2]
   36b5c:	f7f2 fdae 	bl	296bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   36b60:	70a0      	strb	r0, [r4, #2]
   36b62:	2000      	movs	r0, #0
   36b64:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   36b66:	9801      	ldr	r0, [sp, #4]
   36b68:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   36b6c:	e7f1      	b.n	36b52 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00036b6e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   36b6e:	b510      	push	{r4, lr}
   36b70:	f7f7 fb44 	bl	2e1fc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   36b74:	2000      	movs	r0, #0
   36b76:	bd10      	pop	{r4, pc}

00036b78 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   36b78:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   36b7c:	4604      	mov	r4, r0
   36b7e:	8840      	ldrh	r0, [r0, #2]
   36b80:	460d      	mov	r5, r1
   36b82:	b1b8      	cbz	r0, 36bb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   36b84:	8820      	ldrh	r0, [r4, #0]
   36b86:	4669      	mov	r1, sp
   36b88:	f7fd fdcf 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   36b8c:	2800      	cmp	r0, #0
   36b8e:	d10f      	bne.n	36bb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   36b90:	8820      	ldrh	r0, [r4, #0]
   36b92:	8028      	strh	r0, [r5, #0]
   36b94:	9e01      	ldr	r6, [sp, #4]
   36b96:	f106 0510 	add.w	r5, r6, #16
   36b9a:	3680      	adds	r6, #128	; 0x80
   36b9c:	682f      	ldr	r7, [r5, #0]
   36b9e:	8862      	ldrh	r2, [r4, #2]
   36ba0:	4639      	mov	r1, r7
   36ba2:	4630      	mov	r0, r6
   36ba4:	f7fd fee3 	bl	3496e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   36ba8:	6828      	ldr	r0, [r5, #0]
   36baa:	42b8      	cmp	r0, r7
   36bac:	d1f6      	bne.n	36b9c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   36bae:	2000      	movs	r0, #0
   36bb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   36bb4:	2012      	movs	r0, #18
   36bb6:	e7fb      	b.n	36bb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00036bb8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   36bb8:	f000 b868 	b.w	36c8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00036bbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   36bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36bc0:	b085      	sub	sp, #20
   36bc2:	4688      	mov	r8, r1
   36bc4:	4606      	mov	r6, r0
   36bc6:	8800      	ldrh	r0, [r0, #0]
   36bc8:	a901      	add	r1, sp, #4
   36bca:	f7fd fdae 	bl	3472a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   36bce:	2800      	cmp	r0, #0
   36bd0:	d13b      	bne.n	36c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   36bd2:	9802      	ldr	r0, [sp, #8]
   36bd4:	4601      	mov	r1, r0
   36bd6:	468a      	mov	sl, r1
   36bd8:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   36bdc:	f500 7498 	add.w	r4, r0, #304	; 0x130
   36be0:	f88d 1000 	strb.w	r1, [sp]
   36be4:	9900      	ldr	r1, [sp, #0]
   36be6:	9100      	str	r1, [sp, #0]
   36be8:	f89d 1000 	ldrb.w	r1, [sp]
   36bec:	f04f 0900 	mov.w	r9, #0
   36bf0:	3080      	adds	r0, #128	; 0x80
   36bf2:	b121      	cbz	r1, 36bfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   36bf4:	f1b8 0f02 	cmp.w	r8, #2
   36bf8:	d001      	beq.n	36bfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   36bfa:	2701      	movs	r7, #1
   36bfc:	e000      	b.n	36c00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   36bfe:	2700      	movs	r7, #0
   36c00:	7f81      	ldrb	r1, [r0, #30]
   36c02:	2922      	cmp	r1, #34	; 0x22
   36c04:	d100      	bne.n	36c08 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   36c06:	b13f      	cbz	r7, 36c18 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   36c08:	2500      	movs	r5, #0
   36c0a:	306c      	adds	r0, #108	; 0x6c
   36c0c:	2108      	movs	r1, #8
   36c0e:	4683      	mov	fp, r0
   36c10:	f7ff fbb9 	bl	36386 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   36c14:	b110      	cbz	r0, 36c1c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   36c16:	e007      	b.n	36c28 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   36c18:	2501      	movs	r5, #1
   36c1a:	e7f6      	b.n	36c0a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   36c1c:	210b      	movs	r1, #11
   36c1e:	4658      	mov	r0, fp
   36c20:	f7ff fbb1 	bl	36386 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   36c24:	b900      	cbnz	r0, 36c28 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   36c26:	b17d      	cbz	r5, 36c48 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   36c28:	a804      	add	r0, sp, #16
   36c2a:	9000      	str	r0, [sp, #0]
   36c2c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   36c30:	ab03      	add	r3, sp, #12
   36c32:	4632      	mov	r2, r6
   36c34:	4651      	mov	r1, sl
   36c36:	f000 f95e 	bl	36ef6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   36c3a:	0005      	movs	r5, r0
   36c3c:	d105      	bne.n	36c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   36c3e:	340c      	adds	r4, #12
   36c40:	20ff      	movs	r0, #255	; 0xff
   36c42:	7060      	strb	r0, [r4, #1]
   36c44:	b937      	cbnz	r7, 36c54 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   36c46:	e003      	b.n	36c50 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   36c48:	201a      	movs	r0, #26
   36c4a:	b005      	add	sp, #20
   36c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c50:	7820      	ldrb	r0, [r4, #0]
   36c52:	b108      	cbz	r0, 36c58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   36c54:	253a      	movs	r5, #58	; 0x3a
   36c56:	e012      	b.n	36c7e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   36c58:	f884 8000 	strb.w	r8, [r4]
   36c5c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   36c60:	70a0      	strb	r0, [r4, #2]
   36c62:	f89d 1010 	ldrb.w	r1, [sp, #16]
   36c66:	70e1      	strb	r1, [r4, #3]
   36c68:	f88d 0000 	strb.w	r0, [sp]
   36c6c:	f88d 1001 	strb.w	r1, [sp, #1]
   36c70:	88b0      	ldrh	r0, [r6, #4]
   36c72:	f8ad 0002 	strh.w	r0, [sp, #2]
   36c76:	4669      	mov	r1, sp
   36c78:	4650      	mov	r0, sl
   36c7a:	f7fd fe13 	bl	348a4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   36c7e:	f884 9001 	strb.w	r9, [r4, #1]
   36c82:	4628      	mov	r0, r5
   36c84:	e7e1      	b.n	36c4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00036c86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   36c86:	2008      	movs	r0, #8
   36c88:	f7f7 bb20 	b.w	2e2cc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00036c8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   36c8c:	b510      	push	{r4, lr}
   36c8e:	f7fd fcbb 	bl	34608 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   36c92:	f7f2 fbcf 	bl	29434 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   36c96:	f7f7 fb3b 	bl	2e310 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   36c9a:	f7fe f917 	bl	34ecc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   36c9e:	f7fd fed6 	bl	34a4e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   36ca2:	f7f3 fb31 	bl	2a308 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   36ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36caa:	f7f7 b903 	b.w	2deb4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

00036cae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   36cae:	f7f5 b8f7 	b.w	2bea0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   36cb2:	f44f 71a4 	mov.w	r1, #328	; 0x148
   36cb6:	4288      	cmp	r0, r1
   36cb8:	d303      	bcc.n	36cc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   36cba:	f640 0148 	movw	r1, #2120	; 0x848
   36cbe:	4288      	cmp	r0, r1
   36cc0:	d300      	bcc.n	36cc4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   36cc2:	4608      	mov	r0, r1
   36cc4:	b280      	uxth	r0, r0
   36cc6:	4770      	bx	lr
   36cc8:	07c1      	lsls	r1, r0, #31
   36cca:	d001      	beq.n	36cd0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   36ccc:	2001      	movs	r0, #1
   36cce:	4770      	bx	lr
   36cd0:	0780      	lsls	r0, r0, #30
   36cd2:	d501      	bpl.n	36cd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   36cd4:	2002      	movs	r0, #2
   36cd6:	4770      	bx	lr
   36cd8:	2000      	movs	r0, #0
   36cda:	4770      	bx	lr
   36cdc:	b510      	push	{r4, lr}
   36cde:	2801      	cmp	r0, #1
   36ce0:	d006      	beq.n	36cf0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   36ce2:	2802      	cmp	r0, #2
   36ce4:	d004      	beq.n	36cf0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   36ce6:	f240 21d7 	movw	r1, #727	; 0x2d7
   36cea:	2006      	movs	r0, #6
   36cec:	f7f0 feb0 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   36cf0:	bd10      	pop	{r4, pc}
   36cf2:	b510      	push	{r4, lr}
   36cf4:	f7f7 f8c8 	bl	2de88 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   36cf8:	b158      	cbz	r0, 36d12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   36cfa:	f7f7 f8fb 	bl	2def4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   36cfe:	4604      	mov	r4, r0
   36d00:	f7fe fce6 	bl	356d0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   36d04:	b918      	cbnz	r0, 36d0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   36d06:	4620      	mov	r0, r4
   36d08:	f7fe fcd8 	bl	356bc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   36d0c:	b108      	cbz	r0, 36d12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   36d0e:	2000      	movs	r0, #0
   36d10:	bd10      	pop	{r4, pc}
   36d12:	2001      	movs	r0, #1
   36d14:	bd10      	pop	{r4, pc}
   36d16:	b570      	push	{r4, r5, r6, lr}
   36d18:	460c      	mov	r4, r1
   36d1a:	4605      	mov	r5, r0
   36d1c:	b112      	cbz	r2, 36d24 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   36d1e:	291f      	cmp	r1, #31
   36d20:	d80c      	bhi.n	36d3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   36d22:	e016      	b.n	36d52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   36d24:	f7f1 fc38 	bl	28598 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   36d28:	42a0      	cmp	r0, r4
   36d2a:	d201      	bcs.n	36d30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   36d2c:	2007      	movs	r0, #7
   36d2e:	bd70      	pop	{r4, r5, r6, pc}
   36d30:	4628      	mov	r0, r5
   36d32:	f7fe fccb 	bl	356cc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   36d36:	b118      	cbz	r0, 36d40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   36d38:	2c1f      	cmp	r4, #31
   36d3a:	d901      	bls.n	36d40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   36d3c:	2012      	movs	r0, #18
   36d3e:	bd70      	pop	{r4, r5, r6, pc}
   36d40:	4628      	mov	r0, r5
   36d42:	f7fe fccc 	bl	356de <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   36d46:	b130      	cbz	r0, 36d56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   36d48:	4621      	mov	r1, r4
   36d4a:	4628      	mov	r0, r5
   36d4c:	f7fe fc95 	bl	3567a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   36d50:	b118      	cbz	r0, 36d5a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   36d52:	2000      	movs	r0, #0
   36d54:	bd70      	pop	{r4, r5, r6, pc}
   36d56:	2042      	movs	r0, #66	; 0x42
   36d58:	bd70      	pop	{r4, r5, r6, pc}
   36d5a:	2045      	movs	r0, #69	; 0x45
   36d5c:	bd70      	pop	{r4, r5, r6, pc}
   36d5e:	b510      	push	{r4, lr}
   36d60:	4604      	mov	r4, r0
   36d62:	7840      	ldrb	r0, [r0, #1]
   36d64:	06c1      	lsls	r1, r0, #27
   36d66:	d51c      	bpl.n	36da2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   36d68:	07c0      	lsls	r0, r0, #31
   36d6a:	d00b      	beq.n	36d84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   36d6c:	f7f7 fa82 	bl	2e274 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   36d70:	b1b8      	cbz	r0, 36da2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   36d72:	7860      	ldrb	r0, [r4, #1]
   36d74:	06c1      	lsls	r1, r0, #27
   36d76:	d405      	bmi.n	36d84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   36d78:	0700      	lsls	r0, r0, #28
   36d7a:	d503      	bpl.n	36d84 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   36d7c:	7d20      	ldrb	r0, [r4, #20]
   36d7e:	2802      	cmp	r0, #2
   36d80:	d10f      	bne.n	36da2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   36d82:	e010      	b.n	36da6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   36d84:	7d20      	ldrb	r0, [r4, #20]
   36d86:	2802      	cmp	r0, #2
   36d88:	d001      	beq.n	36d8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   36d8a:	7ea0      	ldrb	r0, [r4, #26]
   36d8c:	b948      	cbnz	r0, 36da2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   36d8e:	7860      	ldrb	r0, [r4, #1]
   36d90:	0700      	lsls	r0, r0, #28
   36d92:	d408      	bmi.n	36da6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   36d94:	f8d4 0005 	ldr.w	r0, [r4, #5]
   36d98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   36d9c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   36da0:	d201      	bcs.n	36da6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   36da2:	2011      	movs	r0, #17
   36da4:	bd10      	pop	{r4, pc}
   36da6:	2000      	movs	r0, #0
   36da8:	bd10      	pop	{r4, pc}
   36daa:	b538      	push	{r3, r4, r5, lr}
   36dac:	4604      	mov	r4, r0
   36dae:	7800      	ldrb	r0, [r0, #0]
   36db0:	28ef      	cmp	r0, #239	; 0xef
   36db2:	d843      	bhi.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36db4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   36db8:	f8ad 0000 	strh.w	r0, [sp]
   36dbc:	9800      	ldr	r0, [sp, #0]
   36dbe:	f000 f918 	bl	36ff2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   36dc2:	b3a0      	cbz	r0, 36e2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   36dc4:	7861      	ldrb	r1, [r4, #1]
   36dc6:	0708      	lsls	r0, r1, #28
   36dc8:	d40b      	bmi.n	36de2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   36dca:	f8d4 0002 	ldr.w	r0, [r4, #2]
   36dce:	f8d4 3005 	ldr.w	r3, [r4, #5]
   36dd2:	0a02      	lsrs	r2, r0, #8
   36dd4:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   36dd8:	d830      	bhi.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36dda:	2220      	movs	r2, #32
   36ddc:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   36de0:	d82c      	bhi.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36de2:	7a60      	ldrb	r0, [r4, #9]
   36de4:	b318      	cbz	r0, 36e2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   36de6:	2807      	cmp	r0, #7
   36de8:	d828      	bhi.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36dea:	7aa0      	ldrb	r0, [r4, #10]
   36dec:	b128      	cbz	r0, 36dfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   36dee:	2801      	cmp	r0, #1
   36df0:	d003      	beq.n	36dfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   36df2:	2802      	cmp	r0, #2
   36df4:	d001      	beq.n	36dfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   36df6:	2803      	cmp	r0, #3
   36df8:	d120      	bne.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36dfa:	074a      	lsls	r2, r1, #29
   36dfc:	d403      	bmi.n	36e06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   36dfe:	2802      	cmp	r0, #2
   36e00:	d001      	beq.n	36e06 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   36e02:	2803      	cmp	r0, #3
   36e04:	d105      	bne.n	36e12 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   36e06:	7ae0      	ldrb	r0, [r4, #11]
   36e08:	b108      	cbz	r0, 36e0e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   36e0a:	2801      	cmp	r0, #1
   36e0c:	d116      	bne.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36e0e:	0748      	lsls	r0, r1, #29
   36e10:	d407      	bmi.n	36e22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   36e12:	7ca0      	ldrb	r0, [r4, #18]
   36e14:	b128      	cbz	r0, 36e22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   36e16:	2801      	cmp	r0, #1
   36e18:	d003      	beq.n	36e22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   36e1a:	2802      	cmp	r0, #2
   36e1c:	d001      	beq.n	36e22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   36e1e:	2803      	cmp	r0, #3
   36e20:	d10c      	bne.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36e22:	06c8      	lsls	r0, r1, #27
   36e24:	7d20      	ldrb	r0, [r4, #20]
   36e26:	d503      	bpl.n	36e30 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   36e28:	2801      	cmp	r0, #1
   36e2a:	d107      	bne.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36e2c:	e002      	b.n	36e34 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   36e2e:	e005      	b.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36e30:	2802      	cmp	r0, #2
   36e32:	d003      	beq.n	36e3c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   36e34:	7e20      	ldrb	r0, [r4, #24]
   36e36:	b118      	cbz	r0, 36e40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   36e38:	2801      	cmp	r0, #1
   36e3a:	d001      	beq.n	36e40 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   36e3c:	2012      	movs	r0, #18
   36e3e:	bd38      	pop	{r3, r4, r5, pc}
   36e40:	2000      	movs	r0, #0
   36e42:	bd38      	pop	{r3, r4, r5, pc}
   36e44:	b510      	push	{r4, lr}
   36e46:	0004      	movs	r4, r0
   36e48:	d005      	beq.n	36e56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   36e4a:	f7f7 fa51 	bl	2e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   36e4e:	4384      	bics	r4, r0
   36e50:	d001      	beq.n	36e56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   36e52:	2000      	movs	r0, #0
   36e54:	bd10      	pop	{r4, pc}
   36e56:	2001      	movs	r0, #1
   36e58:	bd10      	pop	{r4, pc}
   36e5a:	28fb      	cmp	r0, #251	; 0xfb
   36e5c:	d803      	bhi.n	36e66 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   36e5e:	f640 0048 	movw	r0, #2120	; 0x848
   36e62:	4281      	cmp	r1, r0
   36e64:	d901      	bls.n	36e6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   36e66:	2011      	movs	r0, #17
   36e68:	4770      	bx	lr
   36e6a:	2000      	movs	r0, #0
   36e6c:	4770      	bx	lr
   36e6e:	381b      	subs	r0, #27
   36e70:	28e1      	cmp	r0, #225	; 0xe1
   36e72:	d206      	bcs.n	36e82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   36e74:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   36e78:	d303      	bcc.n	36e82 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   36e7a:	f244 2090 	movw	r0, #17040	; 0x4290
   36e7e:	4281      	cmp	r1, r0
   36e80:	d901      	bls.n	36e86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   36e82:	2012      	movs	r0, #18
   36e84:	4770      	bx	lr
   36e86:	2000      	movs	r0, #0
   36e88:	4770      	bx	lr
   36e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36e8e:	4606      	mov	r6, r0
   36e90:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   36e94:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   36e98:	4615      	mov	r5, r2
   36e9a:	302c      	adds	r0, #44	; 0x2c
   36e9c:	f7f4 fa9c 	bl	2b3d8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   36ea0:	4680      	mov	r8, r0
   36ea2:	2102      	movs	r1, #2
   36ea4:	f7fd fcce 	bl	34844 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   36ea8:	4287      	cmp	r7, r0
   36eaa:	d200      	bcs.n	36eae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   36eac:	4638      	mov	r0, r7
   36eae:	4607      	mov	r7, r0
   36eb0:	2102      	movs	r1, #2
   36eb2:	4640      	mov	r0, r8
   36eb4:	f7fd fcc6 	bl	34844 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   36eb8:	4284      	cmp	r4, r0
   36eba:	d200      	bcs.n	36ebe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   36ebc:	4620      	mov	r0, r4
   36ebe:	8831      	ldrh	r1, [r6, #0]
   36ec0:	8029      	strh	r1, [r5, #0]
   36ec2:	2f1b      	cmp	r7, #27
   36ec4:	d913      	bls.n	36eee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   36ec6:	2ffb      	cmp	r7, #251	; 0xfb
   36ec8:	d300      	bcc.n	36ecc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   36eca:	27fb      	movs	r7, #251	; 0xfb
   36ecc:	806f      	strh	r7, [r5, #2]
   36ece:	281b      	cmp	r0, #27
   36ed0:	d90f      	bls.n	36ef2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   36ed2:	28fb      	cmp	r0, #251	; 0xfb
   36ed4:	d300      	bcc.n	36ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   36ed6:	20fb      	movs	r0, #251	; 0xfb
   36ed8:	80e8      	strh	r0, [r5, #6]
   36eda:	4640      	mov	r0, r8
   36edc:	f7ff fee9 	bl	36cb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   36ee0:	80a8      	strh	r0, [r5, #4]
   36ee2:	4640      	mov	r0, r8
   36ee4:	f7ff fee5 	bl	36cb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   36ee8:	8128      	strh	r0, [r5, #8]
   36eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36eee:	271b      	movs	r7, #27
   36ef0:	e7ec      	b.n	36ecc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   36ef2:	201b      	movs	r0, #27
   36ef4:	e7f0      	b.n	36ed8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   36ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36efa:	7890      	ldrb	r0, [r2, #2]
   36efc:	9e06      	ldr	r6, [sp, #24]
   36efe:	461d      	mov	r5, r3
   36f00:	4614      	mov	r4, r2
   36f02:	b908      	cbnz	r0, 36f08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   36f04:	f7f7 f9f4 	bl	2e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   36f08:	78e4      	ldrb	r4, [r4, #3]
   36f0a:	4607      	mov	r7, r0
   36f0c:	b914      	cbnz	r4, 36f14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   36f0e:	f7f7 f9ef 	bl	2e2f0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   36f12:	4604      	mov	r4, r0
   36f14:	b16f      	cbz	r7, 36f32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   36f16:	b164      	cbz	r4, 36f32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   36f18:	4638      	mov	r0, r7
   36f1a:	f7ff fed5 	bl	36cc8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   36f1e:	4620      	mov	r0, r4
   36f20:	f7ff fed2 	bl	36cc8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   36f24:	b12f      	cbz	r7, 36f32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   36f26:	b124      	cbz	r4, 36f32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   36f28:	702f      	strb	r7, [r5, #0]
   36f2a:	7034      	strb	r4, [r6, #0]
   36f2c:	2000      	movs	r0, #0
   36f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36f32:	2009      	movs	r0, #9
   36f34:	e7fb      	b.n	36f2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   36f36:	207f      	movs	r0, #127	; 0x7f
   36f38:	f000 b83c 	b.w	36fb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   36f3c:	b508      	push	{r3, lr}
   36f3e:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   36f42:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   36f46:	f88d 0000 	strb.w	r0, [sp]
   36f4a:	9800      	ldr	r0, [sp, #0]
   36f4c:	9000      	str	r0, [sp, #0]
   36f4e:	f89d 0000 	ldrb.w	r0, [sp]
   36f52:	b100      	cbz	r0, 36f56 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   36f54:	2001      	movs	r0, #1
   36f56:	1e40      	subs	r0, r0, #1
   36f58:	4208      	tst	r0, r1
   36f5a:	d003      	beq.n	36f64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   36f5c:	2904      	cmp	r1, #4
   36f5e:	d001      	beq.n	36f64 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   36f60:	2001      	movs	r0, #1
   36f62:	bd08      	pop	{r3, pc}
   36f64:	2000      	movs	r0, #0
   36f66:	bd08      	pop	{r3, pc}
   36f68:	b570      	push	{r4, r5, r6, lr}
   36f6a:	4605      	mov	r5, r0
   36f6c:	f7fe fbb7 	bl	356de <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   36f70:	b170      	cbz	r0, 36f90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   36f72:	4628      	mov	r0, r5
   36f74:	f7fe fd70 	bl	35a58 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   36f78:	2800      	cmp	r0, #0
   36f7a:	d008      	beq.n	36f8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   36f7c:	4628      	mov	r0, r5
   36f7e:	f7fe fd68 	bl	35a52 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   36f82:	4604      	mov	r4, r0
   36f84:	4628      	mov	r0, r5
   36f86:	f7fe fd3e 	bl	35a06 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   36f8a:	b118      	cbz	r0, 36f94 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   36f8c:	200c      	movs	r0, #12
   36f8e:	bd70      	pop	{r4, r5, r6, pc}
   36f90:	2042      	movs	r0, #66	; 0x42
   36f92:	bd70      	pop	{r4, r5, r6, pc}
   36f94:	b164      	cbz	r4, 36fb0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   36f96:	8820      	ldrh	r0, [r4, #0]
   36f98:	f7fd fb03 	bl	345a2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   36f9c:	8820      	ldrh	r0, [r4, #0]
   36f9e:	2100      	movs	r1, #0
   36fa0:	f7f1 f926 	bl	281f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   36fa4:	b120      	cbz	r0, 36fb0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   36fa6:	f241 71ae 	movw	r1, #6062	; 0x17ae
   36faa:	2039      	movs	r0, #57	; 0x39
   36fac:	f7f0 fd50 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   36fb0:	2000      	movs	r0, #0
   36fb2:	bd70      	pop	{r4, r5, r6, pc}
   36fb4:	b508      	push	{r3, lr}
   36fb6:	f640 1288 	movw	r2, #2440	; 0x988
   36fba:	2300      	movs	r3, #0
   36fbc:	4669      	mov	r1, sp
   36fbe:	f7fc f9a9 	bl	33314 <mpsl_fem_tx_power_split>
   36fc2:	bd08      	pop	{r3, pc}
   36fc4:	b530      	push	{r4, r5, lr}
   36fc6:	f340 0400 	sbfx	r4, r0, #0, #1
   36fca:	f340 0040 	sbfx	r0, r0, #1, #1
   36fce:	1c40      	adds	r0, r0, #1
   36fd0:	9d03      	ldr	r5, [sp, #12]
   36fd2:	1c64      	adds	r4, r4, #1
   36fd4:	d000      	beq.n	36fd8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   36fd6:	b119      	cbz	r1, 36fe0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   36fd8:	b100      	cbz	r0, 36fdc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   36fda:	b10a      	cbz	r2, 36fe0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   36fdc:	b91c      	cbnz	r4, 36fe6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   36fde:	e001      	b.n	36fe4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   36fe0:	2011      	movs	r0, #17
   36fe2:	bd30      	pop	{r4, r5, pc}
   36fe4:	2100      	movs	r1, #0
   36fe6:	7019      	strb	r1, [r3, #0]
   36fe8:	b900      	cbnz	r0, 36fec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   36fea:	2200      	movs	r2, #0
   36fec:	702a      	strb	r2, [r5, #0]
   36fee:	2000      	movs	r0, #0
   36ff0:	bd30      	pop	{r4, r5, pc}
   36ff2:	b2c0      	uxtb	r0, r0
   36ff4:	06c1      	lsls	r1, r0, #27
   36ff6:	d40c      	bmi.n	37012 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   36ff8:	0681      	lsls	r1, r0, #26
   36ffa:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   36ffe:	d503      	bpl.n	37008 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   37000:	b9d1      	cbnz	r1, 37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37002:	0781      	lsls	r1, r0, #30
   37004:	d418      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37006:	e001      	b.n	3700c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   37008:	2900      	cmp	r1, #0
   3700a:	d1fa      	bne.n	37002 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   3700c:	0700      	lsls	r0, r0, #28
   3700e:	d413      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37010:	e010      	b.n	37034 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   37012:	0641      	lsls	r1, r0, #25
   37014:	d410      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37016:	0681      	lsls	r1, r0, #26
   37018:	d40e      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   3701a:	07c1      	lsls	r1, r0, #31
   3701c:	ea4f 7180 	mov.w	r1, r0, lsl #30
   37020:	d004      	beq.n	3702c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   37022:	2900      	cmp	r1, #0
   37024:	db02      	blt.n	3702c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   37026:	0740      	lsls	r0, r0, #29
   37028:	d404      	bmi.n	37034 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   3702a:	e005      	b.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   3702c:	0701      	lsls	r1, r0, #28
   3702e:	d403      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37030:	0740      	lsls	r0, r0, #29
   37032:	d401      	bmi.n	37038 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   37034:	2001      	movs	r0, #1
   37036:	4770      	bx	lr
   37038:	2000      	movs	r0, #0
   3703a:	4770      	bx	lr
   3703c:	b510      	push	{r4, lr}
   3703e:	f7f4 f9af 	bl	2b3a0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   37042:	b110      	cbz	r0, 3704a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   37044:	f44f 7188 	mov.w	r1, #272	; 0x110
   37048:	e004      	b.n	37054 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   3704a:	f7f3 fadf 	bl	2a60c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   3704e:	b120      	cbz	r0, 3705a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   37050:	f240 1115 	movw	r1, #277	; 0x115
   37054:	2001      	movs	r0, #1
   37056:	f7f0 fcfb 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3705a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3705e:	2001      	movs	r0, #1
   37060:	f7fd b8ef 	b.w	34242 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   37064:	6802      	ldr	r2, [r0, #0]
   37066:	b912      	cbnz	r2, 3706e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
   37068:	6001      	str	r1, [r0, #0]
   3706a:	4770      	bx	lr
   3706c:	4602      	mov	r2, r0
   3706e:	6850      	ldr	r0, [r2, #4]
   37070:	b108      	cbz	r0, 37076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
   37072:	428a      	cmp	r2, r1
   37074:	d1fa      	bne.n	3706c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   37076:	428a      	cmp	r2, r1
   37078:	d0f7      	beq.n	3706a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   3707a:	6051      	str	r1, [r2, #4]
   3707c:	4770      	bx	lr
   3707e:	b510      	push	{r4, lr}
   37080:	4604      	mov	r4, r0
   37082:	e002      	b.n	3708a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
   37084:	6820      	ldr	r0, [r4, #0]
   37086:	4780      	blx	r0
   37088:	6864      	ldr	r4, [r4, #4]
   3708a:	2c00      	cmp	r4, #0
   3708c:	d1fa      	bne.n	37084 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   3708e:	bd10      	pop	{r4, pc}
   37090:	b510      	push	{r4, lr}
   37092:	2000      	movs	r0, #0
   37094:	f7fd f8d5 	bl	34242 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   37098:	f7f1 f988 	bl	283ac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   3709c:	f7f1 fc1e 	bl	288dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   370a0:	f7f1 fdac 	bl	28bfc <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   370a4:	2800      	cmp	r0, #0
   370a6:	d003      	beq.n	370b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   370a8:	21f2      	movs	r1, #242	; 0xf2
   370aa:	2001      	movs	r0, #1
   370ac:	f7f0 fcd0 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   370b0:	bd10      	pop	{r4, pc}
   370b2:	b510      	push	{r4, lr}
   370b4:	f7ff ffc2 	bl	3703c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   370b8:	f7fe ffc9 	bl	3604e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   370bc:	2800      	cmp	r0, #0
   370be:	d004      	beq.n	370ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   370c0:	f44f 7195 	mov.w	r1, #298	; 0x12a
   370c4:	2001      	movs	r0, #1
   370c6:	f7f0 fcc3 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   370ca:	bd10      	pop	{r4, pc}

000370cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   370cc:	f7fb be58 	b.w	32d80 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   370d0:	000b0001 	.word	0x000b0001
   370d4:	000a0002 	.word	0x000a0002
   370d8:	00090005 	.word	0x00090005
   370dc:	0008000a 	.word	0x0008000a
   370e0:	00070014 	.word	0x00070014
   370e4:	0006001e 	.word	0x0006001e
   370e8:	00050032 	.word	0x00050032
   370ec:	0004004b 	.word	0x0004004b
   370f0:	00030064 	.word	0x00030064
   370f4:	00020096 	.word	0x00020096
   370f8:	000100fa 	.word	0x000100fa
   370fc:	000001f4 	.word	0x000001f4

00037100 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   37100:	b510      	push	{r4, lr}
   37102:	6844      	ldr	r4, [r0, #4]
   37104:	7803      	ldrb	r3, [r0, #0]
   37106:	2100      	movs	r1, #0
   37108:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   3710c:	3480      	adds	r4, #128	; 0x80
   3710e:	4620      	mov	r0, r4
   37110:	f7fd fb22 	bl	34758 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   37114:	b110      	cbz	r0, 3711c <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   37116:	2020      	movs	r0, #32
   37118:	7760      	strb	r0, [r4, #29]
   3711a:	bd10      	pop	{r4, pc}
   3711c:	2180      	movs	r1, #128	; 0x80
   3711e:	207e      	movs	r0, #126	; 0x7e
   37120:	f7f0 fc96 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00037124 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   37124:	2200      	movs	r2, #0
   37126:	704a      	strb	r2, [r1, #1]
   37128:	2214      	movs	r2, #20
   3712a:	700a      	strb	r2, [r1, #0]
   3712c:	f8d0 200a 	ldr.w	r2, [r0, #10]
   37130:	604a      	str	r2, [r1, #4]
   37132:	89c0      	ldrh	r0, [r0, #14]
   37134:	8108      	strh	r0, [r1, #8]
   37136:	4770      	bx	lr
   37138:	b510      	push	{r4, lr}
   3713a:	2801      	cmp	r0, #1
   3713c:	d006      	beq.n	3714c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   3713e:	2802      	cmp	r0, #2
   37140:	d004      	beq.n	3714c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   37142:	f240 21d7 	movw	r1, #727	; 0x2d7
   37146:	2006      	movs	r0, #6
   37148:	f7f0 fc82 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   3714c:	bd10      	pop	{r4, pc}

0003714e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   3714e:	b510      	push	{r4, lr}
   37150:	f7f7 fcbc 	bl	2eacc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   37154:	f000 f81d 	bl	37192 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   37158:	f7f7 f998 	bl	2e48c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   3715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37160:	f7f7 ba92 	b.w	2e688 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00037164 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   37164:	b510      	push	{r4, lr}
   37166:	24c8      	movs	r4, #200	; 0xc8
   37168:	1e64      	subs	r4, r4, #1
   3716a:	b2e4      	uxtb	r4, r4
   3716c:	f7f7 f9ac 	bl	2e4c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   37170:	2802      	cmp	r0, #2
   37172:	d003      	beq.n	3717c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   37174:	2801      	cmp	r0, #1
   37176:	d000      	beq.n	3717a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   37178:	2000      	movs	r0, #0
   3717a:	bd10      	pop	{r4, pc}
   3717c:	2c00      	cmp	r4, #0
   3717e:	d1f3      	bne.n	37168 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   37180:	21ed      	movs	r1, #237	; 0xed
   37182:	203b      	movs	r0, #59	; 0x3b
   37184:	f7f0 fc64 	bl	27a50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   37188:	5840      	ldr	r0, [r0, r1]
   3718a:	2800      	cmp	r0, #0
   3718c:	d000      	beq.n	37190 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   3718e:	2001      	movs	r0, #1
   37190:	4770      	bx	lr

00037192 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   37192:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   37196:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3719a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   3719e:	f3bf 8f4f 	dsb	sy
   371a2:	f3bf 8f6f 	isb	sy
   371a6:	f7f7 bb09 	b.w	2e7bc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   371aa:	2800      	cmp	r0, #0
   371ac:	db09      	blt.n	371c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   371ae:	f000 021f 	and.w	r2, r0, #31
   371b2:	2101      	movs	r1, #1
   371b4:	4091      	lsls	r1, r2
   371b6:	0940      	lsrs	r0, r0, #5
   371b8:	0080      	lsls	r0, r0, #2
   371ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   371be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   371c2:	4770      	bx	lr
   371c4:	2800      	cmp	r0, #0
   371c6:	db0d      	blt.n	371e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   371c8:	f000 021f 	and.w	r2, r0, #31
   371cc:	2101      	movs	r1, #1
   371ce:	4091      	lsls	r1, r2
   371d0:	0940      	lsrs	r0, r0, #5
   371d2:	0080      	lsls	r0, r0, #2
   371d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   371d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   371dc:	f3bf 8f4f 	dsb	sy
   371e0:	f3bf 8f6f 	isb	sy
   371e4:	4770      	bx	lr
   371e6:	5840      	ldr	r0, [r0, r1]
   371e8:	2800      	cmp	r0, #0
   371ea:	d000      	beq.n	371ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   371ec:	2001      	movs	r0, #1
   371ee:	4770      	bx	lr
   371f0:	5840      	ldr	r0, [r0, r1]
   371f2:	2800      	cmp	r0, #0
   371f4:	d000      	beq.n	371f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   371f6:	2001      	movs	r0, #1
   371f8:	4770      	bx	lr

000371fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   371fa:	b510      	push	{r4, lr}
   371fc:	4604      	mov	r4, r0
   371fe:	4608      	mov	r0, r1
   37200:	f7f7 fd90 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   37204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   37208:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   3720c:	fbb0 f0f1 	udiv	r0, r0, r1
   37210:	1a20      	subs	r0, r4, r0
   37212:	1e80      	subs	r0, r0, #2
   37214:	bd10      	pop	{r4, pc}

00037216 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   37216:	b510      	push	{r4, lr}
   37218:	4604      	mov	r4, r0
   3721a:	4608      	mov	r0, r1
   3721c:	f7f7 fd82 	bl	2ed24 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   37220:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   37224:	fbb0 f0f1 	udiv	r0, r0, r1
   37228:	1a20      	subs	r0, r4, r0
   3722a:	bd10      	pop	{r4, pc}
   3722c:	2804      	cmp	r0, #4
   3722e:	d202      	bcs.n	37236 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   37230:	f04f 0028 	mov.w	r0, #40	; 0x28
   37234:	4770      	bx	lr
   37236:	d102      	bne.n	3723e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   37238:	f04f 0010 	mov.w	r0, #16
   3723c:	4770      	bx	lr
   3723e:	f04f 0000 	mov.w	r0, #0
   37242:	4770      	bx	lr
   37244:	2100      	movs	r1, #0
   37246:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   3724a:	f800 1f24 	strb.w	r1, [r0, #36]!
   3724e:	7041      	strb	r1, [r0, #1]
   37250:	4770      	bx	lr

00037252 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   37252:	b570      	push	{r4, r5, r6, lr}
   37254:	f7f8 fac6 	bl	2f7e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   37258:	4605      	mov	r5, r0
   3725a:	2400      	movs	r4, #0
   3725c:	e006      	b.n	3726c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   3725e:	4620      	mov	r0, r4
   37260:	f7f8 fac6 	bl	2f7f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   37264:	f7ff ffee 	bl	37244 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   37268:	1c64      	adds	r4, r4, #1
   3726a:	b2e4      	uxtb	r4, r4
   3726c:	42ac      	cmp	r4, r5
   3726e:	d3f6      	bcc.n	3725e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   37270:	bd70      	pop	{r4, r5, r6, pc}

00037272 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   37272:	f7fa bf27 	b.w	320c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00037276 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   37276:	b510      	push	{r4, lr}
   37278:	2000      	movs	r0, #0
   3727a:	f7fb fa7f 	bl	3277c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   3727e:	6800      	ldr	r0, [r0, #0]
   37280:	2800      	cmp	r0, #0
   37282:	bf18      	it	ne
   37284:	2001      	movne	r0, #1
   37286:	bd10      	pop	{r4, pc}

00037288 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   37288:	b510      	push	{r4, lr}
   3728a:	f7fb faef 	bl	3286c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   3728e:	f7fa fdd3 	bl	31e38 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   37292:	f000 f804 	bl	3729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   37296:	b280      	uxth	r0, r0
   37298:	bd10      	pop	{r4, pc}

0003729a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   3729a:	f7fb ba49 	b.w	32730 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0003729e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   3729e:	0a41      	lsrs	r1, r0, #9
   372a0:	f643 5209 	movw	r2, #15625	; 0x3d09
   372a4:	4351      	muls	r1, r2
   372a6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   372aa:	fb10 f002 	smulbb	r0, r0, r2
   372ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
   372b2:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   372b6:	4770      	bx	lr
   372b8:	2800      	cmp	r0, #0
   372ba:	db09      	blt.n	372d0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   372bc:	f000 021f 	and.w	r2, r0, #31
   372c0:	2101      	movs	r1, #1
   372c2:	4091      	lsls	r1, r2
   372c4:	0940      	lsrs	r0, r0, #5
   372c6:	0080      	lsls	r0, r0, #2
   372c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   372cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   372d0:	4770      	bx	lr
   372d2:	2800      	cmp	r0, #0
   372d4:	db0d      	blt.n	372f2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   372d6:	f000 021f 	and.w	r2, r0, #31
   372da:	2101      	movs	r1, #1
   372dc:	4091      	lsls	r1, r2
   372de:	0940      	lsrs	r0, r0, #5
   372e0:	0080      	lsls	r0, r0, #2
   372e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   372e6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   372ea:	f3bf 8f4f 	dsb	sy
   372ee:	f3bf 8f6f 	isb	sy
   372f2:	4770      	bx	lr
   372f4:	5840      	ldr	r0, [r0, r1]
   372f6:	2800      	cmp	r0, #0
   372f8:	d000      	beq.n	372fc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   372fa:	2001      	movs	r0, #1
   372fc:	4770      	bx	lr
   372fe:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   37302:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   37306:	f002 0201 	and.w	r2, r2, #1
   3730a:	03c0      	lsls	r0, r0, #15
   3730c:	d503      	bpl.n	37316 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   3730e:	428a      	cmp	r2, r1
   37310:	d101      	bne.n	37316 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   37312:	2001      	movs	r0, #1
   37314:	4770      	bx	lr
   37316:	2000      	movs	r0, #0
   37318:	4770      	bx	lr

0003731a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   3731a:	b510      	push	{r4, lr}
   3731c:	2101      	movs	r1, #1
   3731e:	0788      	lsls	r0, r1, #30
   37320:	f7fb fde4 	bl	32eec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   37324:	2800      	cmp	r0, #0
   37326:	d000      	beq.n	3732a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   37328:	2001      	movs	r0, #1
   3732a:	bd10      	pop	{r4, pc}

0003732c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   3732c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   37330:	2101      	movs	r1, #1
   37332:	6001      	str	r1, [r0, #0]
   37334:	4770      	bx	lr

00037336 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   37336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3733a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   3733e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   37342:	f002 0203 	and.w	r2, r2, #3
   37346:	03c9      	lsls	r1, r1, #15
   37348:	d503      	bpl.n	37352 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   3734a:	4282      	cmp	r2, r0
   3734c:	d101      	bne.n	37352 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   3734e:	2001      	movs	r0, #1
   37350:	4770      	bx	lr
   37352:	2000      	movs	r0, #0
   37354:	4770      	bx	lr

00037356 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   37356:	b510      	push	{r4, lr}
   37358:	2100      	movs	r1, #0
   3735a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   3735e:	f7fb fdc5 	bl	32eec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   37362:	2800      	cmp	r0, #0
   37364:	d000      	beq.n	37368 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   37366:	2001      	movs	r0, #1
   37368:	bd10      	pop	{r4, pc}
   3736a:	2800      	cmp	r0, #0
   3736c:	db09      	blt.n	37382 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   3736e:	f000 021f 	and.w	r2, r0, #31
   37372:	2101      	movs	r1, #1
   37374:	4091      	lsls	r1, r2
   37376:	0940      	lsrs	r0, r0, #5
   37378:	0080      	lsls	r0, r0, #2
   3737a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   3737e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   37382:	4770      	bx	lr
   37384:	2800      	cmp	r0, #0
   37386:	db0d      	blt.n	373a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   37388:	f000 021f 	and.w	r2, r0, #31
   3738c:	2101      	movs	r1, #1
   3738e:	4091      	lsls	r1, r2
   37390:	0940      	lsrs	r0, r0, #5
   37392:	0080      	lsls	r0, r0, #2
   37394:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   37398:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   3739c:	f3bf 8f4f 	dsb	sy
   373a0:	f3bf 8f6f 	isb	sy
   373a4:	4770      	bx	lr
   373a6:	1000      	.short	0x1000
   373a8:	00fa0002 	.word	0x00fa0002
   373ac:	e8ff0000 	.word	0xe8ff0000
   373b0:	95775fae 	.word	0x95775fae
   373b4:	6227c87c 	.word	0x6227c87c
   373b8:	eae61814 	.word	0xeae61814
   373bc:	3992c65d 	.word	0x3992c65d
   373c0:	3a72      	.short	0x3a72
   373c2:	2800      	cmp	r0, #0
   373c4:	db09      	blt.n	373da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   373c6:	f000 021f 	and.w	r2, r0, #31
   373ca:	2101      	movs	r1, #1
   373cc:	4091      	lsls	r1, r2
   373ce:	0940      	lsrs	r0, r0, #5
   373d0:	0080      	lsls	r0, r0, #2
   373d2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   373d6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   373da:	4770      	bx	lr

000373dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   373dc:	f3ef 8110 	mrs	r1, PRIMASK
   373e0:	b672      	cpsid	i
   373e2:	7802      	ldrb	r2, [r0, #0]
   373e4:	2a01      	cmp	r2, #1
   373e6:	d001      	beq.n	373ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   373e8:	2201      	movs	r2, #1
   373ea:	e000      	b.n	373ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   373ec:	2200      	movs	r2, #0
   373ee:	2301      	movs	r3, #1
   373f0:	7003      	strb	r3, [r0, #0]
   373f2:	b901      	cbnz	r1, 373f6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   373f4:	b662      	cpsie	i
   373f6:	b10a      	cbz	r2, 373fc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   373f8:	2000      	movs	r0, #0
   373fa:	4770      	bx	lr
   373fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   37400:	4770      	bx	lr

00037402 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   37402:	2100      	movs	r1, #0
   37404:	7001      	strb	r1, [r0, #0]
   37406:	4608      	mov	r0, r1
   37408:	4770      	bx	lr

0003740a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   3740a:	f3ef 8110 	mrs	r1, PRIMASK
   3740e:	b672      	cpsid	i
   37410:	2200      	movs	r2, #0
   37412:	7002      	strb	r2, [r0, #0]
   37414:	b901      	cbnz	r1, 37418 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   37416:	b662      	cpsie	i
   37418:	2000      	movs	r0, #0
   3741a:	4770      	bx	lr

0003741c <mpsl_low_priority_process>:
   3741c:	f7fb beba 	b.w	33194 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00037420 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   37420:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   37424:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   37428:	280f      	cmp	r0, #15
   3742a:	d001      	beq.n	37430 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   3742c:	2000      	movs	r0, #0
   3742e:	4770      	bx	lr
   37430:	2001      	movs	r0, #1
   37432:	4770      	bx	lr

00037434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   37434:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   37438:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   3743c:	280a      	cmp	r0, #10
   3743e:	d001      	beq.n	37444 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   37440:	2000      	movs	r0, #0
   37442:	4770      	bx	lr
   37444:	2001      	movs	r0, #1
   37446:	4770      	bx	lr

00037448 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   37448:	b500      	push	{lr}
   3744a:	f7ff fff3 	bl	37434 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   3744e:	b120      	cbz	r0, 3745a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   37450:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   37454:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   37458:	b108      	cbz	r0, 3745e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   3745a:	2000      	movs	r0, #0
   3745c:	bd00      	pop	{pc}
   3745e:	2001      	movs	r0, #1
   37460:	bd00      	pop	{pc}

00037462 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   37462:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   37466:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   3746a:	280e      	cmp	r0, #14
   3746c:	d001      	beq.n	37472 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   3746e:	2000      	movs	r0, #0
   37470:	4770      	bx	lr
   37472:	2001      	movs	r0, #1
   37474:	4770      	bx	lr

00037476 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   37476:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   3747a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   3747e:	2810      	cmp	r0, #16
   37480:	d001      	beq.n	37486 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   37482:	2000      	movs	r0, #0
   37484:	4770      	bx	lr
   37486:	2001      	movs	r0, #1
   37488:	4770      	bx	lr

0003748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   3748a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   3748e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   37492:	2806      	cmp	r0, #6
   37494:	d003      	beq.n	3749e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   37496:	1c40      	adds	r0, r0, #1
   37498:	d001      	beq.n	3749e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   3749a:	2000      	movs	r0, #0
   3749c:	4770      	bx	lr
   3749e:	2001      	movs	r0, #1
   374a0:	4770      	bx	lr

000374a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   374a2:	b500      	push	{lr}
   374a4:	f7ff fff1 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   374a8:	b148      	cbz	r0, 374be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   374aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   374ae:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   374b2:	2806      	cmp	r0, #6
   374b4:	d303      	bcc.n	374be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   374b6:	1c40      	adds	r0, r0, #1
   374b8:	d001      	beq.n	374be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   374ba:	2001      	movs	r0, #1
   374bc:	bd00      	pop	{pc}
   374be:	2000      	movs	r0, #0
   374c0:	bd00      	pop	{pc}

000374c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   374c2:	b500      	push	{lr}
   374c4:	f7ff ffe1 	bl	3748a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   374c8:	b138      	cbz	r0, 374da <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   374ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   374ce:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   374d2:	2806      	cmp	r0, #6
   374d4:	d303      	bcc.n	374de <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   374d6:	1c40      	adds	r0, r0, #1
   374d8:	d001      	beq.n	374de <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   374da:	2000      	movs	r0, #0
   374dc:	bd00      	pop	{pc}
   374de:	2001      	movs	r0, #1
   374e0:	bd00      	pop	{pc}

000374e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   374e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   374e6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   374ea:	280d      	cmp	r0, #13
   374ec:	d001      	beq.n	374f2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   374ee:	2000      	movs	r0, #0
   374f0:	4770      	bx	lr
   374f2:	2001      	movs	r0, #1
   374f4:	4770      	bx	lr

000374f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   374f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   374fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   374fe:	2808      	cmp	r0, #8
   37500:	d001      	beq.n	37506 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   37502:	2000      	movs	r0, #0
   37504:	4770      	bx	lr
   37506:	2001      	movs	r0, #1
   37508:	4770      	bx	lr

0003750a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   3750a:	f7fb be7d 	b.w	33208 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0003750e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   3750e:	f7fb be7b 	b.w	33208 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00037512 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   37512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37516:	428a      	cmp	r2, r1
   37518:	d803      	bhi.n	37522 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   3751a:	2179      	movs	r1, #121	; 0x79
   3751c:	2096      	movs	r0, #150	; 0x96
   3751e:	f7fb fd3b 	bl	32f98 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   37522:	fab2 f382 	clz	r3, r2
   37526:	b143      	cbz	r3, 3753a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   37528:	4099      	lsls	r1, r3
   3752a:	f1c3 0c20 	rsb	ip, r3, #32
   3752e:	fa20 fc0c 	lsr.w	ip, r0, ip
   37532:	4098      	lsls	r0, r3
   37534:	ea41 010c 	orr.w	r1, r1, ip
   37538:	409a      	lsls	r2, r3
   3753a:	0c13      	lsrs	r3, r2, #16
   3753c:	fbb1 f5f3 	udiv	r5, r1, r3
   37540:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   37544:	b287      	uxth	r7, r0
   37546:	fbb1 f0f3 	udiv	r0, r1, r3
   3754a:	fb03 1615 	mls	r6, r3, r5, r1
   3754e:	b294      	uxth	r4, r2
   37550:	fb00 f504 	mul.w	r5, r0, r4
   37554:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   37558:	42b5      	cmp	r5, r6
   3755a:	d905      	bls.n	37568 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   3755c:	1bad      	subs	r5, r5, r6
   3755e:	4295      	cmp	r5, r2
   37560:	bf94      	ite	ls
   37562:	2501      	movls	r5, #1
   37564:	2502      	movhi	r5, #2
   37566:	1b40      	subs	r0, r0, r5
   37568:	0409      	lsls	r1, r1, #16
   3756a:	0405      	lsls	r5, r0, #16
   3756c:	eb11 010c 	adds.w	r1, r1, ip
   37570:	fba0 0c02 	umull	r0, ip, r0, r2
   37574:	1a09      	subs	r1, r1, r0
   37576:	fbb1 f0f3 	udiv	r0, r1, r3
   3757a:	fbb1 fcf3 	udiv	ip, r1, r3
   3757e:	fb03 131c 	mls	r3, r3, ip, r1
   37582:	fb00 f104 	mul.w	r1, r0, r4
   37586:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   3758a:	4299      	cmp	r1, r3
   3758c:	d905      	bls.n	3759a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   3758e:	1ac9      	subs	r1, r1, r3
   37590:	4291      	cmp	r1, r2
   37592:	bf94      	ite	ls
   37594:	2101      	movls	r1, #1
   37596:	2102      	movhi	r1, #2
   37598:	1a40      	subs	r0, r0, r1
   3759a:	4328      	orrs	r0, r5
   3759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000375a0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   375a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   375a4:	461e      	mov	r6, r3
   375a6:	4615      	mov	r5, r2
   375a8:	4604      	mov	r4, r0
   375aa:	9f06      	ldr	r7, [sp, #24]
   375ac:	f7ff ffb1 	bl	37512 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   375b0:	6030      	str	r0, [r6, #0]
   375b2:	fba0 0105 	umull	r0, r1, r0, r5
   375b6:	1a20      	subs	r0, r4, r0
   375b8:	6038      	str	r0, [r7, #0]
   375ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000375be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   375be:	b4f0      	push	{r4, r5, r6, r7}
   375c0:	ea80 0c01 	eor.w	ip, r0, r1
   375c4:	4603      	mov	r3, r0
   375c6:	f01c 0f03 	tst.w	ip, #3
   375ca:	d13c      	bne.n	37646 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   375cc:	f013 0f03 	tst.w	r3, #3
   375d0:	d00b      	beq.n	375ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   375d2:	2a00      	cmp	r2, #0
   375d4:	bf04      	itt	eq
   375d6:	bcf0      	popeq	{r4, r5, r6, r7}
   375d8:	4770      	bxeq	lr
   375da:	f811 cb01 	ldrb.w	ip, [r1], #1
   375de:	f803 cb01 	strb.w	ip, [r3], #1
   375e2:	1e52      	subs	r2, r2, #1
   375e4:	f013 0f03 	tst.w	r3, #3
   375e8:	d1f3      	bne.n	375d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   375ea:	2a03      	cmp	r2, #3
   375ec:	d94f      	bls.n	3768e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   375ee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   375f2:	d24c      	bcs.n	3768e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   375f4:	f1c2 0c00 	rsb	ip, r2, #0
   375f8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   375fc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   37600:	ea4f 0cac 	mov.w	ip, ip, asr #2
   37604:	f1cc 0c00 	rsb	ip, ip, #0
   37608:	f1bc 0f00 	cmp.w	ip, #0
   3760c:	dd1b      	ble.n	37646 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   3760e:	1f0d      	subs	r5, r1, #4
   37610:	1f1c      	subs	r4, r3, #4
   37612:	f01c 0f01 	tst.w	ip, #1
   37616:	d003      	beq.n	37620 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   37618:	f855 6f04 	ldr.w	r6, [r5, #4]!
   3761c:	f844 6f04 	str.w	r6, [r4, #4]!
   37620:	ea5f 066c 	movs.w	r6, ip, asr #1
   37624:	d007      	beq.n	37636 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   37626:	686f      	ldr	r7, [r5, #4]
   37628:	6067      	str	r7, [r4, #4]
   3762a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   3762e:	f844 7f08 	str.w	r7, [r4, #8]!
   37632:	1e76      	subs	r6, r6, #1
   37634:	d1f7      	bne.n	37626 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   37636:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   3763a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   3763e:	f1cc 0c00 	rsb	ip, ip, #0
   37642:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   37646:	2a00      	cmp	r2, #0
   37648:	bf04      	itt	eq
   3764a:	bcf0      	popeq	{r4, r5, r6, r7}
   3764c:	4770      	bxeq	lr
   3764e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   37652:	d226      	bcs.n	376a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   37654:	2a00      	cmp	r2, #0
   37656:	bfdc      	itt	le
   37658:	bcf0      	pople	{r4, r5, r6, r7}
   3765a:	4770      	bxle	lr
   3765c:	1e49      	subs	r1, r1, #1
   3765e:	1e5b      	subs	r3, r3, #1
   37660:	f012 0f01 	tst.w	r2, #1
   37664:	d003      	beq.n	3766e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   37666:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   3766a:	f803 cf01 	strb.w	ip, [r3, #1]!
   3766e:	1052      	asrs	r2, r2, #1
   37670:	bf04      	itt	eq
   37672:	bcf0      	popeq	{r4, r5, r6, r7}
   37674:	4770      	bxeq	lr
   37676:	f891 c001 	ldrb.w	ip, [r1, #1]
   3767a:	f883 c001 	strb.w	ip, [r3, #1]
   3767e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   37682:	f803 cf02 	strb.w	ip, [r3, #2]!
   37686:	1e52      	subs	r2, r2, #1
   37688:	d1f5      	bne.n	37676 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   3768a:	bcf0      	pop	{r4, r5, r6, r7}
   3768c:	4770      	bx	lr
   3768e:	2a04      	cmp	r2, #4
   37690:	d3d9      	bcc.n	37646 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   37692:	f851 cb04 	ldr.w	ip, [r1], #4
   37696:	1f12      	subs	r2, r2, #4
   37698:	f843 cb04 	str.w	ip, [r3], #4
   3769c:	2a04      	cmp	r2, #4
   3769e:	d2f8      	bcs.n	37692 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   376a0:	e7d1      	b.n	37646 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   376a2:	f811 cb01 	ldrb.w	ip, [r1], #1
   376a6:	f803 cb01 	strb.w	ip, [r3], #1
   376aa:	1e52      	subs	r2, r2, #1
   376ac:	d1f9      	bne.n	376a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   376ae:	bcf0      	pop	{r4, r5, r6, r7}
   376b0:	4770      	bx	lr

000376b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   376b2:	b470      	push	{r4, r5, r6}
   376b4:	4603      	mov	r3, r0
   376b6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   376ba:	f010 0f03 	tst.w	r0, #3
   376be:	d009      	beq.n	376d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   376c0:	2a00      	cmp	r2, #0
   376c2:	bf04      	itt	eq
   376c4:	bc70      	popeq	{r4, r5, r6}
   376c6:	4770      	bxeq	lr
   376c8:	f803 cb01 	strb.w	ip, [r3], #1
   376cc:	1e52      	subs	r2, r2, #1
   376ce:	f013 0f03 	tst.w	r3, #3
   376d2:	d1f5      	bne.n	376c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   376d4:	b2c9      	uxtb	r1, r1
   376d6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   376da:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   376de:	2a03      	cmp	r2, #3
   376e0:	d939      	bls.n	37756 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   376e2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   376e6:	d236      	bcs.n	37756 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   376e8:	4251      	negs	r1, r2
   376ea:	17cc      	asrs	r4, r1, #31
   376ec:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   376f0:	1089      	asrs	r1, r1, #2
   376f2:	424e      	negs	r6, r1
   376f4:	2e00      	cmp	r6, #0
   376f6:	dd11      	ble.n	3771c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   376f8:	1f19      	subs	r1, r3, #4
   376fa:	f016 0f01 	tst.w	r6, #1
   376fe:	bf18      	it	ne
   37700:	f841 5f04 	strne.w	r5, [r1, #4]!
   37704:	1074      	asrs	r4, r6, #1
   37706:	d004      	beq.n	37712 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   37708:	604d      	str	r5, [r1, #4]
   3770a:	f841 5f08 	str.w	r5, [r1, #8]!
   3770e:	1e64      	subs	r4, r4, #1
   37710:	d1fa      	bne.n	37708 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   37712:	4271      	negs	r1, r6
   37714:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   37718:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   3771c:	2a00      	cmp	r2, #0
   3771e:	bf04      	itt	eq
   37720:	bc70      	popeq	{r4, r5, r6}
   37722:	4770      	bxeq	lr
   37724:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   37728:	d21d      	bcs.n	37766 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   3772a:	2a00      	cmp	r2, #0
   3772c:	bfdc      	itt	le
   3772e:	bc70      	pople	{r4, r5, r6}
   37730:	4770      	bxle	lr
   37732:	1e59      	subs	r1, r3, #1
   37734:	f012 0f01 	tst.w	r2, #1
   37738:	bf18      	it	ne
   3773a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   3773e:	1052      	asrs	r2, r2, #1
   37740:	bf04      	itt	eq
   37742:	bc70      	popeq	{r4, r5, r6}
   37744:	4770      	bxeq	lr
   37746:	f881 c001 	strb.w	ip, [r1, #1]
   3774a:	f801 cf02 	strb.w	ip, [r1, #2]!
   3774e:	1e52      	subs	r2, r2, #1
   37750:	d1f9      	bne.n	37746 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   37752:	bc70      	pop	{r4, r5, r6}
   37754:	4770      	bx	lr
   37756:	2a04      	cmp	r2, #4
   37758:	d3e0      	bcc.n	3771c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   3775a:	1f12      	subs	r2, r2, #4
   3775c:	f843 5b04 	str.w	r5, [r3], #4
   37760:	2a04      	cmp	r2, #4
   37762:	d2fa      	bcs.n	3775a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   37764:	e7da      	b.n	3771c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   37766:	f803 cb01 	strb.w	ip, [r3], #1
   3776a:	1e52      	subs	r2, r2, #1
   3776c:	d1fb      	bne.n	37766 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   3776e:	bc70      	pop	{r4, r5, r6}
   37770:	4770      	bx	lr
   37772:	f04f 30ff 	mov.w	r0, #4294967295
   37776:	4770      	bx	lr
   37778:	2000      	movs	r0, #0
   3777a:	4770      	bx	lr
   3777c:	2000      	movs	r0, #0
   3777e:	4770      	bx	lr
   37780:	f04f 30ff 	mov.w	r0, #4294967295
   37784:	4770      	bx	lr
   37786:	4770      	bx	lr
   37788:	4770      	bx	lr
   3778a:	2000      	movs	r0, #0
   3778c:	4770      	bx	lr
   3778e:	2100      	movs	r1, #0
   37790:	7001      	strb	r1, [r0, #0]
   37792:	4770      	bx	lr
   37794:	f04f 30ff 	mov.w	r0, #4294967295
   37798:	4770      	bx	lr
   3779a:	f04f 30ff 	mov.w	r0, #4294967295
   3779e:	4770      	bx	lr
   377a0:	2100      	movs	r1, #0
   377a2:	7001      	strb	r1, [r0, #0]
   377a4:	4770      	bx	lr
   377a6:	f04f 30ff 	mov.w	r0, #4294967295
   377aa:	4770      	bx	lr
   377ac:	f04f 30ff 	mov.w	r0, #4294967295
   377b0:	4770      	bx	lr
   377b2:	7800      	ldrb	r0, [r0, #0]
   377b4:	2800      	cmp	r0, #0
   377b6:	d001      	beq.n	377bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   377b8:	f06f 0015 	mvn.w	r0, #21
   377bc:	4770      	bx	lr
   377be:	2000      	movs	r0, #0
   377c0:	4770      	bx	lr
   377c2:	2200      	movs	r2, #0
   377c4:	f000 b802 	b.w	377cc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

000377c8 <mpsl_fem_init>:
   377c8:	f7f7 bf7a 	b.w	2f6c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

000377cc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   377cc:	b570      	push	{r4, r5, r6, lr}
   377ce:	4614      	mov	r4, r2
   377d0:	460d      	mov	r5, r1
   377d2:	1b00      	subs	r0, r0, r4
   377d4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   377d8:	4288      	cmp	r0, r1
   377da:	da01      	bge.n	377e0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   377dc:	4608      	mov	r0, r1
   377de:	e002      	b.n	377e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   377e0:	287f      	cmp	r0, #127	; 0x7f
   377e2:	dd00      	ble.n	377e6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   377e4:	207f      	movs	r0, #127	; 0x7f
   377e6:	4619      	mov	r1, r3
   377e8:	b240      	sxtb	r0, r0
   377ea:	f7f7 ff9d 	bl	2f728 <mpsl_tx_power_radio_supported_power_adjust>
   377ee:	7028      	strb	r0, [r5, #0]
   377f0:	706c      	strb	r4, [r5, #1]
   377f2:	2100      	movs	r1, #0
   377f4:	4420      	add	r0, r4
   377f6:	70a9      	strb	r1, [r5, #2]
   377f8:	b240      	sxtb	r0, r0
   377fa:	bd70      	pop	{r4, r5, r6, pc}
   377fc:	1702080c 	.word	0x1702080c
   37800:	0201010d 	.word	0x0201010d
   37804:	01010909 	.word	0x01010909
   37808:	18090206 	.word	0x18090206
   3780c:	01010318 	.word	0x01010318
   37810:	03030909 	.word	0x03030909
   37814:	01020305 	.word	0x01020305
   37818:	24020223 	.word	0x24020223
   3781c:	04041009 	.word	0x04041009
   37820:	0b0b0505 	.word	0x0b0b0505
   37824:	0b04      	.short	0x0b04
   37826:	2b          	.byte	0x2b
   37827:	d8          	.byte	0xd8
   37828:	f8f4f0ec 	.word	0xf8f4f0ec
   3782c:	030200fc 	.word	0x030200fc
   37830:	07060504 	.word	0x07060504
   37834:	00000008 	.word	0x00000008
	...
   37848:	01010100 	.word	0x01010100
   3784c:	02020201 	.word	0x02020201
   37850:	03030302 	.word	0x03030302
   37854:	04040403 	.word	0x04040403
   37858:	05050504 	.word	0x05050504
   3785c:	07060605 	.word	0x07060605
   37860:	0b0a0908 	.word	0x0b0a0908
   37864:	00000d0c 	.word	0x00000d0c
	...
   37878:	01010000 	.word	0x01010000
   3787c:	02020101 	.word	0x02020101
   37880:	03030202 	.word	0x03030202
   37884:	04040303 	.word	0x04040303
   37888:	05050404 	.word	0x05050404
   3788c:	06060505 	.word	0x06060505
   37890:	00090806 	.word	0x00090806

00037894 <battery_setup>:
}

static bool battery_ok;

static int battery_setup(void)
{
   37894:	b510      	push	{r4, lr}
	if (!device_is_ready(ddp->adc)) {
   37896:	4c15      	ldr	r4, [pc, #84]	; (378ec <battery_setup+0x58>)
   37898:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   3789a:	f010 fbbe 	bl	4801a <z_device_is_ready>
   3789e:	b308      	cbz	r0, 378e4 <battery_setup+0x50>
	*asp = (struct adc_sequence){
   378a0:	2214      	movs	r2, #20
   378a2:	2100      	movs	r1, #0
   378a4:	f104 000c 	add.w	r0, r4, #12
   378a8:	f00d ff3d 	bl	45726 <memset>
   378ac:	f104 0220 	add.w	r2, r4, #32
	*accp = (struct adc_channel_cfg){
   378b0:	490f      	ldr	r1, [pc, #60]	; (378f0 <battery_setup+0x5c>)
	*asp = (struct adc_sequence){
   378b2:	6162      	str	r2, [r4, #20]
	*accp = (struct adc_channel_cfg){
   378b4:	f44f 6210 	mov.w	r2, #2304	; 0x900
   378b8:	e9c4 1201 	strd	r1, r2, [r4, #4]
	*asp = (struct adc_sequence){
   378bc:	2202      	movs	r2, #2
	rc = adc_channel_setup(ddp->adc, accp);
   378be:	4621      	mov	r1, r4
	*asp = (struct adc_sequence){
   378c0:	2301      	movs	r3, #1
   378c2:	61a2      	str	r2, [r4, #24]
	asp->resolution = 14;
   378c4:	f240 420e 	movw	r2, #1038	; 0x40e
	rc = adc_channel_setup(ddp->adc, accp);
   378c8:	f851 0b04 	ldr.w	r0, [r1], #4
	*asp = (struct adc_sequence){
   378cc:	6123      	str	r3, [r4, #16]
	asp->resolution = 14;
   378ce:	83a2      	strh	r2, [r4, #28]
	*asp = (struct adc_sequence){
   378d0:	77a3      	strb	r3, [r4, #30]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   378d2:	6883      	ldr	r3, [r0, #8]
   378d4:	681b      	ldr	r3, [r3, #0]
   378d6:	4798      	blx	r3
	int rc = divider_setup();

	battery_ok = (rc == 0);
   378d8:	4a06      	ldr	r2, [pc, #24]	; (378f4 <battery_setup+0x60>)
   378da:	fab0 f380 	clz	r3, r0
   378de:	095b      	lsrs	r3, r3, #5
   378e0:	7013      	strb	r3, [r2, #0]
	return rc;
}
   378e2:	bd10      	pop	{r4, pc}
		return -ENOENT;
   378e4:	f06f 0001 	mvn.w	r0, #1
   378e8:	e7f6      	b.n	378d8 <battery_setup+0x44>
   378ea:	bf00      	nop
   378ec:	20000670 	.word	0x20000670
   378f0:	40280400 	.word	0x40280400
   378f4:	20003990 	.word	0x20003990

000378f8 <battery_measure_enable>:

int battery_measure_enable(bool enable)
{
	int rc = -ENOENT;

	if (battery_ok) {
   378f8:	4b03      	ldr	r3, [pc, #12]	; (37908 <battery_measure_enable+0x10>)
   378fa:	781b      	ldrb	r3, [r3, #0]
	int rc = -ENOENT;
   378fc:	2b00      	cmp	r3, #0
		if (gcp->port) {
			rc = gpio_pin_set_dt(gcp, enable);
		}
	}
	return rc;
}
   378fe:	bf0c      	ite	eq
   37900:	f06f 0001 	mvneq.w	r0, #1
   37904:	2000      	movne	r0, #0
   37906:	4770      	bx	lr
   37908:	20003990 	.word	0x20003990

0003790c <battery_sample>:

int battery_sample(void)
{
   3790c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int rc = -ENOENT;

	if (battery_ok) {
   3790e:	4b11      	ldr	r3, [pc, #68]	; (37954 <battery_sample+0x48>)
   37910:	781b      	ldrb	r3, [r3, #0]
   37912:	b1e3      	cbz	r3, 3794e <battery_sample+0x42>
		struct divider_data *ddp = &divider_data;
		const struct divider_config *dcp = &divider_config;
		struct adc_sequence *sp = &ddp->adc_seq;

		rc = adc_read(ddp->adc, sp);
   37914:	4d10      	ldr	r5, [pc, #64]	; (37958 <battery_sample+0x4c>)
   37916:	4629      	mov	r1, r5
   37918:	f851 0b0c 	ldr.w	r0, [r1], #12
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   3791c:	6883      	ldr	r3, [r0, #8]
   3791e:	685b      	ldr	r3, [r3, #4]
   37920:	4798      	blx	r3
		sp->calibrate = false;
   37922:	2300      	movs	r3, #0
   37924:	77ab      	strb	r3, [r5, #30]
		if (rc == 0) {
   37926:	4604      	mov	r4, r0
   37928:	b970      	cbnz	r0, 37948 <battery_sample+0x3c>
 * @return a positive value is the reference voltage value.  Returns
 * zero if reference voltage information is not available.
 */
static inline uint16_t adc_ref_internal(const struct device *dev)
{
	const struct adc_driver_api *api =
   3792a:	682b      	ldr	r3, [r5, #0]
			int32_t val = ddp->raw;
   3792c:	f9b5 4020 	ldrsh.w	r4, [r5, #32]
				(const struct adc_driver_api *)dev->api;

	return api->ref_internal;
   37930:	689b      	ldr	r3, [r3, #8]
					enum adc_gain gain,
					uint8_t resolution,
					int32_t *valp)
{
	int32_t adc_mv = *valp * ref_mv;
	int ret = adc_gain_invert(gain, &adc_mv);
   37932:	7928      	ldrb	r0, [r5, #4]

			adc_raw_to_millivolts(adc_ref_internal(ddp->adc),
   37934:	891b      	ldrh	r3, [r3, #8]
   37936:	7f2e      	ldrb	r6, [r5, #28]
	int32_t adc_mv = *valp * ref_mv;
   37938:	4363      	muls	r3, r4
	int ret = adc_gain_invert(gain, &adc_mv);
   3793a:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   3793c:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   3793e:	f005 fba7 	bl	3d090 <adc_gain_invert>

	if (ret == 0) {
   37942:	b908      	cbnz	r0, 37948 <battery_sample+0x3c>
		*valp = (adc_mv >> resolution);
   37944:	9c01      	ldr	r4, [sp, #4]
   37946:	4134      	asrs	r4, r6
			}
		}
	}

	return rc;
}
   37948:	4620      	mov	r0, r4
   3794a:	b002      	add	sp, #8
   3794c:	bd70      	pop	{r4, r5, r6, pc}
	int rc = -ENOENT;
   3794e:	f06f 0401 	mvn.w	r4, #1
	return rc;
   37952:	e7f9      	b.n	37948 <battery_sample+0x3c>
   37954:	20003990 	.word	0x20003990
   37958:	20000670 	.word	0x20000670

0003795c <bt_ready>:
	BT_DATA_BYTES(BT_DATA_FLAGS, BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR),
	BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, sizeof(CONFIG_BT_DEVICE_NAME) - 1),
	BT_DATA(BT_DATA_SVC_DATA16, service_data, ARRAY_SIZE(service_data))};

static void bt_ready(int err)
{
   3795c:	b570      	push	{r4, r5, r6, lr}
	if (err)
   3795e:	4606      	mov	r6, r0
{
   37960:	b088      	sub	sp, #32
	if (err)
   37962:	b960      	cbnz	r0, 3797e <bt_ready+0x22>
	{
		return;
	}

	/* Start advertising */
	err = bt_le_adv_start(ADV_PARAM, ad, ARRAY_SIZE(ad), NULL, 0);
   37964:	4d07      	ldr	r5, [pc, #28]	; (37984 <bt_ready+0x28>)
   37966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   37968:	ac03      	add	r4, sp, #12
   3796a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3796c:	682b      	ldr	r3, [r5, #0]
   3796e:	6023      	str	r3, [r4, #0]
   37970:	4905      	ldr	r1, [pc, #20]	; (37988 <bt_ready+0x2c>)
   37972:	9600      	str	r6, [sp, #0]
   37974:	4633      	mov	r3, r6
   37976:	2203      	movs	r2, #3
   37978:	a803      	add	r0, sp, #12
   3797a:	f003 f8b1 	bl	3aae0 <bt_le_adv_start>
	if (err)
	{
		return;
	}
}
   3797e:	b008      	add	sp, #32
   37980:	bd70      	pop	{r4, r5, r6, pc}
   37982:	bf00      	nop
   37984:	000490d0 	.word	0x000490d0
   37988:	20000694 	.word	0x20000694

0003798c <main>:

	return dev;
}

int main(void)
{
   3798c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3798e:	b085      	sub	sp, #20
   37990:	482e      	ldr	r0, [pc, #184]	; (37a4c <main+0xc0>)
   37992:	f010 fb42 	bl	4801a <z_device_is_ready>
	if (!device_is_ready(dev))
   37996:	2800      	cmp	r0, #0
   37998:	d054      	beq.n	37a44 <main+0xb8>
	int temp_data = 0;
	int hum_data = 0;
	// int press_data = 0;

	// Battery
	int rc = battery_measure_enable(true);
   3799a:	2001      	movs	r0, #1
   3799c:	f7ff ffac 	bl	378f8 <battery_measure_enable>

	if (rc != 0)
   379a0:	2800      	cmp	r0, #0
   379a2:	d14f      	bne.n	37a44 <main+0xb8>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   379a4:	4b29      	ldr	r3, [pc, #164]	; (37a4c <main+0xc0>)
   379a6:	689d      	ldr	r5, [r3, #8]
   379a8:	2139      	movs	r1, #57	; 0x39
   379aa:	68eb      	ldr	r3, [r5, #12]
   379ac:	4827      	ldr	r0, [pc, #156]	; (37a4c <main+0xc0>)
   379ae:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   379b0:	210d      	movs	r1, #13
   379b2:	692b      	ldr	r3, [r5, #16]
   379b4:	4825      	ldr	r0, [pc, #148]	; (37a4c <main+0xc0>)
   379b6:	466a      	mov	r2, sp
   379b8:	4798      	blx	r3
   379ba:	2110      	movs	r1, #16
   379bc:	692b      	ldr	r3, [r5, #16]
   379be:	4823      	ldr	r0, [pc, #140]	; (37a4c <main+0xc0>)
   379c0:	aa02      	add	r2, sp, #8
   379c2:	4798      	blx	r3
		sensor_sample_fetch(dev);
		sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp);
		// sensor_channel_get(dev, SENSOR_CHAN_PRESS, &press);
		sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, &humidity);

		temp_data = temp.val1 * 100 + temp.val2 / 10000;
   379c4:	9a00      	ldr	r2, [sp, #0]
   379c6:	9e01      	ldr	r6, [sp, #4]
		hum_data = humidity.val1 * 100 + humidity.val2 / 10000;
   379c8:	9c03      	ldr	r4, [sp, #12]
		temp_data = temp.val1 * 100 + temp.val2 / 10000;
   379ca:	f242 7310 	movw	r3, #10000	; 0x2710
   379ce:	fb96 f6f3 	sdiv	r6, r6, r3
		hum_data = humidity.val1 * 100 + humidity.val2 / 10000;
   379d2:	fb94 f4f3 	sdiv	r4, r4, r3
   379d6:	9b02      	ldr	r3, [sp, #8]
		temp_data = temp.val1 * 100 + temp.val2 / 10000;
   379d8:	2764      	movs	r7, #100	; 0x64
   379da:	fb07 6602 	mla	r6, r7, r2, r6
		hum_data = humidity.val1 * 100 + humidity.val2 / 10000;
   379de:	fb07 4403 	mla	r4, r7, r3, r4
		// press_data = press.val1 * 1000 + press.val2 / 100000; // Druck wird in kPa gemessen, statt hPa

		// Battery lesen
		int batt_mV = battery_sample();
   379e2:	f7ff ff93 	bl	3790c <battery_sample>
		int batt_2digits = (batt_mV + 50) / 100;

		service_data[IDX_TEMPL] = temp_data & 0xff;
   379e6:	4b1a      	ldr	r3, [pc, #104]	; (37a50 <main+0xc4>)
		int batt_2digits = (batt_mV + 50) / 100;
   379e8:	3032      	adds	r0, #50	; 0x32
   379ea:	fb90 f0f7 	sdiv	r0, r0, r7

		// service_data[IDX_PRESSL] = press_data & 0xff;
		// service_data[IDX_PRESSM] = (press_data >> 8) & 0xff;
		// service_data[IDX_PRESSH] = (press_data >> 16) & 0xff;

		service_data[IDX_VOLTAGEL] = batt_2digits & 0xff;
   379ee:	7298      	strb	r0, [r3, #10]
		service_data[IDX_VOLTAGEH] = (batt_2digits >> 8) & 0xff;
   379f0:	1200      	asrs	r0, r0, #8
		service_data[IDX_TEMPL] = temp_data & 0xff;
   379f2:	711e      	strb	r6, [r3, #4]
		service_data[IDX_HUML] = hum_data & 0xff;
   379f4:	71dc      	strb	r4, [r3, #7]
		service_data[IDX_VOLTAGEH] = (batt_2digits >> 8) & 0xff;
   379f6:	72d8      	strb	r0, [r3, #11]
		service_data[IDX_TEMPH] = temp_data >> 8;
   379f8:	1236      	asrs	r6, r6, #8
		service_data[IDX_HUMH] = hum_data >> 8;
   379fa:	1224      	asrs	r4, r4, #8

		err = bt_enable(bt_ready);
   379fc:	4815      	ldr	r0, [pc, #84]	; (37a54 <main+0xc8>)
		service_data[IDX_TEMPH] = temp_data >> 8;
   379fe:	715e      	strb	r6, [r3, #5]
		service_data[IDX_HUMH] = hum_data >> 8;
   37a00:	721c      	strb	r4, [r3, #8]
		err = bt_enable(bt_ready);
   37a02:	f002 fbeb 	bl	3a1dc <bt_enable>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   37a06:	2100      	movs	r1, #0
   37a08:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   37a0c:	f009 fd44 	bl	41498 <z_impl_k_sleep>
		k_sleep(K_SECONDS(30));

		err = bt_le_adv_update_data(ad, ARRAY_SIZE(ad), NULL, 0);
   37a10:	2300      	movs	r3, #0
   37a12:	461a      	mov	r2, r3
   37a14:	2103      	movs	r1, #3
   37a16:	4810      	ldr	r0, [pc, #64]	; (37a58 <main+0xcc>)
   37a18:	f002 ff10 	bl	3a83c <bt_le_adv_update_data>
   37a1c:	2100      	movs	r1, #0
   37a1e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   37a22:	f009 fd39 	bl	41498 <z_impl_k_sleep>
		k_sleep(K_SECONDS(30));

		err = bt_le_adv_stop();
   37a26:	f003 f88d 	bl	3ab44 <bt_le_adv_stop>
   37a2a:	2100      	movs	r1, #0
   37a2c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   37a30:	f009 fd32 	bl	41498 <z_impl_k_sleep>
		k_sleep(K_SECONDS(30));

		err = bt_disable();
   37a34:	f002 fc42 	bl	3a2bc <bt_disable>
   37a38:	2100      	movs	r1, #0
   37a3a:	f04f 70e1 	mov.w	r0, #29491200	; 0x1c20000
   37a3e:	f009 fd2b 	bl	41498 <z_impl_k_sleep>
	for (;;)
   37a42:	e7b1      	b.n	379a8 <main+0x1c>
		k_sleep(K_MSEC(900000));
		
	}
	return 0;
}
   37a44:	2000      	movs	r0, #0
   37a46:	b005      	add	sp, #20
   37a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37a4a:	bf00      	nop
   37a4c:	00048da0 	.word	0x00048da0
   37a50:	20000931 	.word	0x20000931
   37a54:	0003795d 	.word	0x0003795d
   37a58:	20000694 	.word	0x20000694

00037a5c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   37a5c:	4b01      	ldr	r3, [pc, #4]	; (37a64 <char_out+0x8>)
   37a5e:	681b      	ldr	r3, [r3, #0]
   37a60:	4718      	bx	r3
   37a62:	bf00      	nop
   37a64:	200006ac 	.word	0x200006ac

00037a68 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   37a68:	b507      	push	{r0, r1, r2, lr}
   37a6a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   37a6c:	2100      	movs	r1, #0
   37a6e:	4602      	mov	r2, r0
   37a70:	9100      	str	r1, [sp, #0]
   37a72:	4803      	ldr	r0, [pc, #12]	; (37a80 <vprintk+0x18>)
   37a74:	f000 f914 	bl	37ca0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   37a78:	b003      	add	sp, #12
   37a7a:	f85d fb04 	ldr.w	pc, [sp], #4
   37a7e:	bf00      	nop
   37a80:	00037a5d 	.word	0x00037a5d

00037a84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   37a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37a88:	8b05      	ldrh	r5, [r0, #24]
{
   37a8a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   37a8c:	0728      	lsls	r0, r5, #28
{
   37a8e:	4690      	mov	r8, r2
	if (processing) {
   37a90:	d411      	bmi.n	37ab6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   37a92:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37a94:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   37a98:	f040 80cd 	bne.w	37c36 <process_event+0x1b2>
			evt = process_recheck(mgr);
   37a9c:	4620      	mov	r0, r4
   37a9e:	f00d f9f3 	bl	44e88 <process_recheck>
		}

		if (evt == EVT_NOP) {
   37aa2:	b178      	cbz	r0, 37ac4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   37aa4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37aa6:	8b21      	ldrh	r1, [r4, #24]
   37aa8:	2804      	cmp	r0, #4
   37aaa:	d811      	bhi.n	37ad0 <process_event+0x4c>
   37aac:	e8df f000 	tbb	[pc, r0]
   37ab0:	856d10c3 	.word	0x856d10c3
   37ab4:	95          	.byte	0x95
   37ab5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   37ab6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   37ab8:	bf0c      	ite	eq
   37aba:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   37abe:	f045 0520 	orrne.w	r5, r5, #32
   37ac2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   37ac4:	f388 8811 	msr	BASEPRI, r8
   37ac8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   37acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37ad0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   37ad4:	45aa      	cmp	sl, r5
   37ad6:	f000 80a6 	beq.w	37c26 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   37ada:	2700      	movs	r7, #0
   37adc:	46b9      	mov	r9, r7
   37ade:	463e      	mov	r6, r7
   37ae0:	68a3      	ldr	r3, [r4, #8]
   37ae2:	2b00      	cmp	r3, #0
   37ae4:	f000 80bd 	beq.w	37c62 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   37ae8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   37aec:	8321      	strh	r1, [r4, #24]
   37aee:	f388 8811 	msr	BASEPRI, r8
   37af2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   37af6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   37af8:	2900      	cmp	r1, #0
   37afa:	f000 80bb 	beq.w	37c74 <process_event+0x1f0>
	return node->next;
   37afe:	680d      	ldr	r5, [r1, #0]
   37b00:	2900      	cmp	r1, #0
   37b02:	f000 80b7 	beq.w	37c74 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   37b06:	f8d1 8004 	ldr.w	r8, [r1, #4]
   37b0a:	4633      	mov	r3, r6
   37b0c:	4652      	mov	r2, sl
   37b0e:	4620      	mov	r0, r4
   37b10:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   37b12:	2d00      	cmp	r5, #0
   37b14:	d076      	beq.n	37c04 <process_event+0x180>
   37b16:	682b      	ldr	r3, [r5, #0]
   37b18:	4629      	mov	r1, r5
   37b1a:	461d      	mov	r5, r3
   37b1c:	e7f0      	b.n	37b00 <process_event+0x7c>
   37b1e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   37b22:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   37b24:	2a01      	cmp	r2, #1
   37b26:	d81b      	bhi.n	37b60 <process_event+0xdc>
	list->head = NULL;
   37b28:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37b2a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   37b2e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   37b30:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37b32:	b289      	uxth	r1, r1
	list->tail = NULL;
   37b34:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   37b38:	d109      	bne.n	37b4e <process_event+0xca>
   37b3a:	463b      	mov	r3, r7
   37b3c:	e003      	b.n	37b46 <process_event+0xc2>
				mgr->refs += 1U;
   37b3e:	8b62      	ldrh	r2, [r4, #26]
   37b40:	3201      	adds	r2, #1
   37b42:	8362      	strh	r2, [r4, #26]
	return node->next;
   37b44:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   37b46:	2b00      	cmp	r3, #0
   37b48:	d1f9      	bne.n	37b3e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37b4a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   37b4e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   37b50:	4620      	mov	r0, r4
   37b52:	f00d f999 	bl	44e88 <process_recheck>
   37b56:	2800      	cmp	r0, #0
   37b58:	d07b      	beq.n	37c52 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   37b5a:	f041 0120 	orr.w	r1, r1, #32
   37b5e:	e077      	b.n	37c50 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   37b60:	2b04      	cmp	r3, #4
   37b62:	d10a      	bne.n	37b7a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37b64:	f021 0107 	bic.w	r1, r1, #7
   37b68:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   37b6a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   37b6c:	4620      	mov	r0, r4
   37b6e:	f00d f98b 	bl	44e88 <process_recheck>
   37b72:	b110      	cbz	r0, 37b7a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   37b74:	f041 0120 	orr.w	r1, r1, #32
   37b78:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37b7a:	8b21      	ldrh	r1, [r4, #24]
   37b7c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   37b80:	45aa      	cmp	sl, r5
   37b82:	d050      	beq.n	37c26 <process_event+0x1a2>
   37b84:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   37b86:	46b9      	mov	r9, r7
   37b88:	e7aa      	b.n	37ae0 <process_event+0x5c>
			transit = mgr->transitions->start;
   37b8a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37b8c:	f021 0107 	bic.w	r1, r1, #7
   37b90:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   37b94:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   37b96:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   37b9a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   37b9c:	d12d      	bne.n	37bfa <process_event+0x176>
		    || (transit != NULL)) {
   37b9e:	f1b9 0f00 	cmp.w	r9, #0
   37ba2:	d040      	beq.n	37c26 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   37ba4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   37ba8:	8321      	strh	r1, [r4, #24]
   37baa:	f388 8811 	msr	BASEPRI, r8
   37bae:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   37bb2:	493a      	ldr	r1, [pc, #232]	; (37c9c <process_event+0x218>)
   37bb4:	4620      	mov	r0, r4
   37bb6:	47c8      	blx	r9
   37bb8:	e029      	b.n	37c0e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37bba:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   37bbe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37bc0:	f041 0104 	orr.w	r1, r1, #4
   37bc4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   37bc6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   37bc8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   37bcc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   37bce:	d0e6      	beq.n	37b9e <process_event+0x11a>
   37bd0:	2700      	movs	r7, #0
		res = 0;
   37bd2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37bd4:	f04f 0a04 	mov.w	sl, #4
   37bd8:	e782      	b.n	37ae0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37bda:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   37bde:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37be0:	f041 0105 	orr.w	r1, r1, #5
   37be4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   37be6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   37be8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   37bec:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   37bee:	d0d6      	beq.n	37b9e <process_event+0x11a>
   37bf0:	2700      	movs	r7, #0
		res = 0;
   37bf2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37bf4:	f04f 0a05 	mov.w	sl, #5
   37bf8:	e772      	b.n	37ae0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   37bfa:	2700      	movs	r7, #0
		res = 0;
   37bfc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37bfe:	f04f 0a06 	mov.w	sl, #6
   37c02:	e76d      	b.n	37ae0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   37c04:	462b      	mov	r3, r5
   37c06:	e787      	b.n	37b18 <process_event+0x94>
			if (transit != NULL) {
   37c08:	f1b9 0f00 	cmp.w	r9, #0
   37c0c:	d1d1      	bne.n	37bb2 <process_event+0x12e>
	__asm__ volatile(
   37c0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   37c12:	f3ef 8811 	mrs	r8, BASEPRI
   37c16:	f383 8812 	msr	BASEPRI_MAX, r3
   37c1a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   37c1e:	8b23      	ldrh	r3, [r4, #24]
   37c20:	f023 0308 	bic.w	r3, r3, #8
   37c24:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   37c26:	8b25      	ldrh	r5, [r4, #24]
   37c28:	06ea      	lsls	r2, r5, #27
   37c2a:	d52e      	bpl.n	37c8a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   37c2c:	f025 0310 	bic.w	r3, r5, #16
   37c30:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   37c32:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   37c36:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   37c38:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   37c3a:	2e00      	cmp	r6, #0
   37c3c:	f6bf af6f 	bge.w	37b1e <process_event+0x9a>
	list->head = NULL;
   37c40:	2300      	movs	r3, #0
		*clients = mgr->clients;
   37c42:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   37c44:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   37c48:	f021 0107 	bic.w	r1, r1, #7
   37c4c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   37c50:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   37c52:	8b21      	ldrh	r1, [r4, #24]
   37c54:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   37c58:	45aa      	cmp	sl, r5
   37c5a:	f04f 0900 	mov.w	r9, #0
   37c5e:	f47f af3f 	bne.w	37ae0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   37c62:	2f00      	cmp	r7, #0
   37c64:	d09b      	beq.n	37b9e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   37c66:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   37c6a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   37c6c:	f388 8811 	msr	BASEPRI, r8
   37c70:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   37c74:	2f00      	cmp	r7, #0
   37c76:	d0c7      	beq.n	37c08 <process_event+0x184>
	return node->next;
   37c78:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   37c7a:	4639      	mov	r1, r7
   37c7c:	4633      	mov	r3, r6
   37c7e:	4652      	mov	r2, sl
   37c80:	4620      	mov	r0, r4
   37c82:	f00d f92d 	bl	44ee0 <notify_one>
	list->head = node;
   37c86:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   37c88:	e7f4      	b.n	37c74 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   37c8a:	06ab      	lsls	r3, r5, #26
   37c8c:	f57f af1a 	bpl.w	37ac4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   37c90:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   37c94:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   37c96:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   37c9a:	e6ff      	b.n	37a9c <process_event+0x18>
   37c9c:	00044f0d 	.word	0x00044f0d

00037ca0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   37ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ca4:	4681      	mov	r9, r0
   37ca6:	b095      	sub	sp, #84	; 0x54
   37ca8:	468b      	mov	fp, r1
   37caa:	4617      	mov	r7, r2
   37cac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   37cae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   37cb0:	7838      	ldrb	r0, [r7, #0]
   37cb2:	b908      	cbnz	r0, 37cb8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   37cb4:	4628      	mov	r0, r5
   37cb6:	e358      	b.n	3836a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   37cb8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   37cba:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   37cbc:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   37cbe:	d006      	beq.n	37cce <z_cbvprintf_impl+0x2e>
			OUTC('%');
   37cc0:	4659      	mov	r1, fp
   37cc2:	47c8      	blx	r9
   37cc4:	2800      	cmp	r0, #0
   37cc6:	f2c0 8350 	blt.w	3836a <z_cbvprintf_impl+0x6ca>
   37cca:	3501      	adds	r5, #1
		if (bps == NULL) {
   37ccc:	e1fb      	b.n	380c6 <z_cbvprintf_impl+0x426>
		} state = {
   37cce:	2218      	movs	r2, #24
   37cd0:	2100      	movs	r1, #0
   37cd2:	a80e      	add	r0, sp, #56	; 0x38
   37cd4:	f00d fd27 	bl	45726 <memset>
	if (*sp == '%') {
   37cd8:	787b      	ldrb	r3, [r7, #1]
   37cda:	2b25      	cmp	r3, #37	; 0x25
   37cdc:	d07d      	beq.n	37dda <z_cbvprintf_impl+0x13a>
   37cde:	2300      	movs	r3, #0
   37ce0:	1c78      	adds	r0, r7, #1
   37ce2:	4698      	mov	r8, r3
   37ce4:	469e      	mov	lr, r3
   37ce6:	469c      	mov	ip, r3
   37ce8:	461e      	mov	r6, r3
   37cea:	4601      	mov	r1, r0
		switch (*sp) {
   37cec:	f810 2b01 	ldrb.w	r2, [r0], #1
   37cf0:	2a2b      	cmp	r2, #43	; 0x2b
   37cf2:	f000 80a1 	beq.w	37e38 <z_cbvprintf_impl+0x198>
   37cf6:	f200 8098 	bhi.w	37e2a <z_cbvprintf_impl+0x18a>
   37cfa:	2a20      	cmp	r2, #32
   37cfc:	f000 809f 	beq.w	37e3e <z_cbvprintf_impl+0x19e>
   37d00:	2a23      	cmp	r2, #35	; 0x23
   37d02:	f000 809f 	beq.w	37e44 <z_cbvprintf_impl+0x1a4>
   37d06:	b12b      	cbz	r3, 37d14 <z_cbvprintf_impl+0x74>
   37d08:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   37d10:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   37d14:	f1b8 0f00 	cmp.w	r8, #0
   37d18:	d005      	beq.n	37d26 <z_cbvprintf_impl+0x86>
   37d1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d1e:	f043 0320 	orr.w	r3, r3, #32
   37d22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   37d26:	f1be 0f00 	cmp.w	lr, #0
   37d2a:	d005      	beq.n	37d38 <z_cbvprintf_impl+0x98>
   37d2c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d30:	f043 0310 	orr.w	r3, r3, #16
   37d34:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   37d38:	f1bc 0f00 	cmp.w	ip, #0
   37d3c:	d005      	beq.n	37d4a <z_cbvprintf_impl+0xaa>
   37d3e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d42:	f043 0308 	orr.w	r3, r3, #8
   37d46:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   37d4a:	b12e      	cbz	r6, 37d58 <z_cbvprintf_impl+0xb8>
   37d4c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d50:	f043 0304 	orr.w	r3, r3, #4
   37d54:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   37d58:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   37d5c:	f003 0044 	and.w	r0, r3, #68	; 0x44
   37d60:	2844      	cmp	r0, #68	; 0x44
   37d62:	d103      	bne.n	37d6c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   37d64:	f36f 1386 	bfc	r3, #6, #1
   37d68:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   37d6c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   37d70:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   37d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   37d76:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   37d7a:	d17f      	bne.n	37e7c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   37d7c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37d80:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   37d84:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   37d86:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   37d8a:	781a      	ldrb	r2, [r3, #0]
   37d8c:	2a2e      	cmp	r2, #46	; 0x2e
   37d8e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37d92:	bf0c      	ite	eq
   37d94:	2101      	moveq	r1, #1
   37d96:	2100      	movne	r1, #0
   37d98:	f361 0241 	bfi	r2, r1, #1, #1
   37d9c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   37da0:	d178      	bne.n	37e94 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   37da2:	785a      	ldrb	r2, [r3, #1]
   37da4:	2a2a      	cmp	r2, #42	; 0x2a
   37da6:	d06e      	beq.n	37e86 <z_cbvprintf_impl+0x1e6>
	++sp;
   37da8:	3301      	adds	r3, #1
	size_t val = 0;
   37daa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   37dac:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   37db0:	4619      	mov	r1, r3
   37db2:	f811 0b01 	ldrb.w	r0, [r1], #1
   37db6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   37dba:	2e09      	cmp	r6, #9
   37dbc:	f240 8095 	bls.w	37eea <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   37dc0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   37dc4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   37dc6:	f3c1 0040 	ubfx	r0, r1, #1, #1
   37dca:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   37dce:	460a      	mov	r2, r1
   37dd0:	f360 0241 	bfi	r2, r0, #1, #1
   37dd4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   37dd8:	e05c      	b.n	37e94 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   37dda:	1cba      	adds	r2, r7, #2
   37ddc:	9203      	str	r2, [sp, #12]
   37dde:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   37de2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   37de6:	07da      	lsls	r2, r3, #31
   37de8:	f140 812e 	bpl.w	38048 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   37dec:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   37df0:	f1b8 0f00 	cmp.w	r8, #0
   37df4:	da07      	bge.n	37e06 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   37df6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   37dfa:	f042 0204 	orr.w	r2, r2, #4
   37dfe:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   37e02:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   37e06:	075e      	lsls	r6, r3, #29
   37e08:	f140 8127 	bpl.w	3805a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   37e0c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   37e10:	f1ba 0f00 	cmp.w	sl, #0
   37e14:	f280 8126 	bge.w	38064 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   37e18:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   37e1c:	f36f 0341 	bfc	r3, #1, #1
   37e20:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   37e24:	f04f 3aff 	mov.w	sl, #4294967295
   37e28:	e11c      	b.n	38064 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   37e2a:	2a2d      	cmp	r2, #45	; 0x2d
   37e2c:	d00d      	beq.n	37e4a <z_cbvprintf_impl+0x1aa>
   37e2e:	2a30      	cmp	r2, #48	; 0x30
   37e30:	f47f af69 	bne.w	37d06 <z_cbvprintf_impl+0x66>
   37e34:	2301      	movs	r3, #1
	} while (loop);
   37e36:	e758      	b.n	37cea <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   37e38:	f04f 0c01 	mov.w	ip, #1
   37e3c:	e755      	b.n	37cea <z_cbvprintf_impl+0x4a>
   37e3e:	f04f 0e01 	mov.w	lr, #1
   37e42:	e752      	b.n	37cea <z_cbvprintf_impl+0x4a>
   37e44:	f04f 0801 	mov.w	r8, #1
   37e48:	e74f      	b.n	37cea <z_cbvprintf_impl+0x4a>
   37e4a:	2601      	movs	r6, #1
   37e4c:	e74d      	b.n	37cea <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   37e4e:	fb0e 6202 	mla	r2, lr, r2, r6
   37e52:	3a30      	subs	r2, #48	; 0x30
   37e54:	4603      	mov	r3, r0
   37e56:	4618      	mov	r0, r3
   37e58:	f810 6b01 	ldrb.w	r6, [r0], #1
   37e5c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   37e60:	f1bc 0f09 	cmp.w	ip, #9
   37e64:	d9f3      	bls.n	37e4e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   37e66:	4299      	cmp	r1, r3
   37e68:	d08f      	beq.n	37d8a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   37e6a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   37e6e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   37e70:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   37e72:	f362 0141 	bfi	r1, r2, #1, #1
   37e76:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   37e7a:	e786      	b.n	37d8a <z_cbvprintf_impl+0xea>
   37e7c:	460b      	mov	r3, r1
	size_t val = 0;
   37e7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   37e80:	f04f 0e0a 	mov.w	lr, #10
   37e84:	e7e7      	b.n	37e56 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   37e86:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37e8a:	f042 0204 	orr.w	r2, r2, #4
   37e8e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   37e92:	3302      	adds	r3, #2
	switch (*sp) {
   37e94:	781a      	ldrb	r2, [r3, #0]
   37e96:	2a6c      	cmp	r2, #108	; 0x6c
   37e98:	d047      	beq.n	37f2a <z_cbvprintf_impl+0x28a>
   37e9a:	d82b      	bhi.n	37ef4 <z_cbvprintf_impl+0x254>
   37e9c:	2a68      	cmp	r2, #104	; 0x68
   37e9e:	d031      	beq.n	37f04 <z_cbvprintf_impl+0x264>
   37ea0:	2a6a      	cmp	r2, #106	; 0x6a
   37ea2:	d04b      	beq.n	37f3c <z_cbvprintf_impl+0x29c>
   37ea4:	2a4c      	cmp	r2, #76	; 0x4c
   37ea6:	d051      	beq.n	37f4c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   37ea8:	461a      	mov	r2, r3
   37eaa:	f812 3b01 	ldrb.w	r3, [r2], #1
   37eae:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   37eb0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   37eb2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   37eb6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   37eba:	f200 80be 	bhi.w	3803a <z_cbvprintf_impl+0x39a>
   37ebe:	2b6d      	cmp	r3, #109	; 0x6d
   37ec0:	d851      	bhi.n	37f66 <z_cbvprintf_impl+0x2c6>
   37ec2:	2b69      	cmp	r3, #105	; 0x69
   37ec4:	f200 80b9 	bhi.w	3803a <z_cbvprintf_impl+0x39a>
   37ec8:	2b57      	cmp	r3, #87	; 0x57
   37eca:	d867      	bhi.n	37f9c <z_cbvprintf_impl+0x2fc>
   37ecc:	2b41      	cmp	r3, #65	; 0x41
   37ece:	d003      	beq.n	37ed8 <z_cbvprintf_impl+0x238>
   37ed0:	3b45      	subs	r3, #69	; 0x45
   37ed2:	2b02      	cmp	r3, #2
   37ed4:	f200 80b1 	bhi.w	3803a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   37ed8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   37edc:	2204      	movs	r2, #4
   37ede:	f362 0302 	bfi	r3, r2, #0, #3
   37ee2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   37ee6:	2301      	movs	r3, #1
			break;
   37ee8:	e073      	b.n	37fd2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   37eea:	fb0c 0202 	mla	r2, ip, r2, r0
   37eee:	3a30      	subs	r2, #48	; 0x30
   37ef0:	460b      	mov	r3, r1
   37ef2:	e75d      	b.n	37db0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   37ef4:	2a74      	cmp	r2, #116	; 0x74
   37ef6:	d025      	beq.n	37f44 <z_cbvprintf_impl+0x2a4>
   37ef8:	2a7a      	cmp	r2, #122	; 0x7a
   37efa:	d1d5      	bne.n	37ea8 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   37efc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37f00:	2106      	movs	r1, #6
   37f02:	e00c      	b.n	37f1e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   37f04:	785a      	ldrb	r2, [r3, #1]
   37f06:	2a68      	cmp	r2, #104	; 0x68
   37f08:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37f0c:	d106      	bne.n	37f1c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   37f0e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   37f10:	f361 02c6 	bfi	r2, r1, #3, #4
   37f14:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   37f18:	3302      	adds	r3, #2
   37f1a:	e7c5      	b.n	37ea8 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   37f1c:	2102      	movs	r1, #2
   37f1e:	f361 02c6 	bfi	r2, r1, #3, #4
   37f22:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   37f26:	3301      	adds	r3, #1
   37f28:	e7be      	b.n	37ea8 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   37f2a:	785a      	ldrb	r2, [r3, #1]
   37f2c:	2a6c      	cmp	r2, #108	; 0x6c
   37f2e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37f32:	d101      	bne.n	37f38 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   37f34:	2104      	movs	r1, #4
   37f36:	e7eb      	b.n	37f10 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   37f38:	2103      	movs	r1, #3
   37f3a:	e7f0      	b.n	37f1e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   37f3c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37f40:	2105      	movs	r1, #5
   37f42:	e7ec      	b.n	37f1e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   37f44:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   37f48:	2107      	movs	r1, #7
   37f4a:	e7e8      	b.n	37f1e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   37f4c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   37f50:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   37f54:	f022 0202 	bic.w	r2, r2, #2
   37f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   37f5c:	f042 0202 	orr.w	r2, r2, #2
   37f60:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   37f64:	e7df      	b.n	37f26 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   37f66:	3b6e      	subs	r3, #110	; 0x6e
   37f68:	b2d9      	uxtb	r1, r3
   37f6a:	2301      	movs	r3, #1
   37f6c:	408b      	lsls	r3, r1
   37f6e:	f240 4182 	movw	r1, #1154	; 0x482
   37f72:	420b      	tst	r3, r1
   37f74:	d137      	bne.n	37fe6 <z_cbvprintf_impl+0x346>
   37f76:	f013 0f24 	tst.w	r3, #36	; 0x24
   37f7a:	d151      	bne.n	38020 <z_cbvprintf_impl+0x380>
   37f7c:	07d8      	lsls	r0, r3, #31
   37f7e:	d55c      	bpl.n	3803a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   37f80:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   37f84:	2103      	movs	r1, #3
   37f86:	f361 0302 	bfi	r3, r1, #0, #3
   37f8a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   37f8e:	f002 0378 	and.w	r3, r2, #120	; 0x78
   37f92:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   37f96:	424b      	negs	r3, r1
   37f98:	414b      	adcs	r3, r1
   37f9a:	e01a      	b.n	37fd2 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   37f9c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   37fa0:	b2c9      	uxtb	r1, r1
   37fa2:	2001      	movs	r0, #1
   37fa4:	fa00 f101 	lsl.w	r1, r0, r1
   37fa8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   37fac:	d194      	bne.n	37ed8 <z_cbvprintf_impl+0x238>
   37fae:	f640 0601 	movw	r6, #2049	; 0x801
   37fb2:	4231      	tst	r1, r6
   37fb4:	d11d      	bne.n	37ff2 <z_cbvprintf_impl+0x352>
   37fb6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   37fba:	d03e      	beq.n	3803a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   37fbc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   37fc0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   37fc4:	f002 0278 	and.w	r2, r2, #120	; 0x78
   37fc8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   37fca:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   37fce:	d034      	beq.n	3803a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   37fd0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   37fd2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   37fd6:	f3c2 0140 	ubfx	r1, r2, #1, #1
   37fda:	430b      	orrs	r3, r1
   37fdc:	f363 0241 	bfi	r2, r3, #1, #1
   37fe0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   37fe4:	e6fd      	b.n	37de2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   37fe6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   37fea:	2102      	movs	r1, #2
   37fec:	f361 0302 	bfi	r3, r1, #0, #3
   37ff0:	e7e8      	b.n	37fc4 <z_cbvprintf_impl+0x324>
   37ff2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   37ff6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   37ff8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   37ffc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   38000:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   38002:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   38006:	bf02      	ittt	eq
   38008:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   3800c:	f041 0101 	orreq.w	r1, r1, #1
   38010:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   38014:	2b63      	cmp	r3, #99	; 0x63
   38016:	d1db      	bne.n	37fd0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   38018:	1e13      	subs	r3, r2, #0
   3801a:	bf18      	it	ne
   3801c:	2301      	movne	r3, #1
   3801e:	e7d8      	b.n	37fd2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   38020:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   38024:	2103      	movs	r1, #3
   38026:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   3802a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   3802e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   38032:	bf14      	ite	ne
   38034:	2301      	movne	r3, #1
   38036:	2300      	moveq	r3, #0
   38038:	e7cb      	b.n	37fd2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   3803a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   3803e:	f043 0301 	orr.w	r3, r3, #1
   38042:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   38046:	e7c3      	b.n	37fd0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   38048:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   3804c:	2a00      	cmp	r2, #0
			width = conv->width_value;
   3804e:	bfb4      	ite	lt
   38050:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   38054:	f04f 38ff 	movge.w	r8, #4294967295
   38058:	e6d5      	b.n	37e06 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   3805a:	0798      	lsls	r0, r3, #30
   3805c:	f57f aee2 	bpl.w	37e24 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   38060:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   38064:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   38068:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   3806a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   3806e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   38072:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   38076:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   38078:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   3807c:	d133      	bne.n	380e6 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   3807e:	1ecb      	subs	r3, r1, #3
   38080:	2b04      	cmp	r3, #4
   38082:	d804      	bhi.n	3808e <z_cbvprintf_impl+0x3ee>
   38084:	e8df f003 	tbb	[pc, r3]
   38088:	21464621 	.word	0x21464621
   3808c:	21          	.byte	0x21
   3808d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   3808e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   38090:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   38092:	ea4f 72e3 	mov.w	r2, r3, asr #31
   38096:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   3809a:	d11c      	bne.n	380d6 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   3809c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   380a0:	17da      	asrs	r2, r3, #31
   380a2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   380a6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   380a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   380ac:	f013 0603 	ands.w	r6, r3, #3
   380b0:	d050      	beq.n	38154 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   380b2:	9b03      	ldr	r3, [sp, #12]
   380b4:	463a      	mov	r2, r7
   380b6:	4659      	mov	r1, fp
   380b8:	4648      	mov	r0, r9
   380ba:	f00d f813 	bl	450e4 <outs>
   380be:	2800      	cmp	r0, #0
   380c0:	f2c0 8153 	blt.w	3836a <z_cbvprintf_impl+0x6ca>
   380c4:	4405      	add	r5, r0
			continue;
   380c6:	9f03      	ldr	r7, [sp, #12]
   380c8:	e5f2      	b.n	37cb0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   380ca:	f854 3b04 	ldr.w	r3, [r4], #4
   380ce:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   380d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   380d4:	e7e8      	b.n	380a8 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   380d6:	2902      	cmp	r1, #2
   380d8:	d1e5      	bne.n	380a6 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   380da:	b21a      	sxth	r2, r3
   380dc:	f343 33c0 	sbfx	r3, r3, #15, #1
   380e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   380e4:	e7df      	b.n	380a6 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   380e6:	2b02      	cmp	r3, #2
   380e8:	d124      	bne.n	38134 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   380ea:	1ecb      	subs	r3, r1, #3
   380ec:	2b04      	cmp	r3, #4
   380ee:	d804      	bhi.n	380fa <z_cbvprintf_impl+0x45a>
   380f0:	e8df f003 	tbb	[pc, r3]
   380f4:	18101018 	.word	0x18101018
   380f8:	18          	.byte	0x18
   380f9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   380fa:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   380fc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   38100:	f04f 0200 	mov.w	r2, #0
   38104:	d014      	beq.n	38130 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   38106:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   38108:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   3810c:	d1cc      	bne.n	380a8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   3810e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   38110:	930e      	str	r3, [sp, #56]	; 0x38
   38112:	e7c9      	b.n	380a8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   38114:	3407      	adds	r4, #7
   38116:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   3811a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   3811e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   38122:	e7c1      	b.n	380a8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   38124:	f854 3b04 	ldr.w	r3, [r4], #4
   38128:	930e      	str	r3, [sp, #56]	; 0x38
   3812a:	2300      	movs	r3, #0
   3812c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   3812e:	e7bb      	b.n	380a8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   38130:	b2db      	uxtb	r3, r3
   38132:	e7cd      	b.n	380d0 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   38134:	2b04      	cmp	r3, #4
   38136:	d108      	bne.n	3814a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   38138:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   3813a:	f024 0407 	bic.w	r4, r4, #7
   3813e:	e9d4 2300 	ldrd	r2, r3, [r4]
   38142:	3408      	adds	r4, #8
   38144:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   38148:	e7ae      	b.n	380a8 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   3814a:	2b03      	cmp	r3, #3
   3814c:	d1ac      	bne.n	380a8 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   3814e:	f854 3b04 	ldr.w	r3, [r4], #4
   38152:	e7dd      	b.n	38110 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   38154:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   38158:	2878      	cmp	r0, #120	; 0x78
   3815a:	d8b4      	bhi.n	380c6 <z_cbvprintf_impl+0x426>
   3815c:	2862      	cmp	r0, #98	; 0x62
   3815e:	d81c      	bhi.n	3819a <z_cbvprintf_impl+0x4fa>
   38160:	2825      	cmp	r0, #37	; 0x25
   38162:	f43f adad 	beq.w	37cc0 <z_cbvprintf_impl+0x20>
   38166:	2858      	cmp	r0, #88	; 0x58
   38168:	d1ad      	bne.n	380c6 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   3816a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   3816e:	9300      	str	r3, [sp, #0]
   38170:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   38174:	ab08      	add	r3, sp, #32
   38176:	aa10      	add	r2, sp, #64	; 0x40
   38178:	f00c ff6e 	bl	45058 <encode_uint>
			if (precision >= 0) {
   3817c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   38180:	4607      	mov	r7, r0
			if (precision >= 0) {
   38182:	f280 809a 	bge.w	382ba <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   38186:	2f00      	cmp	r7, #0
   38188:	d09d      	beq.n	380c6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   3818a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   3818e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   38190:	2e00      	cmp	r6, #0
   38192:	f000 80c1 	beq.w	38318 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   38196:	3001      	adds	r0, #1
   38198:	e0be      	b.n	38318 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   3819a:	3863      	subs	r0, #99	; 0x63
   3819c:	2815      	cmp	r0, #21
   3819e:	d892      	bhi.n	380c6 <z_cbvprintf_impl+0x426>
   381a0:	a201      	add	r2, pc, #4	; (adr r2, 381a8 <z_cbvprintf_impl+0x508>)
   381a2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   381a6:	bf00      	nop
   381a8:	0003827d 	.word	0x0003827d
   381ac:	0003828f 	.word	0x0003828f
   381b0:	000380c7 	.word	0x000380c7
   381b4:	000380c7 	.word	0x000380c7
   381b8:	000380c7 	.word	0x000380c7
   381bc:	000380c7 	.word	0x000380c7
   381c0:	0003828f 	.word	0x0003828f
   381c4:	000380c7 	.word	0x000380c7
   381c8:	000380c7 	.word	0x000380c7
   381cc:	000380c7 	.word	0x000380c7
   381d0:	000380c7 	.word	0x000380c7
   381d4:	0003831d 	.word	0x0003831d
   381d8:	000382b5 	.word	0x000382b5
   381dc:	000382db 	.word	0x000382db
   381e0:	000380c7 	.word	0x000380c7
   381e4:	000380c7 	.word	0x000380c7
   381e8:	00038201 	.word	0x00038201
   381ec:	000380c7 	.word	0x000380c7
   381f0:	000382b5 	.word	0x000382b5
   381f4:	000380c7 	.word	0x000380c7
   381f8:	000380c7 	.word	0x000380c7
   381fc:	000382b5 	.word	0x000382b5
			if (precision >= 0) {
   38200:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   38204:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   38206:	db35      	blt.n	38274 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   38208:	4651      	mov	r1, sl
   3820a:	4638      	mov	r0, r7
   3820c:	f00d fa50 	bl	456b0 <strnlen>
			bpe = bps + len;
   38210:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   38214:	2f00      	cmp	r7, #0
   38216:	f43f af56 	beq.w	380c6 <z_cbvprintf_impl+0x426>
		char sign = 0;
   3821a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   3821c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   38220:	f013 0210 	ands.w	r2, r3, #16
   38224:	9205      	str	r2, [sp, #20]
   38226:	f000 8093 	beq.w	38350 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   3822a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   3822c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   3822e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   38230:	bf48      	it	mi
   38232:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   38234:	9204      	str	r2, [sp, #16]
   38236:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   38238:	bf48      	it	mi
   3823a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   3823c:	f1b8 0f00 	cmp.w	r8, #0
   38240:	f340 80a0 	ble.w	38384 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   38244:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   38248:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   3824c:	f3c2 0380 	ubfx	r3, r2, #2, #1
   38250:	0750      	lsls	r0, r2, #29
   38252:	9306      	str	r3, [sp, #24]
   38254:	f100 8096 	bmi.w	38384 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   38258:	0651      	lsls	r1, r2, #25
   3825a:	f140 8089 	bpl.w	38370 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   3825e:	b13e      	cbz	r6, 38270 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   38260:	4659      	mov	r1, fp
   38262:	4630      	mov	r0, r6
   38264:	47c8      	blx	r9
   38266:	2800      	cmp	r0, #0
   38268:	db7f      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   3826a:	9b06      	ldr	r3, [sp, #24]
   3826c:	3501      	adds	r5, #1
   3826e:	461e      	mov	r6, r3
					pad = '0';
   38270:	2230      	movs	r2, #48	; 0x30
   38272:	e07e      	b.n	38372 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   38274:	4638      	mov	r0, r7
   38276:	f00d fa14 	bl	456a2 <strlen>
   3827a:	e7c9      	b.n	38210 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   3827c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3827e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   38282:	2600      	movs	r6, #0
			bps = buf;
   38284:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   38286:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   3828a:	2001      	movs	r0, #1
   3828c:	e7c6      	b.n	3821c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   3828e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   38290:	bf5c      	itt	pl
   38292:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   38296:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   38298:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   3829c:	bf48      	it	mi
   3829e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   382a0:	2b00      	cmp	r3, #0
   382a2:	f6bf af62 	bge.w	3816a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   382a6:	4252      	negs	r2, r2
   382a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   382ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   382b0:	262d      	movs	r6, #45	; 0x2d
   382b2:	e75a      	b.n	3816a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   382b4:	2600      	movs	r6, #0
   382b6:	e758      	b.n	3816a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   382b8:	2600      	movs	r6, #0
				conv->flag_zero = false;
   382ba:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   382be:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   382c2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   382c4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   382c8:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   382ca:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   382ce:	f67f af5a 	bls.w	38186 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   382d2:	ebaa 0303 	sub.w	r3, sl, r3
   382d6:	9311      	str	r3, [sp, #68]	; 0x44
   382d8:	e755      	b.n	38186 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   382da:	980e      	ldr	r0, [sp, #56]	; 0x38
   382dc:	b390      	cbz	r0, 38344 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   382de:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   382e2:	9300      	str	r3, [sp, #0]
   382e4:	aa10      	add	r2, sp, #64	; 0x40
   382e6:	ab08      	add	r3, sp, #32
   382e8:	2100      	movs	r1, #0
   382ea:	f00c feb5 	bl	45058 <encode_uint>
				conv->altform_0c = true;
   382ee:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   382f2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   382f6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   382fa:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   382fe:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   38302:	4607      	mov	r7, r0
				conv->altform_0c = true;
   38304:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   38308:	dad6      	bge.n	382b8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   3830a:	2800      	cmp	r0, #0
   3830c:	f43f aedb 	beq.w	380c6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   38310:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   38314:	1a18      	subs	r0, r3, r0
		char sign = 0;
   38316:	2600      	movs	r6, #0
   38318:	469a      	mov	sl, r3
   3831a:	e77f      	b.n	3821c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   3831c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   3831e:	2907      	cmp	r1, #7
   38320:	f63f aed1 	bhi.w	380c6 <z_cbvprintf_impl+0x426>
   38324:	e8df f001 	tbb	[pc, r1]
   38328:	0c06040c 	.word	0x0c06040c
   3832c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   38330:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   38332:	e6c8      	b.n	380c6 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   38334:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   38336:	e6c6      	b.n	380c6 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   38338:	17ea      	asrs	r2, r5, #31
   3833a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   3833e:	e6c2      	b.n	380c6 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   38340:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   38342:	e6c0      	b.n	380c6 <z_cbvprintf_impl+0x426>
   38344:	4f2e      	ldr	r7, [pc, #184]	; (38400 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   38346:	4606      	mov	r6, r0
			bpe = bps + 5;
   38348:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   3834c:	2005      	movs	r0, #5
   3834e:	e765      	b.n	3821c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   38350:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   38352:	bf48      	it	mi
   38354:	3001      	addmi	r0, #1
   38356:	e769      	b.n	3822c <z_cbvprintf_impl+0x58c>
   38358:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   3835a:	4610      	mov	r0, r2
   3835c:	9206      	str	r2, [sp, #24]
   3835e:	4659      	mov	r1, fp
   38360:	47c8      	blx	r9
   38362:	2800      	cmp	r0, #0
   38364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   38368:	da04      	bge.n	38374 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   3836a:	b015      	add	sp, #84	; 0x54
   3836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   38370:	2220      	movs	r2, #32
					pad = '0';
   38372:	4643      	mov	r3, r8
				while (width-- > 0) {
   38374:	4619      	mov	r1, r3
   38376:	2900      	cmp	r1, #0
   38378:	f103 33ff 	add.w	r3, r3, #4294967295
   3837c:	dcec      	bgt.n	38358 <z_cbvprintf_impl+0x6b8>
   3837e:	4445      	add	r5, r8
   38380:	1a6d      	subs	r5, r5, r1
   38382:	4698      	mov	r8, r3
		if (sign != 0) {
   38384:	b12e      	cbz	r6, 38392 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   38386:	4659      	mov	r1, fp
   38388:	4630      	mov	r0, r6
   3838a:	47c8      	blx	r9
   3838c:	2800      	cmp	r0, #0
   3838e:	dbec      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   38390:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   38392:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   38396:	06da      	lsls	r2, r3, #27
   38398:	d401      	bmi.n	3839e <z_cbvprintf_impl+0x6fe>
   3839a:	071b      	lsls	r3, r3, #28
   3839c:	d505      	bpl.n	383aa <z_cbvprintf_impl+0x70a>
				OUTC('0');
   3839e:	4659      	mov	r1, fp
   383a0:	2030      	movs	r0, #48	; 0x30
   383a2:	47c8      	blx	r9
   383a4:	2800      	cmp	r0, #0
   383a6:	dbe0      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   383a8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   383aa:	9b05      	ldr	r3, [sp, #20]
   383ac:	b133      	cbz	r3, 383bc <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   383ae:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   383b2:	4659      	mov	r1, fp
   383b4:	47c8      	blx	r9
   383b6:	2800      	cmp	r0, #0
   383b8:	dbd7      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   383ba:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   383bc:	9e04      	ldr	r6, [sp, #16]
   383be:	442e      	add	r6, r5
   383c0:	e005      	b.n	383ce <z_cbvprintf_impl+0x72e>
				OUTC('0');
   383c2:	4659      	mov	r1, fp
   383c4:	2030      	movs	r0, #48	; 0x30
   383c6:	47c8      	blx	r9
   383c8:	2800      	cmp	r0, #0
   383ca:	dbce      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   383cc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   383ce:	1b73      	subs	r3, r6, r5
   383d0:	2b00      	cmp	r3, #0
   383d2:	dcf6      	bgt.n	383c2 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   383d4:	4653      	mov	r3, sl
   383d6:	463a      	mov	r2, r7
   383d8:	4659      	mov	r1, fp
   383da:	4648      	mov	r0, r9
   383dc:	f00c fe82 	bl	450e4 <outs>
   383e0:	2800      	cmp	r0, #0
   383e2:	dbc2      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   383e4:	4405      	add	r5, r0
		while (width > 0) {
   383e6:	44a8      	add	r8, r5
   383e8:	eba8 0305 	sub.w	r3, r8, r5
   383ec:	2b00      	cmp	r3, #0
   383ee:	f77f ae6a 	ble.w	380c6 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   383f2:	4659      	mov	r1, fp
   383f4:	2020      	movs	r0, #32
   383f6:	47c8      	blx	r9
   383f8:	2800      	cmp	r0, #0
   383fa:	dbb6      	blt.n	3836a <z_cbvprintf_impl+0x6ca>
   383fc:	3501      	adds	r5, #1
			--width;
   383fe:	e7f3      	b.n	383e8 <z_cbvprintf_impl+0x748>
   38400:	000498a0 	.word	0x000498a0

00038404 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   38404:	b508      	push	{r3, lr}
   38406:	4604      	mov	r4, r0
	__asm__ volatile(
   38408:	f04f 0240 	mov.w	r2, #64	; 0x40
   3840c:	f3ef 8311 	mrs	r3, BASEPRI
   38410:	f382 8812 	msr	BASEPRI_MAX, r2
   38414:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   38418:	f006 f8c4 	bl	3e5a4 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   3841c:	4620      	mov	r0, r4
   3841e:	f000 ff65 	bl	392ec <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   38422:	4803      	ldr	r0, [pc, #12]	; (38430 <sys_reboot+0x2c>)
   38424:	f00c fb54 	bl	44ad0 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   38428:	f000 fb28 	bl	38a7c <arch_cpu_idle>
   3842c:	e7fc      	b.n	38428 <sys_reboot+0x24>
   3842e:	bf00      	nop
   38430:	000498a6 	.word	0x000498a6

00038434 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   38434:	f007 b8a6 	b.w	3f584 <SystemInit>

00038438 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   38438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3843c:	4605      	mov	r5, r0
   3843e:	f04f 0340 	mov.w	r3, #64	; 0x40
   38442:	f3ef 8611 	mrs	r6, BASEPRI
   38446:	f383 8812 	msr	BASEPRI_MAX, r3
   3844a:	f3bf 8f6f 	isb	sy
	return list->head;
   3844e:	4b0e      	ldr	r3, [pc, #56]	; (38488 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   38450:	4f0e      	ldr	r7, [pc, #56]	; (3848c <pm_state_notify+0x54>)
   38452:	681c      	ldr	r4, [r3, #0]
   38454:	f8df 8038 	ldr.w	r8, [pc, #56]	; 38490 <pm_state_notify+0x58>
   38458:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   3845c:	b92c      	cbnz	r4, 3846a <pm_state_notify+0x32>
	__asm__ volatile(
   3845e:	f386 8811 	msr	BASEPRI, r6
   38462:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   38466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   3846a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   3846e:	2d00      	cmp	r5, #0
   38470:	bf18      	it	ne
   38472:	4613      	movne	r3, r2
		if (callback) {
   38474:	b12b      	cbz	r3, 38482 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   38476:	f898 2010 	ldrb.w	r2, [r8, #16]
   3847a:	fb09 f202 	mul.w	r2, r9, r2
   3847e:	5cb8      	ldrb	r0, [r7, r2]
   38480:	4798      	blx	r3
	return node->next;
   38482:	6824      	ldr	r4, [r4, #0]
   38484:	e7ea      	b.n	3845c <pm_state_notify+0x24>
   38486:	bf00      	nop
   38488:	20002680 	.word	0x20002680
   3848c:	20002674 	.word	0x20002674
   38490:	20002e7c 	.word	0x20002e7c

00038494 <pm_system_resume>:

void pm_system_resume(void)
{
   38494:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   38496:	4b19      	ldr	r3, [pc, #100]	; (384fc <pm_system_resume+0x68>)
   38498:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3849a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   3849e:	f004 031f 	and.w	r3, r4, #31
   384a2:	2201      	movs	r2, #1
   384a4:	409a      	lsls	r2, r3
   384a6:	4b16      	ldr	r3, [pc, #88]	; (38500 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   384a8:	0961      	lsrs	r1, r4, #5
   384aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   384ae:	43d0      	mvns	r0, r2
   384b0:	e853 1f00 	ldrex	r1, [r3]
   384b4:	ea01 0500 	and.w	r5, r1, r0
   384b8:	e843 5600 	strex	r6, r5, [r3]
   384bc:	2e00      	cmp	r6, #0
   384be:	d1f7      	bne.n	384b0 <pm_system_resume+0x1c>
   384c0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   384c4:	420a      	tst	r2, r1
   384c6:	d013      	beq.n	384f0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   384c8:	4b0e      	ldr	r3, [pc, #56]	; (38504 <pm_system_resume+0x70>)
   384ca:	4d0f      	ldr	r5, [pc, #60]	; (38508 <pm_system_resume+0x74>)
   384cc:	b18b      	cbz	r3, 384f2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   384ce:	230c      	movs	r3, #12
   384d0:	4363      	muls	r3, r4
   384d2:	18ea      	adds	r2, r5, r3
   384d4:	5ce8      	ldrb	r0, [r5, r3]
   384d6:	7851      	ldrb	r1, [r2, #1]
   384d8:	f00d f93a 	bl	45750 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   384dc:	2000      	movs	r0, #0
   384de:	f7ff ffab 	bl	38438 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   384e2:	230c      	movs	r3, #12
   384e4:	435c      	muls	r4, r3
   384e6:	192a      	adds	r2, r5, r4
   384e8:	2300      	movs	r3, #0
   384ea:	512b      	str	r3, [r5, r4]
   384ec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   384f0:	bd70      	pop	{r4, r5, r6, pc}
   384f2:	f383 8811 	msr	BASEPRI, r3
   384f6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   384fa:	e7ef      	b.n	384dc <pm_system_resume+0x48>
   384fc:	20002e7c 	.word	0x20002e7c
   38500:	20002688 	.word	0x20002688
   38504:	00045751 	.word	0x00045751
   38508:	20002674 	.word	0x20002674

0003850c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   3850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   38510:	4b35      	ldr	r3, [pc, #212]	; (385e8 <pm_system_suspend+0xdc>)
{
   38512:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   38514:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   38516:	f04f 0340 	mov.w	r3, #64	; 0x40
   3851a:	f3ef 8811 	mrs	r8, BASEPRI
   3851e:	f383 8812 	msr	BASEPRI_MAX, r3
   38522:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   38526:	240c      	movs	r4, #12
   38528:	4b30      	ldr	r3, [pc, #192]	; (385ec <pm_system_suspend+0xe0>)
   3852a:	4e31      	ldr	r6, [pc, #196]	; (385f0 <pm_system_suspend+0xe4>)
   3852c:	436c      	muls	r4, r5
   3852e:	191a      	adds	r2, r3, r4
   38530:	5d19      	ldrb	r1, [r3, r4]
   38532:	2900      	cmp	r1, #0
   38534:	d04c      	beq.n	385d0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   38536:	ca07      	ldmia	r2, {r0, r1, r2}
   38538:	eb06 0c04 	add.w	ip, r6, r4
   3853c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   38540:	2200      	movs	r2, #0
   38542:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   38544:	f388 8811 	msr	BASEPRI, r8
   38548:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   3854c:	230c      	movs	r3, #12
   3854e:	436b      	muls	r3, r5
   38550:	18f2      	adds	r2, r6, r3
   38552:	5cf0      	ldrb	r0, [r6, r3]
   38554:	2800      	cmp	r0, #0
   38556:	d039      	beq.n	385cc <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   38558:	1c7b      	adds	r3, r7, #1
   3855a:	d010      	beq.n	3857e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   3855c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   38560:	4c24      	ldr	r4, [pc, #144]	; (385f4 <pm_system_suspend+0xe8>)
   38562:	4a25      	ldr	r2, [pc, #148]	; (385f8 <pm_system_suspend+0xec>)
   38564:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   38568:	2100      	movs	r1, #0
   3856a:	fbec 4100 	umlal	r4, r1, ip, r0
   3856e:	2300      	movs	r3, #0
   38570:	4620      	mov	r0, r4
   38572:	f7ee fe15 	bl	271a0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   38576:	2101      	movs	r1, #1
   38578:	1a38      	subs	r0, r7, r0
   3857a:	f005 ffd7 	bl	3e52c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   3857e:	f008 fed1 	bl	41324 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   38582:	2001      	movs	r0, #1
   38584:	f7ff ff58 	bl	38438 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38588:	f3bf 8f5b 	dmb	ish
   3858c:	4b1b      	ldr	r3, [pc, #108]	; (385fc <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3858e:	096a      	lsrs	r2, r5, #5
   38590:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   38594:	f005 011f 	and.w	r1, r5, #31
   38598:	2201      	movs	r2, #1
   3859a:	408a      	lsls	r2, r1
   3859c:	e853 0f00 	ldrex	r0, [r3]
   385a0:	4310      	orrs	r0, r2
   385a2:	e843 0100 	strex	r1, r0, [r3]
   385a6:	2900      	cmp	r1, #0
   385a8:	d1f8      	bne.n	3859c <pm_system_suspend+0x90>
   385aa:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   385ae:	4b14      	ldr	r3, [pc, #80]	; (38600 <pm_system_suspend+0xf4>)
   385b0:	b13b      	cbz	r3, 385c2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   385b2:	230c      	movs	r3, #12
   385b4:	fb03 f005 	mul.w	r0, r3, r5
   385b8:	1833      	adds	r3, r6, r0
   385ba:	5c30      	ldrb	r0, [r6, r0]
   385bc:	7859      	ldrb	r1, [r3, #1]
   385be:	f00d f8bb 	bl	45738 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   385c2:	f7ff ff67 	bl	38494 <pm_system_resume>
	k_sched_unlock();
   385c6:	f008 fec1 	bl	4134c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   385ca:	2001      	movs	r0, #1
}
   385cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   385d0:	4601      	mov	r1, r0
   385d2:	4628      	mov	r0, r5
   385d4:	f000 f816 	bl	38604 <pm_policy_next_state>
		if (info != NULL) {
   385d8:	2800      	cmp	r0, #0
   385da:	d0b3      	beq.n	38544 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   385dc:	c807      	ldmia	r0, {r0, r1, r2}
   385de:	4434      	add	r4, r6
   385e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   385e4:	e7ae      	b.n	38544 <pm_system_suspend+0x38>
   385e6:	bf00      	nop
   385e8:	20002e7c 	.word	0x20002e7c
   385ec:	20002668 	.word	0x20002668
   385f0:	20002674 	.word	0x20002674
   385f4:	000f423f 	.word	0x000f423f
   385f8:	000f4240 	.word	0x000f4240
   385fc:	20002688 	.word	0x20002688
   38600:	00045739 	.word	0x00045739

00038604 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   38604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38608:	b085      	sub	sp, #20
   3860a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   3860c:	a903      	add	r1, sp, #12
   3860e:	f000 f843 	bl	38698 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   38612:	4b1e      	ldr	r3, [pc, #120]	; (3868c <pm_policy_next_state+0x88>)
   38614:	9d03      	ldr	r5, [sp, #12]
   38616:	f8d3 a000 	ldr.w	sl, [r3]
   3861a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 38690 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   3861e:	1e43      	subs	r3, r0, #1
   38620:	b21b      	sxth	r3, r3
   38622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   38626:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   38628:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   3862c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   38630:	f04f 0b00 	mov.w	fp, #0
   38634:	b924      	cbnz	r4, 38640 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   38636:	46a1      	mov	r9, r4
}
   38638:	4648      	mov	r0, r9
   3863a:	b005      	add	sp, #20
   3863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38640:	6868      	ldr	r0, [r5, #4]
   38642:	4a14      	ldr	r2, [pc, #80]	; (38694 <pm_policy_next_state+0x90>)
   38644:	46c4      	mov	ip, r8
   38646:	4659      	mov	r1, fp
   38648:	fbe0 c107 	umlal	ip, r1, r0, r7
   3864c:	2300      	movs	r3, #0
   3864e:	4660      	mov	r0, ip
   38650:	f7ee fda6 	bl	271a0 <__aeabi_uldivmod>
   38654:	9001      	str	r0, [sp, #4]
   38656:	68a8      	ldr	r0, [r5, #8]
   38658:	4a0e      	ldr	r2, [pc, #56]	; (38694 <pm_policy_next_state+0x90>)
   3865a:	46c4      	mov	ip, r8
   3865c:	4659      	mov	r1, fp
   3865e:	fbe0 c107 	umlal	ip, r1, r0, r7
   38662:	2300      	movs	r3, #0
   38664:	4660      	mov	r0, ip
   38666:	f7ee fd9b 	bl	271a0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   3866a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   3866e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   38670:	d001      	beq.n	38676 <pm_policy_next_state+0x72>
   38672:	4582      	cmp	sl, r0
   38674:	d905      	bls.n	38682 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   38676:	1c73      	adds	r3, r6, #1
   38678:	d0de      	beq.n	38638 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   3867a:	9b01      	ldr	r3, [sp, #4]
   3867c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   3867e:	42b0      	cmp	r0, r6
   38680:	d9da      	bls.n	38638 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   38682:	3c01      	subs	r4, #1
   38684:	b2a4      	uxth	r4, r4
   38686:	3d0c      	subs	r5, #12
   38688:	e7d4      	b.n	38634 <pm_policy_next_state+0x30>
   3868a:	bf00      	nop
   3868c:	200006b0 	.word	0x200006b0
   38690:	000f423f 	.word	0x000f423f
   38694:	000f4240 	.word	0x000f4240

00038698 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   38698:	b908      	cbnz	r0, 3869e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   3869a:	4b02      	ldr	r3, [pc, #8]	; (386a4 <pm_state_cpu_get_all+0xc>)
   3869c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   3869e:	2000      	movs	r0, #0
   386a0:	4770      	bx	lr
   386a2:	bf00      	nop
   386a4:	00049138 	.word	0x00049138

000386a8 <runtime_suspend.isra.0>:
 * @retval -EALREADY If device is already suspended (can only happen if get/put
 * calls are unbalanced).
 * @retval -EBUSY If the device is busy.
 * @retval -errno Other negative errno, result of the action callback.
 */
static int runtime_suspend(const struct device *dev, bool async)
   386a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   386aa:	4605      	mov	r5, r0
   386ac:	460f      	mov	r7, r1
	struct pm_device *pm = dev->pm;

	/*
	 * Early return if device runtime is not enabled.
	 */
	if (!atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_RUNTIME_ENABLED)) {
   386ae:	3064      	adds	r0, #100	; 0x64
   386b0:	2105      	movs	r1, #5
   386b2:	f00c fd50 	bl	45156 <atomic_test_bit>
   386b6:	4604      	mov	r4, r0
   386b8:	b328      	cbz	r0, 38706 <runtime_suspend.isra.0+0x5e>
	return !z_sys_post_kernel;
   386ba:	4e1f      	ldr	r6, [pc, #124]	; (38738 <runtime_suspend.isra.0+0x90>)
   386bc:	7832      	ldrb	r2, [r6, #0]
		return 0;
	}

	if (k_is_pre_kernel()) {
   386be:	b322      	cbz	r2, 3870a <runtime_suspend.isra.0+0x62>
		async = false;
	} else {
		ret = k_sem_take(&pm->lock, k_is_in_isr() ? K_NO_WAIT : K_FOREVER);
   386c0:	f00f fd95 	bl	481ee <k_is_in_isr>
   386c4:	f04f 33ff 	mov.w	r3, #4294967295
   386c8:	1e42      	subs	r2, r0, #1
   386ca:	f143 0300 	adc.w	r3, r3, #0
   386ce:	1d28      	adds	r0, r5, #4
   386d0:	f00c fd4a 	bl	45168 <k_sem_take>
		if (ret < 0) {
   386d4:	1e04      	subs	r4, r0, #0
   386d6:	db2b      	blt.n	38730 <runtime_suspend.isra.0+0x88>
   386d8:	463a      	mov	r2, r7
			return -EBUSY;
		}
	}

	if (pm->usage == 0U) {
   386da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   386dc:	b32b      	cbz	r3, 3872a <runtime_suspend.isra.0+0x82>
		LOG_WRN("Unbalanced suspend");
		ret = -EALREADY;
		goto unlock;
	}

	pm->usage--;
   386de:	3b01      	subs	r3, #1
   386e0:	62ab      	str	r3, [r5, #40]	; 0x28
	if (pm->usage > 0U) {
   386e2:	b95b      	cbnz	r3, 386fc <runtime_suspend.isra.0+0x54>
		goto unlock;
	}

	if (async && !k_is_pre_kernel()) {
   386e4:	b19a      	cbz	r2, 3870e <runtime_suspend.isra.0+0x66>
   386e6:	7833      	ldrb	r3, [r6, #0]
   386e8:	b18b      	cbz	r3, 3870e <runtime_suspend.isra.0+0x66>
		/* queue suspend */
		pm->state = PM_DEVICE_STATE_SUSPENDING;
   386ea:	2302      	movs	r3, #2
   386ec:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
		(void)k_work_schedule(&pm->work, K_NO_WAIT);
   386f0:	2200      	movs	r2, #0
   386f2:	2300      	movs	r3, #0
   386f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
   386f8:	f008 fbd2 	bl	40ea0 <k_work_schedule>

		pm->state = PM_DEVICE_STATE_SUSPENDED;
	}

unlock:
	if (!k_is_pre_kernel()) {
   386fc:	7833      	ldrb	r3, [r6, #0]
   386fe:	b113      	cbz	r3, 38706 <runtime_suspend.isra.0+0x5e>
		k_sem_give(&pm->lock);
   38700:	1d28      	adds	r0, r5, #4
   38702:	f00c fd33 	bl	4516c <k_sem_give>
	}

	return ret;
}
   38706:	4620      	mov	r0, r4
   38708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   3870a:	4614      	mov	r4, r2
   3870c:	e7e5      	b.n	386da <runtime_suspend.isra.0+0x32>
		ret = pm->action_cb(pm->dev, PM_DEVICE_ACTION_SUSPEND);
   3870e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   38710:	6828      	ldr	r0, [r5, #0]
   38712:	2100      	movs	r1, #0
   38714:	4798      	blx	r3
		if (ret < 0) {
   38716:	1e04      	subs	r4, r0, #0
			pm->usage++;
   38718:	bfb7      	itett	lt
   3871a:	6aab      	ldrlt	r3, [r5, #40]	; 0x28
		pm->state = PM_DEVICE_STATE_SUSPENDED;
   3871c:	2301      	movge	r3, #1
			pm->usage++;
   3871e:	3301      	addlt	r3, #1
   38720:	62ab      	strlt	r3, [r5, #40]	; 0x28
		pm->state = PM_DEVICE_STATE_SUSPENDED;
   38722:	bfa8      	it	ge
   38724:	f885 3068 	strbge.w	r3, [r5, #104]	; 0x68
   38728:	e7e8      	b.n	386fc <runtime_suspend.isra.0+0x54>
		ret = -EALREADY;
   3872a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   3872e:	e7e5      	b.n	386fc <runtime_suspend.isra.0+0x54>
			return -EBUSY;
   38730:	f06f 040f 	mvn.w	r4, #15
   38734:	e7e7      	b.n	38706 <runtime_suspend.isra.0+0x5e>
   38736:	bf00      	nop
   38738:	20003a80 	.word	0x20003a80

0003873c <pm_device_runtime_enable>:
	}
	return pm_device_runtime_enable(dev);
}

int pm_device_runtime_enable(const struct device *dev)
{
   3873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct pm_device *pm = dev->pm;
   3873e:	6984      	ldr	r4, [r0, #24]
{
   38740:	4605      	mov	r5, r0

	if (pm == NULL) {
   38742:	2c00      	cmp	r4, #0
   38744:	d040      	beq.n	387c8 <pm_device_runtime_enable+0x8c>
		return -ENOTSUP;
	}

	SYS_PORT_TRACING_FUNC_ENTER(pm, device_runtime_enable, dev);

	if (pm_device_state_is_locked(dev)) {
   38746:	f00c fcfc 	bl	45142 <pm_device_state_is_locked>
   3874a:	2800      	cmp	r0, #0
   3874c:	d13f      	bne.n	387ce <pm_device_runtime_enable+0x92>
   3874e:	4f21      	ldr	r7, [pc, #132]	; (387d4 <pm_device_runtime_enable+0x98>)
		ret = -EPERM;
		goto end;
	}

	if (!k_is_pre_kernel()) {
   38750:	783b      	ldrb	r3, [r7, #0]
   38752:	b133      	cbz	r3, 38762 <pm_device_runtime_enable+0x26>
		(void)k_sem_take(&pm->lock, K_FOREVER);
   38754:	f04f 32ff 	mov.w	r2, #4294967295
   38758:	f04f 33ff 	mov.w	r3, #4294967295
   3875c:	1d20      	adds	r0, r4, #4
   3875e:	f00c fd03 	bl	45168 <k_sem_take>
	}

	if (atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_RUNTIME_ENABLED)) {
   38762:	f104 0664 	add.w	r6, r4, #100	; 0x64
   38766:	2105      	movs	r1, #5
   38768:	4630      	mov	r0, r6
   3876a:	f00c fcf4 	bl	45156 <atomic_test_bit>
   3876e:	bb48      	cbnz	r0, 387c4 <pm_device_runtime_enable+0x88>
		goto unlock;
	}

	/* lazy init of PM fields */
	if (pm->dev == NULL) {
   38770:	6823      	ldr	r3, [r4, #0]
   38772:	b92b      	cbnz	r3, 38780 <pm_device_runtime_enable+0x44>
		pm->dev = dev;
   38774:	4620      	mov	r0, r4
		k_work_init_delayable(&pm->work, runtime_suspend_work);
   38776:	4918      	ldr	r1, [pc, #96]	; (387d8 <pm_device_runtime_enable+0x9c>)
		pm->dev = dev;
   38778:	f840 5b30 	str.w	r5, [r0], #48
		k_work_init_delayable(&pm->work, runtime_suspend_work);
   3877c:	f00f feb7 	bl	484ee <k_work_init_delayable>
	}

	if (pm->state == PM_DEVICE_STATE_ACTIVE) {
   38780:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   38784:	b9e1      	cbnz	r1, 387c0 <pm_device_runtime_enable+0x84>
		ret = pm->action_cb(pm->dev, PM_DEVICE_ACTION_SUSPEND);
   38786:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   38788:	6820      	ldr	r0, [r4, #0]
   3878a:	4798      	blx	r3
		if (ret < 0) {
   3878c:	1e05      	subs	r5, r0, #0
   3878e:	db10      	blt.n	387b2 <pm_device_runtime_enable+0x76>
			goto unlock;
		}
		pm->state = PM_DEVICE_STATE_SUSPENDED;
   38790:	2301      	movs	r3, #1
   38792:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	}

	pm->usage = 0U;
   38796:	2300      	movs	r3, #0
   38798:	62a3      	str	r3, [r4, #40]	; 0x28
   3879a:	f3bf 8f5b 	dmb	ish
   3879e:	e856 3f00 	ldrex	r3, [r6]
   387a2:	f043 0320 	orr.w	r3, r3, #32
   387a6:	e846 3200 	strex	r2, r3, [r6]
   387aa:	2a00      	cmp	r2, #0
   387ac:	d1f7      	bne.n	3879e <pm_device_runtime_enable+0x62>
   387ae:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_RUNTIME_ENABLED);

unlock:
	if (!k_is_pre_kernel()) {
   387b2:	783b      	ldrb	r3, [r7, #0]
   387b4:	b113      	cbz	r3, 387bc <pm_device_runtime_enable+0x80>
		k_sem_give(&pm->lock);
   387b6:	1d20      	adds	r0, r4, #4
   387b8:	f00c fcd8 	bl	4516c <k_sem_give>
	}

end:
	SYS_PORT_TRACING_FUNC_EXIT(pm, device_runtime_enable, dev, ret);
	return ret;
}
   387bc:	4628      	mov	r0, r5
   387be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   387c0:	2500      	movs	r5, #0
   387c2:	e7e8      	b.n	38796 <pm_device_runtime_enable+0x5a>
   387c4:	2500      	movs	r5, #0
   387c6:	e7f4      	b.n	387b2 <pm_device_runtime_enable+0x76>
		return -ENOTSUP;
   387c8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   387cc:	e7f6      	b.n	387bc <pm_device_runtime_enable+0x80>
		ret = -EPERM;
   387ce:	f04f 35ff 	mov.w	r5, #4294967295
   387d2:	e7f3      	b.n	387bc <pm_device_runtime_enable+0x80>
   387d4:	20003a80 	.word	0x20003a80
   387d8:	000451ab 	.word	0x000451ab

000387dc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   387dc:	4904      	ldr	r1, [pc, #16]	; (387f0 <sub_bytes+0x14>)
   387de:	1e43      	subs	r3, r0, #1
   387e0:	300f      	adds	r0, #15
   387e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   387e6:	5c8a      	ldrb	r2, [r1, r2]
   387e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   387ea:	4283      	cmp	r3, r0
   387ec:	d1f9      	bne.n	387e2 <sub_bytes+0x6>
	}
}
   387ee:	4770      	bx	lr
   387f0:	000498f1 	.word	0x000498f1

000387f4 <tc_aes128_set_encrypt_key>:
{
   387f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   387f6:	4e26      	ldr	r6, [pc, #152]	; (38890 <tc_aes128_set_encrypt_key+0x9c>)
{
   387f8:	4607      	mov	r7, r0
   387fa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   387fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   387fe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   38800:	ad01      	add	r5, sp, #4
   38802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   38804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   38806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   38808:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3880c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   38810:	4638      	mov	r0, r7
   38812:	2f00      	cmp	r7, #0
   38814:	d038      	beq.n	38888 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   38816:	2c00      	cmp	r4, #0
   38818:	d038      	beq.n	3888c <tc_aes128_set_encrypt_key+0x98>
   3881a:	1f38      	subs	r0, r7, #4
   3881c:	4621      	mov	r1, r4
   3881e:	4602      	mov	r2, r0
   38820:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   38822:	784b      	ldrb	r3, [r1, #1]
   38824:	780d      	ldrb	r5, [r1, #0]
   38826:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   38828:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   3882c:	78cd      	ldrb	r5, [r1, #3]
   3882e:	432b      	orrs	r3, r5
   38830:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   38832:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   38834:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   38838:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   3883a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   3883e:	d1f0      	bne.n	38822 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   38840:	4c14      	ldr	r4, [pc, #80]	; (38894 <tc_aes128_set_encrypt_key+0xa0>)
   38842:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   38844:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   38846:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   38848:	d116      	bne.n	38878 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   3884a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   3884e:	5ca5      	ldrb	r5, [r4, r2]
   38850:	0e1a      	lsrs	r2, r3, #24
   38852:	5ca2      	ldrb	r2, [r4, r2]
   38854:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   38858:	f3c3 2507 	ubfx	r5, r3, #8, #8
   3885c:	b2db      	uxtb	r3, r3
   3885e:	5d65      	ldrb	r5, [r4, r5]
   38860:	5ce3      	ldrb	r3, [r4, r3]
   38862:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   38866:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   3886a:	f021 0303 	bic.w	r3, r1, #3
   3886e:	3330      	adds	r3, #48	; 0x30
   38870:	446b      	add	r3, sp
   38872:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   38876:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   38878:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   3887c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   3887e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   38880:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   38882:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   38884:	d1de      	bne.n	38844 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   38886:	2001      	movs	r0, #1
}
   38888:	b00d      	add	sp, #52	; 0x34
   3888a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   3888c:	4620      	mov	r0, r4
   3888e:	e7fb      	b.n	38888 <tc_aes128_set_encrypt_key+0x94>
   38890:	000490e4 	.word	0x000490e4
   38894:	000498f1 	.word	0x000498f1

00038898 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   38898:	4801      	ldr	r0, [pc, #4]	; (388a0 <nrf_cc3xx_platform_abort_init+0x8>)
   3889a:	f009 bd15 	b.w	422c8 <nrf_cc3xx_platform_set_abort>
   3889e:	bf00      	nop
   388a0:	00049138 	.word	0x00049138

000388a4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   388a4:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   388a6:	4604      	mov	r4, r0
   388a8:	b918      	cbnz	r0, 388b2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   388aa:	4b0f      	ldr	r3, [pc, #60]	; (388e8 <mutex_free_platform+0x44>)
   388ac:	480f      	ldr	r0, [pc, #60]	; (388ec <mutex_free_platform+0x48>)
   388ae:	685b      	ldr	r3, [r3, #4]
   388b0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   388b2:	6861      	ldr	r1, [r4, #4]
   388b4:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   388b8:	d00f      	beq.n	388da <mutex_free_platform+0x36>
   388ba:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   388be:	d00c      	beq.n	388da <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   388c0:	4d0b      	ldr	r5, [pc, #44]	; (388f0 <mutex_free_platform+0x4c>)
   388c2:	42a9      	cmp	r1, r5
   388c4:	d009      	beq.n	388da <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   388c6:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   388ca:	d007      	beq.n	388dc <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   388cc:	4809      	ldr	r0, [pc, #36]	; (388f4 <mutex_free_platform+0x50>)
   388ce:	4621      	mov	r1, r4
   388d0:	f00f fc63 	bl	4819a <k_mem_slab_free>
        mutex->mutex = NULL;
   388d4:	2300      	movs	r3, #0
   388d6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   388d8:	6065      	str	r5, [r4, #4]
}
   388da:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   388dc:	6820      	ldr	r0, [r4, #0]
   388de:	2214      	movs	r2, #20
   388e0:	f00c ff21 	bl	45726 <memset>
   388e4:	e7f8      	b.n	388d8 <mutex_free_platform+0x34>
   388e6:	bf00      	nop
   388e8:	20000864 	.word	0x20000864
   388ec:	000499f1 	.word	0x000499f1
   388f0:	a95c5f2c 	.word	0xa95c5f2c
   388f4:	20002b8c 	.word	0x20002b8c

000388f8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   388f8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   388fa:	b320      	cbz	r0, 38946 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   388fc:	6843      	ldr	r3, [r0, #4]
   388fe:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   38902:	d110      	bne.n	38926 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   38904:	2201      	movs	r2, #1
   38906:	6803      	ldr	r3, [r0, #0]
   38908:	f3bf 8f5b 	dmb	ish
   3890c:	e853 1f00 	ldrex	r1, [r3]
   38910:	2900      	cmp	r1, #0
   38912:	d103      	bne.n	3891c <mutex_lock_platform+0x24>
   38914:	e843 2000 	strex	r0, r2, [r3]
   38918:	2800      	cmp	r0, #0
   3891a:	d1f7      	bne.n	3890c <mutex_lock_platform+0x14>
   3891c:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   38920:	d10d      	bne.n	3893e <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   38922:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   38924:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   38926:	4a09      	ldr	r2, [pc, #36]	; (3894c <mutex_lock_platform+0x54>)
   38928:	4293      	cmp	r3, r2
   3892a:	d00a      	beq.n	38942 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   3892c:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   3892e:	f04f 32ff 	mov.w	r2, #4294967295
   38932:	f04f 33ff 	mov.w	r3, #4294967295
   38936:	f007 ffe3 	bl	40900 <z_impl_k_mutex_lock>
        if (ret == 0) {
   3893a:	2800      	cmp	r0, #0
   3893c:	d0f1      	beq.n	38922 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   3893e:	4804      	ldr	r0, [pc, #16]	; (38950 <mutex_lock_platform+0x58>)
   38940:	e7f0      	b.n	38924 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   38942:	4804      	ldr	r0, [pc, #16]	; (38954 <mutex_lock_platform+0x5c>)
   38944:	e7ee      	b.n	38924 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   38946:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   3894a:	e7eb      	b.n	38924 <mutex_lock_platform+0x2c>
   3894c:	a95c5f2c 	.word	0xa95c5f2c
   38950:	ffff8fe9 	.word	0xffff8fe9
   38954:	ffff8fea 	.word	0xffff8fea

00038958 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   38958:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   3895a:	b1d8      	cbz	r0, 38994 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   3895c:	6843      	ldr	r3, [r0, #4]
   3895e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   38962:	d110      	bne.n	38986 <mutex_unlock_platform+0x2e>
   38964:	2200      	movs	r2, #0
   38966:	6803      	ldr	r3, [r0, #0]
   38968:	f3bf 8f5b 	dmb	ish
   3896c:	e853 1f00 	ldrex	r1, [r3]
   38970:	2901      	cmp	r1, #1
   38972:	d103      	bne.n	3897c <mutex_unlock_platform+0x24>
   38974:	e843 2000 	strex	r0, r2, [r3]
   38978:	2800      	cmp	r0, #0
   3897a:	d1f7      	bne.n	3896c <mutex_unlock_platform+0x14>
   3897c:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   38980:	d10b      	bne.n	3899a <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   38982:	2000      	movs	r0, #0
    }
}
   38984:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   38986:	4a07      	ldr	r2, [pc, #28]	; (389a4 <mutex_unlock_platform+0x4c>)
   38988:	4293      	cmp	r3, r2
   3898a:	d008      	beq.n	3899e <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   3898c:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   3898e:	f008 f831 	bl	409f4 <z_impl_k_mutex_unlock>
   38992:	e7f6      	b.n	38982 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   38994:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   38998:	e7f4      	b.n	38984 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   3899a:	4803      	ldr	r0, [pc, #12]	; (389a8 <mutex_unlock_platform+0x50>)
   3899c:	e7f2      	b.n	38984 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   3899e:	4803      	ldr	r0, [pc, #12]	; (389ac <mutex_unlock_platform+0x54>)
   389a0:	e7f0      	b.n	38984 <mutex_unlock_platform+0x2c>
   389a2:	bf00      	nop
   389a4:	a95c5f2c 	.word	0xa95c5f2c
   389a8:	ffff8fe9 	.word	0xffff8fe9
   389ac:	ffff8fea 	.word	0xffff8fea

000389b0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   389b0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   389b2:	4604      	mov	r4, r0
   389b4:	b918      	cbnz	r0, 389be <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   389b6:	4b1d      	ldr	r3, [pc, #116]	; (38a2c <mutex_init_platform+0x7c>)
   389b8:	481d      	ldr	r0, [pc, #116]	; (38a30 <mutex_init_platform+0x80>)
   389ba:	685b      	ldr	r3, [r3, #4]
   389bc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   389be:	6863      	ldr	r3, [r4, #4]
   389c0:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   389c4:	d02f      	beq.n	38a26 <mutex_init_platform+0x76>
   389c6:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   389ca:	d02c      	beq.n	38a26 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   389cc:	4a19      	ldr	r2, [pc, #100]	; (38a34 <mutex_init_platform+0x84>)
   389ce:	4293      	cmp	r3, r2
   389d0:	d119      	bne.n	38a06 <mutex_init_platform+0x56>
   389d2:	6823      	ldr	r3, [r4, #0]
   389d4:	bb03      	cbnz	r3, 38a18 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   389d6:	4818      	ldr	r0, [pc, #96]	; (38a38 <mutex_init_platform+0x88>)
   389d8:	f04f 32ff 	mov.w	r2, #4294967295
   389dc:	f04f 33ff 	mov.w	r3, #4294967295
   389e0:	4621      	mov	r1, r4
   389e2:	f007 fe83 	bl	406ec <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   389e6:	b908      	cbnz	r0, 389ec <mutex_init_platform+0x3c>
   389e8:	6823      	ldr	r3, [r4, #0]
   389ea:	b91b      	cbnz	r3, 389f4 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   389ec:	4b0f      	ldr	r3, [pc, #60]	; (38a2c <mutex_init_platform+0x7c>)
   389ee:	4813      	ldr	r0, [pc, #76]	; (38a3c <mutex_init_platform+0x8c>)
   389f0:	685b      	ldr	r3, [r3, #4]
   389f2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   389f4:	6820      	ldr	r0, [r4, #0]
   389f6:	2214      	movs	r2, #20
   389f8:	2100      	movs	r1, #0
   389fa:	f00c fe94 	bl	45726 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   389fe:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   38a02:	6063      	str	r3, [r4, #4]
   38a04:	e008      	b.n	38a18 <mutex_init_platform+0x68>
    switch(flags){
   38a06:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   38a0a:	d80d      	bhi.n	38a28 <mutex_init_platform+0x78>
   38a0c:	2b3a      	cmp	r3, #58	; 0x3a
   38a0e:	d003      	beq.n	38a18 <mutex_init_platform+0x68>
   38a10:	f640 62ba 	movw	r2, #3770	; 0xeba
   38a14:	4293      	cmp	r3, r2
   38a16:	d1de      	bne.n	389d6 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   38a18:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   38a1a:	f00f fc02 	bl	48222 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   38a1e:	6863      	ldr	r3, [r4, #4]
   38a20:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   38a24:	6063      	str	r3, [r4, #4]
}
   38a26:	bd10      	pop	{r4, pc}
    switch(flags){
   38a28:	4a05      	ldr	r2, [pc, #20]	; (38a40 <mutex_init_platform+0x90>)
   38a2a:	e7f3      	b.n	38a14 <mutex_init_platform+0x64>
   38a2c:	20000864 	.word	0x20000864
   38a30:	000499f1 	.word	0x000499f1
   38a34:	a95c5f2c 	.word	0xa95c5f2c
   38a38:	20002b8c 	.word	0x20002b8c
   38a3c:	00049a17 	.word	0x00049a17
   38a40:	3a00003a 	.word	0x3a00003a

00038a44 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   38a44:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   38a46:	4906      	ldr	r1, [pc, #24]	; (38a60 <nrf_cc3xx_platform_mutex_init+0x1c>)
   38a48:	4806      	ldr	r0, [pc, #24]	; (38a64 <nrf_cc3xx_platform_mutex_init+0x20>)
   38a4a:	2340      	movs	r3, #64	; 0x40
   38a4c:	2214      	movs	r2, #20
   38a4e:	f00f fb96 	bl	4817e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   38a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   38a56:	4904      	ldr	r1, [pc, #16]	; (38a68 <nrf_cc3xx_platform_mutex_init+0x24>)
   38a58:	4804      	ldr	r0, [pc, #16]	; (38a6c <nrf_cc3xx_platform_mutex_init+0x28>)
   38a5a:	f009 bcf9 	b.w	42450 <nrf_cc3xx_platform_set_mutexes>
   38a5e:	bf00      	nop
   38a60:	2000268c 	.word	0x2000268c
   38a64:	20002b8c 	.word	0x20002b8c
   38a68:	00049140 	.word	0x00049140
   38a6c:	00049154 	.word	0x00049154

00038a70 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   38a70:	4901      	ldr	r1, [pc, #4]	; (38a78 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   38a72:	2210      	movs	r2, #16
	str	r2, [r1]
   38a74:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   38a76:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   38a78:	e000ed10 	.word	0xe000ed10

00038a7c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   38a7c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   38a7e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   38a80:	f380 8811 	msr	BASEPRI, r0
	isb
   38a84:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   38a88:	f3bf 8f4f 	dsb	sy
   38a8c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   38a8e:	b662      	cpsie	i
	isb
   38a90:	f3bf 8f6f 	isb	sy

	bx	lr
   38a94:	4770      	bx	lr
   38a96:	bf00      	nop

00038a98 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   38a98:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   38a9a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   38a9c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   38aa0:	f3bf 8f4f 	dsb	sy
   38aa4:	bf20      	wfe

	msr	BASEPRI, r0
   38aa6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   38aaa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   38aac:	4770      	bx	lr
   38aae:	bf00      	nop

00038ab0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   38ab0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   38ab2:	2800      	cmp	r0, #0
   38ab4:	db07      	blt.n	38ac6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   38ab6:	4a04      	ldr	r2, [pc, #16]	; (38ac8 <arch_irq_enable+0x18>)
   38ab8:	0941      	lsrs	r1, r0, #5
   38aba:	2301      	movs	r3, #1
   38abc:	f000 001f 	and.w	r0, r0, #31
   38ac0:	4083      	lsls	r3, r0
   38ac2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   38ac6:	4770      	bx	lr
   38ac8:	e000e100 	.word	0xe000e100

00038acc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   38acc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   38ace:	2800      	cmp	r0, #0
   38ad0:	db0c      	blt.n	38aec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   38ad2:	0943      	lsrs	r3, r0, #5
   38ad4:	4906      	ldr	r1, [pc, #24]	; (38af0 <arch_irq_disable+0x24>)
   38ad6:	f000 001f 	and.w	r0, r0, #31
   38ada:	3320      	adds	r3, #32
   38adc:	2201      	movs	r2, #1
   38ade:	4082      	lsls	r2, r0
   38ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   38ae4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   38ae8:	f3bf 8f6f 	isb	sy
}
   38aec:	4770      	bx	lr
   38aee:	bf00      	nop
   38af0:	e000e100 	.word	0xe000e100

00038af4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   38af4:	4b05      	ldr	r3, [pc, #20]	; (38b0c <arch_irq_is_enabled+0x18>)
   38af6:	0942      	lsrs	r2, r0, #5
   38af8:	f000 001f 	and.w	r0, r0, #31
   38afc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   38b00:	2301      	movs	r3, #1
   38b02:	fa03 f000 	lsl.w	r0, r3, r0
}
   38b06:	4010      	ands	r0, r2
   38b08:	4770      	bx	lr
   38b0a:	bf00      	nop
   38b0c:	e000e100 	.word	0xe000e100

00038b10 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   38b10:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   38b12:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   38b14:	bf54      	ite	pl
   38b16:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   38b18:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   38b1a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b1c:	bfac      	ite	ge
   38b1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b22:	4a07      	ldrlt	r2, [pc, #28]	; (38b40 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b24:	ea4f 1341 	mov.w	r3, r1, lsl #5
   38b28:	bfac      	ite	ge
   38b2a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b2e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b32:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b34:	bfb4      	ite	lt
   38b36:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38b38:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   38b3c:	4770      	bx	lr
   38b3e:	bf00      	nop
   38b40:	e000ed14 	.word	0xe000ed14

00038b44 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   38b44:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   38b46:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   38b48:	4b04      	ldr	r3, [pc, #16]	; (38b5c <_arch_isr_direct_pm+0x18>)
   38b4a:	695a      	ldr	r2, [r3, #20]
   38b4c:	b11a      	cbz	r2, 38b56 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   38b4e:	2200      	movs	r2, #0
   38b50:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   38b52:	f00f fb57 	bl	48204 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   38b56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   38b58:	bd08      	pop	{r3, pc}
   38b5a:	bf00      	nop
   38b5c:	20002e7c 	.word	0x20002e7c

00038b60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   38b60:	bf30      	wfi
    b z_SysNmiOnReset
   38b62:	f7ff bffd 	b.w	38b60 <z_SysNmiOnReset>
   38b66:	bf00      	nop

00038b68 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   38b68:	4a0b      	ldr	r2, [pc, #44]	; (38b98 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   38b6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   38b6c:	4b0b      	ldr	r3, [pc, #44]	; (38b9c <z_arm_prep_c+0x34>)
   38b6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   38b72:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   38b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   38b78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   38b7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   38b80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   38b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   38b88:	f007 fcda 	bl	40540 <z_bss_zero>
	z_data_copy();
   38b8c:	f008 fd16 	bl	415bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   38b90:	f000 fa24 	bl	38fdc <z_arm_interrupt_init>
	z_cstart();
   38b94:	f007 fd18 	bl	405c8 <z_cstart>
   38b98:	00027000 	.word	0x00027000
   38b9c:	e000ed00 	.word	0xe000ed00

00038ba0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   38ba0:	4a0a      	ldr	r2, [pc, #40]	; (38bcc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   38ba2:	490b      	ldr	r1, [pc, #44]	; (38bd0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   38ba4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   38ba6:	6809      	ldr	r1, [r1, #0]
   38ba8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   38bac:	4909      	ldr	r1, [pc, #36]	; (38bd4 <arch_swap+0x34>)
	_current->arch.basepri = key;
   38bae:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   38bb2:	684b      	ldr	r3, [r1, #4]
   38bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   38bb8:	604b      	str	r3, [r1, #4]
   38bba:	2300      	movs	r3, #0
   38bbc:	f383 8811 	msr	BASEPRI, r3
   38bc0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   38bc4:	6893      	ldr	r3, [r2, #8]
}
   38bc6:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
   38bca:	4770      	bx	lr
   38bcc:	20002e7c 	.word	0x20002e7c
   38bd0:	000495d8 	.word	0x000495d8
   38bd4:	e000ed00 	.word	0xe000ed00

00038bd8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   38bd8:	4913      	ldr	r1, [pc, #76]	; (38c28 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   38bda:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   38bdc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   38be0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   38be2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   38be6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   38bea:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   38bec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   38bf0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   38bf4:	4f0d      	ldr	r7, [pc, #52]	; (38c2c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   38bf6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   38bfa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   38bfc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   38bfe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   38c00:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    movs r3, #0
   38c04:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   38c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   38c0a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   38c0e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   38c10:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   38c12:	f000 fa7f 	bl	39114 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   38c16:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   38c1a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   38c1e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   38c22:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   38c26:	4770      	bx	lr
    ldr r1, =_kernel
   38c28:	20002e7c 	.word	0x20002e7c
    ldr v4, =_SCS_ICSR
   38c2c:	e000ed04 	.word	0xe000ed04

00038c30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   38c30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   38c34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   38c36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   38c3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   38c3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   38c40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   38c44:	2902      	cmp	r1, #2
    beq _oops
   38c46:	d0ff      	beq.n	38c48 <_oops>

00038c48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   38c48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   38c4a:	f00c fd1b 	bl	45684 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   38c4e:	bd01      	pop	{r0, pc}

00038c50 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   38c50:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   38c54:	9b00      	ldr	r3, [sp, #0]
   38c56:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   38c5a:	490a      	ldr	r1, [pc, #40]	; (38c84 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   38c5c:	9b01      	ldr	r3, [sp, #4]
   38c5e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   38c62:	9b02      	ldr	r3, [sp, #8]
   38c64:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   38c68:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   38c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   38c70:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   38c74:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   38c78:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   38c7a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   38c7c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   38c7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   38c82:	4770      	bx	lr
   38c84:	00044aeb 	.word	0x00044aeb

00038c88 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   38c88:	4a09      	ldr	r2, [pc, #36]	; (38cb0 <z_check_thread_stack_fail+0x28>)
{
   38c8a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   38c8c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   38c8e:	b170      	cbz	r0, 38cae <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   38c90:	f113 0f16 	cmn.w	r3, #22
   38c94:	6f80      	ldr	r0, [r0, #120]	; 0x78
   38c96:	d005      	beq.n	38ca4 <z_check_thread_stack_fail+0x1c>
   38c98:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   38c9c:	429a      	cmp	r2, r3
   38c9e:	d805      	bhi.n	38cac <z_check_thread_stack_fail+0x24>
   38ca0:	4283      	cmp	r3, r0
   38ca2:	d203      	bcs.n	38cac <z_check_thread_stack_fail+0x24>
		return 0;
   38ca4:	4281      	cmp	r1, r0
   38ca6:	bf28      	it	cs
   38ca8:	2000      	movcs	r0, #0
   38caa:	4770      	bx	lr
   38cac:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   38cae:	4770      	bx	lr
   38cb0:	20002e7c 	.word	0x20002e7c

00038cb4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   38cb4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   38cb6:	4b09      	ldr	r3, [pc, #36]	; (38cdc <arch_switch_to_main_thread+0x28>)
{
   38cb8:	460d      	mov	r5, r1
   38cba:	4614      	mov	r4, r2
	_current = main_thread;
   38cbc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   38cbe:	f000 fa29 	bl	39114 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   38cc2:	4620      	mov	r0, r4
   38cc4:	f385 8809 	msr	PSP, r5
   38cc8:	2100      	movs	r1, #0
   38cca:	b663      	cpsie	if
   38ccc:	f381 8811 	msr	BASEPRI, r1
   38cd0:	f3bf 8f6f 	isb	sy
   38cd4:	2200      	movs	r2, #0
   38cd6:	2300      	movs	r3, #0
   38cd8:	f00b ff07 	bl	44aea <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   38cdc:	20002e7c 	.word	0x20002e7c

00038ce0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   38ce0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   38ce2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   38ce4:	4a0b      	ldr	r2, [pc, #44]	; (38d14 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   38ce6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   38ce8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   38cea:	bf1e      	ittt	ne
	movne	r1, #0
   38cec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   38cee:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   38cf0:	f00f fa88 	blne	48204 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   38cf4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   38cf6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   38cfa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   38cfe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   38d02:	4905      	ldr	r1, [pc, #20]	; (38d18 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   38d04:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   38d06:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   38d08:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   38d0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   38d0e:	4903      	ldr	r1, [pc, #12]	; (38d1c <_isr_wrapper+0x3c>)
	bx r1
   38d10:	4708      	bx	r1
   38d12:	0000      	.short	0x0000
	ldr r2, =_kernel
   38d14:	20002e7c 	.word	0x20002e7c
	ldr r1, =_sw_isr_table
   38d18:	00048dd8 	.word	0x00048dd8
	ldr r1, =z_arm_int_exit
   38d1c:	00038d21 	.word	0x00038d21

00038d20 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   38d20:	4b04      	ldr	r3, [pc, #16]	; (38d34 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   38d22:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   38d24:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   38d26:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   38d28:	d003      	beq.n	38d32 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   38d2a:	4903      	ldr	r1, [pc, #12]	; (38d38 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   38d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   38d30:	600a      	str	r2, [r1, #0]

00038d32 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   38d32:	4770      	bx	lr
	ldr r3, =_kernel
   38d34:	20002e7c 	.word	0x20002e7c
	ldr r1, =_SCS_ICSR
   38d38:	e000ed04 	.word	0xe000ed04

00038d3c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   38d3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   38d3e:	4b26      	ldr	r3, [pc, #152]	; (38dd8 <mem_manage_fault+0x9c>)
{
   38d40:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   38d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   38d44:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   38d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   38d4a:	bf14      	ite	ne
   38d4c:	2411      	movne	r4, #17
   38d4e:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   38d50:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   38d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   38d56:	bf18      	it	ne
   38d58:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   38d5a:	0792      	lsls	r2, r2, #30
{
   38d5c:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   38d5e:	d50a      	bpl.n	38d76 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   38d60:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   38d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38d64:	0614      	lsls	r4, r2, #24
   38d66:	d534      	bpl.n	38dd2 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   38d68:	b119      	cbz	r1, 38d72 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   38d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   38d70:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   38d72:	2413      	movs	r4, #19
   38d74:	e001      	b.n	38d7a <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
   38d76:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   38d7a:	4b17      	ldr	r3, [pc, #92]	; (38dd8 <mem_manage_fault+0x9c>)
   38d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   38d7e:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   38d82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   38d84:	bf18      	it	ne
   38d86:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   38d88:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   38d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   38d8e:	bf18      	it	ne
   38d90:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   38d92:	06d2      	lsls	r2, r2, #27
   38d94:	d402      	bmi.n	38d9c <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   38d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   38d98:	079b      	lsls	r3, r3, #30
   38d9a:	d50a      	bpl.n	38db2 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   38d9c:	4b0e      	ldr	r3, [pc, #56]	; (38dd8 <mem_manage_fault+0x9c>)
   38d9e:	685b      	ldr	r3, [r3, #4]
   38da0:	0519      	lsls	r1, r3, #20
   38da2:	d506      	bpl.n	38db2 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   38da4:	4631      	mov	r1, r6
   38da6:	f7ff ff6f 	bl	38c88 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   38daa:	b110      	cbz	r0, 38db2 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   38dac:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   38db0:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   38db2:	4b09      	ldr	r3, [pc, #36]	; (38dd8 <mem_manage_fault+0x9c>)
   38db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38db6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   38db8:	bf42      	ittt	mi
   38dba:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   38dbc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   38dc0:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   38dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38dc4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   38dc8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   38dca:	2300      	movs	r3, #0
   38dcc:	702b      	strb	r3, [r5, #0]

	return reason;
}
   38dce:	4620      	mov	r0, r4
   38dd0:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   38dd2:	f06f 0015 	mvn.w	r0, #21
   38dd6:	e7cc      	b.n	38d72 <mem_manage_fault+0x36>
   38dd8:	e000ed00 	.word	0xe000ed00

00038ddc <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   38ddc:	4b13      	ldr	r3, [pc, #76]	; (38e2c <usage_fault.constprop.0+0x50>)
   38dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   38de0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   38de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   38de6:	bf14      	ite	ne
   38de8:	201e      	movne	r0, #30
   38dea:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   38dec:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   38df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   38df2:	bf18      	it	ne
   38df4:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   38df6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   38dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   38dfc:	bf18      	it	ne
   38dfe:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   38e00:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   38e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   38e06:	bf18      	it	ne
   38e08:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   38e0a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   38e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   38e10:	bf18      	it	ne
   38e12:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   38e14:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   38e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38e1a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   38e1e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   38e22:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   38e24:	bf18      	it	ne
   38e26:	2024      	movne	r0, #36	; 0x24
   38e28:	4770      	bx	lr
   38e2a:	bf00      	nop
   38e2c:	e000ed00 	.word	0xe000ed00

00038e30 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   38e30:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   38e32:	4b19      	ldr	r3, [pc, #100]	; (38e98 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   38e34:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   38e36:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   38e38:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   38e3a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   38e3e:	bf14      	ite	ne
   38e40:	2017      	movne	r0, #23
   38e42:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   38e44:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   38e48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   38e4a:	bf18      	it	ne
   38e4c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   38e4e:	05a4      	lsls	r4, r4, #22
   38e50:	d509      	bpl.n	38e66 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   38e52:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   38e54:	6a98      	ldr	r0, [r3, #40]	; 0x28
   38e56:	0400      	lsls	r0, r0, #16
   38e58:	d504      	bpl.n	38e64 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   38e5a:	b11a      	cbz	r2, 38e64 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   38e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   38e62:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   38e64:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   38e66:	4b0c      	ldr	r3, [pc, #48]	; (38e98 <bus_fault.constprop.0+0x68>)
   38e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   38e6a:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   38e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   38e70:	bf18      	it	ne
   38e72:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   38e74:	05d2      	lsls	r2, r2, #23
   38e76:	d40c      	bmi.n	38e92 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   38e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   38e7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   38e7e:	bf18      	it	ne
   38e80:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   38e82:	4a05      	ldr	r2, [pc, #20]	; (38e98 <bus_fault.constprop.0+0x68>)
   38e84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   38e86:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   38e8a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   38e8c:	2300      	movs	r3, #0
   38e8e:	700b      	strb	r3, [r1, #0]
}
   38e90:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   38e92:	201b      	movs	r0, #27
   38e94:	e7f5      	b.n	38e82 <bus_fault.constprop.0+0x52>
   38e96:	bf00      	nop
   38e98:	e000ed00 	.word	0xe000ed00

00038e9c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   38e9c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   38e9e:	4b45      	ldr	r3, [pc, #276]	; (38fb4 <z_arm_fault+0x118>)
   38ea0:	685b      	ldr	r3, [r3, #4]
{
   38ea2:	b08a      	sub	sp, #40	; 0x28
   38ea4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   38ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   38eaa:	2600      	movs	r6, #0
   38eac:	f386 8811 	msr	BASEPRI, r6
   38eb0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   38eb4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   38eb8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   38ebc:	d111      	bne.n	38ee2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   38ebe:	f002 000c 	and.w	r0, r2, #12
   38ec2:	2808      	cmp	r0, #8
   38ec4:	d00d      	beq.n	38ee2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   38ec6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   38ec8:	bf4c      	ite	mi
   38eca:	460d      	movmi	r5, r1
			*nested_exc = true;
   38ecc:	2601      	movpl	r6, #1
	*recoverable = false;
   38ece:	2200      	movs	r2, #0
	switch (fault) {
   38ed0:	3b03      	subs	r3, #3
	*recoverable = false;
   38ed2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   38ed6:	2b03      	cmp	r3, #3
   38ed8:	d805      	bhi.n	38ee6 <z_arm_fault+0x4a>
   38eda:	e8df f003 	tbb	[pc, r3]
   38ede:	5d1e      	.short	0x5d1e
   38ee0:	5a61      	.short	0x5a61
		return NULL;
   38ee2:	4635      	mov	r5, r6
   38ee4:	e7f3      	b.n	38ece <z_arm_fault+0x32>
   38ee6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   38ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   38eec:	b99b      	cbnz	r3, 38f16 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   38eee:	2220      	movs	r2, #32
   38ef0:	4629      	mov	r1, r5
   38ef2:	a802      	add	r0, sp, #8
   38ef4:	f00c fc0c 	bl	45710 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   38ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38efa:	2e00      	cmp	r6, #0
   38efc:	d054      	beq.n	38fa8 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   38efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
   38f02:	b922      	cbnz	r2, 38f0e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   38f04:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   38f08:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   38f0c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   38f0e:	a902      	add	r1, sp, #8
   38f10:	4620      	mov	r0, r4
   38f12:	f00c fbb5 	bl	45680 <z_arm_fatal_error>
}
   38f16:	b00a      	add	sp, #40	; 0x28
   38f18:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   38f1a:	4b26      	ldr	r3, [pc, #152]	; (38fb4 <z_arm_fault+0x118>)
   38f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   38f1e:	0791      	lsls	r1, r2, #30
   38f20:	d4e1      	bmi.n	38ee6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   38f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   38f24:	2a00      	cmp	r2, #0
   38f26:	dbde      	blt.n	38ee6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   38f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   38f2a:	0052      	lsls	r2, r2, #1
   38f2c:	d5db      	bpl.n	38ee6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   38f2e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   38f30:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   38f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   38f36:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   38f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   38f3c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   38f40:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   38f42:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   38f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   38f4a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   38f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   38f50:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   38f54:	f64d 7202 	movw	r2, #57090	; 0xdf02
   38f58:	4291      	cmp	r1, r2
   38f5a:	d00a      	beq.n	38f72 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   38f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38f5e:	b2d2      	uxtb	r2, r2
   38f60:	b14a      	cbz	r2, 38f76 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
   38f62:	f10d 0207 	add.w	r2, sp, #7
   38f66:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   38f68:	4628      	mov	r0, r5
   38f6a:	f7ff fee7 	bl	38d3c <mem_manage_fault>
		reason = usage_fault(esf);
   38f6e:	4604      	mov	r4, r0
		break;
   38f70:	e7ba      	b.n	38ee8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
   38f72:	682c      	ldr	r4, [r5, #0]
   38f74:	e7b8      	b.n	38ee8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   38f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   38f78:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   38f7c:	d005      	beq.n	38f8a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
   38f7e:	f10d 0107 	add.w	r1, sp, #7
   38f82:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   38f84:	f7ff ff54 	bl	38e30 <bus_fault.constprop.0>
   38f88:	e7f1      	b.n	38f6e <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   38f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   38f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   38f90:	d3a9      	bcc.n	38ee6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
   38f92:	f7ff ff23 	bl	38ddc <usage_fault.constprop.0>
   38f96:	e7ea      	b.n	38f6e <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
   38f98:	f10d 0207 	add.w	r2, sp, #7
   38f9c:	2100      	movs	r1, #0
   38f9e:	e7e3      	b.n	38f68 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   38fa0:	f10d 0107 	add.w	r1, sp, #7
   38fa4:	2000      	movs	r0, #0
   38fa6:	e7ed      	b.n	38f84 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   38fa8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   38fac:	f023 0301 	bic.w	r3, r3, #1
   38fb0:	e7ac      	b.n	38f0c <z_arm_fault+0x70>
   38fb2:	bf00      	nop
   38fb4:	e000ed00 	.word	0xe000ed00

00038fb8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   38fb8:	4a02      	ldr	r2, [pc, #8]	; (38fc4 <z_arm_fault_init+0xc>)
   38fba:	6953      	ldr	r3, [r2, #20]
   38fbc:	f043 0310 	orr.w	r3, r3, #16
   38fc0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   38fc2:	4770      	bx	lr
   38fc4:	e000ed00 	.word	0xe000ed00

00038fc8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   38fc8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   38fcc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   38fd0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   38fd2:	4672      	mov	r2, lr
	bl z_arm_fault
   38fd4:	f7ff ff62 	bl	38e9c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   38fd8:	bd01      	pop	{r0, pc}
   38fda:	bf00      	nop

00038fdc <z_arm_interrupt_init>:
   38fdc:	4804      	ldr	r0, [pc, #16]	; (38ff0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   38fde:	2300      	movs	r3, #0
   38fe0:	2140      	movs	r1, #64	; 0x40
   38fe2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   38fe4:	3301      	adds	r3, #1
   38fe6:	2b30      	cmp	r3, #48	; 0x30
   38fe8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   38fec:	d1f9      	bne.n	38fe2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   38fee:	4770      	bx	lr
   38ff0:	e000e100 	.word	0xe000e100

00038ff4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   38ff4:	2000      	movs	r0, #0
    msr CONTROL, r0
   38ff6:	f380 8814 	msr	CONTROL, r0
    isb
   38ffa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   38ffe:	f7ff fa19 	bl	38434 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   39002:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   39004:	490d      	ldr	r1, [pc, #52]	; (3903c <__start+0x48>)
    str r0, [r1]
   39006:	6008      	str	r0, [r1, #0]
    dsb
   39008:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   3900c:	480c      	ldr	r0, [pc, #48]	; (39040 <__start+0x4c>)
    msr msp, r0
   3900e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   39012:	f000 f82b 	bl	3906c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   39016:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   39018:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   3901c:	4809      	ldr	r0, [pc, #36]	; (39044 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   3901e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   39022:	1840      	adds	r0, r0, r1
    msr PSP, r0
   39024:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   39028:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   3902c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   3902e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   39030:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   39034:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   39038:	f7ff fd96 	bl	38b68 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   3903c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   39040:	200064c0 	.word	0x200064c0
    ldr r0, =z_interrupt_stacks
   39044:	20005300 	.word	0x20005300

00039048 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   39048:	4907      	ldr	r1, [pc, #28]	; (39068 <z_arm_clear_arm_mpu_config+0x20>)
   3904a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   3904e:	2300      	movs	r3, #0
	int num_regions =
   39050:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   39054:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   39056:	4293      	cmp	r3, r2
   39058:	db00      	blt.n	3905c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   3905a:	4770      	bx	lr
  MPU->RNR = rnr;
   3905c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   39060:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   39064:	3301      	adds	r3, #1
   39066:	e7f6      	b.n	39056 <z_arm_clear_arm_mpu_config+0xe>
   39068:	e000ed00 	.word	0xe000ed00

0003906c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   3906c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   3906e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   39070:	2300      	movs	r3, #0
   39072:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   39076:	f7ff ffe7 	bl	39048 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   3907a:	4b14      	ldr	r3, [pc, #80]	; (390cc <z_arm_init_arch_hw_at_boot+0x60>)
   3907c:	f04f 32ff 	mov.w	r2, #4294967295
   39080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   39084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   39088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   3908c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   39090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   39094:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   39098:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   3909c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   390a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   390a4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   390a8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   390ac:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   390b0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   390b4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   390b8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   390bc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   390c0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   390c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   390c6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   390ca:	bd08      	pop	{r3, pc}
   390cc:	e000e100 	.word	0xe000e100

000390d0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   390d0:	4b08      	ldr	r3, [pc, #32]	; (390f4 <z_impl_k_thread_abort+0x24>)
   390d2:	689b      	ldr	r3, [r3, #8]
   390d4:	4283      	cmp	r3, r0
   390d6:	d10b      	bne.n	390f0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   390d8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   390dc:	b143      	cbz	r3, 390f0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   390de:	4b06      	ldr	r3, [pc, #24]	; (390f8 <z_impl_k_thread_abort+0x28>)
   390e0:	685a      	ldr	r2, [r3, #4]
   390e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   390e6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   390e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   390ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   390ee:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   390f0:	f008 b9f2 	b.w	414d8 <z_thread_abort>
   390f4:	20002e7c 	.word	0x20002e7c
   390f8:	e000ed00 	.word	0xe000ed00

000390fc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   390fc:	4b02      	ldr	r3, [pc, #8]	; (39108 <z_arm_configure_static_mpu_regions+0xc>)
   390fe:	4a03      	ldr	r2, [pc, #12]	; (3910c <z_arm_configure_static_mpu_regions+0x10>)
   39100:	4803      	ldr	r0, [pc, #12]	; (39110 <z_arm_configure_static_mpu_regions+0x14>)
   39102:	2101      	movs	r1, #1
   39104:	f000 b870 	b.w	391e8 <arm_core_mpu_configure_static_mpu_regions>
   39108:	20040000 	.word	0x20040000
   3910c:	20000000 	.word	0x20000000
   39110:	00049164 	.word	0x00049164

00039114 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   39114:	6f82      	ldr	r2, [r0, #120]	; 0x78
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   39116:	4b05      	ldr	r3, [pc, #20]	; (3912c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   39118:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   3911a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   3911c:	4a04      	ldr	r2, [pc, #16]	; (39130 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   3911e:	2140      	movs	r1, #64	; 0x40
   39120:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   39124:	4618      	mov	r0, r3
   39126:	2101      	movs	r1, #1
   39128:	f000 b868 	b.w	391fc <arm_core_mpu_configure_dynamic_mpu_regions>
   3912c:	20002ba8 	.word	0x20002ba8
   39130:	150b0000 	.word	0x150b0000

00039134 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   39134:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   39136:	4e20      	ldr	r6, [pc, #128]	; (391b8 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   39138:	2500      	movs	r5, #0
   3913a:	428d      	cmp	r5, r1
   3913c:	da39      	bge.n	391b2 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   3913e:	6844      	ldr	r4, [r0, #4]
   39140:	b374      	cbz	r4, 391a0 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   39142:	b153      	cbz	r3, 3915a <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   39144:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   39148:	ea14 0f0c 	tst.w	r4, ip
   3914c:	d12f      	bne.n	391ae <mpu_configure_regions+0x7a>
		&&
   3914e:	2c1f      	cmp	r4, #31
   39150:	d92d      	bls.n	391ae <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   39152:	6807      	ldr	r7, [r0, #0]
		&&
   39154:	ea1c 0f07 	tst.w	ip, r7
   39158:	d129      	bne.n	391ae <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   3915a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   3915c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   3915e:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   39162:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   39166:	d91e      	bls.n	391a6 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   39168:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   3916c:	d81d      	bhi.n	391aa <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   3916e:	3c01      	subs	r4, #1
   39170:	fab4 f484 	clz	r4, r4
   39174:	f1c4 041f 	rsb	r4, r4, #31
   39178:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   3917a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   3917e:	ea4c 0c04 	orr.w	ip, ip, r4
   39182:	d814      	bhi.n	391ae <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   39184:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   39188:	4314      	orrs	r4, r2
   3918a:	f044 0410 	orr.w	r4, r4, #16
   3918e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   39192:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   39196:	f04c 0401 	orr.w	r4, ip, #1
   3919a:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   3919e:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   391a0:	3501      	adds	r5, #1
   391a2:	300c      	adds	r0, #12
   391a4:	e7c9      	b.n	3913a <mpu_configure_regions+0x6>
		return REGION_32B;
   391a6:	2408      	movs	r4, #8
   391a8:	e7e7      	b.n	3917a <mpu_configure_regions+0x46>
		return REGION_4G;
   391aa:	243e      	movs	r4, #62	; 0x3e
   391ac:	e7e5      	b.n	3917a <mpu_configure_regions+0x46>
			return -EINVAL;
   391ae:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   391b2:	4610      	mov	r0, r2
   391b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391b6:	bf00      	nop
   391b8:	e000ed00 	.word	0xe000ed00

000391bc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   391bc:	4b04      	ldr	r3, [pc, #16]	; (391d0 <arm_core_mpu_enable+0x14>)
   391be:	2205      	movs	r2, #5
   391c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   391c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   391c8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   391cc:	4770      	bx	lr
   391ce:	bf00      	nop
   391d0:	e000ed00 	.word	0xe000ed00

000391d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   391d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   391d8:	4b02      	ldr	r3, [pc, #8]	; (391e4 <arm_core_mpu_disable+0x10>)
   391da:	2200      	movs	r2, #0
   391dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   391e0:	4770      	bx	lr
   391e2:	bf00      	nop
   391e4:	e000ed00 	.word	0xe000ed00

000391e8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   391e8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   391ea:	4c03      	ldr	r4, [pc, #12]	; (391f8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   391ec:	2301      	movs	r3, #1
   391ee:	7822      	ldrb	r2, [r4, #0]
   391f0:	f7ff ffa0 	bl	39134 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   391f4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   391f6:	bd10      	pop	{r4, pc}
   391f8:	20003991 	.word	0x20003991

000391fc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   391fc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   391fe:	4a09      	ldr	r2, [pc, #36]	; (39224 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   39200:	2300      	movs	r3, #0
   39202:	7812      	ldrb	r2, [r2, #0]
   39204:	f7ff ff96 	bl	39134 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   39208:	f110 0f16 	cmn.w	r0, #22
   3920c:	d002      	beq.n	39214 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   3920e:	4a06      	ldr	r2, [pc, #24]	; (39228 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   39210:	2807      	cmp	r0, #7
   39212:	dd00      	ble.n	39216 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   39214:	bd08      	pop	{r3, pc}
   39216:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   3921a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   3921e:	3001      	adds	r0, #1
   39220:	e7f6      	b.n	39210 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   39222:	bf00      	nop
   39224:	20003991 	.word	0x20003991
   39228:	e000ed00 	.word	0xe000ed00

0003922c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   3922c:	4914      	ldr	r1, [pc, #80]	; (39280 <z_arm_mpu_init+0x54>)
   3922e:	6808      	ldr	r0, [r1, #0]
   39230:	2808      	cmp	r0, #8
{
   39232:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   39234:	d821      	bhi.n	3927a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   39236:	f7ff ffcd 	bl	391d4 <arm_core_mpu_disable>
   3923a:	4c12      	ldr	r4, [pc, #72]	; (39284 <z_arm_mpu_init+0x58>)
   3923c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   3923e:	2200      	movs	r2, #0
   39240:	4290      	cmp	r0, r2
   39242:	f101 010c 	add.w	r1, r1, #12
   39246:	d105      	bne.n	39254 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   39248:	4b0f      	ldr	r3, [pc, #60]	; (39288 <z_arm_mpu_init+0x5c>)
   3924a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   3924c:	f7ff ffb6 	bl	391bc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   39250:	2000      	movs	r0, #0
}
   39252:	bd10      	pop	{r4, pc}
   39254:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   39258:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   3925c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   39260:	4313      	orrs	r3, r2
   39262:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   39266:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   3926a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3926e:	f043 0301 	orr.w	r3, r3, #1
   39272:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   39276:	3201      	adds	r2, #1
   39278:	e7e2      	b.n	39240 <z_arm_mpu_init+0x14>
		return -1;
   3927a:	f04f 30ff 	mov.w	r0, #4294967295
   3927e:	e7e8      	b.n	39252 <z_arm_mpu_init+0x26>
   39280:	00049170 	.word	0x00049170
   39284:	e000ed00 	.word	0xe000ed00
   39288:	20003991 	.word	0x20003991

0003928c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   3928c:	b510      	push	{r4, lr}
	__asm__ volatile(
   3928e:	f04f 0340 	mov.w	r3, #64	; 0x40
   39292:	f3ef 8011 	mrs	r0, BASEPRI
   39296:	f383 8812 	msr	BASEPRI_MAX, r3
   3929a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   3929e:	4a11      	ldr	r2, [pc, #68]	; (392e4 <nordicsemi_nrf52_init+0x58>)
   392a0:	2301      	movs	r3, #1
   392a2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   392a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   392aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   392ae:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   392b2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   392b6:	2c08      	cmp	r4, #8
   392b8:	d108      	bne.n	392cc <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   392ba:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   392be:	2905      	cmp	r1, #5
   392c0:	d804      	bhi.n	392cc <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   392c2:	4c09      	ldr	r4, [pc, #36]	; (392e8 <nordicsemi_nrf52_init+0x5c>)
   392c4:	5c61      	ldrb	r1, [r4, r1]
   392c6:	b109      	cbz	r1, 392cc <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   392c8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   392cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   392d0:	2201      	movs	r2, #1
   392d2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   392d6:	f380 8811 	msr	BASEPRI, r0
   392da:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   392de:	2000      	movs	r0, #0
   392e0:	bd10      	pop	{r4, pc}
   392e2:	bf00      	nop
   392e4:	4001e000 	.word	0x4001e000
   392e8:	00049a57 	.word	0x00049a57

000392ec <sys_arch_reboot>:
    *p_gpregret = val;
   392ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   392f0:	b2c0      	uxtb	r0, r0
   392f2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   392f6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   392fa:	4905      	ldr	r1, [pc, #20]	; (39310 <sys_arch_reboot+0x24>)
   392fc:	4b05      	ldr	r3, [pc, #20]	; (39314 <sys_arch_reboot+0x28>)
   392fe:	68ca      	ldr	r2, [r1, #12]
   39300:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   39304:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   39306:	60cb      	str	r3, [r1, #12]
   39308:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   3930c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3930e:	e7fd      	b.n	3930c <sys_arch_reboot+0x20>
   39310:	e000ed00 	.word	0xe000ed00
   39314:	05fa0004 	.word	0x05fa0004

00039318 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   39318:	b120      	cbz	r0, 39324 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   3931a:	4b03      	ldr	r3, [pc, #12]	; (39328 <arch_busy_wait+0x10>)
   3931c:	0180      	lsls	r0, r0, #6
   3931e:	f043 0301 	orr.w	r3, r3, #1
   39322:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   39324:	4770      	bx	lr
   39326:	bf00      	nop
   39328:	00049130 	.word	0x00049130

0003932c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   3932c:	b508      	push	{r3, lr}
   3932e:	4804      	ldr	r0, [pc, #16]	; (39340 <xoshiro128_initialize+0x14>)
   39330:	f00e fe73 	bl	4801a <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   39334:	2800      	cmp	r0, #0
}
   39336:	bf0c      	ite	eq
   39338:	f06f 0012 	mvneq.w	r0, #18
   3933c:	2000      	movne	r0, #0
   3933e:	bd08      	pop	{r3, pc}
   39340:	00048d4c 	.word	0x00048d4c

00039344 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   39344:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   39346:	4d0a      	ldr	r5, [pc, #40]	; (39370 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   39348:	4b0a      	ldr	r3, [pc, #40]	; (39374 <long_wq_init+0x30>)
{
   3934a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   3934c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   3934e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   39350:	9302      	str	r3, [sp, #8]
   39352:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   39354:	f00f f8c5 	bl	484e2 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   39358:	ab02      	add	r3, sp, #8
   3935a:	9300      	str	r3, [sp, #0]
   3935c:	4628      	mov	r0, r5
   3935e:	4906      	ldr	r1, [pc, #24]	; (39378 <long_wq_init+0x34>)
   39360:	230a      	movs	r3, #10
   39362:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   39366:	f007 fd39 	bl	40ddc <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   3936a:	4620      	mov	r0, r4
   3936c:	b005      	add	sp, #20
   3936e:	bd30      	pop	{r4, r5, pc}
   39370:	200017a8 	.word	0x200017a8
   39374:	00049a7b 	.word	0x00049a7b
   39378:	20003ac0 	.word	0x20003ac0

0003937c <bt_long_wq_schedule>:
{
   3937c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   3937e:	4801      	ldr	r0, [pc, #4]	; (39384 <bt_long_wq_schedule+0x8>)
   39380:	f007 bd64 	b.w	40e4c <k_work_schedule_for_queue>
   39384:	200017a8 	.word	0x200017a8

00039388 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   39388:	b430      	push	{r4, r5}
   3938a:	4603      	mov	r3, r0
   3938c:	4608      	mov	r0, r1
	switch (src->type) {
   3938e:	781a      	ldrb	r2, [r3, #0]
   39390:	2a01      	cmp	r2, #1
   39392:	d013      	beq.n	393bc <uuid_to_uuid128+0x34>
   39394:	2a02      	cmp	r2, #2
   39396:	d026      	beq.n	393e6 <uuid_to_uuid128+0x5e>
   39398:	b972      	cbnz	r2, 393b8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   3939a:	4a15      	ldr	r2, [pc, #84]	; (393f0 <uuid_to_uuid128+0x68>)
   3939c:	f102 0410 	add.w	r4, r2, #16
   393a0:	f852 5b04 	ldr.w	r5, [r2], #4
   393a4:	f841 5b04 	str.w	r5, [r1], #4
   393a8:	42a2      	cmp	r2, r4
   393aa:	d1f9      	bne.n	393a0 <uuid_to_uuid128+0x18>
   393ac:	7812      	ldrb	r2, [r2, #0]
   393ae:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   393b0:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   393b2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   393b4:	0a1b      	lsrs	r3, r3, #8
   393b6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   393b8:	bc30      	pop	{r4, r5}
   393ba:	4770      	bx	lr
		*dst = uuid128_base;
   393bc:	4a0c      	ldr	r2, [pc, #48]	; (393f0 <uuid_to_uuid128+0x68>)
   393be:	f102 0410 	add.w	r4, r2, #16
   393c2:	f852 5b04 	ldr.w	r5, [r2], #4
   393c6:	f841 5b04 	str.w	r5, [r1], #4
   393ca:	42a2      	cmp	r2, r4
   393cc:	d1f9      	bne.n	393c2 <uuid_to_uuid128+0x3a>
   393ce:	7812      	ldrb	r2, [r2, #0]
   393d0:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   393d2:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   393d4:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   393d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   393da:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   393dc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   393de:	0a1b      	lsrs	r3, r3, #8
   393e0:	7382      	strb	r2, [r0, #14]
   393e2:	7403      	strb	r3, [r0, #16]
}
   393e4:	e7e8      	b.n	393b8 <uuid_to_uuid128+0x30>
}
   393e6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   393e8:	2211      	movs	r2, #17
   393ea:	4619      	mov	r1, r3
   393ec:	f00c b990 	b.w	45710 <memcpy>
   393f0:	00049a84 	.word	0x00049a84

000393f4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   393f4:	b538      	push	{r3, r4, r5, lr}
   393f6:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   393f8:	4805      	ldr	r0, [pc, #20]	; (39410 <bt_buf_get_rx+0x1c>)
   393fa:	f00e f882 	bl	47502 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   393fe:	4604      	mov	r4, r0
   39400:	b120      	cbz	r0, 3940c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   39402:	2100      	movs	r1, #0
   39404:	300c      	adds	r0, #12
   39406:	f00e f8d8 	bl	475ba <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   3940a:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   3940c:	4620      	mov	r0, r4
   3940e:	bd38      	pop	{r3, r4, r5, pc}
   39410:	20000af4 	.word	0x20000af4

00039414 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   39414:	b570      	push	{r4, r5, r6, lr}
   39416:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   39418:	480d      	ldr	r0, [pc, #52]	; (39450 <bt_buf_get_cmd_complete+0x3c>)
   3941a:	f3bf 8f5b 	dmb	ish
   3941e:	460b      	mov	r3, r1
   39420:	2100      	movs	r1, #0
   39422:	e850 4f00 	ldrex	r4, [r0]
   39426:	e840 1500 	strex	r5, r1, [r0]
   3942a:	2d00      	cmp	r5, #0
   3942c:	d1f9      	bne.n	39422 <bt_buf_get_cmd_complete+0xe>
   3942e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   39432:	b924      	cbnz	r4, 3943e <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   39434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   39438:	2001      	movs	r0, #1
   3943a:	f7ff bfdb 	b.w	393f4 <bt_buf_get_rx>
   3943e:	2301      	movs	r3, #1
   39440:	f104 000c 	add.w	r0, r4, #12
   39444:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   39446:	8221      	strh	r1, [r4, #16]
   39448:	f00e f8b7 	bl	475ba <net_buf_simple_reserve>
}
   3944c:	4620      	mov	r0, r4
   3944e:	bd70      	pop	{r4, r5, r6, pc}
   39450:	200004c0 	.word	0x200004c0

00039454 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   39454:	b570      	push	{r4, r5, r6, lr}
   39456:	4604      	mov	r4, r0
	switch (evt) {
   39458:	2c0f      	cmp	r4, #15
{
   3945a:	460d      	mov	r5, r1
   3945c:	4610      	mov	r0, r2
   3945e:	4619      	mov	r1, r3
	switch (evt) {
   39460:	d805      	bhi.n	3946e <bt_buf_get_evt+0x1a>
   39462:	2c0d      	cmp	r4, #13
   39464:	d90d      	bls.n	39482 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   39466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   3946a:	f7ff bfd3 	b.w	39414 <bt_buf_get_cmd_complete>
	switch (evt) {
   3946e:	2c13      	cmp	r4, #19
   39470:	d107      	bne.n	39482 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   39472:	480c      	ldr	r0, [pc, #48]	; (394a4 <bt_buf_get_evt+0x50>)
   39474:	f00e f845 	bl	47502 <net_buf_alloc_fixed>
			if (buf) {
   39478:	4604      	mov	r4, r0
   3947a:	b938      	cbnz	r0, 3948c <bt_buf_get_evt+0x38>
{
   3947c:	2400      	movs	r4, #0
}
   3947e:	4620      	mov	r0, r4
   39480:	bd70      	pop	{r4, r5, r6, pc}
   39482:	4602      	mov	r2, r0
   39484:	460b      	mov	r3, r1
		if (discardable) {
   39486:	b145      	cbz	r5, 3949a <bt_buf_get_evt+0x46>
   39488:	4807      	ldr	r0, [pc, #28]	; (394a8 <bt_buf_get_evt+0x54>)
   3948a:	e7f3      	b.n	39474 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   3948c:	2100      	movs	r1, #0
   3948e:	300c      	adds	r0, #12
   39490:	f00e f893 	bl	475ba <net_buf_simple_reserve>
   39494:	2301      	movs	r3, #1
   39496:	7623      	strb	r3, [r4, #24]
}
   39498:	e7f1      	b.n	3947e <bt_buf_get_evt+0x2a>
}
   3949a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   3949e:	2001      	movs	r0, #1
   394a0:	f7ff bfa8 	b.w	393f4 <bt_buf_get_rx>
   394a4:	20000b20 	.word	0x20000b20
   394a8:	20000a70 	.word	0x20000a70

000394ac <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   394ac:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   394ae:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   394b0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   394b4:	781b      	ldrb	r3, [r3, #0]
   394b6:	b963      	cbnz	r3, 394d2 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   394b8:	4620      	mov	r0, r4
   394ba:	f001 fde5 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   394be:	4605      	mov	r5, r0
   394c0:	b940      	cbnz	r0, 394d4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   394c2:	4b08      	ldr	r3, [pc, #32]	; (394e4 <hci_disconn_complete_prio+0x38>)
   394c4:	881a      	ldrh	r2, [r3, #0]
   394c6:	b922      	cbnz	r2, 394d2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   394c8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   394cc:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   394d0:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   394d2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   394d4:	2101      	movs	r1, #1
   394d6:	f001 fddf 	bl	3b098 <bt_conn_set_state>
	bt_conn_unref(conn);
   394da:	4628      	mov	r0, r5
}
   394dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   394e0:	f00c be2a 	b.w	46138 <bt_conn_unref>
   394e4:	20003980 	.word	0x20003980

000394e8 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   394e8:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   394ea:	4c08      	ldr	r4, [pc, #32]	; (3950c <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   394ec:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   394ee:	2205      	movs	r2, #5
   394f0:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   394f4:	f001 ff86 	bl	3b404 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   394f8:	b938      	cbnz	r0, 3950a <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   394fa:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   394fe:	4904      	ldr	r1, [pc, #16]	; (39510 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   39500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   39504:	2204      	movs	r2, #4
   39506:	f001 bf7d 	b.w	3b404 <bt_conn_lookup_state_le>
}
   3950a:	bd10      	pop	{r4, pc}
   3950c:	20000388 	.word	0x20000388
   39510:	00049a61 	.word	0x00049a61

00039514 <hci_le_meta_event>:
#endif /* CONFIG_BT_CONN */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   39514:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   39516:	2101      	movs	r1, #1
   39518:	4604      	mov	r4, r0
   3951a:	300c      	adds	r0, #12
   3951c:	f00e f878 	bl	47610 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   39520:	4621      	mov	r1, r4
   39522:	4a03      	ldr	r2, [pc, #12]	; (39530 <hci_le_meta_event+0x1c>)
   39524:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
   39526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   3952a:	2307      	movs	r3, #7
   3952c:	f00c b9e7 	b.w	458fe <handle_event_common.isra.0>
   39530:	00049208 	.word	0x00049208

00039534 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   39534:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   39536:	483c      	ldr	r0, [pc, #240]	; (39628 <rx_work_handler+0xf4>)
   39538:	f00e f800 	bl	4753c <net_buf_slist_get>
	if (!buf) {
   3953c:	4604      	mov	r4, r0
   3953e:	2800      	cmp	r0, #0
   39540:	d071      	beq.n	39626 <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   39542:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   39544:	2b01      	cmp	r3, #1
   39546:	d03f      	beq.n	395c8 <rx_work_handler+0x94>
   39548:	2b03      	cmp	r3, #3
   3954a:	d11f      	bne.n	3958c <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   3954c:	8a03      	ldrh	r3, [r0, #16]
   3954e:	2b03      	cmp	r3, #3
   39550:	d80c      	bhi.n	3956c <rx_work_handler+0x38>
   39552:	4a36      	ldr	r2, [pc, #216]	; (3962c <rx_work_handler+0xf8>)
   39554:	4936      	ldr	r1, [pc, #216]	; (39630 <rx_work_handler+0xfc>)
   39556:	4837      	ldr	r0, [pc, #220]	; (39634 <rx_work_handler+0x100>)
   39558:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   3955c:	f00b fdd9 	bl	45112 <assert_print>
   39560:	4040      	eors	r0, r0
   39562:	f380 8811 	msr	BASEPRI, r0
   39566:	f04f 0003 	mov.w	r0, #3
   3956a:	df02      	svc	2
   3956c:	2104      	movs	r1, #4
   3956e:	f104 000c 	add.w	r0, r4, #12
   39572:	f00e f84d 	bl	47610 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   39576:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   39578:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   3957a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   3957c:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   3957e:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   39580:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   39584:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   39586:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   39588:	d003      	beq.n	39592 <rx_work_handler+0x5e>
	net_buf_unref(buf);
   3958a:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   3958c:	f003 fd4e 	bl	3d02c <net_buf_unref>
		break;
   39590:	e00f      	b.n	395b2 <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   39592:	f001 fd79 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   39596:	4605      	mov	r5, r0
   39598:	2800      	cmp	r0, #0
   3959a:	d0f6      	beq.n	3958a <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   3959c:	f001 fe5a 	bl	3b254 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   395a0:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   395a2:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   395a4:	4621      	mov	r1, r4
   395a6:	4628      	mov	r0, r5
   395a8:	f00c fd5d 	bl	46066 <bt_conn_recv>
	bt_conn_unref(conn);
   395ac:	4628      	mov	r0, r5
   395ae:	f00c fdc3 	bl	46138 <bt_conn_unref>
	return list->head;
   395b2:	4b21      	ldr	r3, [pc, #132]	; (39638 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   395b4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   395b8:	2b00      	cmp	r3, #0
   395ba:	d034      	beq.n	39626 <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   395bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   395c0:	491e      	ldr	r1, [pc, #120]	; (3963c <rx_work_handler+0x108>)
   395c2:	481f      	ldr	r0, [pc, #124]	; (39640 <rx_work_handler+0x10c>)
   395c4:	f00e bf7c 	b.w	484c0 <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   395c8:	8a03      	ldrh	r3, [r0, #16]
   395ca:	2b01      	cmp	r3, #1
   395cc:	d80c      	bhi.n	395e8 <rx_work_handler+0xb4>
   395ce:	4a17      	ldr	r2, [pc, #92]	; (3962c <rx_work_handler+0xf8>)
   395d0:	4917      	ldr	r1, [pc, #92]	; (39630 <rx_work_handler+0xfc>)
   395d2:	4818      	ldr	r0, [pc, #96]	; (39634 <rx_work_handler+0x100>)
   395d4:	f640 2347 	movw	r3, #2631	; 0xa47
   395d8:	f00b fd9b 	bl	45112 <assert_print>
   395dc:	4040      	eors	r0, r0
   395de:	f380 8811 	msr	BASEPRI, r0
   395e2:	f04f 0003 	mov.w	r0, #3
   395e6:	df02      	svc	2
   395e8:	2102      	movs	r1, #2
   395ea:	f104 000c 	add.w	r0, r4, #12
   395ee:	f00e f80f 	bl	47610 <net_buf_simple_pull_mem>
   395f2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   395f4:	7800      	ldrb	r0, [r0, #0]
   395f6:	f00c f916 	bl	45826 <bt_hci_evt_get_flags>
   395fa:	0783      	lsls	r3, r0, #30
   395fc:	d40c      	bmi.n	39618 <rx_work_handler+0xe4>
   395fe:	4a0b      	ldr	r2, [pc, #44]	; (3962c <rx_work_handler+0xf8>)
   39600:	4910      	ldr	r1, [pc, #64]	; (39644 <rx_work_handler+0x110>)
   39602:	480c      	ldr	r0, [pc, #48]	; (39634 <rx_work_handler+0x100>)
   39604:	f640 234b 	movw	r3, #2635	; 0xa4b
   39608:	f00b fd83 	bl	45112 <assert_print>
   3960c:	4040      	eors	r0, r0
   3960e:	f380 8811 	msr	BASEPRI, r0
   39612:	f04f 0003 	mov.w	r0, #3
   39616:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   39618:	4a0b      	ldr	r2, [pc, #44]	; (39648 <rx_work_handler+0x114>)
   3961a:	7828      	ldrb	r0, [r5, #0]
   3961c:	2304      	movs	r3, #4
   3961e:	4621      	mov	r1, r4
   39620:	f00c f96d 	bl	458fe <handle_event_common.isra.0>
   39624:	e7b1      	b.n	3958a <rx_work_handler+0x56>
}
   39626:	bd70      	pop	{r4, r5, r6, pc}
   39628:	200004c4 	.word	0x200004c4
   3962c:	00049a9d 	.word	0x00049a9d
   39630:	00049ad1 	.word	0x00049ad1
   39634:	00049aea 	.word	0x00049aea
   39638:	20000388 	.word	0x20000388
   3963c:	20000710 	.word	0x20000710
   39640:	200018e8 	.word	0x200018e8
   39644:	00049b07 	.word	0x00049b07
   39648:	000491e8 	.word	0x000491e8

0003964c <hci_cmd_done>:
{
   3964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3964e:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   39650:	7a90      	ldrb	r0, [r2, #10]
{
   39652:	460e      	mov	r6, r1
   39654:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   39656:	f003 fc27 	bl	3cea8 <net_buf_pool_get>
   3965a:	4b28      	ldr	r3, [pc, #160]	; (396fc <hci_cmd_done+0xb0>)
   3965c:	4283      	cmp	r3, r0
   3965e:	d14b      	bne.n	396f8 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   39660:	4620      	mov	r0, r4
   39662:	f003 fc29 	bl	3ceb8 <net_buf_id>
   39666:	4d26      	ldr	r5, [pc, #152]	; (39700 <hci_cmd_done+0xb4>)
   39668:	230c      	movs	r3, #12
   3966a:	fb03 5000 	mla	r0, r3, r0, r5
   3966e:	8843      	ldrh	r3, [r0, #2]
   39670:	42bb      	cmp	r3, r7
   39672:	d141      	bne.n	396f8 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   39674:	4f23      	ldr	r7, [pc, #140]	; (39704 <hci_cmd_done+0xb8>)
   39676:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   3967a:	b120      	cbz	r0, 39686 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   3967c:	f003 fcd6 	bl	3d02c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   39680:	2300      	movs	r3, #0
   39682:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   39686:	4620      	mov	r0, r4
   39688:	f003 fc16 	bl	3ceb8 <net_buf_id>
   3968c:	270c      	movs	r7, #12
   3968e:	fb07 5000 	mla	r0, r7, r0, r5
   39692:	6843      	ldr	r3, [r0, #4]
   39694:	b19b      	cbz	r3, 396be <hci_cmd_done+0x72>
   39696:	b996      	cbnz	r6, 396be <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   39698:	4620      	mov	r0, r4
   3969a:	f003 fc0d 	bl	3ceb8 <net_buf_id>
   3969e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   396a2:	2101      	movs	r1, #1
   396a4:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   396a6:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   396aa:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   396ac:	f003 071f 	and.w	r7, r3, #31
   396b0:	40b9      	lsls	r1, r7
	if (val) {
   396b2:	095b      	lsrs	r3, r3, #5
   396b4:	b1d2      	cbz	r2, 396ec <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   396b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   396ba:	f00c f8f3 	bl	458a4 <atomic_or>
	if (cmd(buf)->sync) {
   396be:	4620      	mov	r0, r4
   396c0:	f003 fbfa 	bl	3ceb8 <net_buf_id>
   396c4:	270c      	movs	r7, #12
   396c6:	fb07 5000 	mla	r0, r7, r0, r5
   396ca:	6883      	ldr	r3, [r0, #8]
   396cc:	b1a3      	cbz	r3, 396f8 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   396ce:	4620      	mov	r0, r4
   396d0:	f003 fbf2 	bl	3ceb8 <net_buf_id>
   396d4:	4378      	muls	r0, r7
   396d6:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   396d8:	4620      	mov	r0, r4
   396da:	f003 fbed 	bl	3ceb8 <net_buf_id>
   396de:	fb07 5500 	mla	r5, r7, r0, r5
   396e2:	68a8      	ldr	r0, [r5, #8]
}
   396e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   396e8:	f007 b9f6 	b.w	40ad8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   396ec:	43c9      	mvns	r1, r1
   396ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   396f2:	f00c f91b 	bl	4592c <atomic_and.isra.0>
   396f6:	e7e2      	b.n	396be <hci_cmd_done+0x72>
   396f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   396fa:	bf00      	nop
   396fc:	20000ac8 	.word	0x20000ac8
   39700:	20002bb4 	.word	0x20002bb4
   39704:	20000388 	.word	0x20000388

00039708 <hci_cmd_status>:
{
   39708:	b538      	push	{r3, r4, r5, lr}
   3970a:	2104      	movs	r1, #4
   3970c:	4604      	mov	r4, r0
   3970e:	300c      	adds	r0, #12
   39710:	f00d ff7e 	bl	47610 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   39714:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   39716:	7801      	ldrb	r1, [r0, #0]
   39718:	8840      	ldrh	r0, [r0, #2]
   3971a:	4622      	mov	r2, r4
   3971c:	f7ff ff96 	bl	3964c <hci_cmd_done>
	if (ncmd) {
   39720:	b125      	cbz	r5, 3972c <hci_cmd_status+0x24>
   39722:	4803      	ldr	r0, [pc, #12]	; (39730 <hci_cmd_status+0x28>)
}
   39724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39728:	f007 b9d6 	b.w	40ad8 <z_impl_k_sem_give>
   3972c:	bd38      	pop	{r3, r4, r5, pc}
   3972e:	bf00      	nop
   39730:	200004a8 	.word	0x200004a8

00039734 <hci_cmd_complete>:
{
   39734:	b538      	push	{r3, r4, r5, lr}
   39736:	2103      	movs	r1, #3
   39738:	4604      	mov	r4, r0
   3973a:	300c      	adds	r0, #12
   3973c:	f00d ff68 	bl	47610 <net_buf_simple_pull_mem>
	status = buf->data[0];
   39740:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   39742:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   39744:	7819      	ldrb	r1, [r3, #0]
   39746:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   3974a:	4622      	mov	r2, r4
   3974c:	f7ff ff7e 	bl	3964c <hci_cmd_done>
	if (ncmd) {
   39750:	b125      	cbz	r5, 3975c <hci_cmd_complete+0x28>
   39752:	4803      	ldr	r0, [pc, #12]	; (39760 <hci_cmd_complete+0x2c>)
}
   39754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39758:	f007 b9be 	b.w	40ad8 <z_impl_k_sem_give>
   3975c:	bd38      	pop	{r3, r4, r5, pc}
   3975e:	bf00      	nop
   39760:	200004a8 	.word	0x200004a8

00039764 <bt_hci_cmd_state_set_init>:
{
   39764:	b510      	push	{r4, lr}
	state->bit = bit;
   39766:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   3976a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3976e:	720b      	strb	r3, [r1, #8]
{
   39770:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   39772:	f003 fba1 	bl	3ceb8 <net_buf_id>
   39776:	4b03      	ldr	r3, [pc, #12]	; (39784 <bt_hci_cmd_state_set_init+0x20>)
   39778:	220c      	movs	r2, #12
   3977a:	fb02 3300 	mla	r3, r2, r0, r3
   3977e:	605c      	str	r4, [r3, #4]
}
   39780:	bd10      	pop	{r4, pc}
   39782:	bf00      	nop
   39784:	20002bb4 	.word	0x20002bb4

00039788 <bt_hci_cmd_create>:
{
   39788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   3978c:	f04f 32ff 	mov.w	r2, #4294967295
   39790:	f04f 33ff 	mov.w	r3, #4294967295
   39794:	4606      	mov	r6, r0
   39796:	4817      	ldr	r0, [pc, #92]	; (397f4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   39798:	4d17      	ldr	r5, [pc, #92]	; (397f8 <bt_hci_cmd_create+0x70>)
{
   3979a:	460f      	mov	r7, r1
   3979c:	f00d feb1 	bl	47502 <net_buf_alloc_fixed>
   397a0:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   397a2:	f100 0a0c 	add.w	sl, r0, #12
   397a6:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   397a8:	f04f 0800 	mov.w	r8, #0
   397ac:	4650      	mov	r0, sl
   397ae:	f00d ff04 	bl	475ba <net_buf_simple_reserve>
   397b2:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   397b6:	4620      	mov	r0, r4
   397b8:	f003 fb7e 	bl	3ceb8 <net_buf_id>
   397bc:	f04f 090c 	mov.w	r9, #12
   397c0:	fb09 5000 	mla	r0, r9, r0, r5
   397c4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   397c6:	4620      	mov	r0, r4
   397c8:	f003 fb76 	bl	3ceb8 <net_buf_id>
   397cc:	fb09 5000 	mla	r0, r9, r0, r5
   397d0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   397d4:	4620      	mov	r0, r4
   397d6:	f003 fb6f 	bl	3ceb8 <net_buf_id>
   397da:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   397de:	2103      	movs	r1, #3
   397e0:	4650      	mov	r0, sl
   397e2:	f8c5 8004 	str.w	r8, [r5, #4]
   397e6:	f00d feec 	bl	475c2 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   397ea:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   397ec:	7087      	strb	r7, [r0, #2]
}
   397ee:	4620      	mov	r0, r4
   397f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   397f4:	20000ac8 	.word	0x20000ac8
   397f8:	20002bb4 	.word	0x20002bb4

000397fc <bt_hci_cmd_send_sync>:
{
   397fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39800:	4607      	mov	r7, r0
   39802:	b086      	sub	sp, #24
   39804:	4615      	mov	r5, r2
	if (!buf) {
   39806:	460c      	mov	r4, r1
   39808:	b921      	cbnz	r1, 39814 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   3980a:	f7ff ffbd 	bl	39788 <bt_hci_cmd_create>
		if (!buf) {
   3980e:	4604      	mov	r4, r0
   39810:	2800      	cmp	r0, #0
   39812:	d04b      	beq.n	398ac <bt_hci_cmd_send_sync+0xb0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   39814:	2201      	movs	r2, #1
   39816:	2100      	movs	r1, #0
   39818:	4668      	mov	r0, sp
   3981a:	f00e fda1 	bl	48360 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   3981e:	4620      	mov	r0, r4
   39820:	f003 fb4a 	bl	3ceb8 <net_buf_id>
   39824:	f8df 808c 	ldr.w	r8, [pc, #140]	; 398b4 <bt_hci_cmd_send_sync+0xb8>
   39828:	230c      	movs	r3, #12
   3982a:	fb03 8000 	mla	r0, r3, r0, r8
   3982e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   39832:	4620      	mov	r0, r4
   39834:	f00d fe9b 	bl	4756e <net_buf_ref>
   39838:	4601      	mov	r1, r0
   3983a:	481f      	ldr	r0, [pc, #124]	; (398b8 <bt_hci_cmd_send_sync+0xbc>)
   3983c:	f00d fe95 	bl	4756a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   39840:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   39844:	2300      	movs	r3, #0
   39846:	4668      	mov	r0, sp
   39848:	f007 f96c 	bl	40b24 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   3984c:	4606      	mov	r6, r0
   3984e:	b188      	cbz	r0, 39874 <bt_hci_cmd_send_sync+0x78>
   39850:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   39854:	4a19      	ldr	r2, [pc, #100]	; (398bc <bt_hci_cmd_send_sync+0xc0>)
   39856:	491a      	ldr	r1, [pc, #104]	; (398c0 <bt_hci_cmd_send_sync+0xc4>)
   39858:	481a      	ldr	r0, [pc, #104]	; (398c4 <bt_hci_cmd_send_sync+0xc8>)
   3985a:	f00b fc5a 	bl	45112 <assert_print>
   3985e:	481a      	ldr	r0, [pc, #104]	; (398c8 <bt_hci_cmd_send_sync+0xcc>)
   39860:	4632      	mov	r2, r6
   39862:	4639      	mov	r1, r7
   39864:	f00b fc55 	bl	45112 <assert_print>
   39868:	4040      	eors	r0, r0
   3986a:	f380 8811 	msr	BASEPRI, r0
   3986e:	f04f 0003 	mov.w	r0, #3
   39872:	df02      	svc	2
	status = cmd(buf)->status;
   39874:	4620      	mov	r0, r4
   39876:	f003 fb1f 	bl	3ceb8 <net_buf_id>
   3987a:	230c      	movs	r3, #12
   3987c:	4358      	muls	r0, r3
   3987e:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   39882:	b15e      	cbz	r6, 3989c <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
   39884:	4620      	mov	r0, r4
   39886:	f003 fbd1 	bl	3d02c <net_buf_unref>
			return -ECONNREFUSED;
   3988a:	2e09      	cmp	r6, #9
   3988c:	bf14      	ite	ne
   3988e:	f06f 0004 	mvnne.w	r0, #4
   39892:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   39896:	b006      	add	sp, #24
   39898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   3989c:	b115      	cbz	r5, 398a4 <bt_hci_cmd_send_sync+0xa8>
		*rsp = buf;
   3989e:	602c      	str	r4, [r5, #0]
	return 0;
   398a0:	2000      	movs	r0, #0
   398a2:	e7f8      	b.n	39896 <bt_hci_cmd_send_sync+0x9a>
		net_buf_unref(buf);
   398a4:	4620      	mov	r0, r4
   398a6:	f003 fbc1 	bl	3d02c <net_buf_unref>
   398aa:	e7f9      	b.n	398a0 <bt_hci_cmd_send_sync+0xa4>
			return -ENOBUFS;
   398ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   398b0:	e7f1      	b.n	39896 <bt_hci_cmd_send_sync+0x9a>
   398b2:	bf00      	nop
   398b4:	20002bb4 	.word	0x20002bb4
   398b8:	200004cc 	.word	0x200004cc
   398bc:	00049a9d 	.word	0x00049a9d
   398c0:	00049b35 	.word	0x00049b35
   398c4:	00049aea 	.word	0x00049aea
   398c8:	00049b3e 	.word	0x00049b3e

000398cc <bt_hci_le_rand>:
{
   398cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   398ce:	4b14      	ldr	r3, [pc, #80]	; (39920 <bt_hci_le_rand+0x54>)
   398d0:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   398d4:	2b00      	cmp	r3, #0
{
   398d6:	4605      	mov	r5, r0
   398d8:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   398da:	da1d      	bge.n	39918 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   398dc:	b914      	cbnz	r4, 398e4 <bt_hci_le_rand+0x18>
	return 0;
   398de:	4620      	mov	r0, r4
}
   398e0:	b003      	add	sp, #12
   398e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   398e4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   398e6:	aa01      	add	r2, sp, #4
   398e8:	f04f 0100 	mov.w	r1, #0
   398ec:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   398f0:	4626      	mov	r6, r4
   398f2:	bf28      	it	cs
   398f4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   398f6:	f7ff ff81 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   398fa:	2800      	cmp	r0, #0
   398fc:	d1f0      	bne.n	398e0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   398fe:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   39900:	68f9      	ldr	r1, [r7, #12]
   39902:	4632      	mov	r2, r6
   39904:	3101      	adds	r1, #1
   39906:	4628      	mov	r0, r5
   39908:	f00b ff02 	bl	45710 <memcpy>
		net_buf_unref(rsp);
   3990c:	4638      	mov	r0, r7
   3990e:	f003 fb8d 	bl	3d02c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   39912:	4435      	add	r5, r6
		len -= count;
   39914:	1ba4      	subs	r4, r4, r6
   39916:	e7e1      	b.n	398dc <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   39918:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3991c:	e7e0      	b.n	398e0 <bt_hci_le_rand+0x14>
   3991e:	bf00      	nop
   39920:	20000388 	.word	0x20000388

00039924 <bt_hci_le_enh_conn_complete>:
{
   39924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disconnected_handles[i] == handle) {
   39928:	4b7c      	ldr	r3, [pc, #496]	; (39b1c <bt_hci_le_enh_conn_complete+0x1f8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   3992a:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   3992e:	8819      	ldrh	r1, [r3, #0]
   39930:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   39934:	4291      	cmp	r1, r2
   39936:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   3993a:	bf08      	it	eq
   3993c:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
   3993e:	7804      	ldrb	r4, [r0, #0]
{
   39940:	b088      	sub	sp, #32
   39942:	4605      	mov	r5, r0
			return true;
   39944:	bf08      	it	eq
   39946:	2601      	moveq	r6, #1
	if (evt->status) {
   39948:	b1bc      	cbz	r4, 3997a <bt_hci_le_enh_conn_complete+0x56>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3994a:	2c3c      	cmp	r4, #60	; 0x3c
   3994c:	d137      	bne.n	399be <bt_hci_le_enh_conn_complete+0x9a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   3994e:	f000 ff71 	bl	3a834 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   39952:	f06f 0180 	mvn.w	r1, #128	; 0x80
   39956:	3010      	adds	r0, #16
   39958:	f00b ffe8 	bl	4592c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   3995c:	2000      	movs	r0, #0
   3995e:	f7ff fdc3 	bl	394e8 <find_pending_connect.part.0>
		if (!conn) {
   39962:	4605      	mov	r5, r0
   39964:	b358      	cbz	r0, 399be <bt_hci_le_enh_conn_complete+0x9a>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   39966:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   39968:	2100      	movs	r1, #0
   3996a:	f001 fb95 	bl	3b098 <bt_conn_set_state>
		bt_conn_unref(conn);
   3996e:	4628      	mov	r0, r5
}
   39970:	b008      	add	sp, #32
   39972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   39976:	f00c bbdf 	b.w	46138 <bt_conn_unref>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   3997a:	78c3      	ldrb	r3, [r0, #3]
   3997c:	2b01      	cmp	r3, #1
   3997e:	bf08      	it	eq
   39980:	4b67      	ldreq	r3, [pc, #412]	; (39b20 <bt_hci_le_enh_conn_complete+0x1fc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   39982:	f100 0704 	add.w	r7, r0, #4
   39986:	4638      	mov	r0, r7
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   39988:	bf08      	it	eq
   3998a:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   3998e:	f00b ff46 	bl	4581e <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   39992:	4639      	mov	r1, r7
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   39994:	b1b0      	cbz	r0, 399c4 <bt_hci_le_enh_conn_complete+0xa0>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   39996:	a806      	add	r0, sp, #24
   39998:	f00b ff37 	bl	4580a <bt_addr_le_copy_resolved>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   3999c:	2206      	movs	r2, #6
   3999e:	f105 0111 	add.w	r1, r5, #17
   399a2:	f10d 0011 	add.w	r0, sp, #17
   399a6:	f00b feb3 	bl	45710 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   399aa:	2301      	movs	r3, #1
   399ac:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   399b0:	78eb      	ldrb	r3, [r5, #3]
   399b2:	2b01      	cmp	r3, #1
   399b4:	d014      	beq.n	399e0 <bt_hci_le_enh_conn_complete+0xbc>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   399b6:	211f      	movs	r1, #31
   399b8:	4640      	mov	r0, r8
   399ba:	f00c f8a2 	bl	45b02 <bt_hci_disconnect>
}
   399be:	b008      	add	sp, #32
   399c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   399c4:	4620      	mov	r0, r4
   399c6:	f00c f99c 	bl	45d02 <bt_lookup_id_addr>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   399ca:	2207      	movs	r2, #7
   399cc:	4601      	mov	r1, r0
   399ce:	a806      	add	r0, sp, #24
   399d0:	f00b fe9e 	bl	45710 <memcpy>
   399d4:	2207      	movs	r2, #7
   399d6:	4639      	mov	r1, r7
   399d8:	a804      	add	r0, sp, #16
   399da:	f00b fe99 	bl	45710 <memcpy>
}
   399de:	e7e7      	b.n	399b0 <bt_hci_le_enh_conn_complete+0x8c>
   399e0:	a806      	add	r0, sp, #24
   399e2:	f7ff fd81 	bl	394e8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   399e6:	78eb      	ldrb	r3, [r5, #3]
   399e8:	2b01      	cmp	r3, #1
   399ea:	4604      	mov	r4, r0
   399ec:	d10a      	bne.n	39a04 <bt_hci_le_enh_conn_complete+0xe0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   399ee:	f000 ff21 	bl	3a834 <bt_le_adv_lookup_legacy>
   399f2:	f06f 0180 	mvn.w	r1, #128	; 0x80
   399f6:	4607      	mov	r7, r0
   399f8:	3010      	adds	r0, #16
   399fa:	f00b ff97 	bl	4592c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   399fe:	4638      	mov	r0, r7
   39a00:	f00c fafd 	bl	45ffe <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   39a04:	2c00      	cmp	r4, #0
   39a06:	d0d6      	beq.n	399b6 <bt_hci_le_enh_conn_complete+0x92>
	conn->handle = sys_le16_to_cpu(evt->handle);
   39a08:	4620      	mov	r0, r4
   39a0a:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   39a0e:	f820 3b88 	strh.w	r3, [r0], #136
	memcpy(dst, src, sizeof(*dst));
   39a12:	2207      	movs	r2, #7
   39a14:	a906      	add	r1, sp, #24
   39a16:	f00b fe7b 	bl	45710 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   39a1a:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   39a1e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   39a22:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   39a26:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   39a2a:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   39a2e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   39a32:	78eb      	ldrb	r3, [r5, #3]
   39a34:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   39a36:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39a38:	2b01      	cmp	r3, #1
	conn->err = 0U;
   39a3a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39a3c:	d117      	bne.n	39a6e <bt_hci_le_enh_conn_complete+0x14a>
   39a3e:	2207      	movs	r2, #7
   39a40:	a904      	add	r1, sp, #16
   39a42:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   39a46:	f00b fe63 	bl	45710 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   39a4a:	f000 fef3 	bl	3a834 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   39a4e:	7a21      	ldrb	r1, [r4, #8]
   39a50:	4d33      	ldr	r5, [pc, #204]	; (39b20 <bt_hci_le_enh_conn_complete+0x1fc>)
   39a52:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   39a56:	4429      	add	r1, r5
   39a58:	2207      	movs	r2, #7
   39a5a:	f104 0096 	add.w	r0, r4, #150	; 0x96
   39a5e:	f00b fe57 	bl	45710 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   39a62:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   39a66:	065d      	lsls	r5, r3, #25
   39a68:	d501      	bpl.n	39a6e <bt_hci_le_enh_conn_complete+0x14a>
			bt_le_adv_resume();
   39a6a:	f001 f8a7 	bl	3abbc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   39a6e:	2107      	movs	r1, #7
   39a70:	4620      	mov	r0, r4
   39a72:	f001 fb11 	bl	3b098 <bt_conn_set_state>
	if (is_disconnected) {
   39a76:	b11e      	cbz	r6, 39a80 <bt_hci_le_enh_conn_complete+0x15c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   39a78:	2101      	movs	r1, #1
   39a7a:	4620      	mov	r0, r4
   39a7c:	f001 fb0c 	bl	3b098 <bt_conn_set_state>
	bt_conn_connected(conn);
   39a80:	4620      	mov	r0, r4
   39a82:	f00c fba6 	bl	461d2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   39a86:	7aa3      	ldrb	r3, [r4, #10]
   39a88:	2b07      	cmp	r3, #7
   39a8a:	d142      	bne.n	39b12 <bt_hci_le_enh_conn_complete+0x1ee>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   39a8c:	f3bf 8f5b 	dmb	ish
   39a90:	6863      	ldr	r3, [r4, #4]
   39a92:	4e23      	ldr	r6, [pc, #140]	; (39b20 <bt_hci_le_enh_conn_complete+0x1fc>)
   39a94:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   39a98:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   39a9c:	d118      	bne.n	39ad0 <bt_hci_le_enh_conn_complete+0x1ac>
   39a9e:	78e3      	ldrb	r3, [r4, #3]
   39aa0:	b11b      	cbz	r3, 39aaa <bt_hci_le_enh_conn_complete+0x186>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   39aa2:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
   39aa6:	0718      	lsls	r0, r3, #28
   39aa8:	d512      	bpl.n	39ad0 <bt_hci_le_enh_conn_complete+0x1ac>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   39aaa:	2102      	movs	r1, #2
   39aac:	f242 0016 	movw	r0, #8214	; 0x2016
   39ab0:	f7ff fe6a 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   39ab4:	4605      	mov	r5, r0
   39ab6:	b158      	cbz	r0, 39ad0 <bt_hci_le_enh_conn_complete+0x1ac>
   39ab8:	2102      	movs	r1, #2
   39aba:	300c      	adds	r0, #12
   39abc:	f00d fd81 	bl	475c2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   39ac0:	8823      	ldrh	r3, [r4, #0]
   39ac2:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   39ac4:	2200      	movs	r2, #0
   39ac6:	4629      	mov	r1, r5
   39ac8:	f242 0016 	movw	r0, #8214	; 0x2016
   39acc:	f7ff fe96 	bl	397fc <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   39ad0:	f896 30d9 	ldrb.w	r3, [r6, #217]	; 0xd9
   39ad4:	07d9      	lsls	r1, r3, #31
   39ad6:	d506      	bpl.n	39ae6 <bt_hci_le_enh_conn_complete+0x1c2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   39ad8:	2100      	movs	r1, #0
   39ada:	2302      	movs	r3, #2
   39adc:	9100      	str	r1, [sp, #0]
   39ade:	461a      	mov	r2, r3
   39ae0:	4620      	mov	r0, r4
   39ae2:	f00c f847 	bl	45b74 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   39ae6:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
   39aea:	069a      	lsls	r2, r3, #26
   39aec:	d511      	bpl.n	39b12 <bt_hci_le_enh_conn_complete+0x1ee>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   39aee:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   39af2:	689b      	ldr	r3, [r3, #8]
   39af4:	079b      	lsls	r3, r3, #30
   39af6:	d50c      	bpl.n	39b12 <bt_hci_le_enh_conn_complete+0x1ee>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   39af8:	f10d 010e 	add.w	r1, sp, #14
   39afc:	a803      	add	r0, sp, #12
   39afe:	f00b ffe8 	bl	45ad2 <hci_le_read_max_data_len>
			if (!err) {
   39b02:	b930      	cbnz	r0, 39b12 <bt_hci_le_enh_conn_complete+0x1ee>
				err = bt_le_set_data_len(conn,
   39b04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   39b08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   39b0c:	4620      	mov	r0, r4
   39b0e:	f00c f813 	bl	45b38 <bt_le_set_data_len>
	bt_conn_unref(conn);
   39b12:	4620      	mov	r0, r4
   39b14:	f00c fb10 	bl	46138 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   39b18:	e751      	b.n	399be <bt_hci_le_enh_conn_complete+0x9a>
   39b1a:	bf00      	nop
   39b1c:	20003980 	.word	0x20003980
   39b20:	20000388 	.word	0x20000388

00039b24 <le_legacy_conn_complete>:
{
   39b24:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   39b26:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   39b28:	4c18      	ldr	r4, [pc, #96]	; (39b8c <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   39b2a:	780b      	ldrb	r3, [r1, #0]
{
   39b2c:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   39b2e:	2207      	movs	r2, #7
	enh.status         = evt->status;
   39b30:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   39b34:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   39b38:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   39b3c:	78cb      	ldrb	r3, [r1, #3]
   39b3e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   39b42:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   39b46:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   39b4a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   39b4e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   39b52:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   39b56:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   39b5a:	7c4b      	ldrb	r3, [r1, #17]
   39b5c:	f88d 301d 	strb.w	r3, [sp, #29]
   39b60:	3104      	adds	r1, #4
   39b62:	a801      	add	r0, sp, #4
   39b64:	f00b fdd4 	bl	45710 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   39b68:	4621      	mov	r1, r4
   39b6a:	2206      	movs	r2, #6
   39b6c:	f10d 000b 	add.w	r0, sp, #11
   39b70:	f00b fdce 	bl	45710 <memcpy>
   39b74:	2206      	movs	r2, #6
   39b76:	4621      	mov	r1, r4
   39b78:	f10d 0011 	add.w	r0, sp, #17
   39b7c:	f00b fdc8 	bl	45710 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   39b80:	4668      	mov	r0, sp
   39b82:	f7ff fecf 	bl	39924 <bt_hci_le_enh_conn_complete>
}
   39b86:	b008      	add	sp, #32
   39b88:	bd10      	pop	{r4, pc}
   39b8a:	bf00      	nop
   39b8c:	00049a75 	.word	0x00049a75

00039b90 <bt_send>:
	return bt_dev.drv->send(buf);
   39b90:	4b02      	ldr	r3, [pc, #8]	; (39b9c <bt_send+0xc>)
   39b92:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   39b96:	695b      	ldr	r3, [r3, #20]
   39b98:	4718      	bx	r3
   39b9a:	bf00      	nop
   39b9c:	20000388 	.word	0x20000388

00039ba0 <bt_hci_cmd_send>:
{
   39ba0:	b538      	push	{r3, r4, r5, lr}
   39ba2:	4605      	mov	r5, r0
	if (!buf) {
   39ba4:	460c      	mov	r4, r1
   39ba6:	b919      	cbnz	r1, 39bb0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   39ba8:	f7ff fdee 	bl	39788 <bt_hci_cmd_create>
		if (!buf) {
   39bac:	4604      	mov	r4, r0
   39bae:	b198      	cbz	r0, 39bd8 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   39bb0:	f640 4335 	movw	r3, #3125	; 0xc35
   39bb4:	429d      	cmp	r5, r3
   39bb6:	d109      	bne.n	39bcc <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   39bb8:	4620      	mov	r0, r4
   39bba:	f7ff ffe9 	bl	39b90 <bt_send>
		if (err) {
   39bbe:	4605      	mov	r5, r0
   39bc0:	b140      	cbz	r0, 39bd4 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   39bc2:	4620      	mov	r0, r4
   39bc4:	f003 fa32 	bl	3d02c <net_buf_unref>
}
   39bc8:	4628      	mov	r0, r5
   39bca:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   39bcc:	4804      	ldr	r0, [pc, #16]	; (39be0 <bt_hci_cmd_send+0x40>)
   39bce:	4621      	mov	r1, r4
   39bd0:	f00d fccb 	bl	4756a <net_buf_put>
	return 0;
   39bd4:	2500      	movs	r5, #0
   39bd6:	e7f7      	b.n	39bc8 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   39bd8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   39bdc:	e7f4      	b.n	39bc8 <bt_hci_cmd_send+0x28>
   39bde:	bf00      	nop
   39be0:	200004cc 	.word	0x200004cc

00039be4 <hci_tx_thread>:
{
   39be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   39be8:	4f3c      	ldr	r7, [pc, #240]	; (39cdc <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
   39bea:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 39ce0 <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
   39bee:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   39bf2:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   39bf4:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   39bf6:	f36f 3394 	bfc	r3, #14, #7
   39bfa:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   39bfc:	f001 f9f2 	bl	3afe4 <bt_conn_prepare_events>
   39c00:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   39c02:	4836      	ldr	r0, [pc, #216]	; (39cdc <hci_tx_thread+0xf8>)
   39c04:	f04f 32ff 	mov.w	r2, #4294967295
   39c08:	f04f 33ff 	mov.w	r3, #4294967295
   39c0c:	4629      	mov	r1, r5
   39c0e:	f007 fed1 	bl	419b4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   39c12:	b160      	cbz	r0, 39c2e <hci_tx_thread+0x4a>
   39c14:	4933      	ldr	r1, [pc, #204]	; (39ce4 <hci_tx_thread+0x100>)
   39c16:	4834      	ldr	r0, [pc, #208]	; (39ce8 <hci_tx_thread+0x104>)
   39c18:	f640 23c8 	movw	r3, #2760	; 0xac8
   39c1c:	4642      	mov	r2, r8
   39c1e:	f00b fa78 	bl	45112 <assert_print>
   39c22:	4040      	eors	r0, r0
   39c24:	f380 8811 	msr	BASEPRI, r0
   39c28:	f04f 0003 	mov.w	r0, #3
   39c2c:	df02      	svc	2
{
   39c2e:	4e2b      	ldr	r6, [pc, #172]	; (39cdc <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
   39c30:	b915      	cbnz	r5, 39c38 <hci_tx_thread+0x54>
	z_impl_k_yield();
   39c32:	f007 fbaf 	bl	41394 <z_impl_k_yield>
	while (1) {
   39c36:	e7dc      	b.n	39bf2 <hci_tx_thread+0xe>
		switch (ev->state) {
   39c38:	68f3      	ldr	r3, [r6, #12]
   39c3a:	f3c3 3386 	ubfx	r3, r3, #14, #7
   39c3e:	2b04      	cmp	r3, #4
   39c40:	d142      	bne.n	39cc8 <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   39c42:	7b33      	ldrb	r3, [r6, #12]
   39c44:	2b00      	cmp	r3, #0
   39c46:	d142      	bne.n	39cce <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   39c48:	4828      	ldr	r0, [pc, #160]	; (39cec <hci_tx_thread+0x108>)
   39c4a:	2200      	movs	r2, #0
   39c4c:	2300      	movs	r3, #0
   39c4e:	f00d fc5d 	bl	4750c <net_buf_get>
	BT_ASSERT(buf);
   39c52:	4604      	mov	r4, r0
   39c54:	b960      	cbnz	r0, 39c70 <hci_tx_thread+0x8c>
   39c56:	4926      	ldr	r1, [pc, #152]	; (39cf0 <hci_tx_thread+0x10c>)
   39c58:	4823      	ldr	r0, [pc, #140]	; (39ce8 <hci_tx_thread+0x104>)
   39c5a:	f640 235a 	movw	r3, #2650	; 0xa5a
   39c5e:	4642      	mov	r2, r8
   39c60:	f00b fa57 	bl	45112 <assert_print>
   39c64:	4040      	eors	r0, r0
   39c66:	f380 8811 	msr	BASEPRI, r0
   39c6a:	f04f 0003 	mov.w	r0, #3
   39c6e:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   39c70:	f8df a080 	ldr.w	sl, [pc, #128]	; 39cf4 <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
   39c74:	4820      	ldr	r0, [pc, #128]	; (39cf8 <hci_tx_thread+0x114>)
   39c76:	f04f 32ff 	mov.w	r2, #4294967295
   39c7a:	f04f 33ff 	mov.w	r3, #4294967295
   39c7e:	f006 ff51 	bl	40b24 <z_impl_k_sem_take>
   39c82:	f8da 0138 	ldr.w	r0, [sl, #312]	; 0x138
   39c86:	b120      	cbz	r0, 39c92 <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
   39c88:	f003 f9d0 	bl	3d02c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   39c8c:	2300      	movs	r3, #0
   39c8e:	f8ca 3138 	str.w	r3, [sl, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   39c92:	4620      	mov	r0, r4
   39c94:	f00d fc6b 	bl	4756e <net_buf_ref>
   39c98:	f8ca 0138 	str.w	r0, [sl, #312]	; 0x138
	err = bt_send(buf);
   39c9c:	4620      	mov	r0, r4
   39c9e:	f7ff ff77 	bl	39b90 <bt_send>
	if (err) {
   39ca2:	b188      	cbz	r0, 39cc8 <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
   39ca4:	4814      	ldr	r0, [pc, #80]	; (39cf8 <hci_tx_thread+0x114>)
   39ca6:	f006 ff17 	bl	40ad8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   39caa:	4620      	mov	r0, r4
   39cac:	f003 f904 	bl	3ceb8 <net_buf_id>
   39cb0:	4b12      	ldr	r3, [pc, #72]	; (39cfc <hci_tx_thread+0x118>)
   39cb2:	220c      	movs	r2, #12
   39cb4:	fb02 3000 	mla	r0, r2, r0, r3
   39cb8:	211f      	movs	r1, #31
   39cba:	8840      	ldrh	r0, [r0, #2]
   39cbc:	4622      	mov	r2, r4
   39cbe:	f7ff fcc5 	bl	3964c <hci_cmd_done>
		net_buf_unref(buf);
   39cc2:	4620      	mov	r0, r4
   39cc4:	f003 f9b2 	bl	3d02c <net_buf_unref>
	for (; count; ev++, count--) {
   39cc8:	3614      	adds	r6, #20
   39cca:	3d01      	subs	r5, #1
   39ccc:	e7b0      	b.n	39c30 <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   39cce:	2b01      	cmp	r3, #1
   39cd0:	d1fa      	bne.n	39cc8 <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
   39cd2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   39cd4:	3838      	subs	r0, #56	; 0x38
   39cd6:	f001 fc6f 	bl	3b5b8 <bt_conn_process_tx>
   39cda:	e7f5      	b.n	39cc8 <hci_tx_thread+0xe4>
   39cdc:	200006d4 	.word	0x200006d4
   39ce0:	00049a9d 	.word	0x00049a9d
   39ce4:	00049b35 	.word	0x00049b35
   39ce8:	00049aea 	.word	0x00049aea
   39cec:	200004cc 	.word	0x200004cc
   39cf0:	00049c2c 	.word	0x00049c2c
   39cf4:	20000388 	.word	0x20000388
   39cf8:	200004a8 	.word	0x200004a8
   39cfc:	20002bb4 	.word	0x20002bb4

00039d00 <hci_event_prio>:
{
   39d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39d04:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   39d06:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   39d0a:	4630      	mov	r0, r6
   39d0c:	f00d fc90 	bl	47630 <net_buf_simple_headroom>
	state->len = buf->len;
   39d10:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   39d14:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   39d18:	4605      	mov	r5, r0
   39d1a:	d80c      	bhi.n	39d36 <hci_event_prio+0x36>
   39d1c:	4a1c      	ldr	r2, [pc, #112]	; (39d90 <hci_event_prio+0x90>)
   39d1e:	491d      	ldr	r1, [pc, #116]	; (39d94 <hci_event_prio+0x94>)
   39d20:	481d      	ldr	r0, [pc, #116]	; (39d98 <hci_event_prio+0x98>)
   39d22:	f640 636f 	movw	r3, #3695	; 0xe6f
   39d26:	f00b f9f4 	bl	45112 <assert_print>
   39d2a:	4040      	eors	r0, r0
   39d2c:	f380 8811 	msr	BASEPRI, r0
   39d30:	f04f 0003 	mov.w	r0, #3
   39d34:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   39d36:	4630      	mov	r0, r6
   39d38:	2102      	movs	r1, #2
   39d3a:	f00d fc69 	bl	47610 <net_buf_simple_pull_mem>
   39d3e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   39d40:	7800      	ldrb	r0, [r0, #0]
   39d42:	f00b fd70 	bl	45826 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   39d46:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   39d48:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   39d4a:	d40c      	bmi.n	39d66 <hci_event_prio+0x66>
   39d4c:	4a10      	ldr	r2, [pc, #64]	; (39d90 <hci_event_prio+0x90>)
   39d4e:	4913      	ldr	r1, [pc, #76]	; (39d9c <hci_event_prio+0x9c>)
   39d50:	4811      	ldr	r0, [pc, #68]	; (39d98 <hci_event_prio+0x98>)
   39d52:	f640 6373 	movw	r3, #3699	; 0xe73
   39d56:	f00b f9dc 	bl	45112 <assert_print>
   39d5a:	4040      	eors	r0, r0
   39d5c:	f380 8811 	msr	BASEPRI, r0
   39d60:	f04f 0003 	mov.w	r0, #3
   39d64:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   39d66:	2305      	movs	r3, #5
   39d68:	4a0d      	ldr	r2, [pc, #52]	; (39da0 <hci_event_prio+0xa0>)
   39d6a:	7838      	ldrb	r0, [r7, #0]
   39d6c:	4621      	mov	r1, r4
   39d6e:	f00b fdc6 	bl	458fe <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   39d72:	07b3      	lsls	r3, r6, #30
   39d74:	d507      	bpl.n	39d86 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   39d76:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   39d78:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   39d7c:	fa13 f585 	uxtah	r5, r3, r5
   39d80:	60e5      	str	r5, [r4, #12]
}
   39d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   39d86:	4620      	mov	r0, r4
}
   39d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   39d8c:	f003 b94e 	b.w	3d02c <net_buf_unref>
   39d90:	00049a9d 	.word	0x00049a9d
   39d94:	00049ad1 	.word	0x00049ad1
   39d98:	00049aea 	.word	0x00049aea
   39d9c:	00049b6a 	.word	0x00049b6a
   39da0:	000491c0 	.word	0x000491c0

00039da4 <bt_recv>:
{
   39da4:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   39da6:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   39da8:	2b01      	cmp	r3, #1
{
   39daa:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   39dac:	d00a      	beq.n	39dc4 <bt_recv+0x20>
   39dae:	2b03      	cmp	r3, #3
   39db0:	d116      	bne.n	39de0 <bt_recv+0x3c>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   39db2:	4621      	mov	r1, r4
   39db4:	480d      	ldr	r0, [pc, #52]	; (39dec <bt_recv+0x48>)
   39db6:	f00d fbab 	bl	47510 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   39dba:	490d      	ldr	r1, [pc, #52]	; (39df0 <bt_recv+0x4c>)
   39dbc:	480d      	ldr	r0, [pc, #52]	; (39df4 <bt_recv+0x50>)
   39dbe:	f00e fb7f 	bl	484c0 <k_work_submit_to_queue>
}
   39dc2:	e00b      	b.n	39ddc <bt_recv+0x38>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   39dc4:	68c3      	ldr	r3, [r0, #12]
   39dc6:	7818      	ldrb	r0, [r3, #0]
   39dc8:	f00b fd2d 	bl	45826 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   39dcc:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   39dce:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   39dd0:	d502      	bpl.n	39dd8 <bt_recv+0x34>
			hci_event_prio(buf);
   39dd2:	4620      	mov	r0, r4
   39dd4:	f7ff ff94 	bl	39d00 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   39dd8:	07ab      	lsls	r3, r5, #30
   39dda:	d4ea      	bmi.n	39db2 <bt_recv+0xe>
		return 0;
   39ddc:	2000      	movs	r0, #0
}
   39dde:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   39de0:	f003 f924 	bl	3d02c <net_buf_unref>
		return -EINVAL;
   39de4:	f06f 0015 	mvn.w	r0, #21
   39de8:	e7f9      	b.n	39dde <bt_recv+0x3a>
   39dea:	bf00      	nop
   39dec:	200004c4 	.word	0x200004c4
   39df0:	20000710 	.word	0x20000710
   39df4:	200018e8 	.word	0x200018e8

00039df8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   39df8:	4a08      	ldr	r2, [pc, #32]	; (39e1c <bt_hci_driver_register+0x24>)
{
   39dfa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   39dfc:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   39e00:	b930      	cbnz	r0, 39e10 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   39e02:	68d9      	ldr	r1, [r3, #12]
   39e04:	b139      	cbz	r1, 39e16 <bt_hci_driver_register+0x1e>
   39e06:	6959      	ldr	r1, [r3, #20]
   39e08:	b129      	cbz	r1, 39e16 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   39e0a:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   39e0e:	4770      	bx	lr
		return -EALREADY;
   39e10:	f06f 0077 	mvn.w	r0, #119	; 0x77
   39e14:	4770      	bx	lr
		return -EINVAL;
   39e16:	f06f 0015 	mvn.w	r0, #21
}
   39e1a:	4770      	bx	lr
   39e1c:	20000388 	.word	0x20000388

00039e20 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   39e20:	4801      	ldr	r0, [pc, #4]	; (39e28 <bt_finalize_init+0x8>)
   39e22:	2104      	movs	r1, #4
   39e24:	f00b bd3e 	b.w	458a4 <atomic_or>
   39e28:	2000045c 	.word	0x2000045c

00039e2c <bt_init>:
{
   39e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   39e2e:	4db0      	ldr	r5, [pc, #704]	; (3a0f0 <bt_init+0x2c4>)
   39e30:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   39e34:	6899      	ldr	r1, [r3, #8]
   39e36:	f011 0101 	ands.w	r1, r1, #1
   39e3a:	d121      	bne.n	39e80 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   39e3c:	aa01      	add	r2, sp, #4
   39e3e:	f640 4003 	movw	r0, #3075	; 0xc03
   39e42:	f7ff fcdb 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   39e46:	4604      	mov	r4, r0
   39e48:	2800      	cmp	r0, #0
   39e4a:	d161      	bne.n	39f10 <bt_init+0xe4>
		hci_reset_complete(rsp);
   39e4c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   39e4e:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   39e50:	781b      	ldrb	r3, [r3, #0]
   39e52:	b99b      	cbnz	r3, 39e7c <bt_init+0x50>
   39e54:	f3bf 8f5b 	dmb	ish
   39e58:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   39e5c:	f3bf 8f5b 	dmb	ish
   39e60:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   39e64:	f003 0309 	and.w	r3, r3, #9
   39e68:	f3bf 8f5b 	dmb	ish
   39e6c:	e852 1f00 	ldrex	r1, [r2]
   39e70:	e842 3400 	strex	r4, r3, [r2]
   39e74:	2c00      	cmp	r4, #0
   39e76:	d1f9      	bne.n	39e6c <bt_init+0x40>
   39e78:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   39e7c:	f003 f8d6 	bl	3d02c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   39e80:	aa01      	add	r2, sp, #4
   39e82:	2100      	movs	r1, #0
   39e84:	f241 0003 	movw	r0, #4099	; 0x1003
   39e88:	f7ff fcb8 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   39e8c:	4604      	mov	r4, r0
   39e8e:	2800      	cmp	r0, #0
   39e90:	d13e      	bne.n	39f10 <bt_init+0xe4>
	read_local_features_complete(rsp);
   39e92:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   39e94:	4897      	ldr	r0, [pc, #604]	; (3a0f4 <bt_init+0x2c8>)
   39e96:	68f1      	ldr	r1, [r6, #12]
   39e98:	2208      	movs	r2, #8
   39e9a:	3101      	adds	r1, #1
   39e9c:	f00b fc38 	bl	45710 <memcpy>
	net_buf_unref(rsp);
   39ea0:	4630      	mov	r0, r6
   39ea2:	f003 f8c3 	bl	3d02c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   39ea6:	4621      	mov	r1, r4
   39ea8:	aa01      	add	r2, sp, #4
   39eaa:	f241 0001 	movw	r0, #4097	; 0x1001
   39eae:	f7ff fca5 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   39eb2:	4604      	mov	r4, r0
   39eb4:	bb60      	cbnz	r0, 39f10 <bt_init+0xe4>
	read_local_ver_complete(rsp);
   39eb6:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   39eb8:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   39eba:	785a      	ldrb	r2, [r3, #1]
   39ebc:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   39ec0:	885a      	ldrh	r2, [r3, #2]
   39ec2:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   39ec6:	791a      	ldrb	r2, [r3, #4]
   39ec8:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   39ecc:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   39ed0:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   39ed4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   39ed8:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   39edc:	f003 f8a6 	bl	3d02c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   39ee0:	4621      	mov	r1, r4
   39ee2:	aa01      	add	r2, sp, #4
   39ee4:	f241 0002 	movw	r0, #4098	; 0x1002
   39ee8:	f7ff fc88 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   39eec:	4604      	mov	r4, r0
   39eee:	b978      	cbnz	r0, 39f10 <bt_init+0xe4>
	read_supported_commands_complete(rsp);
   39ef0:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   39ef2:	4881      	ldr	r0, [pc, #516]	; (3a0f8 <bt_init+0x2cc>)
   39ef4:	68f1      	ldr	r1, [r6, #12]
   39ef6:	2240      	movs	r2, #64	; 0x40
   39ef8:	3101      	adds	r1, #1
   39efa:	f00b fc09 	bl	45710 <memcpy>
	net_buf_unref(rsp);
   39efe:	4630      	mov	r0, r6
   39f00:	f003 f894 	bl	3d02c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   39f04:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   39f08:	065e      	lsls	r6, r3, #25
   39f0a:	d404      	bmi.n	39f16 <bt_init+0xea>
		return -ENODEV;
   39f0c:	f06f 0412 	mvn.w	r4, #18
}
   39f10:	4620      	mov	r0, r4
   39f12:	b003      	add	sp, #12
   39f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   39f16:	4621      	mov	r1, r4
   39f18:	aa01      	add	r2, sp, #4
   39f1a:	f242 0003 	movw	r0, #8195	; 0x2003
   39f1e:	f7ff fc6d 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   39f22:	4604      	mov	r4, r0
   39f24:	2800      	cmp	r0, #0
   39f26:	d1f3      	bne.n	39f10 <bt_init+0xe4>
	read_le_features_complete(rsp);
   39f28:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   39f2a:	4874      	ldr	r0, [pc, #464]	; (3a0fc <bt_init+0x2d0>)
   39f2c:	68f1      	ldr	r1, [r6, #12]
   39f2e:	2208      	movs	r2, #8
   39f30:	3101      	adds	r1, #1
   39f32:	f00b fbed 	bl	45710 <memcpy>
	net_buf_unref(rsp);
   39f36:	4630      	mov	r0, r6
   39f38:	f003 f878 	bl	3d02c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   39f3c:	4621      	mov	r1, r4
   39f3e:	aa01      	add	r2, sp, #4
   39f40:	f242 0002 	movw	r0, #8194	; 0x2002
   39f44:	f7ff fc5a 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   39f48:	4604      	mov	r4, r0
   39f4a:	2800      	cmp	r0, #0
   39f4c:	d1e0      	bne.n	39f10 <bt_init+0xe4>
		le_read_buffer_size_complete(rsp);
   39f4e:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   39f50:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   39f52:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   39f56:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   39f58:	b141      	cbz	r1, 39f6c <bt_init+0x140>
   39f5a:	78d9      	ldrb	r1, [r3, #3]
   39f5c:	b131      	cbz	r1, 39f6c <bt_init+0x140>
	bt_dev.le.acl_mtu = acl_mtu;
   39f5e:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   39f62:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   39f64:	4866      	ldr	r0, [pc, #408]	; (3a100 <bt_init+0x2d4>)
   39f66:	4611      	mov	r1, r2
   39f68:	f00e f9fa 	bl	48360 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   39f6c:	4620      	mov	r0, r4
   39f6e:	f003 f85d 	bl	3d02c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   39f72:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   39f76:	f016 0620 	ands.w	r6, r6, #32
   39f7a:	d118      	bne.n	39fae <bt_init+0x182>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   39f7c:	2102      	movs	r1, #2
   39f7e:	f640 406d 	movw	r0, #3181	; 0xc6d
   39f82:	f7ff fc01 	bl	39788 <bt_hci_cmd_create>
		if (!buf) {
   39f86:	4604      	mov	r4, r0
   39f88:	2800      	cmp	r0, #0
   39f8a:	f000 80a9 	beq.w	3a0e0 <bt_init+0x2b4>
	return net_buf_simple_add(&buf->b, len);
   39f8e:	2102      	movs	r1, #2
   39f90:	300c      	adds	r0, #12
   39f92:	f00d fb16 	bl	475c2 <net_buf_simple_add>
		cp_le->le = 0x01;
   39f96:	2301      	movs	r3, #1
   39f98:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   39f9a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   39f9c:	4621      	mov	r1, r4
   39f9e:	4632      	mov	r2, r6
   39fa0:	f640 406d 	movw	r0, #3181	; 0xc6d
   39fa4:	f7ff fc2a 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   39fa8:	4604      	mov	r4, r0
   39faa:	2800      	cmp	r0, #0
   39fac:	d1b0      	bne.n	39f10 <bt_init+0xe4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   39fae:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   39fb2:	071c      	lsls	r4, r3, #28
   39fb4:	d512      	bpl.n	39fdc <bt_init+0x1b0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   39fb6:	aa01      	add	r2, sp, #4
   39fb8:	2100      	movs	r1, #0
   39fba:	f242 001c 	movw	r0, #8220	; 0x201c
   39fbe:	f7ff fc1d 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   39fc2:	4604      	mov	r4, r0
   39fc4:	2800      	cmp	r0, #0
   39fc6:	d1a3      	bne.n	39f10 <bt_init+0xe4>
		le_read_supp_states_complete(rsp);
   39fc8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   39fca:	68c3      	ldr	r3, [r0, #12]
   39fcc:	f8d3 2001 	ldr.w	r2, [r3, #1]
   39fd0:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   39fd4:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   39fd8:	f003 f828 	bl	3d02c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   39fdc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   39fe0:	0698      	lsls	r0, r3, #26
   39fe2:	d523      	bpl.n	3a02c <bt_init+0x200>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   39fe4:	f10d 0102 	add.w	r1, sp, #2
   39fe8:	4668      	mov	r0, sp
   39fea:	f00b fd72 	bl	45ad2 <hci_le_read_max_data_len>
		if (err) {
   39fee:	4604      	mov	r4, r0
   39ff0:	2800      	cmp	r0, #0
   39ff2:	d18d      	bne.n	39f10 <bt_init+0xe4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   39ff4:	2104      	movs	r1, #4
   39ff6:	f242 0024 	movw	r0, #8228	; 0x2024
   39ffa:	f7ff fbc5 	bl	39788 <bt_hci_cmd_create>
		if (!buf) {
   39ffe:	4606      	mov	r6, r0
   3a000:	2800      	cmp	r0, #0
   3a002:	d06d      	beq.n	3a0e0 <bt_init+0x2b4>
   3a004:	2104      	movs	r1, #4
   3a006:	300c      	adds	r0, #12
   3a008:	f00d fadb 	bl	475c2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   3a00c:	f8bd 3000 	ldrh.w	r3, [sp]
   3a010:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   3a012:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3a016:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   3a018:	4622      	mov	r2, r4
   3a01a:	4631      	mov	r1, r6
   3a01c:	f242 0024 	movw	r0, #8228	; 0x2024
   3a020:	f7ff fbec 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   3a024:	4604      	mov	r4, r0
   3a026:	2800      	cmp	r0, #0
   3a028:	f47f af72 	bne.w	39f10 <bt_init+0xe4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   3a02c:	2108      	movs	r1, #8
   3a02e:	f242 0001 	movw	r0, #8193	; 0x2001
   3a032:	f7ff fba9 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   3a036:	4604      	mov	r4, r0
   3a038:	2800      	cmp	r0, #0
   3a03a:	d051      	beq.n	3a0e0 <bt_init+0x2b4>
   3a03c:	2108      	movs	r1, #8
   3a03e:	300c      	adds	r0, #12
   3a040:	f00d fabf 	bl	475c2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   3a044:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   3a048:	f012 0f02 	tst.w	r2, #2
   3a04c:	bf14      	ite	ne
   3a04e:	232f      	movne	r3, #47	; 0x2f
   3a050:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   3a052:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   3a054:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   3a058:	bf48      	it	mi
   3a05a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   3a05e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   3a062:	bf18      	it	ne
   3a064:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   3a068:	2200      	movs	r2, #0
   3a06a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   3a06c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3a070:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   3a072:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   3a074:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   3a076:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   3a078:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   3a07a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   3a07c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   3a07e:	4621      	mov	r1, r4
   3a080:	f242 0001 	movw	r0, #8193	; 0x2001
   3a084:	f7ff fbba 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a088:	4604      	mov	r4, r0
   3a08a:	2800      	cmp	r0, #0
   3a08c:	f47f af40 	bne.w	39f10 <bt_init+0xe4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   3a090:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   3a094:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   3a098:	069a      	lsls	r2, r3, #26
   3a09a:	d424      	bmi.n	3a0e6 <bt_init+0x2ba>
	if (bt_dev.le.acl_mtu) {
   3a09c:	b9c9      	cbnz	r1, 3a0d2 <bt_init+0x2a6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   3a09e:	aa01      	add	r2, sp, #4
   3a0a0:	f241 0005 	movw	r0, #4101	; 0x1005
   3a0a4:	f7ff fbaa 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a0a8:	4604      	mov	r4, r0
   3a0aa:	2800      	cmp	r0, #0
   3a0ac:	f47f af30 	bne.w	39f10 <bt_init+0xe4>
	if (bt_dev.le.acl_mtu) {
   3a0b0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   3a0b4:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   3a0b6:	b94b      	cbnz	r3, 3a0cc <bt_init+0x2a0>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   3a0b8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   3a0ba:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   3a0be:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   3a0c2:	889a      	ldrh	r2, [r3, #4]
   3a0c4:	480e      	ldr	r0, [pc, #56]	; (3a100 <bt_init+0x2d4>)
   3a0c6:	4611      	mov	r1, r2
   3a0c8:	f00e f94a 	bl	48360 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   3a0cc:	4620      	mov	r0, r4
   3a0ce:	f002 ffad 	bl	3d02c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   3a0d2:	2108      	movs	r1, #8
   3a0d4:	f640 4001 	movw	r0, #3073	; 0xc01
   3a0d8:	f7ff fb56 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   3a0dc:	4604      	mov	r4, r0
   3a0de:	b988      	cbnz	r0, 3a104 <bt_init+0x2d8>
		return -ENOBUFS;
   3a0e0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   3a0e4:	e714      	b.n	39f10 <bt_init+0xe4>
	else if (!bt_dev.le.acl_mtu) {
   3a0e6:	2900      	cmp	r1, #0
   3a0e8:	d1f3      	bne.n	3a0d2 <bt_init+0x2a6>
		return -EIO;
   3a0ea:	f06f 0404 	mvn.w	r4, #4
   3a0ee:	e70f      	b.n	39f10 <bt_init+0xe4>
   3a0f0:	20000388 	.word	0x20000388
   3a0f4:	20000400 	.word	0x20000400
   3a0f8:	20000408 	.word	0x20000408
   3a0fc:	20000460 	.word	0x20000460
   3a100:	20000490 	.word	0x20000490
   3a104:	2108      	movs	r1, #8
   3a106:	300c      	adds	r0, #12
   3a108:	f00d fa5b 	bl	475c2 <net_buf_simple_add>
	dst[0] = val;
   3a10c:	2310      	movs	r3, #16
   3a10e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   3a110:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   3a112:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   3a114:	7043      	strb	r3, [r0, #1]
   3a116:	2602      	movs	r6, #2
   3a118:	2320      	movs	r3, #32
	dst[0] = val;
   3a11a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   3a11c:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   3a11e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   3a120:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   3a122:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   3a124:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   3a126:	4621      	mov	r1, r4
   3a128:	f640 4001 	movw	r0, #3073	; 0xc01
   3a12c:	f7ff fb66 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a130:	4604      	mov	r4, r0
   3a132:	2800      	cmp	r0, #0
   3a134:	f47f aeec 	bne.w	39f10 <bt_init+0xe4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   3a138:	4601      	mov	r1, r0
   3a13a:	aa01      	add	r2, sp, #4
   3a13c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   3a140:	f7ff fb5c 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a144:	4604      	mov	r4, r0
   3a146:	bb48      	cbnz	r0, 3a19c <bt_init+0x370>
	net_buf_unref(rsp);
   3a148:	9801      	ldr	r0, [sp, #4]
   3a14a:	f002 ff6f 	bl	3d02c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   3a14e:	4621      	mov	r1, r4
   3a150:	aa01      	add	r2, sp, #4
   3a152:	f64f 4002 	movw	r0, #64514	; 0xfc02
   3a156:	f7ff fb51 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a15a:	4604      	mov	r4, r0
   3a15c:	b9f0      	cbnz	r0, 3a19c <bt_init+0x370>
	rp.cmds = (void *)rsp->data;
   3a15e:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   3a160:	4816      	ldr	r0, [pc, #88]	; (3a1bc <bt_init+0x390>)
   3a162:	68f9      	ldr	r1, [r7, #12]
   3a164:	4632      	mov	r2, r6
   3a166:	3101      	adds	r1, #1
   3a168:	f00b fad2 	bl	45710 <memcpy>
	net_buf_unref(rsp);
   3a16c:	4638      	mov	r0, r7
   3a16e:	f002 ff5d 	bl	3d02c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   3a172:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   3a176:	075b      	lsls	r3, r3, #29
   3a178:	d510      	bpl.n	3a19c <bt_init+0x370>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   3a17a:	aa01      	add	r2, sp, #4
   3a17c:	4621      	mov	r1, r4
   3a17e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   3a182:	f7ff fb3b 	bl	397fc <bt_hci_cmd_send_sync>
		if (err) {
   3a186:	b948      	cbnz	r0, 3a19c <bt_init+0x370>
		rp.feat = (void *)rsp->data;
   3a188:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   3a18a:	480d      	ldr	r0, [pc, #52]	; (3a1c0 <bt_init+0x394>)
   3a18c:	68e1      	ldr	r1, [r4, #12]
   3a18e:	2201      	movs	r2, #1
   3a190:	4411      	add	r1, r2
   3a192:	f00b fabd 	bl	45710 <memcpy>
		net_buf_unref(rsp);
   3a196:	4620      	mov	r0, r4
   3a198:	f002 ff48 	bl	3d02c <net_buf_unref>
	err = bt_id_init();
   3a19c:	f000 faac 	bl	3a6f8 <bt_id_init>
	if (err) {
   3a1a0:	4604      	mov	r4, r0
   3a1a2:	2800      	cmp	r0, #0
   3a1a4:	f47f aeb4 	bne.w	39f10 <bt_init+0xe4>
		err = bt_conn_init();
   3a1a8:	f001 fa94 	bl	3b6d4 <bt_conn_init>
		if (err) {
   3a1ac:	4604      	mov	r4, r0
   3a1ae:	2800      	cmp	r0, #0
   3a1b0:	f47f aeae 	bne.w	39f10 <bt_init+0xe4>
	bt_finalize_init();
   3a1b4:	f7ff fe34 	bl	39e20 <bt_finalize_init>
	return 0;
   3a1b8:	e6aa      	b.n	39f10 <bt_init+0xe4>
   3a1ba:	bf00      	nop
   3a1bc:	20000449 	.word	0x20000449
   3a1c0:	20000448 	.word	0x20000448

0003a1c4 <init_work>:
{
   3a1c4:	b510      	push	{r4, lr}
	err = bt_init();
   3a1c6:	f7ff fe31 	bl	39e2c <bt_init>
	if (ready_cb) {
   3a1ca:	4b03      	ldr	r3, [pc, #12]	; (3a1d8 <init_work+0x14>)
   3a1cc:	681b      	ldr	r3, [r3, #0]
   3a1ce:	b113      	cbz	r3, 3a1d6 <init_work+0x12>
}
   3a1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   3a1d4:	4718      	bx	r3
}
   3a1d6:	bd10      	pop	{r4, pc}
   3a1d8:	20002bcc 	.word	0x20002bcc

0003a1dc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   3a1dc:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   3a1de:	4d2e      	ldr	r5, [pc, #184]	; (3a298 <bt_enable+0xbc>)
   3a1e0:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
{
   3a1e4:	b088      	sub	sp, #32
   3a1e6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   3a1e8:	2b00      	cmp	r3, #0
   3a1ea:	d04f      	beq.n	3a28c <bt_enable+0xb0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a1ec:	f06f 0102 	mvn.w	r1, #2
   3a1f0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   3a1f4:	f00b fb9a 	bl	4592c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   3a1f8:	2101      	movs	r1, #1
   3a1fa:	f00b fb53 	bl	458a4 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   3a1fe:	ea10 0401 	ands.w	r4, r0, r1
   3a202:	d146      	bne.n	3a292 <bt_enable+0xb6>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   3a204:	4b25      	ldr	r3, [pc, #148]	; (3a29c <bt_enable+0xc0>)
   3a206:	601e      	str	r6, [r3, #0]
   3a208:	460a      	mov	r2, r1
   3a20a:	f505 7090 	add.w	r0, r5, #288	; 0x120
   3a20e:	f00e f8a7 	bl	48360 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   3a212:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   3a216:	f00e f87e 	bl	48316 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3a21a:	2200      	movs	r2, #0
   3a21c:	2300      	movs	r3, #0
   3a21e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3a222:	f06f 0308 	mvn.w	r3, #8
   3a226:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3a22a:	e9cd 4400 	strd	r4, r4, [sp]
   3a22e:	4b1c      	ldr	r3, [pc, #112]	; (3a2a0 <bt_enable+0xc4>)
   3a230:	491c      	ldr	r1, [pc, #112]	; (3a2a4 <bt_enable+0xc8>)
   3a232:	9404      	str	r4, [sp, #16]
   3a234:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   3a238:	481b      	ldr	r0, [pc, #108]	; (3a2a8 <bt_enable+0xcc>)
   3a23a:	f006 fabd 	bl	407b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   3a23e:	491b      	ldr	r1, [pc, #108]	; (3a2ac <bt_enable+0xd0>)
   3a240:	4819      	ldr	r0, [pc, #100]	; (3a2a8 <bt_enable+0xcc>)
   3a242:	f00d ffda 	bl	481fa <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
   3a246:	481a      	ldr	r0, [pc, #104]	; (3a2b0 <bt_enable+0xd4>)
   3a248:	f00e f94b 	bl	484e2 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   3a24c:	4919      	ldr	r1, [pc, #100]	; (3a2b4 <bt_enable+0xd8>)
   3a24e:	4818      	ldr	r0, [pc, #96]	; (3a2b0 <bt_enable+0xd4>)
   3a250:	9400      	str	r4, [sp, #0]
   3a252:	f06f 0307 	mvn.w	r3, #7
   3a256:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3a25a:	f006 fdbf 	bl	40ddc <k_work_queue_start>
   3a25e:	4916      	ldr	r1, [pc, #88]	; (3a2b8 <bt_enable+0xdc>)
   3a260:	4813      	ldr	r0, [pc, #76]	; (3a2b0 <bt_enable+0xd4>)
   3a262:	f00d ffca 	bl	481fa <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   3a266:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   3a26a:	68db      	ldr	r3, [r3, #12]
   3a26c:	4798      	blx	r3
	if (err) {
   3a26e:	4604      	mov	r4, r0
   3a270:	b948      	cbnz	r0, 3a286 <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   3a272:	b926      	cbnz	r6, 3a27e <bt_enable+0xa2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   3a274:	b008      	add	sp, #32
   3a276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   3a27a:	f7ff bdd7 	b.w	39e2c <bt_init>
	k_work_submit(&bt_dev.init);
   3a27e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   3a282:	f006 fda5 	bl	40dd0 <k_work_submit>
}
   3a286:	4620      	mov	r0, r4
   3a288:	b008      	add	sp, #32
   3a28a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   3a28c:	f06f 0412 	mvn.w	r4, #18
   3a290:	e7f9      	b.n	3a286 <bt_enable+0xaa>
		return -EALREADY;
   3a292:	f06f 0477 	mvn.w	r4, #119	; 0x77
   3a296:	e7f6      	b.n	3a286 <bt_enable+0xaa>
   3a298:	20000388 	.word	0x20000388
   3a29c:	20002bcc 	.word	0x20002bcc
   3a2a0:	00039be5 	.word	0x00039be5
   3a2a4:	20004040 	.word	0x20004040
   3a2a8:	20001858 	.word	0x20001858
   3a2ac:	00049b83 	.word	0x00049b83
   3a2b0:	200018e8 	.word	0x200018e8
   3a2b4:	20004680 	.word	0x20004680
   3a2b8:	00049b89 	.word	0x00049b89

0003a2bc <bt_disable>:

int bt_disable(void)
{
   3a2bc:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bt_dev.drv) {
   3a2be:	4d26      	ldr	r5, [pc, #152]	; (3a358 <bt_disable+0x9c>)
   3a2c0:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   3a2c4:	2b00      	cmp	r3, #0
   3a2c6:	d03e      	beq.n	3a346 <bt_disable+0x8a>
		LOG_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (!bt_dev.drv->close) {
   3a2c8:	691b      	ldr	r3, [r3, #16]
   3a2ca:	2b00      	cmp	r3, #0
   3a2cc:	d03e      	beq.n	3a34c <bt_disable+0x90>
   3a2ce:	2102      	movs	r1, #2
   3a2d0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   3a2d4:	f00b fae6 	bl	458a4 <atomic_or>
		return -ENOTSUP;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_DISABLE)) {
   3a2d8:	0783      	lsls	r3, r0, #30
   3a2da:	d43a      	bmi.n	3a352 <bt_disable+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a2dc:	f06f 0104 	mvn.w	r1, #4
   3a2e0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   3a2e4:	f00b fb22 	bl	4592c <atomic_and.isra.0>
	}

	/* Clear BT_DEV_READY before disabling HCI link */
	atomic_clear_bit(bt_dev.flags, BT_DEV_READY);

	err = bt_dev.drv->close();
   3a2e8:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
   3a2ec:	691b      	ldr	r3, [r3, #16]
   3a2ee:	4798      	blx	r3
	if (err) {
   3a2f0:	4604      	mov	r4, r0
   3a2f2:	b130      	cbz	r0, 3a302 <bt_disable+0x46>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3a2f4:	2104      	movs	r1, #4
   3a2f6:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   3a2fa:	f00b fad3 	bl	458a4 <atomic_or>
	 * completed.
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_ENABLE);

	return 0;
}
   3a2fe:	4620      	mov	r0, r4
   3a300:	bd38      	pop	{r3, r4, r5, pc}
	memset(bt_dev.supported_commands, 0x00, sizeof(bt_dev.supported_commands));
   3a302:	4601      	mov	r1, r0
   3a304:	2240      	movs	r2, #64	; 0x40
   3a306:	f105 0080 	add.w	r0, r5, #128	; 0x80
   3a30a:	f00b fa0c 	bl	45726 <memset>
	memcpy(dst, src, sizeof(*dst));
   3a30e:	4913      	ldr	r1, [pc, #76]	; (3a35c <bt_disable+0xa0>)
   3a310:	2207      	movs	r2, #7
   3a312:	f105 0068 	add.w	r0, r5, #104	; 0x68
   3a316:	f00b f9fb 	bl	45710 <memcpy>
	bt_adv_reset_adv_pool();
   3a31a:	f000 fa83 	bl	3a824 <bt_adv_reset_adv_pool>
	bt_conn_cleanup_all();
   3a31e:	f000 ff91 	bl	3b244 <bt_conn_cleanup_all>
	(void)memset(disconnected_handles, 0, sizeof(disconnected_handles));
   3a322:	2202      	movs	r2, #2
   3a324:	4621      	mov	r1, r4
   3a326:	480e      	ldr	r0, [pc, #56]	; (3a360 <bt_disable+0xa4>)
   3a328:	f00b f9fd 	bl	45726 <memset>
	z_impl_k_thread_abort(thread);
   3a32c:	480d      	ldr	r0, [pc, #52]	; (3a364 <bt_disable+0xa8>)
   3a32e:	f7fe fecf 	bl	390d0 <z_impl_k_thread_abort>
   3a332:	480d      	ldr	r0, [pc, #52]	; (3a368 <bt_disable+0xac>)
   3a334:	f7fe fecc 	bl	390d0 <z_impl_k_thread_abort>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a338:	f06f 0101 	mvn.w	r1, #1
   3a33c:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   3a340:	f00b faf4 	bl	4592c <atomic_and.isra.0>
	return 0;
   3a344:	e7db      	b.n	3a2fe <bt_disable+0x42>
		return -ENODEV;
   3a346:	f06f 0412 	mvn.w	r4, #18
   3a34a:	e7d8      	b.n	3a2fe <bt_disable+0x42>
		return -ENOTSUP;
   3a34c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   3a350:	e7d5      	b.n	3a2fe <bt_disable+0x42>
		return -EALREADY;
   3a352:	f06f 0477 	mvn.w	r4, #119	; 0x77
   3a356:	e7d2      	b.n	3a2fe <bt_disable+0x42>
   3a358:	20000388 	.word	0x20000388
   3a35c:	00049a68 	.word	0x00049a68
   3a360:	20003980 	.word	0x20003980
   3a364:	20001858 	.word	0x20001858
   3a368:	200018e8 	.word	0x200018e8

0003a36c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a36c:	4b04      	ldr	r3, [pc, #16]	; (3a380 <bt_is_ready+0x14>)
   3a36e:	f3bf 8f5b 	dmb	ish
   3a372:	6818      	ldr	r0, [r3, #0]
   3a374:	f3bf 8f5b 	dmb	ish

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   3a378:	f3c0 0080 	ubfx	r0, r0, #2, #1
   3a37c:	4770      	bx	lr
   3a37e:	bf00      	nop
   3a380:	2000045c 	.word	0x2000045c

0003a384 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   3a384:	4800      	ldr	r0, [pc, #0]	; (3a388 <bt_get_name+0x4>)
   3a386:	4770      	bx	lr
   3a388:	00049884 	.word	0x00049884

0003a38c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   3a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   3a38e:	4f0a      	ldr	r7, [pc, #40]	; (3a3b8 <id_find+0x2c>)
{
   3a390:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   3a392:	2500      	movs	r5, #0
   3a394:	79fb      	ldrb	r3, [r7, #7]
   3a396:	b2ec      	uxtb	r4, r5
   3a398:	42a3      	cmp	r3, r4
   3a39a:	d802      	bhi.n	3a3a2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   3a39c:	f06f 0001 	mvn.w	r0, #1
   3a3a0:	e009      	b.n	3a3b6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   3a3a2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   3a3a6:	4439      	add	r1, r7
   3a3a8:	4630      	mov	r0, r6
   3a3aa:	f00b fca2 	bl	45cf2 <bt_addr_le_eq>
   3a3ae:	3501      	adds	r5, #1
   3a3b0:	2800      	cmp	r0, #0
   3a3b2:	d0ef      	beq.n	3a394 <id_find+0x8>
   3a3b4:	4620      	mov	r0, r4
}
   3a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a3b8:	20000388 	.word	0x20000388

0003a3bc <set_random_address>:
{
   3a3bc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   3a3be:	4913      	ldr	r1, [pc, #76]	; (3a40c <set_random_address+0x50>)
   3a3c0:	2206      	movs	r2, #6
   3a3c2:	4605      	mov	r5, r0
   3a3c4:	f00b f97d 	bl	456c2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   3a3c8:	b1d8      	cbz	r0, 3a402 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   3a3ca:	2106      	movs	r1, #6
   3a3cc:	f242 0005 	movw	r0, #8197	; 0x2005
   3a3d0:	f7ff f9da 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   3a3d4:	4604      	mov	r4, r0
   3a3d6:	b1b0      	cbz	r0, 3a406 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   3a3d8:	2206      	movs	r2, #6
   3a3da:	4629      	mov	r1, r5
   3a3dc:	300c      	adds	r0, #12
   3a3de:	f00d f8f6 	bl	475ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   3a3e2:	2200      	movs	r2, #0
   3a3e4:	4621      	mov	r1, r4
   3a3e6:	f242 0005 	movw	r0, #8197	; 0x2005
   3a3ea:	f7ff fa07 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a3ee:	b948      	cbnz	r0, 3a404 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   3a3f0:	2206      	movs	r2, #6
   3a3f2:	4806      	ldr	r0, [pc, #24]	; (3a40c <set_random_address+0x50>)
   3a3f4:	4629      	mov	r1, r5
   3a3f6:	f00b f98b 	bl	45710 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   3a3fa:	4b05      	ldr	r3, [pc, #20]	; (3a410 <set_random_address+0x54>)
   3a3fc:	2201      	movs	r2, #1
   3a3fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   3a402:	2000      	movs	r0, #0
}
   3a404:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   3a406:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3a40a:	e7fb      	b.n	3a404 <set_random_address+0x48>
   3a40c:	200003f1 	.word	0x200003f1
   3a410:	20000388 	.word	0x20000388

0003a414 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   3a414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a416:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   3a418:	460d      	mov	r5, r1
   3a41a:	b179      	cbz	r1, 3a43c <id_create.constprop.0+0x28>
   3a41c:	4914      	ldr	r1, [pc, #80]	; (3a470 <id_create.constprop.0+0x5c>)
   3a41e:	4628      	mov	r0, r5
   3a420:	f00b fc67 	bl	45cf2 <bt_addr_le_eq>
   3a424:	b950      	cbnz	r0, 3a43c <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   3a426:	4813      	ldr	r0, [pc, #76]	; (3a474 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   3a428:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3a42c:	2207      	movs	r2, #7
   3a42e:	4629      	mov	r1, r5
   3a430:	4420      	add	r0, r4
   3a432:	f00b f96d 	bl	45710 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   3a436:	2000      	movs	r0, #0
}
   3a438:	b003      	add	sp, #12
   3a43a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   3a43c:	4668      	mov	r0, sp
   3a43e:	f00b f9d6 	bl	457ee <bt_addr_le_create_static>
			if (err) {
   3a442:	2800      	cmp	r0, #0
   3a444:	d1f8      	bne.n	3a438 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   3a446:	4668      	mov	r0, sp
   3a448:	f7ff ffa0 	bl	3a38c <id_find>
   3a44c:	2800      	cmp	r0, #0
   3a44e:	daf5      	bge.n	3a43c <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   3a450:	4b08      	ldr	r3, [pc, #32]	; (3a474 <id_create.constprop.0+0x60>)
   3a452:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3a456:	441c      	add	r4, r3
   3a458:	2207      	movs	r2, #7
   3a45a:	4669      	mov	r1, sp
   3a45c:	4620      	mov	r0, r4
   3a45e:	f00b f957 	bl	45710 <memcpy>
		if (addr) {
   3a462:	2d00      	cmp	r5, #0
   3a464:	d0e7      	beq.n	3a436 <id_create.constprop.0+0x22>
   3a466:	2207      	movs	r2, #7
   3a468:	4621      	mov	r1, r4
   3a46a:	4628      	mov	r0, r5
   3a46c:	e7e1      	b.n	3a432 <id_create.constprop.0+0x1e>
   3a46e:	bf00      	nop
   3a470:	00049a68 	.word	0x00049a68
   3a474:	20000388 	.word	0x20000388

0003a478 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   3a478:	b570      	push	{r4, r5, r6, lr}
   3a47a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   3a47c:	4604      	mov	r4, r0
   3a47e:	b918      	cbnz	r0, 3a488 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   3a480:	b1bd      	cbz	r5, 3a4b2 <bt_id_create+0x3a>
			return -EINVAL;
   3a482:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   3a486:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   3a488:	491c      	ldr	r1, [pc, #112]	; (3a4fc <bt_id_create+0x84>)
   3a48a:	f00b fc32 	bl	45cf2 <bt_addr_le_eq>
   3a48e:	2800      	cmp	r0, #0
   3a490:	d1f6      	bne.n	3a480 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   3a492:	7823      	ldrb	r3, [r4, #0]
   3a494:	2b01      	cmp	r3, #1
   3a496:	d1f4      	bne.n	3a482 <bt_id_create+0xa>
   3a498:	79a3      	ldrb	r3, [r4, #6]
   3a49a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3a49e:	2bc0      	cmp	r3, #192	; 0xc0
   3a4a0:	d1ef      	bne.n	3a482 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   3a4a2:	4620      	mov	r0, r4
   3a4a4:	f7ff ff72 	bl	3a38c <id_find>
   3a4a8:	2800      	cmp	r0, #0
   3a4aa:	dbe9      	blt.n	3a480 <bt_id_create+0x8>
			return -EALREADY;
   3a4ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3a4b0:	e7e9      	b.n	3a486 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   3a4b2:	4d13      	ldr	r5, [pc, #76]	; (3a500 <bt_id_create+0x88>)
   3a4b4:	79eb      	ldrb	r3, [r5, #7]
   3a4b6:	2b01      	cmp	r3, #1
   3a4b8:	d01c      	beq.n	3a4f4 <bt_id_create+0x7c>
   3a4ba:	f3bf 8f5b 	dmb	ish
   3a4be:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   3a4c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   3a4c6:	07db      	lsls	r3, r3, #31
   3a4c8:	d50b      	bpl.n	3a4e2 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
   3a4ca:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   3a4cc:	4621      	mov	r1, r4
   3a4ce:	4630      	mov	r0, r6
   3a4d0:	f7ff ffa0 	bl	3a414 <id_create.constprop.0>
	if (err) {
   3a4d4:	2800      	cmp	r0, #0
   3a4d6:	d1d6      	bne.n	3a486 <bt_id_create+0xe>
		bt_dev.id_count++;
   3a4d8:	79eb      	ldrb	r3, [r5, #7]
   3a4da:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   3a4dc:	4630      	mov	r0, r6
		bt_dev.id_count++;
   3a4de:	71eb      	strb	r3, [r5, #7]
	return new_id;
   3a4e0:	e7d1      	b.n	3a486 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   3a4e2:	2c00      	cmp	r4, #0
   3a4e4:	d0cd      	beq.n	3a482 <bt_id_create+0xa>
   3a4e6:	4905      	ldr	r1, [pc, #20]	; (3a4fc <bt_id_create+0x84>)
   3a4e8:	4620      	mov	r0, r4
   3a4ea:	f00b fc02 	bl	45cf2 <bt_addr_le_eq>
   3a4ee:	2800      	cmp	r0, #0
   3a4f0:	d0eb      	beq.n	3a4ca <bt_id_create+0x52>
   3a4f2:	e7c6      	b.n	3a482 <bt_id_create+0xa>
		return -ENOMEM;
   3a4f4:	f06f 000b 	mvn.w	r0, #11
   3a4f8:	e7c5      	b.n	3a486 <bt_id_create+0xe>
   3a4fa:	bf00      	nop
   3a4fc:	00049a68 	.word	0x00049a68
   3a500:	20000388 	.word	0x20000388

0003a504 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   3a504:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   3a506:	4604      	mov	r4, r0
   3a508:	b198      	cbz	r0, 3a532 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   3a50a:	aa01      	add	r2, sp, #4
   3a50c:	2100      	movs	r1, #0
   3a50e:	f241 0009 	movw	r0, #4105	; 0x1009
   3a512:	f7ff f973 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a516:	4606      	mov	r6, r0
   3a518:	b958      	cbnz	r0, 3a532 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   3a51a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   3a51c:	490f      	ldr	r1, [pc, #60]	; (3a55c <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   3a51e:	68dd      	ldr	r5, [r3, #12]
   3a520:	3501      	adds	r5, #1
   3a522:	2206      	movs	r2, #6
   3a524:	4628      	mov	r0, r5
   3a526:	f00b f8cc 	bl	456c2 <memcmp>
   3a52a:	b928      	cbnz	r0, 3a538 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   3a52c:	9801      	ldr	r0, [sp, #4]
   3a52e:	f002 fd7d 	bl	3d02c <net_buf_unref>
		return 0U;
   3a532:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   3a534:	b002      	add	sp, #8
   3a536:	bd70      	pop	{r4, r5, r6, pc}
   3a538:	4909      	ldr	r1, [pc, #36]	; (3a560 <bt_id_read_public_addr+0x5c>)
   3a53a:	2206      	movs	r2, #6
   3a53c:	4628      	mov	r0, r5
   3a53e:	f00b f8c0 	bl	456c2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   3a542:	2800      	cmp	r0, #0
   3a544:	d0f2      	beq.n	3a52c <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
   3a546:	2206      	movs	r2, #6
   3a548:	4629      	mov	r1, r5
   3a54a:	1c60      	adds	r0, r4, #1
   3a54c:	f00b f8e0 	bl	45710 <memcpy>
	net_buf_unref(rsp);
   3a550:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   3a552:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   3a554:	f002 fd6a 	bl	3d02c <net_buf_unref>
	return 1U;
   3a558:	2001      	movs	r0, #1
   3a55a:	e7eb      	b.n	3a534 <bt_id_read_public_addr+0x30>
   3a55c:	00049a75 	.word	0x00049a75
   3a560:	00049a6f 	.word	0x00049a6f

0003a564 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   3a564:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   3a566:	4668      	mov	r0, sp
   3a568:	f7ff ffcc 	bl	3a504 <bt_id_read_public_addr>
   3a56c:	4b04      	ldr	r3, [pc, #16]	; (3a580 <bt_setup_public_id_addr+0x1c>)
   3a56e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   3a570:	b118      	cbz	r0, 3a57a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   3a572:	4669      	mov	r1, sp
   3a574:	2000      	movs	r0, #0
   3a576:	f7ff ff4d 	bl	3a414 <id_create.constprop.0>
}
   3a57a:	b003      	add	sp, #12
   3a57c:	f85d fb04 	ldr.w	pc, [sp], #4
   3a580:	20000388 	.word	0x20000388

0003a584 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   3a584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   3a588:	4b16      	ldr	r3, [pc, #88]	; (3a5e4 <bt_read_static_addr+0x60>)
   3a58a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   3a58e:	07db      	lsls	r3, r3, #31
{
   3a590:	4607      	mov	r7, r0
   3a592:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   3a594:	d404      	bmi.n	3a5a0 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
   3a596:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   3a598:	4630      	mov	r0, r6
   3a59a:	b002      	add	sp, #8
   3a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   3a5a0:	aa01      	add	r2, sp, #4
   3a5a2:	2100      	movs	r1, #0
   3a5a4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   3a5a8:	f7ff f928 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a5ac:	4604      	mov	r4, r0
   3a5ae:	2800      	cmp	r0, #0
   3a5b0:	d1f1      	bne.n	3a596 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   3a5b2:	9b01      	ldr	r3, [sp, #4]
   3a5b4:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   3a5b6:	786e      	ldrb	r6, [r5, #1]
   3a5b8:	4546      	cmp	r6, r8
   3a5ba:	bf28      	it	cs
   3a5bc:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
   3a5be:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   3a5c0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   3a5c4:	42a6      	cmp	r6, r4
   3a5c6:	dc03      	bgt.n	3a5d0 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   3a5c8:	9801      	ldr	r0, [sp, #4]
   3a5ca:	f002 fd2f 	bl	3d02c <net_buf_unref>
	if (!cnt) {
   3a5ce:	e7e3      	b.n	3a598 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   3a5d0:	4629      	mov	r1, r5
   3a5d2:	fb08 7004 	mla	r0, r8, r4, r7
   3a5d6:	2216      	movs	r2, #22
   3a5d8:	f00b f89a 	bl	45710 <memcpy>
	for (i = 0; i < cnt; i++) {
   3a5dc:	3401      	adds	r4, #1
   3a5de:	3516      	adds	r5, #22
   3a5e0:	e7f0      	b.n	3a5c4 <bt_read_static_addr+0x40>
   3a5e2:	bf00      	nop
   3a5e4:	20000388 	.word	0x20000388

0003a5e8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   3a5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   3a5ea:	4e15      	ldr	r6, [pc, #84]	; (3a640 <bt_setup_random_id_addr+0x58>)
   3a5ec:	79f4      	ldrb	r4, [r6, #7]
{
   3a5ee:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   3a5f0:	b92c      	cbnz	r4, 3a5fe <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   3a5f2:	2101      	movs	r1, #1
   3a5f4:	a802      	add	r0, sp, #8
   3a5f6:	f7ff ffc5 	bl	3a584 <bt_read_static_addr>
   3a5fa:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   3a5fc:	b9c8      	cbnz	r0, 3a632 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   3a5fe:	2100      	movs	r1, #0
   3a600:	4608      	mov	r0, r1
}
   3a602:	b009      	add	sp, #36	; 0x24
   3a604:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   3a608:	f7ff bf36 	b.w	3a478 <bt_id_create>
   3a60c:	ab02      	add	r3, sp, #8
   3a60e:	fb07 3105 	mla	r1, r7, r5, r3
   3a612:	2206      	movs	r2, #6
   3a614:	f10d 0001 	add.w	r0, sp, #1
   3a618:	f00b f87a 	bl	45710 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   3a61c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   3a61e:	4669      	mov	r1, sp
   3a620:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   3a622:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   3a626:	f7ff fef5 	bl	3a414 <id_create.constprop.0>
				if (err) {
   3a62a:	3401      	adds	r4, #1
   3a62c:	b110      	cbz	r0, 3a634 <bt_setup_random_id_addr+0x4c>
}
   3a62e:	b009      	add	sp, #36	; 0x24
   3a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   3a632:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   3a634:	79f3      	ldrb	r3, [r6, #7]
   3a636:	b2e5      	uxtb	r5, r4
   3a638:	42ab      	cmp	r3, r5
   3a63a:	d8e7      	bhi.n	3a60c <bt_setup_random_id_addr+0x24>
			return 0;
   3a63c:	2000      	movs	r0, #0
   3a63e:	e7f6      	b.n	3a62e <bt_setup_random_id_addr+0x46>
   3a640:	20000388 	.word	0x20000388

0003a644 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   3a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a648:	4690      	mov	r8, r2
   3a64a:	460e      	mov	r6, r1
   3a64c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   3a64e:	4602      	mov	r2, r0
   3a650:	2800      	cmp	r0, #0
   3a652:	d04b      	beq.n	3a6ec <bt_id_set_adv_own_addr+0xa8>
   3a654:	2b00      	cmp	r3, #0
   3a656:	d049      	beq.n	3a6ec <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a658:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   3a65a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a65c:	d531      	bpl.n	3a6c2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   3a65e:	4f25      	ldr	r7, [pc, #148]	; (3a6f4 <bt_id_set_adv_own_addr+0xb0>)
   3a660:	f1b8 0f00 	cmp.w	r8, #0
   3a664:	d013      	beq.n	3a68e <bt_id_set_adv_own_addr+0x4a>
   3a666:	0688      	lsls	r0, r1, #26
   3a668:	d40a      	bmi.n	3a680 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   3a66a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   3a66e:	5cfb      	ldrb	r3, [r7, r3]
   3a670:	2b01      	cmp	r3, #1
   3a672:	d015      	beq.n	3a6a0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   3a674:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   3a676:	06b2      	lsls	r2, r6, #26
   3a678:	d50f      	bpl.n	3a69a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   3a67a:	f043 0302 	orr.w	r3, r3, #2
   3a67e:	e00b      	b.n	3a698 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   3a680:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   3a684:	0659      	lsls	r1, r3, #25
   3a686:	d4f0      	bmi.n	3a66a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   3a688:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a68c:	e006      	b.n	3a69c <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   3a68e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   3a692:	5cfb      	ldrb	r3, [r7, r3]
   3a694:	2b01      	cmp	r3, #1
   3a696:	d003      	beq.n	3a6a0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   3a698:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   3a69a:	2000      	movs	r0, #0
}
   3a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   3a6a0:	2107      	movs	r1, #7
   3a6a2:	fb01 7104 	mla	r1, r1, r4, r7
   3a6a6:	3101      	adds	r1, #1
   3a6a8:	4610      	mov	r0, r2
   3a6aa:	f00b fb2f 	bl	45d0c <bt_id_set_adv_random_addr>
				if (err) {
   3a6ae:	2800      	cmp	r0, #0
   3a6b0:	d1f4      	bne.n	3a69c <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   3a6b2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3a6b6:	5d3b      	ldrb	r3, [r7, r4]
   3a6b8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   3a6ba:	f1b8 0f00 	cmp.w	r8, #0
   3a6be:	d0ec      	beq.n	3a69a <bt_id_set_adv_own_addr+0x56>
   3a6c0:	e7d9      	b.n	3a676 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   3a6c2:	074b      	lsls	r3, r1, #29
   3a6c4:	d50e      	bpl.n	3a6e4 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   3a6c6:	4e0b      	ldr	r6, [pc, #44]	; (3a6f4 <bt_id_set_adv_own_addr+0xb0>)
   3a6c8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   3a6cc:	5df3      	ldrb	r3, [r6, r7]
   3a6ce:	2b01      	cmp	r3, #1
   3a6d0:	d1e2      	bne.n	3a698 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   3a6d2:	2107      	movs	r1, #7
   3a6d4:	fb11 3104 	smlabb	r1, r1, r4, r3
   3a6d8:	4431      	add	r1, r6
   3a6da:	f00b fb17 	bl	45d0c <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   3a6de:	5df3      	ldrb	r3, [r6, r7]
   3a6e0:	702b      	strb	r3, [r5, #0]
		if (err) {
   3a6e2:	e7db      	b.n	3a69c <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   3a6e4:	f00b fb1a 	bl	45d1c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   3a6e8:	2301      	movs	r3, #1
   3a6ea:	e7f9      	b.n	3a6e0 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   3a6ec:	f06f 0015 	mvn.w	r0, #21
   3a6f0:	e7d4      	b.n	3a69c <bt_id_set_adv_own_addr+0x58>
   3a6f2:	bf00      	nop
   3a6f4:	20000388 	.word	0x20000388

0003a6f8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   3a6f8:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   3a6fa:	4c0a      	ldr	r4, [pc, #40]	; (3a724 <bt_id_init+0x2c>)
   3a6fc:	79e3      	ldrb	r3, [r4, #7]
   3a6fe:	b10b      	cbz	r3, 3a704 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   3a700:	2000      	movs	r0, #0
}
   3a702:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   3a704:	f7ff ff2e 	bl	3a564 <bt_setup_public_id_addr>
		if (err) {
   3a708:	2800      	cmp	r0, #0
   3a70a:	d1fa      	bne.n	3a702 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   3a70c:	79e3      	ldrb	r3, [r4, #7]
   3a70e:	2b00      	cmp	r3, #0
   3a710:	d1f6      	bne.n	3a700 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   3a712:	f7ff ff69 	bl	3a5e8 <bt_setup_random_id_addr>
		if (err) {
   3a716:	2800      	cmp	r0, #0
   3a718:	d1f3      	bne.n	3a702 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   3a71a:	1c60      	adds	r0, r4, #1
}
   3a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   3a720:	f7ff be4c 	b.w	3a3bc <set_random_address>
   3a724:	20000388 	.word	0x20000388

0003a728 <valid_adv_param>:

	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
   3a728:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   3a72a:	6843      	ldr	r3, [r0, #4]
{
   3a72c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   3a72e:	0558      	lsls	r0, r3, #21
   3a730:	d501      	bpl.n	3a736 <valid_adv_param+0xe>
		return false;
   3a732:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   3a734:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   3a736:	6922      	ldr	r2, [r4, #16]
   3a738:	b10a      	cbz	r2, 3a73e <valid_adv_param+0x16>
   3a73a:	07d9      	lsls	r1, r3, #31
   3a73c:	d5f9      	bpl.n	3a732 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   3a73e:	4d19      	ldr	r5, [pc, #100]	; (3a7a4 <valid_adv_param+0x7c>)
   3a740:	7820      	ldrb	r0, [r4, #0]
   3a742:	79eb      	ldrb	r3, [r5, #7]
   3a744:	4283      	cmp	r3, r0
   3a746:	d9f4      	bls.n	3a732 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   3a748:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   3a74c:	4916      	ldr	r1, [pc, #88]	; (3a7a8 <valid_adv_param+0x80>)
   3a74e:	2207      	movs	r2, #7
   3a750:	4428      	add	r0, r5
   3a752:	f00a ffb6 	bl	456c2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   3a756:	2800      	cmp	r0, #0
   3a758:	d0eb      	beq.n	3a732 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   3a75a:	6860      	ldr	r0, [r4, #4]
   3a75c:	07c2      	lsls	r2, r0, #31
   3a75e:	d406      	bmi.n	3a76e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   3a760:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   3a764:	2b08      	cmp	r3, #8
   3a766:	d802      	bhi.n	3a76e <valid_adv_param+0x46>
   3a768:	68a3      	ldr	r3, [r4, #8]
   3a76a:	2b9f      	cmp	r3, #159	; 0x9f
   3a76c:	d9e1      	bls.n	3a732 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   3a76e:	f010 0f30 	tst.w	r0, #48	; 0x30
   3a772:	d002      	beq.n	3a77a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   3a774:	6923      	ldr	r3, [r4, #16]
   3a776:	2b00      	cmp	r3, #0
   3a778:	d0db      	beq.n	3a732 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   3a77a:	06c3      	lsls	r3, r0, #27
   3a77c:	d401      	bmi.n	3a782 <valid_adv_param+0x5a>
   3a77e:	6923      	ldr	r3, [r4, #16]
   3a780:	b943      	cbnz	r3, 3a794 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   3a782:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   3a786:	429a      	cmp	r2, r3
   3a788:	d8d3      	bhi.n	3a732 <valid_adv_param+0xa>
   3a78a:	2a1f      	cmp	r2, #31
   3a78c:	d9d1      	bls.n	3a732 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   3a78e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   3a792:	d8ce      	bhi.n	3a732 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   3a794:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   3a798:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   3a79c:	bf18      	it	ne
   3a79e:	2001      	movne	r0, #1
   3a7a0:	e7c8      	b.n	3a734 <valid_adv_param+0xc>
   3a7a2:	bf00      	nop
   3a7a4:	20000388 	.word	0x20000388
   3a7a8:	00049a68 	.word	0x00049a68

0003a7ac <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   3a7ac:	b508      	push	{r3, lr}
   3a7ae:	4904      	ldr	r1, [pc, #16]	; (3a7c0 <adv_is_directed+0x14>)
   3a7b0:	2207      	movs	r2, #7
   3a7b2:	3009      	adds	r0, #9
   3a7b4:	f00a ff85 	bl	456c2 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   3a7b8:	3800      	subs	r0, #0
   3a7ba:	bf18      	it	ne
   3a7bc:	2001      	movne	r0, #1
   3a7be:	bd08      	pop	{r3, pc}
   3a7c0:	00049a68 	.word	0x00049a68

0003a7c4 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   3a7c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   3a7c6:	4b15      	ldr	r3, [pc, #84]	; (3a81c <le_adv_start_add_conn+0x58>)
   3a7c8:	7802      	ldrb	r2, [r0, #0]
   3a7ca:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   3a7ce:	4604      	mov	r4, r0
   3a7d0:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   3a7d2:	f7ff ffeb 	bl	3a7ac <adv_is_directed>
   3a7d6:	4603      	mov	r3, r0
   3a7d8:	7820      	ldrb	r0, [r4, #0]
   3a7da:	b96b      	cbnz	r3, 3a7f8 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   3a7dc:	4910      	ldr	r1, [pc, #64]	; (3a820 <le_adv_start_add_conn+0x5c>)
   3a7de:	f000 fddd 	bl	3b39c <bt_conn_add_le>
		if (!conn) {
   3a7e2:	4604      	mov	r4, r0
   3a7e4:	b910      	cbnz	r0, 3a7ec <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   3a7e6:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   3a7ea:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   3a7ec:	2104      	movs	r1, #4
   3a7ee:	f000 fc53 	bl	3b098 <bt_conn_set_state>
		*out_conn = conn;
   3a7f2:	602c      	str	r4, [r5, #0]
		return 0;
   3a7f4:	2000      	movs	r0, #0
   3a7f6:	e7f8      	b.n	3a7ea <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   3a7f8:	f104 0609 	add.w	r6, r4, #9
   3a7fc:	4631      	mov	r1, r6
   3a7fe:	f00b fd11 	bl	46224 <bt_conn_exists_le>
   3a802:	b940      	cbnz	r0, 3a816 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   3a804:	7820      	ldrb	r0, [r4, #0]
   3a806:	4631      	mov	r1, r6
   3a808:	f000 fdc8 	bl	3b39c <bt_conn_add_le>
	if (!conn) {
   3a80c:	4604      	mov	r4, r0
   3a80e:	2800      	cmp	r0, #0
   3a810:	d0e9      	beq.n	3a7e6 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   3a812:	2105      	movs	r1, #5
   3a814:	e7eb      	b.n	3a7ee <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   3a816:	f06f 0015 	mvn.w	r0, #21
   3a81a:	e7e6      	b.n	3a7ea <le_adv_start_add_conn+0x26>
   3a81c:	20000388 	.word	0x20000388
   3a820:	00049a61 	.word	0x00049a61

0003a824 <bt_adv_reset_adv_pool>:
	(void)memset(&bt_dev.adv, 0, sizeof(bt_dev.adv));
   3a824:	4802      	ldr	r0, [pc, #8]	; (3a830 <bt_adv_reset_adv_pool+0xc>)
   3a826:	2250      	movs	r2, #80	; 0x50
   3a828:	2100      	movs	r1, #0
   3a82a:	f00a bf7c 	b.w	45726 <memset>
   3a82e:	bf00      	nop
   3a830:	200003a0 	.word	0x200003a0

0003a834 <bt_le_adv_lookup_legacy>:
}
   3a834:	4800      	ldr	r0, [pc, #0]	; (3a838 <bt_le_adv_lookup_legacy+0x4>)
   3a836:	4770      	bx	lr
   3a838:	200003a0 	.word	0x200003a0

0003a83c <bt_le_adv_update_data>:
{
   3a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3a83e:	4605      	mov	r5, r0
   3a840:	b085      	sub	sp, #20
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3a842:	480f      	ldr	r0, [pc, #60]	; (3a880 <bt_le_adv_update_data+0x44>)
   3a844:	f00b fa94 	bl	45d70 <atomic_get>
   3a848:	461f      	mov	r7, r3
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   3a84a:	0603      	lsls	r3, r0, #24
{
   3a84c:	4616      	mov	r6, r2
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   3a84e:	d513      	bpl.n	3a878 <bt_le_adv_update_data+0x3c>
   3a850:	480b      	ldr	r0, [pc, #44]	; (3a880 <bt_le_adv_update_data+0x44>)
   3a852:	f00b fa8d 	bl	45d70 <atomic_get>
   3a856:	4604      	mov	r4, r0
	return le_adv_update(adv, ad, ad_len, sd, sd_len, false, scannable,
   3a858:	480a      	ldr	r0, [pc, #40]	; (3a884 <bt_le_adv_update_data+0x48>)
   3a85a:	f00b fb8b 	bl	45f74 <get_adv_name_type>
   3a85e:	f3c4 24c0 	ubfx	r4, r4, #11, #1
   3a862:	9002      	str	r0, [sp, #8]
   3a864:	460a      	mov	r2, r1
   3a866:	e9cd 7400 	strd	r7, r4, [sp]
   3a86a:	4806      	ldr	r0, [pc, #24]	; (3a884 <bt_le_adv_update_data+0x48>)
   3a86c:	4633      	mov	r3, r6
   3a86e:	4629      	mov	r1, r5
   3a870:	f00b fb09 	bl	45e86 <le_adv_update.constprop.0>
}
   3a874:	b005      	add	sp, #20
   3a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EAGAIN;
   3a878:	f06f 000a 	mvn.w	r0, #10
   3a87c:	e7fa      	b.n	3a874 <bt_le_adv_update_data+0x38>
   3a87e:	bf00      	nop
   3a880:	200003b0 	.word	0x200003b0
   3a884:	200003a0 	.word	0x200003a0

0003a888 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   3a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   3a88c:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   3a890:	b08d      	sub	sp, #52	; 0x34
   3a892:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   3a894:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   3a896:	ebb9 0603 	subs.w	r6, r9, r3
{
   3a89a:	4605      	mov	r5, r0
   3a89c:	488d      	ldr	r0, [pc, #564]	; (3aad4 <bt_le_adv_start_legacy+0x24c>)
   3a89e:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   3a8a0:	bf18      	it	ne
   3a8a2:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   3a8a4:	9307      	str	r3, [sp, #28]
   3a8a6:	f00b fa63 	bl	45d70 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3a8aa:	0742      	lsls	r2, r0, #29
{
   3a8ac:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3a8ae:	f140 8106 	bpl.w	3aabe <bt_le_adv_start_legacy+0x236>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   3a8b2:	4608      	mov	r0, r1
   3a8b4:	f7ff ff38 	bl	3a728 <valid_adv_param>
   3a8b8:	b928      	cbnz	r0, 3a8c6 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   3a8ba:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   3a8be:	4658      	mov	r0, fp
   3a8c0:	b00d      	add	sp, #52	; 0x34
   3a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   3a8c6:	4620      	mov	r0, r4
   3a8c8:	f00b fa3f 	bl	45d4a <bt_id_adv_random_addr_check>
   3a8cc:	4680      	mov	r8, r0
   3a8ce:	2800      	cmp	r0, #0
   3a8d0:	d0f3      	beq.n	3a8ba <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   3a8d2:	f105 0710 	add.w	r7, r5, #16
   3a8d6:	4638      	mov	r0, r7
   3a8d8:	f00b fa4a 	bl	45d70 <atomic_get>
   3a8dc:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3a8de:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   3a8e2:	f100 80ef 	bmi.w	3aac4 <bt_le_adv_start_legacy+0x23c>
	(void)memset(&set_param, 0, sizeof(set_param));
   3a8e6:	220f      	movs	r2, #15
   3a8e8:	4659      	mov	r1, fp
   3a8ea:	a808      	add	r0, sp, #32
   3a8ec:	f00a ff1b 	bl	45726 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   3a8f0:	68a3      	ldr	r3, [r4, #8]
   3a8f2:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   3a8f6:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   3a8f8:	68e3      	ldr	r3, [r4, #12]
   3a8fa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   3a8fe:	f00b fa28 	bl	45d52 <get_adv_channel_map>
	if (adv->id != param->id) {
   3a902:	782a      	ldrb	r2, [r5, #0]
   3a904:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   3a906:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   3a90a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   3a90c:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   3a910:	d004      	beq.n	3a91c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a912:	4870      	ldr	r0, [pc, #448]	; (3aad4 <bt_le_adv_start_legacy+0x24c>)
   3a914:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   3a918:	f00b fa30 	bl	45d7c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   3a91c:	4a6e      	ldr	r2, [pc, #440]	; (3aad8 <bt_le_adv_start_legacy+0x250>)
	adv->id = param->id;
   3a91e:	7823      	ldrb	r3, [r4, #0]
   3a920:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   3a922:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   3a926:	6861      	ldr	r1, [r4, #4]
   3a928:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   3a92c:	4632      	mov	r2, r6
   3a92e:	4628      	mov	r0, r5
   3a930:	f7ff fe88 	bl	3a644 <bt_id_set_adv_own_addr>
	if (err) {
   3a934:	4683      	mov	fp, r0
   3a936:	2800      	cmp	r0, #0
   3a938:	d1c1      	bne.n	3a8be <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   3a93a:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
   3a93e:	2207      	movs	r2, #7
	if (dir_adv) {
   3a940:	f1b9 0f00 	cmp.w	r9, #0
   3a944:	d013      	beq.n	3a96e <bt_le_adv_start_legacy+0xe6>
   3a946:	6921      	ldr	r1, [r4, #16]
   3a948:	f00a fee2 	bl	45710 <memcpy>
	name_type = get_adv_name_type_param(param);
   3a94c:	4620      	mov	r0, r4
   3a94e:	f00b fb21 	bl	45f94 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a952:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   3a954:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a956:	07d0      	lsls	r0, r2, #31
   3a958:	d416      	bmi.n	3a988 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   3a95a:	0592      	lsls	r2, r2, #22
   3a95c:	d403      	bmi.n	3a966 <bt_le_adv_start_legacy+0xde>
   3a95e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3a960:	b90b      	cbnz	r3, 3a966 <bt_le_adv_start_legacy+0xde>
   3a962:	2e02      	cmp	r6, #2
   3a964:	d14d      	bne.n	3aa02 <bt_le_adv_start_legacy+0x17a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   3a966:	2302      	movs	r3, #2
   3a968:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   3a96c:	e01a      	b.n	3a9a4 <bt_le_adv_start_legacy+0x11c>
   3a96e:	495b      	ldr	r1, [pc, #364]	; (3aadc <bt_le_adv_start_legacy+0x254>)
   3a970:	f00a fece 	bl	45710 <memcpy>
	name_type = get_adv_name_type_param(param);
   3a974:	4620      	mov	r0, r4
   3a976:	f00b fb0d 	bl	45f94 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a97a:	6862      	ldr	r2, [r4, #4]
   3a97c:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   3a97e:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   3a980:	d5eb      	bpl.n	3a95a <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   3a982:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   3a986:	e00d      	b.n	3a9a4 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   3a988:	f012 0f10 	tst.w	r2, #16
   3a98c:	bf0c      	ite	eq
   3a98e:	2201      	moveq	r2, #1
   3a990:	2204      	movne	r2, #4
   3a992:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   3a996:	6921      	ldr	r1, [r4, #16]
   3a998:	2207      	movs	r2, #7
   3a99a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   3a99e:	f00a feb7 	bl	45710 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   3a9a2:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   3a9a4:	210f      	movs	r1, #15
   3a9a6:	f242 0006 	movw	r0, #8198	; 0x2006
   3a9aa:	f7fe feed 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   3a9ae:	4683      	mov	fp, r0
   3a9b0:	2800      	cmp	r0, #0
   3a9b2:	f000 808a 	beq.w	3aaca <bt_le_adv_start_legacy+0x242>
   3a9b6:	220f      	movs	r2, #15
   3a9b8:	a908      	add	r1, sp, #32
   3a9ba:	300c      	adds	r0, #12
   3a9bc:	f00c fe07 	bl	475ce <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   3a9c0:	2200      	movs	r2, #0
   3a9c2:	4659      	mov	r1, fp
   3a9c4:	f242 0006 	movw	r0, #8198	; 0x2006
   3a9c8:	f7fe ff18 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   3a9cc:	2800      	cmp	r0, #0
   3a9ce:	d17f      	bne.n	3aad0 <bt_le_adv_start_legacy+0x248>
	if (!dir_adv) {
   3a9d0:	f1b9 0f00 	cmp.w	r9, #0
   3a9d4:	d01b      	beq.n	3aa0e <bt_le_adv_start_legacy+0x186>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   3a9d6:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a9d8:	07db      	lsls	r3, r3, #31
   3a9da:	d426      	bmi.n	3aa2a <bt_le_adv_start_legacy+0x1a2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   3a9dc:	4628      	mov	r0, r5
   3a9de:	2101      	movs	r1, #1
   3a9e0:	f00b fae8 	bl	45fb4 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   3a9e4:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   3a9e6:	4683      	mov	fp, r0
   3a9e8:	2800      	cmp	r0, #0
   3a9ea:	d060      	beq.n	3aaae <bt_le_adv_start_legacy+0x226>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   3a9ec:	2d00      	cmp	r5, #0
   3a9ee:	f43f af66 	beq.w	3a8be <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   3a9f2:	4628      	mov	r0, r5
   3a9f4:	2100      	movs	r1, #0
   3a9f6:	f000 fb4f 	bl	3b098 <bt_conn_set_state>
			bt_conn_unref(conn);
   3a9fa:	4628      	mov	r0, r5
   3a9fc:	f00b fb9c 	bl	46138 <bt_conn_unref>
   3aa00:	e75d      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   3aa02:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   3aa04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   3aa08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   3aa0c:	e7ca      	b.n	3a9a4 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   3aa0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   3aa10:	9300      	str	r3, [sp, #0]
   3aa12:	e9cd 8601 	strd	r8, r6, [sp, #4]
   3aa16:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3aa18:	9905      	ldr	r1, [sp, #20]
   3aa1a:	4652      	mov	r2, sl
   3aa1c:	4628      	mov	r0, r5
   3aa1e:	f00b fa32 	bl	45e86 <le_adv_update.constprop.0>
		if (err) {
   3aa22:	4683      	mov	fp, r0
   3aa24:	2800      	cmp	r0, #0
   3aa26:	d0d6      	beq.n	3a9d6 <bt_le_adv_start_legacy+0x14e>
   3aa28:	e749      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   3aa2a:	a907      	add	r1, sp, #28
   3aa2c:	4628      	mov	r0, r5
   3aa2e:	f7ff fec9 	bl	3a7c4 <le_adv_start_add_conn>
		if (err) {
   3aa32:	4683      	mov	fp, r0
   3aa34:	2800      	cmp	r0, #0
   3aa36:	d0d1      	beq.n	3a9dc <bt_le_adv_start_legacy+0x154>
			if (err == -ENOMEM && !dir_adv &&
   3aa38:	f110 0f0c 	cmn.w	r0, #12
   3aa3c:	f47f af3f 	bne.w	3a8be <bt_le_adv_start_legacy+0x36>
   3aa40:	f1b9 0f00 	cmp.w	r9, #0
   3aa44:	f47f af3b 	bne.w	3a8be <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   3aa48:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   3aa4a:	0790      	lsls	r0, r2, #30
   3aa4c:	f53f af37 	bmi.w	3a8be <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   3aa50:	6863      	ldr	r3, [r4, #4]
   3aa52:	f083 0302 	eor.w	r3, r3, #2
   3aa56:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   3aa5a:	f00b 0201 	and.w	r2, fp, #1
   3aa5e:	210e      	movs	r1, #14
   3aa60:	4638      	mov	r0, r7
   3aa62:	f00b f9f9 	bl	45e58 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   3aa66:	1e73      	subs	r3, r6, #1
   3aa68:	425a      	negs	r2, r3
   3aa6a:	415a      	adcs	r2, r3
   3aa6c:	2108      	movs	r1, #8
   3aa6e:	4638      	mov	r0, r7
   3aa70:	f00b f9f2 	bl	45e58 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   3aa74:	1eb1      	subs	r1, r6, #2
   3aa76:	424a      	negs	r2, r1
   3aa78:	414a      	adcs	r2, r1
   3aa7a:	4638      	mov	r0, r7
   3aa7c:	2109      	movs	r1, #9
   3aa7e:	f00b f9eb 	bl	45e58 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   3aa82:	6862      	ldr	r2, [r4, #4]
   3aa84:	210a      	movs	r1, #10
   3aa86:	f002 0201 	and.w	r2, r2, #1
   3aa8a:	4638      	mov	r0, r7
   3aa8c:	f00b f9e4 	bl	45e58 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   3aa90:	4642      	mov	r2, r8
   3aa92:	210b      	movs	r1, #11
   3aa94:	4638      	mov	r0, r7
   3aa96:	f00b f9df 	bl	45e58 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   3aa9a:	6862      	ldr	r2, [r4, #4]
   3aa9c:	210d      	movs	r1, #13
   3aa9e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   3aaa2:	4638      	mov	r0, r7
   3aaa4:	f00b f9d8 	bl	45e58 <atomic_set_bit_to>
	return 0;
   3aaa8:	f04f 0b00 	mov.w	fp, #0
   3aaac:	e707      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   3aaae:	b115      	cbz	r5, 3aab6 <bt_le_adv_start_legacy+0x22e>
		bt_conn_unref(conn);
   3aab0:	4628      	mov	r0, r5
   3aab2:	f00b fb41 	bl	46138 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   3aab6:	f1b9 0f00 	cmp.w	r9, #0
   3aaba:	d1ce      	bne.n	3aa5a <bt_le_adv_start_legacy+0x1d2>
   3aabc:	e7c8      	b.n	3aa50 <bt_le_adv_start_legacy+0x1c8>
		return -EAGAIN;
   3aabe:	f06f 0b0a 	mvn.w	fp, #10
   3aac2:	e6fc      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   3aac4:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   3aac8:	e6f9      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   3aaca:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   3aace:	e6f6      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
   3aad0:	4683      	mov	fp, r0
   3aad2:	e6f4      	b.n	3a8be <bt_le_adv_start_legacy+0x36>
   3aad4:	2000045c 	.word	0x2000045c
   3aad8:	20000388 	.word	0x20000388
   3aadc:	00049a68 	.word	0x00049a68

0003aae0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   3aae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3aae2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   3aae4:	9a06      	ldr	r2, [sp, #24]
{
   3aae6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   3aae8:	e9cd 3200 	strd	r3, r2, [sp]
   3aaec:	462b      	mov	r3, r5
   3aaee:	460a      	mov	r2, r1
   3aaf0:	4601      	mov	r1, r0
   3aaf2:	4811      	ldr	r0, [pc, #68]	; (3ab38 <bt_le_adv_start+0x58>)
   3aaf4:	f7ff fec8 	bl	3a888 <bt_le_adv_start_legacy>
   3aaf8:	4621      	mov	r1, r4
   3aafa:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   3aafc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   3aafe:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   3ab02:	429d      	cmp	r5, r3
   3ab04:	d102      	bne.n	3ab0c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   3ab06:	4630      	mov	r0, r6
   3ab08:	b002      	add	sp, #8
   3ab0a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   3ab0c:	880a      	ldrh	r2, [r1, #0]
   3ab0e:	4282      	cmp	r2, r0
   3ab10:	d104      	bne.n	3ab1c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   3ab12:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   3ab14:	b112      	cbz	r2, 3ab1c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   3ab16:	7812      	ldrb	r2, [r2, #0]
   3ab18:	07d2      	lsls	r2, r2, #31
   3ab1a:	d402      	bmi.n	3ab22 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   3ab1c:	3301      	adds	r3, #1
   3ab1e:	3108      	adds	r1, #8
   3ab20:	e7ef      	b.n	3ab02 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   3ab22:	4906      	ldr	r1, [pc, #24]	; (3ab3c <bt_le_adv_start+0x5c>)
   3ab24:	4806      	ldr	r0, [pc, #24]	; (3ab40 <bt_le_adv_start+0x60>)
   3ab26:	f00d fce2 	bl	484ee <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   3ab2a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   3ab2e:	2300      	movs	r3, #0
   3ab30:	4803      	ldr	r0, [pc, #12]	; (3ab40 <bt_le_adv_start+0x60>)
   3ab32:	f006 f9e9 	bl	40f08 <k_work_reschedule>
   3ab36:	e7e6      	b.n	3ab06 <bt_le_adv_start+0x26>
   3ab38:	200003a0 	.word	0x200003a0
   3ab3c:	00046005 	.word	0x00046005
   3ab40:	200003b8 	.word	0x200003b8

0003ab44 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   3ab44:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   3ab46:	4819      	ldr	r0, [pc, #100]	; (3abac <bt_le_adv_stop+0x68>)
   3ab48:	f00b fa59 	bl	45ffe <bt_le_lim_adv_cancel_timeout>
   3ab4c:	4818      	ldr	r0, [pc, #96]	; (3abb0 <bt_le_adv_stop+0x6c>)
   3ab4e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   3ab52:	f00b f913 	bl	45d7c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3ab56:	4816      	ldr	r0, [pc, #88]	; (3abb0 <bt_le_adv_stop+0x6c>)
   3ab58:	f00b f90a 	bl	45d70 <atomic_get>
   3ab5c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   3ab5e:	061a      	lsls	r2, r3, #24
   3ab60:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   3ab64:	d521      	bpl.n	3abaa <bt_le_adv_stop+0x66>
   3ab66:	4812      	ldr	r0, [pc, #72]	; (3abb0 <bt_le_adv_stop+0x6c>)
   3ab68:	f00b f902 	bl	45d70 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3ab6c:	0543      	lsls	r3, r0, #21
   3ab6e:	d512      	bpl.n	3ab96 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   3ab70:	480e      	ldr	r0, [pc, #56]	; (3abac <bt_le_adv_stop+0x68>)
   3ab72:	f7ff fe1b 	bl	3a7ac <adv_is_directed>
   3ab76:	4b0f      	ldr	r3, [pc, #60]	; (3abb4 <bt_le_adv_stop+0x70>)
   3ab78:	b998      	cbnz	r0, 3aba2 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   3ab7a:	490f      	ldr	r1, [pc, #60]	; (3abb8 <bt_le_adv_stop+0x74>)
   3ab7c:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   3ab7e:	7e18      	ldrb	r0, [r3, #24]
   3ab80:	f000 fc40 	bl	3b404 <bt_conn_lookup_state_le>
   3ab84:	4604      	mov	r4, r0
	if (conn) {
   3ab86:	b130      	cbz	r0, 3ab96 <bt_le_adv_stop+0x52>
		conn->err = status;
   3ab88:	2100      	movs	r1, #0
   3ab8a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   3ab8c:	f000 fa84 	bl	3b098 <bt_conn_set_state>
		bt_conn_unref(conn);
   3ab90:	4620      	mov	r0, r4
   3ab92:	f00b fad1 	bl	46138 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   3ab96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   3ab9a:	4804      	ldr	r0, [pc, #16]	; (3abac <bt_le_adv_stop+0x68>)
   3ab9c:	2100      	movs	r1, #0
   3ab9e:	f00b ba09 	b.w	45fb4 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   3aba2:	2205      	movs	r2, #5
   3aba4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   3aba8:	e7e9      	b.n	3ab7e <bt_le_adv_stop+0x3a>
}
   3abaa:	bd10      	pop	{r4, pc}
   3abac:	200003a0 	.word	0x200003a0
   3abb0:	200003b0 	.word	0x200003b0
   3abb4:	20000388 	.word	0x20000388
   3abb8:	00049a61 	.word	0x00049a61

0003abbc <bt_le_adv_resume>:

	return options;
}

void bt_le_adv_resume(void)
{
   3abbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3abbe:	4832      	ldr	r0, [pc, #200]	; (3ac88 <bt_le_adv_resume+0xcc>)
   3abc0:	4c31      	ldr	r4, [pc, #196]	; (3ac88 <bt_le_adv_resume+0xcc>)
   3abc2:	f00b f8d5 	bl	45d70 <atomic_get>
	if (!adv) {
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   3abc6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   3abca:	d05a      	beq.n	3ac82 <bt_le_adv_resume+0xc6>
   3abcc:	4620      	mov	r0, r4
   3abce:	f00b f8cf 	bl	45d70 <atomic_get>
   3abd2:	0603      	lsls	r3, r0, #24
   3abd4:	d455      	bmi.n	3ac82 <bt_le_adv_resume+0xc6>
   3abd6:	4620      	mov	r0, r4
   3abd8:	f00b f8ca 	bl	45d70 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   3abdc:	0546      	lsls	r6, r0, #21
   3abde:	d550      	bpl.n	3ac82 <bt_le_adv_resume+0xc6>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   3abe0:	a901      	add	r1, sp, #4
   3abe2:	f1a4 0010 	sub.w	r0, r4, #16
   3abe6:	f7ff fded 	bl	3a7c4 <le_adv_start_add_conn>
	if (err) {
   3abea:	2800      	cmp	r0, #0
   3abec:	d149      	bne.n	3ac82 <bt_le_adv_resume+0xc6>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	} else {
		uint8_t own_addr_type;
		bool dir_adv = adv_is_directed(adv);
   3abee:	f1a4 0010 	sub.w	r0, r4, #16
   3abf2:	f7ff fddb 	bl	3a7ac <adv_is_directed>
   3abf6:	4602      	mov	r2, r0
   3abf8:	4620      	mov	r0, r4
   3abfa:	f00b f8b9 	bl	45d70 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3abfe:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3ac02:	4620      	mov	r0, r4
   3ac04:	f00b f8b4 	bl	45d70 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   3ac08:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   3ac0c:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   3ac0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
   3ac12:	481d      	ldr	r0, [pc, #116]	; (3ac88 <bt_le_adv_resume+0xcc>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   3ac14:	bf48      	it	mi
   3ac16:	f041 0101 	orrmi.w	r1, r1, #1
   3ac1a:	f00b f8a9 	bl	45d70 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   3ac1e:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   3ac20:	bf48      	it	mi
   3ac22:	f041 0104 	orrmi.w	r1, r1, #4
		uint32_t options = adv_get_options(adv);

		/* Always set the address. Don't assume it has not changed. */
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   3ac26:	4819      	ldr	r0, [pc, #100]	; (3ac8c <bt_le_adv_resume+0xd0>)
   3ac28:	f10d 0303 	add.w	r3, sp, #3
   3ac2c:	f7ff fd0a 	bl	3a644 <bt_id_set_adv_own_addr>
		if (err) {
   3ac30:	4605      	mov	r5, r0
   3ac32:	bb30      	cbnz	r0, 3ac82 <bt_le_adv_resume+0xc6>
	return bt_le_adv_set_enable_legacy(adv, enable);
   3ac34:	4815      	ldr	r0, [pc, #84]	; (3ac8c <bt_le_adv_resume+0xd0>)
   3ac36:	2101      	movs	r1, #1
   3ac38:	f00b f9bc 	bl	45fb4 <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   3ac3c:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   3ac3e:	b928      	cbnz	r0, 3ac4c <bt_le_adv_resume+0x90>
	bt_conn_unref(conn);
   3ac40:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   3ac42:	b002      	add	sp, #8
   3ac44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   3ac48:	f00b ba76 	b.w	46138 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   3ac4c:	4629      	mov	r1, r5
   3ac4e:	4630      	mov	r0, r6
   3ac50:	f000 fa22 	bl	3b098 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3ac54:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   3ac58:	480b      	ldr	r0, [pc, #44]	; (3ac88 <bt_le_adv_resume+0xcc>)
   3ac5a:	f00b f88f 	bl	45d7c <atomic_and>
   3ac5e:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   3ac60:	4630      	mov	r0, r6
   3ac62:	f00b fa69 	bl	46138 <bt_conn_unref>
	if (persist_paused) {
   3ac66:	046b      	lsls	r3, r5, #17
   3ac68:	d50b      	bpl.n	3ac82 <bt_le_adv_resume+0xc6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ac6a:	f3bf 8f5b 	dmb	ish
   3ac6e:	e854 3f00 	ldrex	r3, [r4]
   3ac72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   3ac76:	e844 3200 	strex	r2, r3, [r4]
   3ac7a:	2a00      	cmp	r2, #0
   3ac7c:	d1f7      	bne.n	3ac6e <bt_le_adv_resume+0xb2>
   3ac7e:	f3bf 8f5b 	dmb	ish
}
   3ac82:	b002      	add	sp, #8
   3ac84:	bd70      	pop	{r4, r5, r6, pc}
   3ac86:	bf00      	nop
   3ac88:	200003b0 	.word	0x200003b0
   3ac8c:	200003a0 	.word	0x200003a0

0003ac90 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   3ac90:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   3ac92:	4b0b      	ldr	r3, [pc, #44]	; (3acc0 <notify_connected+0x30>)
   3ac94:	681d      	ldr	r5, [r3, #0]
{
   3ac96:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   3ac98:	b925      	cbnz	r5, 3aca4 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3ac9a:	4d0a      	ldr	r5, [pc, #40]	; (3acc4 <notify_connected+0x34>)
   3ac9c:	4e0a      	ldr	r6, [pc, #40]	; (3acc8 <notify_connected+0x38>)
   3ac9e:	42b5      	cmp	r5, r6
   3aca0:	d307      	bcc.n	3acb2 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   3aca2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   3aca4:	682b      	ldr	r3, [r5, #0]
   3aca6:	b113      	cbz	r3, 3acae <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   3aca8:	7a61      	ldrb	r1, [r4, #9]
   3acaa:	4620      	mov	r0, r4
   3acac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   3acae:	692d      	ldr	r5, [r5, #16]
   3acb0:	e7f2      	b.n	3ac98 <notify_connected+0x8>
		if (cb->connected) {
   3acb2:	682b      	ldr	r3, [r5, #0]
   3acb4:	b113      	cbz	r3, 3acbc <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   3acb6:	7a61      	ldrb	r1, [r4, #9]
   3acb8:	4620      	mov	r0, r4
   3acba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3acbc:	3514      	adds	r5, #20
   3acbe:	e7ee      	b.n	3ac9e <notify_connected+0xe>
   3acc0:	20002c00 	.word	0x20002c00
   3acc4:	00048fbc 	.word	0x00048fbc
   3acc8:	00048fbc 	.word	0x00048fbc

0003accc <tx_notify>:
{
   3accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   3acd0:	4f15      	ldr	r7, [pc, #84]	; (3ad28 <tx_notify+0x5c>)
{
   3acd2:	4604      	mov	r4, r0
	tx->cb = NULL;
   3acd4:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   3acd8:	f04f 0240 	mov.w	r2, #64	; 0x40
   3acdc:	f3ef 8311 	mrs	r3, BASEPRI
   3ace0:	f382 8812 	msr	BASEPRI_MAX, r2
   3ace4:	f3bf 8f6f 	isb	sy
   3ace8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   3acea:	b929      	cbnz	r1, 3acf8 <tx_notify+0x2c>
	__asm__ volatile(
   3acec:	f383 8811 	msr	BASEPRI, r3
   3acf0:	f3bf 8f6f 	isb	sy
}
   3acf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3acf8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   3acfa:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   3acfc:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3acfe:	4281      	cmp	r1, r0
	list->tail = node;
   3ad00:	bf08      	it	eq
   3ad02:	6262      	streq	r2, [r4, #36]	; 0x24
   3ad04:	f383 8811 	msr	BASEPRI, r3
   3ad08:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   3ad0c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   3ad10:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   3ad14:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   3ad18:	4638      	mov	r0, r7
   3ad1a:	f00d fb08 	bl	4832e <k_queue_append>
		cb(conn, user_data, 0);
   3ad1e:	2200      	movs	r2, #0
   3ad20:	4631      	mov	r1, r6
   3ad22:	4620      	mov	r0, r4
   3ad24:	47a8      	blx	r5
	while (1) {
   3ad26:	e7d7      	b.n	3acd8 <tx_notify+0xc>
   3ad28:	20000a2c 	.word	0x20000a2c

0003ad2c <conn_tx_destroy>:
{
   3ad2c:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   3ad2e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   3ad32:	2200      	movs	r2, #0
	tx->user_data = NULL;
   3ad34:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   3ad38:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   3ad3a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   3ad3c:	4805      	ldr	r0, [pc, #20]	; (3ad54 <conn_tx_destroy+0x28>)
   3ad3e:	f00d faf6 	bl	4832e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   3ad42:	4631      	mov	r1, r6
   3ad44:	4620      	mov	r0, r4
   3ad46:	462b      	mov	r3, r5
   3ad48:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   3ad4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   3ad50:	4718      	bx	r3
   3ad52:	bf00      	nop
   3ad54:	20000a2c 	.word	0x20000a2c

0003ad58 <send_frag>:
{
   3ad58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   3ad5c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 3aed8 <send_frag+0x180>
{
   3ad60:	461f      	mov	r7, r3
	if (bt_dev.le.acl_mtu) {
   3ad62:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
   3ad66:	2b00      	cmp	r3, #0
{
   3ad68:	4604      	mov	r4, r0
   3ad6a:	460d      	mov	r5, r1
	return NULL;
   3ad6c:	f508 7084 	add.w	r0, r8, #264	; 0x108
{
   3ad70:	4616      	mov	r6, r2
	return NULL;
   3ad72:	bf08      	it	eq
   3ad74:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   3ad76:	2200      	movs	r2, #0
   3ad78:	2300      	movs	r3, #0
   3ad7a:	f005 fed3 	bl	40b24 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   3ad7e:	2800      	cmp	r0, #0
   3ad80:	f040 80a7 	bne.w	3aed2 <send_frag+0x17a>
	if (frag) {
   3ad84:	2e00      	cmp	r6, #0
   3ad86:	d07a      	beq.n	3ae7e <send_frag+0x126>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   3ad88:	f106 0a0c 	add.w	sl, r6, #12
   3ad8c:	4650      	mov	r0, sl
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   3ad8e:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
   3ad92:	f00c fc51 	bl	47638 <net_buf_simple_tailroom>
   3ad96:	4558      	cmp	r0, fp
   3ad98:	d96b      	bls.n	3ae72 <send_frag+0x11a>
	return bt_dev.le.acl_mtu;
   3ad9a:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   3ad9e:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   3ada2:	465a      	mov	r2, fp
   3ada4:	4650      	mov	r0, sl
   3ada6:	f00c fc12 	bl	475ce <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   3adaa:	4659      	mov	r1, fp
   3adac:	4628      	mov	r0, r5
   3adae:	f00c fc27 	bl	47600 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   3adb2:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   3adb4:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   3adb6:	2b07      	cmp	r3, #7
   3adb8:	f040 8088 	bne.w	3aecc <send_frag+0x174>
	__asm__ volatile(
   3adbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   3adc0:	f3ef 8211 	mrs	r2, BASEPRI
   3adc4:	f383 8812 	msr	BASEPRI_MAX, r3
   3adc8:	f3bf 8f6f 	isb	sy
	if (tx) {
   3adcc:	2d00      	cmp	r5, #0
   3adce:	d061      	beq.n	3ae94 <send_frag+0x13c>
	parent->next = child;
   3add0:	2300      	movs	r3, #0
   3add2:	602b      	str	r3, [r5, #0]
	return list->tail;
   3add4:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   3add6:	2b00      	cmp	r3, #0
   3add8:	d159      	bne.n	3ae8e <send_frag+0x136>
	list->head = node;
   3adda:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   3adde:	f382 8811 	msr	BASEPRI, r2
   3ade2:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   3ade6:	2104      	movs	r1, #4
   3ade8:	f106 000c 	add.w	r0, r6, #12
   3adec:	f00c fc00 	bl	475f0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   3adf0:	8823      	ldrh	r3, [r4, #0]
   3adf2:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   3adf6:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   3adfa:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   3adfc:	8a33      	ldrh	r3, [r6, #16]
   3adfe:	3b04      	subs	r3, #4
   3ae00:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   3ae02:	2302      	movs	r3, #2
   3ae04:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   3ae06:	4630      	mov	r0, r6
   3ae08:	f7fe fec2 	bl	39b90 <bt_send>
	if (err) {
   3ae0c:	4607      	mov	r7, r0
   3ae0e:	b368      	cbz	r0, 3ae6c <send_frag+0x114>
	__asm__ volatile(
   3ae10:	f04f 0340 	mov.w	r3, #64	; 0x40
   3ae14:	f3ef 8111 	mrs	r1, BASEPRI
   3ae18:	f383 8812 	msr	BASEPRI_MAX, r3
   3ae1c:	f3bf 8f6f 	isb	sy
		if (tx) {
   3ae20:	2d00      	cmp	r5, #0
   3ae22:	d04d      	beq.n	3aec0 <send_frag+0x168>
	return list->head;
   3ae24:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3ae26:	2200      	movs	r2, #0
   3ae28:	b15b      	cbz	r3, 3ae42 <send_frag+0xea>
   3ae2a:	429d      	cmp	r5, r3
   3ae2c:	d145      	bne.n	3aeba <send_frag+0x162>
	return node->next;
   3ae2e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   3ae30:	2a00      	cmp	r2, #0
   3ae32:	d13c      	bne.n	3aeae <send_frag+0x156>
   3ae34:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   3ae36:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   3ae38:	4295      	cmp	r5, r2
   3ae3a:	d100      	bne.n	3ae3e <send_frag+0xe6>
	list->tail = node;
   3ae3c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   3ae3e:	2300      	movs	r3, #0
   3ae40:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   3ae42:	f381 8811 	msr	BASEPRI, r1
   3ae46:	f3bf 8f6f 	isb	sy
		err = -EIO;
   3ae4a:	f06f 0704 	mvn.w	r7, #4
	if (bt_dev.le.acl_mtu) {
   3ae4e:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
   3ae52:	4822      	ldr	r0, [pc, #136]	; (3aedc <send_frag+0x184>)
   3ae54:	2b00      	cmp	r3, #0
   3ae56:	bf08      	it	eq
   3ae58:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   3ae5a:	f005 fe3d 	bl	40ad8 <z_impl_k_sem_give>
	if (tx) {
   3ae5e:	b12d      	cbz	r5, 3ae6c <send_frag+0x114>
		tx_data(buf)->tx = NULL;
   3ae60:	2300      	movs	r3, #0
   3ae62:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   3ae64:	4629      	mov	r1, r5
   3ae66:	4620      	mov	r0, r4
   3ae68:	f7ff ff60 	bl	3ad2c <conn_tx_destroy>
}
   3ae6c:	4638      	mov	r0, r7
   3ae6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   3ae72:	4650      	mov	r0, sl
   3ae74:	f00c fbe0 	bl	47638 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   3ae78:	fa1f fb80 	uxth.w	fp, r0
   3ae7c:	e78f      	b.n	3ad9e <send_frag+0x46>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   3ae7e:	2200      	movs	r2, #0
   3ae80:	2300      	movs	r3, #0
   3ae82:	f104 0038 	add.w	r0, r4, #56	; 0x38
   3ae86:	f00c fb41 	bl	4750c <net_buf_get>
   3ae8a:	4606      	mov	r6, r0
		frag = buf;
   3ae8c:	e791      	b.n	3adb2 <send_frag+0x5a>
   3ae8e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3ae90:	61a5      	str	r5, [r4, #24]
}
   3ae92:	e7a4      	b.n	3adde <send_frag+0x86>
	return list->tail;
   3ae94:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   3ae96:	b133      	cbz	r3, 3aea6 <send_frag+0x14e>
			pending_no_cb = &tail_tx->pending_no_cb;
   3ae98:	f103 090c 	add.w	r9, r3, #12
   3ae9c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   3ae9e:	3301      	adds	r3, #1
   3aea0:	f8c9 3000 	str.w	r3, [r9]
   3aea4:	e79b      	b.n	3adde <send_frag+0x86>
			pending_no_cb = &conn->pending_no_cb;
   3aea6:	69e3      	ldr	r3, [r4, #28]
   3aea8:	f104 091c 	add.w	r9, r4, #28
   3aeac:	e7f7      	b.n	3ae9e <send_frag+0x146>
	parent->next = child;
   3aeae:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   3aeb0:	69a3      	ldr	r3, [r4, #24]
   3aeb2:	429d      	cmp	r5, r3
	list->tail = node;
   3aeb4:	bf08      	it	eq
   3aeb6:	61a2      	streq	r2, [r4, #24]
}
   3aeb8:	e7c1      	b.n	3ae3e <send_frag+0xe6>
	return node->next;
   3aeba:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3aebc:	681b      	ldr	r3, [r3, #0]
   3aebe:	e7b3      	b.n	3ae28 <send_frag+0xd0>
			(*pending_no_cb)--;
   3aec0:	f8d9 3000 	ldr.w	r3, [r9]
   3aec4:	3b01      	subs	r3, #1
   3aec6:	f8c9 3000 	str.w	r3, [r9]
   3aeca:	e7ba      	b.n	3ae42 <send_frag+0xea>
		err = -ENOTCONN;
   3aecc:	f06f 077f 	mvn.w	r7, #127	; 0x7f
   3aed0:	e7bd      	b.n	3ae4e <send_frag+0xf6>
		return -ENOBUFS;
   3aed2:	f06f 0768 	mvn.w	r7, #104	; 0x68
   3aed6:	e7c9      	b.n	3ae6c <send_frag+0x114>
   3aed8:	20000388 	.word	0x20000388
   3aedc:	20000490 	.word	0x20000490

0003aee0 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   3aee0:	4804      	ldr	r0, [pc, #16]	; (3aef4 <bt_conn_get_pkts+0x14>)
   3aee2:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   3aee6:	2b00      	cmp	r3, #0
   3aee8:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   3aeec:	bf08      	it	eq
   3aeee:	2000      	moveq	r0, #0
   3aef0:	4770      	bx	lr
   3aef2:	bf00      	nop
   3aef4:	20000388 	.word	0x20000388

0003aef8 <bt_conn_new>:
{
   3aef8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   3aefa:	2200      	movs	r2, #0
   3aefc:	4604      	mov	r4, r0
   3aefe:	428a      	cmp	r2, r1
   3af00:	d102      	bne.n	3af08 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   3af02:	2400      	movs	r4, #0
}
   3af04:	4620      	mov	r0, r4
   3af06:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3af08:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   3af0c:	2001      	movs	r0, #1
   3af0e:	f3bf 8f5b 	dmb	ish
   3af12:	e853 5f00 	ldrex	r5, [r3]
   3af16:	2d00      	cmp	r5, #0
   3af18:	d104      	bne.n	3af24 <bt_conn_new+0x2c>
   3af1a:	e843 0c00 	strex	ip, r0, [r3]
   3af1e:	f1bc 0f00 	cmp.w	ip, #0
   3af22:	d1f6      	bne.n	3af12 <bt_conn_new+0x1a>
   3af24:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   3af28:	d002      	beq.n	3af30 <bt_conn_new+0x38>
   3af2a:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   3af2c:	4402      	add	r2, r0
   3af2e:	e7e6      	b.n	3aefe <bt_conn_new+0x6>
	if (!conn) {
   3af30:	2c00      	cmp	r4, #0
   3af32:	d0e6      	beq.n	3af02 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   3af34:	22bc      	movs	r2, #188	; 0xbc
   3af36:	2100      	movs	r1, #0
   3af38:	4620      	mov	r0, r4
   3af3a:	f00a fbf4 	bl	45726 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   3af3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3af42:	4904      	ldr	r1, [pc, #16]	; (3af54 <bt_conn_new+0x5c>)
   3af44:	f00d fad3 	bl	484ee <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   3af48:	4903      	ldr	r1, [pc, #12]	; (3af58 <bt_conn_new+0x60>)
   3af4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3af4e:	f00d fa8a 	bl	48466 <k_work_init>
	return conn;
   3af52:	e7d7      	b.n	3af04 <bt_conn_new+0xc>
   3af54:	0003b4b5 	.word	0x0003b4b5
   3af58:	00046009 	.word	0x00046009

0003af5c <bt_conn_send_cb>:
{
   3af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3af5e:	461f      	mov	r7, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   3af60:	7acb      	ldrb	r3, [r1, #11]
   3af62:	2b07      	cmp	r3, #7
{
   3af64:	4606      	mov	r6, r0
   3af66:	460d      	mov	r5, r1
   3af68:	4614      	mov	r4, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   3af6a:	d930      	bls.n	3afce <bt_conn_send_cb+0x72>
	if (conn->state != BT_CONN_CONNECTED) {
   3af6c:	7a83      	ldrb	r3, [r0, #10]
   3af6e:	2b07      	cmp	r3, #7
   3af70:	d11b      	bne.n	3afaa <bt_conn_send_cb+0x4e>
	if (cb) {
   3af72:	b352      	cbz	r2, 3afca <bt_conn_send_cb+0x6e>
	return z_impl_z_current_get();
   3af74:	f006 faaa 	bl	414cc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   3af78:	4b18      	ldr	r3, [pc, #96]	; (3afdc <bt_conn_send_cb+0x80>)
   3af7a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   3af7c:	4818      	ldr	r0, [pc, #96]	; (3afe0 <bt_conn_send_cb+0x84>)
   3af7e:	bf07      	ittee	eq
   3af80:	2200      	moveq	r2, #0
   3af82:	2300      	moveq	r3, #0
   3af84:	f04f 32ff 	movne.w	r2, #4294967295
   3af88:	f04f 33ff 	movne.w	r3, #4294967295
   3af8c:	f005 fd70 	bl	40a70 <z_impl_k_queue_get>
   3af90:	4601      	mov	r1, r0
		if (!tx) {
   3af92:	b1f8      	cbz	r0, 3afd4 <bt_conn_send_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
   3af94:	7ab3      	ldrb	r3, [r6, #10]
   3af96:	2b07      	cmp	r3, #7
   3af98:	f04f 0200 	mov.w	r2, #0
   3af9c:	d008      	beq.n	3afb0 <bt_conn_send_cb+0x54>
	tx->user_data = NULL;
   3af9e:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   3afa2:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   3afa4:	480e      	ldr	r0, [pc, #56]	; (3afe0 <bt_conn_send_cb+0x84>)
   3afa6:	f00d f9c2 	bl	4832e <k_queue_append>
		return -ENOTCONN;
   3afaa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   3afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   3afb0:	e9c0 4701 	strd	r4, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   3afb4:	60c2      	str	r2, [r0, #12]
	tx_data(buf)->is_cont = false;
   3afb6:	2400      	movs	r4, #0
		tx_data(buf)->tx = tx;
   3afb8:	61a9      	str	r1, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   3afba:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   3afbe:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   3afc0:	4629      	mov	r1, r5
   3afc2:	f00c fad2 	bl	4756a <net_buf_put>
	return 0;
   3afc6:	4620      	mov	r0, r4
   3afc8:	e7f1      	b.n	3afae <bt_conn_send_cb+0x52>
   3afca:	4611      	mov	r1, r2
   3afcc:	e7f3      	b.n	3afb6 <bt_conn_send_cb+0x5a>
		return -EINVAL;
   3afce:	f06f 0015 	mvn.w	r0, #21
   3afd2:	e7ec      	b.n	3afae <bt_conn_send_cb+0x52>
			return -ENOBUFS;
   3afd4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3afd8:	e7e9      	b.n	3afae <bt_conn_send_cb+0x52>
   3afda:	bf00      	nop
   3afdc:	20002598 	.word	0x20002598
   3afe0:	20000a2c 	.word	0x20000a2c

0003afe4 <bt_conn_prepare_events>:
{
   3afe4:	b570      	push	{r4, r5, r6, lr}
   3afe6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   3afe8:	4823      	ldr	r0, [pc, #140]	; (3b078 <bt_conn_prepare_events+0x94>)
   3afea:	f00d fdd9 	bl	48ba0 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   3afee:	4b22      	ldr	r3, [pc, #136]	; (3b078 <bt_conn_prepare_events+0x94>)
   3aff0:	2200      	movs	r2, #0
   3aff2:	4620      	mov	r0, r4
   3aff4:	2101      	movs	r1, #1
   3aff6:	f00d fdb6 	bl	48b66 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3affa:	f3bf 8f5b 	dmb	ish
   3affe:	4b1f      	ldr	r3, [pc, #124]	; (3b07c <bt_conn_prepare_events+0x98>)
   3b000:	681a      	ldr	r2, [r3, #0]
   3b002:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   3b006:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   3b00a:	b90a      	cbnz	r2, 3b010 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   3b00c:	2001      	movs	r0, #1
}
   3b00e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   3b010:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
   3b014:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
   3b018:	b993      	cbnz	r3, 3b040 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b01a:	f3bf 8f5b 	dmb	ish
   3b01e:	1d0b      	adds	r3, r1, #4
   3b020:	e853 2f00 	ldrex	r2, [r3]
   3b024:	f022 0540 	bic.w	r5, r2, #64	; 0x40
   3b028:	e843 5600 	strex	r6, r5, [r3]
   3b02c:	2e00      	cmp	r6, #0
   3b02e:	d1f7      	bne.n	3b020 <bt_conn_prepare_events+0x3c>
   3b030:	f3bf 8f5b 	dmb	ish
   3b034:	0653      	lsls	r3, r2, #25
   3b036:	d503      	bpl.n	3b040 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   3b038:	4608      	mov	r0, r1
   3b03a:	f00a fff1 	bl	46020 <conn_cleanup>
		return -ENOTCONN;
   3b03e:	e7e5      	b.n	3b00c <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   3b040:	7a8b      	ldrb	r3, [r1, #10]
   3b042:	2b07      	cmp	r3, #7
   3b044:	d1e2      	bne.n	3b00c <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   3b046:	4b0e      	ldr	r3, [pc, #56]	; (3b080 <bt_conn_prepare_events+0x9c>)
   3b048:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   3b04c:	2a00      	cmp	r2, #0
   3b04e:	d0dd      	beq.n	3b00c <bt_conn_prepare_events+0x28>
	return sem->count;
   3b050:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   3b054:	6b89      	ldr	r1, [r1, #56]	; 0x38
   3b056:	b151      	cbz	r1, 3b06e <bt_conn_prepare_events+0x8a>
   3b058:	b94a      	cbnz	r2, 3b06e <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
   3b05a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   3b05e:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   3b060:	f00d fd81 	bl	48b66 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   3b064:	2301      	movs	r3, #1
   3b066:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   3b06a:	2002      	movs	r0, #2
	return ev_count;
   3b06c:	e7cf      	b.n	3b00e <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   3b06e:	4b05      	ldr	r3, [pc, #20]	; (3b084 <bt_conn_prepare_events+0xa0>)
   3b070:	2200      	movs	r2, #0
   3b072:	2104      	movs	r1, #4
   3b074:	e7f4      	b.n	3b060 <bt_conn_prepare_events+0x7c>
   3b076:	bf00      	nop
   3b078:	20000720 	.word	0x20000720
   3b07c:	20001a54 	.word	0x20001a54
   3b080:	20000388 	.word	0x20000388
   3b084:	200019d0 	.word	0x200019d0

0003b088 <bt_conn_lookup_handle>:
{
   3b088:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   3b08a:	2101      	movs	r1, #1
   3b08c:	4801      	ldr	r0, [pc, #4]	; (3b094 <bt_conn_lookup_handle+0xc>)
   3b08e:	f00b b86f 	b.w	46170 <conn_lookup_handle>
   3b092:	bf00      	nop
   3b094:	20001998 	.word	0x20001998

0003b098 <bt_conn_set_state>:
{
   3b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   3b09c:	7a85      	ldrb	r5, [r0, #10]
   3b09e:	428d      	cmp	r5, r1
{
   3b0a0:	4604      	mov	r4, r0
	if (conn->state == state) {
   3b0a2:	f000 8094 	beq.w	3b1ce <bt_conn_set_state+0x136>
	conn->state = state;
   3b0a6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   3b0a8:	b925      	cbnz	r5, 3b0b4 <bt_conn_set_state+0x1c>
		if (conn->type != BT_CONN_TYPE_ISO) {
   3b0aa:	7883      	ldrb	r3, [r0, #2]
   3b0ac:	2b08      	cmp	r3, #8
   3b0ae:	d001      	beq.n	3b0b4 <bt_conn_set_state+0x1c>
			bt_conn_ref(conn);
   3b0b0:	f00b f826 	bl	46100 <bt_conn_ref>
	switch (conn->state) {
   3b0b4:	7aa3      	ldrb	r3, [r4, #10]
   3b0b6:	2b01      	cmp	r3, #1
   3b0b8:	d11d      	bne.n	3b0f6 <bt_conn_set_state+0x5e>
	if (bt_dev.le.acl_mtu) {
   3b0ba:	4d54      	ldr	r5, [pc, #336]	; (3b20c <bt_conn_set_state+0x174>)
		tx->pending_no_cb = 0U;
   3b0bc:	2700      	movs	r7, #0
	return NULL;
   3b0be:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   3b0c2:	f04f 0240 	mov.w	r2, #64	; 0x40
   3b0c6:	f3ef 8311 	mrs	r3, BASEPRI
   3b0ca:	f382 8812 	msr	BASEPRI_MAX, r2
   3b0ce:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   3b0d2:	69e2      	ldr	r2, [r4, #28]
   3b0d4:	2a00      	cmp	r2, #0
   3b0d6:	d074      	beq.n	3b1c2 <bt_conn_set_state+0x12a>
			conn->pending_no_cb--;
   3b0d8:	3a01      	subs	r2, #1
   3b0da:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   3b0dc:	f383 8811 	msr	BASEPRI, r3
   3b0e0:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   3b0e4:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   3b0e8:	2b00      	cmp	r3, #0
   3b0ea:	bf14      	ite	ne
   3b0ec:	4630      	movne	r0, r6
   3b0ee:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   3b0f0:	f005 fcf2 	bl	40ad8 <z_impl_k_sem_give>
}
   3b0f4:	e7e5      	b.n	3b0c2 <bt_conn_set_state+0x2a>
	switch (conn->state) {
   3b0f6:	2b07      	cmp	r3, #7
   3b0f8:	d009      	beq.n	3b10e <bt_conn_set_state+0x76>
   3b0fa:	2b00      	cmp	r3, #0
   3b0fc:	d167      	bne.n	3b1ce <bt_conn_set_state+0x136>
		if (conn->type == BT_CONN_TYPE_SCO) {
   3b0fe:	78a3      	ldrb	r3, [r4, #2]
   3b100:	2b04      	cmp	r3, #4
   3b102:	d121      	bne.n	3b148 <bt_conn_set_state+0xb0>
			bt_conn_unref(conn);
   3b104:	4620      	mov	r0, r4
}
   3b106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   3b10a:	f00b b815 	b.w	46138 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   3b10e:	78a3      	ldrb	r3, [r4, #2]
   3b110:	2b04      	cmp	r3, #4
   3b112:	d05c      	beq.n	3b1ce <bt_conn_set_state+0x136>
	z_impl_k_queue_init(queue);
   3b114:	f104 0038 	add.w	r0, r4, #56	; 0x38
   3b118:	f00d f8fd 	bl	48316 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   3b11c:	483c      	ldr	r0, [pc, #240]	; (3b210 <bt_conn_set_state+0x178>)
   3b11e:	2100      	movs	r1, #0
   3b120:	f006 fca4 	bl	41a6c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   3b124:	2300      	movs	r3, #0
	list->tail = NULL;
   3b126:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3b12a:	78e3      	ldrb	r3, [r4, #3]
   3b12c:	2b01      	cmp	r3, #1
   3b12e:	d14e      	bne.n	3b1ce <bt_conn_set_state+0x136>
			conn->le.conn_param_retry_countdown =
   3b130:	2303      	movs	r3, #3
   3b132:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   3b136:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3b13a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   3b13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   3b142:	2300      	movs	r3, #0
   3b144:	f005 beac 	b.w	40ea0 <k_work_schedule>
		switch (old_state) {
   3b148:	3d01      	subs	r5, #1
   3b14a:	2d05      	cmp	r5, #5
   3b14c:	d83f      	bhi.n	3b1ce <bt_conn_set_state+0x136>
   3b14e:	a301      	add	r3, pc, #4	; (adr r3, 3b154 <bt_conn_set_state+0xbc>)
   3b150:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   3b154:	0003b16d 	.word	0x0003b16d
   3b158:	0003b1b5 	.word	0x0003b1b5
   3b15c:	0003b105 	.word	0x0003b105
   3b160:	0003b105 	.word	0x0003b105
   3b164:	0003b1b5 	.word	0x0003b1b5
   3b168:	0003b1b5 	.word	0x0003b1b5
			tx_notify(conn);
   3b16c:	4620      	mov	r0, r4
   3b16e:	f7ff fdad 	bl	3accc <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   3b172:	78a3      	ldrb	r3, [r4, #2]
   3b174:	2b01      	cmp	r3, #1
   3b176:	d10a      	bne.n	3b18e <bt_conn_set_state+0xf6>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   3b178:	f104 0558 	add.w	r5, r4, #88	; 0x58
   3b17c:	4628      	mov	r0, r5
   3b17e:	f00d f9c2 	bl	48506 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   3b182:	f010 0f0c 	tst.w	r0, #12
   3b186:	d002      	beq.n	3b18e <bt_conn_set_state+0xf6>
				k_work_cancel_delayable(&conn->deferred_work);
   3b188:	4628      	mov	r0, r5
   3b18a:	f00d f9be 	bl	4850a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b18e:	f3bf 8f5b 	dmb	ish
   3b192:	3404      	adds	r4, #4
   3b194:	e854 3f00 	ldrex	r3, [r4]
   3b198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b19c:	e844 3200 	strex	r2, r3, [r4]
   3b1a0:	2a00      	cmp	r2, #0
   3b1a2:	d1f7      	bne.n	3b194 <bt_conn_set_state+0xfc>
   3b1a4:	f3bf 8f5b 	dmb	ish
   3b1a8:	4819      	ldr	r0, [pc, #100]	; (3b210 <bt_conn_set_state+0x178>)
}
   3b1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3b1ae:	2100      	movs	r1, #0
   3b1b0:	f006 bc5c 	b.w	41a6c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   3b1b4:	7a63      	ldrb	r3, [r4, #9]
   3b1b6:	2b00      	cmp	r3, #0
   3b1b8:	d0a4      	beq.n	3b104 <bt_conn_set_state+0x6c>
				notify_connected(conn);
   3b1ba:	4620      	mov	r0, r4
   3b1bc:	f7ff fd68 	bl	3ac90 <notify_connected>
   3b1c0:	e7a0      	b.n	3b104 <bt_conn_set_state+0x6c>
	return list->head;
   3b1c2:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   3b1c4:	b929      	cbnz	r1, 3b1d2 <bt_conn_set_state+0x13a>
   3b1c6:	f383 8811 	msr	BASEPRI, r3
   3b1ca:	f3bf 8f6f 	isb	sy
}
   3b1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3b1d2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   3b1d4:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   3b1d6:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3b1d8:	4281      	cmp	r1, r0
	list->tail = node;
   3b1da:	bf08      	it	eq
   3b1dc:	61a2      	streq	r2, [r4, #24]
   3b1de:	f383 8811 	msr	BASEPRI, r3
   3b1e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3b1e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   3b1ea:	f3ef 8311 	mrs	r3, BASEPRI
   3b1ee:	f382 8812 	msr	BASEPRI_MAX, r2
   3b1f2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   3b1f6:	68ca      	ldr	r2, [r1, #12]
   3b1f8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   3b1fa:	60cf      	str	r7, [r1, #12]
	__asm__ volatile(
   3b1fc:	f383 8811 	msr	BASEPRI, r3
   3b200:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   3b204:	4620      	mov	r0, r4
   3b206:	f7ff fd91 	bl	3ad2c <conn_tx_destroy>
   3b20a:	e76b      	b.n	3b0e4 <bt_conn_set_state+0x4c>
   3b20c:	20000388 	.word	0x20000388
   3b210:	20000720 	.word	0x20000720

0003b214 <bt_conn_foreach>:
{
   3b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b216:	4607      	mov	r7, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b218:	4809      	ldr	r0, [pc, #36]	; (3b240 <bt_conn_foreach+0x2c>)
{
   3b21a:	460d      	mov	r5, r1
   3b21c:	4616      	mov	r6, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b21e:	f00a ff6f 	bl	46100 <bt_conn_ref>
   3b222:	4604      	mov	r4, r0
		if (!conn) {
   3b224:	b150      	cbz	r0, 3b23c <bt_conn_foreach+0x28>
		if (!(conn->type & type)) {
   3b226:	7883      	ldrb	r3, [r0, #2]
   3b228:	423b      	tst	r3, r7
   3b22a:	d103      	bne.n	3b234 <bt_conn_foreach+0x20>
}
   3b22c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   3b230:	f00a bf82 	b.w	46138 <bt_conn_unref>
		func(conn, data);
   3b234:	4631      	mov	r1, r6
   3b236:	47a8      	blx	r5
		bt_conn_unref(conn);
   3b238:	4620      	mov	r0, r4
   3b23a:	e7f7      	b.n	3b22c <bt_conn_foreach+0x18>
}
   3b23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b23e:	bf00      	nop
   3b240:	20001998 	.word	0x20001998

0003b244 <bt_conn_cleanup_all>:
	bt_conn_foreach(BT_CONN_TYPE_ALL, conn_destroy, NULL);
   3b244:	4902      	ldr	r1, [pc, #8]	; (3b250 <bt_conn_cleanup_all+0xc>)
   3b246:	2200      	movs	r2, #0
   3b248:	200f      	movs	r0, #15
   3b24a:	f7ff bfe3 	b.w	3b214 <bt_conn_foreach>
   3b24e:	bf00      	nop
   3b250:	000461b5 	.word	0x000461b5

0003b254 <bt_conn_index>:
		index = conn - acl_conns;
   3b254:	4b03      	ldr	r3, [pc, #12]	; (3b264 <bt_conn_index+0x10>)
   3b256:	1ac0      	subs	r0, r0, r3
   3b258:	4b03      	ldr	r3, [pc, #12]	; (3b268 <bt_conn_index+0x14>)
   3b25a:	1180      	asrs	r0, r0, #6
   3b25c:	4358      	muls	r0, r3
}
   3b25e:	b2c0      	uxtb	r0, r0
   3b260:	4770      	bx	lr
   3b262:	bf00      	nop
   3b264:	20001998 	.word	0x20001998
   3b268:	aaaaaaab 	.word	0xaaaaaaab

0003b26c <bt_conn_create_pdu_timeout>:
{
   3b26c:	b538      	push	{r3, r4, r5, lr}
   3b26e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   3b270:	4906      	ldr	r1, [pc, #24]	; (3b28c <bt_conn_create_pdu_timeout+0x20>)
   3b272:	2800      	cmp	r0, #0
   3b274:	bf08      	it	eq
   3b276:	4608      	moveq	r0, r1
   3b278:	f00c f943 	bl	47502 <net_buf_alloc_fixed>
	if (!buf) {
   3b27c:	4604      	mov	r4, r0
   3b27e:	b118      	cbz	r0, 3b288 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   3b280:	1d29      	adds	r1, r5, #4
   3b282:	300c      	adds	r0, #12
   3b284:	f00c f999 	bl	475ba <net_buf_simple_reserve>
}
   3b288:	4620      	mov	r0, r4
   3b28a:	bd38      	pop	{r3, r4, r5, pc}
   3b28c:	20000a44 	.word	0x20000a44

0003b290 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   3b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3b292:	f3bf 8f5b 	dmb	ish
   3b296:	6842      	ldr	r2, [r0, #4]
   3b298:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   3b29c:	0592      	lsls	r2, r2, #22
{
   3b29e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   3b2a0:	f100 0304 	add.w	r3, r0, #4
   3b2a4:	d519      	bpl.n	3b2da <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   3b2a6:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   3b2aa:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   3b2ae:	4291      	cmp	r1, r2
   3b2b0:	d813      	bhi.n	3b2da <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   3b2b2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   3b2b6:	4291      	cmp	r1, r2
   3b2b8:	d30f      	bcc.n	3b2da <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   3b2ba:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   3b2be:	4291      	cmp	r1, r2
   3b2c0:	d10b      	bne.n	3b2da <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b2c2:	f3bf 8f5b 	dmb	ish
   3b2c6:	e853 1f00 	ldrex	r1, [r3]
   3b2ca:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   3b2ce:	e843 1200 	strex	r2, r1, [r3]
   3b2d2:	2a00      	cmp	r2, #0
   3b2d4:	d1f7      	bne.n	3b2c6 <notify_le_param_updated+0x36>
   3b2d6:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   3b2da:	4b10      	ldr	r3, [pc, #64]	; (3b31c <notify_le_param_updated+0x8c>)
   3b2dc:	681d      	ldr	r5, [r3, #0]
   3b2de:	b925      	cbnz	r5, 3b2ea <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b2e0:	4d0f      	ldr	r5, [pc, #60]	; (3b320 <notify_le_param_updated+0x90>)
   3b2e2:	4f10      	ldr	r7, [pc, #64]	; (3b324 <notify_le_param_updated+0x94>)
   3b2e4:	42bd      	cmp	r5, r7
   3b2e6:	d30c      	bcc.n	3b302 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   3b2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   3b2ea:	68ee      	ldr	r6, [r5, #12]
   3b2ec:	b13e      	cbz	r6, 3b2fe <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   3b2ee:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   3b2f2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   3b2f6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   3b2fa:	4620      	mov	r0, r4
   3b2fc:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   3b2fe:	692d      	ldr	r5, [r5, #16]
   3b300:	e7ed      	b.n	3b2de <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   3b302:	68ee      	ldr	r6, [r5, #12]
   3b304:	b13e      	cbz	r6, 3b316 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   3b306:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   3b30a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   3b30e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   3b312:	4620      	mov	r0, r4
   3b314:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b316:	3514      	adds	r5, #20
   3b318:	e7e4      	b.n	3b2e4 <notify_le_param_updated+0x54>
   3b31a:	bf00      	nop
   3b31c:	20002c00 	.word	0x20002c00
   3b320:	00048fbc 	.word	0x00048fbc
   3b324:	00048fbc 	.word	0x00048fbc

0003b328 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   3b328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b32c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   3b32e:	4608      	mov	r0, r1
{
   3b330:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   3b332:	f00a fc4a 	bl	45bca <bt_le_conn_params_valid>
   3b336:	4605      	mov	r5, r0
   3b338:	b918      	cbnz	r0, 3b342 <le_param_req+0x1a>
		return false;
   3b33a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   3b33c:	4628      	mov	r0, r5
   3b33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   3b342:	4b13      	ldr	r3, [pc, #76]	; (3b390 <le_param_req+0x68>)
   3b344:	681e      	ldr	r6, [r3, #0]
   3b346:	b946      	cbnz	r6, 3b35a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b348:	4e12      	ldr	r6, [pc, #72]	; (3b394 <le_param_req+0x6c>)
   3b34a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3b398 <le_param_req+0x70>
   3b34e:	4546      	cmp	r6, r8
   3b350:	d2f4      	bcs.n	3b33c <le_param_req+0x14>
		if (!cb->le_param_req) {
   3b352:	68b3      	ldr	r3, [r6, #8]
   3b354:	b983      	cbnz	r3, 3b378 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b356:	3614      	adds	r6, #20
   3b358:	e7f9      	b.n	3b34e <le_param_req+0x26>
		if (!cb->le_param_req) {
   3b35a:	68b3      	ldr	r3, [r6, #8]
   3b35c:	b90b      	cbnz	r3, 3b362 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   3b35e:	6936      	ldr	r6, [r6, #16]
   3b360:	e7f1      	b.n	3b346 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   3b362:	4621      	mov	r1, r4
   3b364:	4638      	mov	r0, r7
   3b366:	4798      	blx	r3
   3b368:	2800      	cmp	r0, #0
   3b36a:	d0e6      	beq.n	3b33a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   3b36c:	4620      	mov	r0, r4
   3b36e:	f00a fc2c 	bl	45bca <bt_le_conn_params_valid>
   3b372:	2800      	cmp	r0, #0
   3b374:	d1f3      	bne.n	3b35e <le_param_req+0x36>
   3b376:	e7e0      	b.n	3b33a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   3b378:	4621      	mov	r1, r4
   3b37a:	4638      	mov	r0, r7
   3b37c:	4798      	blx	r3
   3b37e:	2800      	cmp	r0, #0
   3b380:	d0db      	beq.n	3b33a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   3b382:	4620      	mov	r0, r4
   3b384:	f00a fc21 	bl	45bca <bt_le_conn_params_valid>
   3b388:	2800      	cmp	r0, #0
   3b38a:	d1e4      	bne.n	3b356 <le_param_req+0x2e>
   3b38c:	e7d5      	b.n	3b33a <le_param_req+0x12>
   3b38e:	bf00      	nop
   3b390:	20002c00 	.word	0x20002c00
   3b394:	00048fbc 	.word	0x00048fbc
   3b398:	00048fbc 	.word	0x00048fbc

0003b39c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   3b39c:	b570      	push	{r4, r5, r6, lr}
   3b39e:	4606      	mov	r6, r0
   3b3a0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   3b3a2:	4809      	ldr	r0, [pc, #36]	; (3b3c8 <bt_conn_add_le+0x2c>)
   3b3a4:	2101      	movs	r1, #1
   3b3a6:	f7ff fda7 	bl	3aef8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   3b3aa:	4604      	mov	r4, r0
   3b3ac:	b150      	cbz	r0, 3b3c4 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   3b3ae:	7206      	strb	r6, [r0, #8]
   3b3b0:	2207      	movs	r2, #7
   3b3b2:	4629      	mov	r1, r5
   3b3b4:	3088      	adds	r0, #136	; 0x88
   3b3b6:	f00a f9ab 	bl	45710 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   3b3ba:	2301      	movs	r3, #1
   3b3bc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   3b3be:	4b03      	ldr	r3, [pc, #12]	; (3b3cc <bt_conn_add_le+0x30>)
   3b3c0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   3b3c4:	4620      	mov	r0, r4
   3b3c6:	bd70      	pop	{r4, r5, r6, pc}
   3b3c8:	20001998 	.word	0x20001998
   3b3cc:	00280018 	.word	0x00280018

0003b3d0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   3b3d0:	b570      	push	{r4, r5, r6, lr}
   3b3d2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b3d4:	480a      	ldr	r0, [pc, #40]	; (3b400 <bt_conn_lookup_addr_le+0x30>)
{
   3b3d6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b3d8:	f00a fe92 	bl	46100 <bt_conn_ref>
   3b3dc:	4604      	mov	r4, r0

		if (!conn) {
   3b3de:	b120      	cbz	r0, 3b3ea <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   3b3e0:	7883      	ldrb	r3, [r0, #2]
   3b3e2:	2b01      	cmp	r3, #1
   3b3e4:	d004      	beq.n	3b3f0 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   3b3e6:	f00a fea7 	bl	46138 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   3b3ea:	2400      	movs	r4, #0
}
   3b3ec:	4620      	mov	r0, r4
   3b3ee:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   3b3f0:	4632      	mov	r2, r6
   3b3f2:	4629      	mov	r1, r5
   3b3f4:	f00a fef6 	bl	461e4 <bt_conn_is_peer_addr_le>
   3b3f8:	2800      	cmp	r0, #0
   3b3fa:	d1f7      	bne.n	3b3ec <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   3b3fc:	4620      	mov	r0, r4
   3b3fe:	e7f2      	b.n	3b3e6 <bt_conn_lookup_addr_le+0x16>
   3b400:	20001998 	.word	0x20001998

0003b404 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   3b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b406:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b408:	480e      	ldr	r0, [pc, #56]	; (3b444 <bt_conn_lookup_state_le+0x40>)
{
   3b40a:	460e      	mov	r6, r1
   3b40c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   3b40e:	f00a fe77 	bl	46100 <bt_conn_ref>

		if (!conn) {
   3b412:	4604      	mov	r4, r0
   3b414:	b120      	cbz	r0, 3b420 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   3b416:	7883      	ldrb	r3, [r0, #2]
   3b418:	2b01      	cmp	r3, #1
   3b41a:	d003      	beq.n	3b424 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   3b41c:	f00a fe8c 	bl	46138 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   3b420:	2400      	movs	r4, #0
   3b422:	e00d      	b.n	3b440 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   3b424:	b136      	cbz	r6, 3b434 <bt_conn_lookup_state_le+0x30>
   3b426:	4632      	mov	r2, r6
   3b428:	4629      	mov	r1, r5
   3b42a:	f00a fedb 	bl	461e4 <bt_conn_is_peer_addr_le>
   3b42e:	b908      	cbnz	r0, 3b434 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   3b430:	4620      	mov	r0, r4
   3b432:	e7f3      	b.n	3b41c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   3b434:	7aa3      	ldrb	r3, [r4, #10]
   3b436:	42bb      	cmp	r3, r7
   3b438:	d1fa      	bne.n	3b430 <bt_conn_lookup_state_le+0x2c>
   3b43a:	7a23      	ldrb	r3, [r4, #8]
   3b43c:	42ab      	cmp	r3, r5
   3b43e:	d1f7      	bne.n	3b430 <bt_conn_lookup_state_le+0x2c>
}
   3b440:	4620      	mov	r0, r4
   3b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b444:	20001998 	.word	0x20001998

0003b448 <send_conn_le_param_update>:
{
   3b448:	b538      	push	{r3, r4, r5, lr}
   3b44a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   3b44c:	4608      	mov	r0, r1
{
   3b44e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   3b450:	f00a fbbb 	bl	45bca <bt_le_conn_params_valid>
   3b454:	b348      	cbz	r0, 3b4aa <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   3b456:	4b16      	ldr	r3, [pc, #88]	; (3b4b0 <send_conn_le_param_update+0x68>)
   3b458:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   3b45c:	0799      	lsls	r1, r3, #30
   3b45e:	d407      	bmi.n	3b470 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   3b460:	78e3      	ldrb	r3, [r4, #3]
   3b462:	b183      	cbz	r3, 3b486 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   3b464:	4629      	mov	r1, r5
   3b466:	4620      	mov	r0, r4
}
   3b468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   3b46c:	f000 b9b0 	b.w	3b7d0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   3b470:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   3b474:	079a      	lsls	r2, r3, #30
   3b476:	d5f3      	bpl.n	3b460 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3b478:	f3bf 8f5b 	dmb	ish
   3b47c:	6863      	ldr	r3, [r4, #4]
   3b47e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   3b482:	055b      	lsls	r3, r3, #21
   3b484:	d4ec      	bmi.n	3b460 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   3b486:	4629      	mov	r1, r5
   3b488:	4620      	mov	r0, r4
   3b48a:	f00a fed3 	bl	46234 <bt_conn_le_conn_update>
		if (rc == 0) {
   3b48e:	b958      	cbnz	r0, 3b4a8 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   3b490:	882b      	ldrh	r3, [r5, #0]
   3b492:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   3b496:	886b      	ldrh	r3, [r5, #2]
   3b498:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   3b49c:	88ab      	ldrh	r3, [r5, #4]
   3b49e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   3b4a2:	88eb      	ldrh	r3, [r5, #6]
   3b4a4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   3b4a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3b4aa:	f06f 0015 	mvn.w	r0, #21
   3b4ae:	e7fb      	b.n	3b4a8 <send_conn_le_param_update+0x60>
   3b4b0:	20000388 	.word	0x20000388

0003b4b4 <deferred_work>:
{
   3b4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   3b4b6:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   3b4ba:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   3b4bc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   3b4c0:	b9fb      	cbnz	r3, 3b502 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   3b4c2:	4630      	mov	r0, r6
   3b4c4:	f00a ff0b 	bl	462de <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   3b4c8:	4b34      	ldr	r3, [pc, #208]	; (3b59c <deferred_work+0xe8>)
   3b4ca:	681d      	ldr	r5, [r3, #0]
   3b4cc:	b94d      	cbnz	r5, 3b4e2 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b4ce:	4d34      	ldr	r5, [pc, #208]	; (3b5a0 <deferred_work+0xec>)
   3b4d0:	4f34      	ldr	r7, [pc, #208]	; (3b5a4 <deferred_work+0xf0>)
   3b4d2:	42bd      	cmp	r5, r7
   3b4d4:	d30d      	bcc.n	3b4f2 <deferred_work+0x3e>
		bt_conn_unref(conn);
   3b4d6:	4630      	mov	r0, r6
}
   3b4d8:	b003      	add	sp, #12
   3b4da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   3b4de:	f00a be2b 	b.w	46138 <bt_conn_unref>
		if (cb->disconnected) {
   3b4e2:	686b      	ldr	r3, [r5, #4]
   3b4e4:	b11b      	cbz	r3, 3b4ee <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   3b4e6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   3b4ea:	4630      	mov	r0, r6
   3b4ec:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   3b4ee:	692d      	ldr	r5, [r5, #16]
   3b4f0:	e7ec      	b.n	3b4cc <deferred_work+0x18>
		if (cb->disconnected) {
   3b4f2:	686b      	ldr	r3, [r5, #4]
   3b4f4:	b11b      	cbz	r3, 3b4fe <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   3b4f6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   3b4fa:	4630      	mov	r0, r6
   3b4fc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   3b4fe:	3514      	adds	r5, #20
   3b500:	e7e7      	b.n	3b4d2 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   3b502:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   3b506:	2b01      	cmp	r3, #1
   3b508:	d130      	bne.n	3b56c <deferred_work+0xb8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b50a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   3b50e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   3b512:	e855 3f00 	ldrex	r3, [r5]
   3b516:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   3b51a:	e845 2100 	strex	r1, r2, [r5]
   3b51e:	2900      	cmp	r1, #0
   3b520:	d1f7      	bne.n	3b512 <deferred_work+0x5e>
   3b522:	f3bf 8f5b 	dmb	ish
   3b526:	059b      	lsls	r3, r3, #22
   3b528:	d522      	bpl.n	3b570 <deferred_work+0xbc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   3b52a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   3b52c:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
   3b52e:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   3b530:	6d23      	ldr	r3, [r4, #80]	; 0x50
   3b532:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   3b534:	4630      	mov	r0, r6
   3b536:	f7ff ff87 	bl	3b448 <send_conn_le_param_update>
		if (!err) {
   3b53a:	b958      	cbnz	r0, 3b554 <deferred_work+0xa0>
   3b53c:	f3bf 8f5b 	dmb	ish
   3b540:	e855 3f00 	ldrex	r3, [r5]
   3b544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   3b548:	e845 3200 	strex	r2, r3, [r5]
   3b54c:	2a00      	cmp	r2, #0
   3b54e:	d1f7      	bne.n	3b540 <deferred_work+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b550:	f3bf 8f5b 	dmb	ish
   3b554:	f3bf 8f5b 	dmb	ish
   3b558:	e855 3f00 	ldrex	r3, [r5]
   3b55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b560:	e845 3200 	strex	r2, r3, [r5]
   3b564:	2a00      	cmp	r2, #0
   3b566:	d1f7      	bne.n	3b558 <deferred_work+0xa4>
   3b568:	f3bf 8f5b 	dmb	ish
}
   3b56c:	b003      	add	sp, #12
   3b56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   3b570:	4a0d      	ldr	r2, [pc, #52]	; (3b5a8 <deferred_work+0xf4>)
   3b572:	6810      	ldr	r0, [r2, #0]
   3b574:	6851      	ldr	r1, [r2, #4]
   3b576:	466b      	mov	r3, sp
   3b578:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   3b57a:	4669      	mov	r1, sp
   3b57c:	4630      	mov	r0, r6
   3b57e:	f7ff ff63 	bl	3b448 <send_conn_le_param_update>
		if (!err) {
   3b582:	2800      	cmp	r0, #0
   3b584:	d1e6      	bne.n	3b554 <deferred_work+0xa0>
   3b586:	f3bf 8f5b 	dmb	ish
   3b58a:	e855 3f00 	ldrex	r3, [r5]
   3b58e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3b592:	e845 3200 	strex	r2, r3, [r5]
   3b596:	2a00      	cmp	r2, #0
   3b598:	d0da      	beq.n	3b550 <deferred_work+0x9c>
   3b59a:	e7f6      	b.n	3b58a <deferred_work+0xd6>
   3b59c:	20002c00 	.word	0x20002c00
   3b5a0:	00048fbc 	.word	0x00048fbc
   3b5a4:	00048fbc 	.word	0x00048fbc
   3b5a8:	0004911c 	.word	0x0004911c

0003b5ac <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   3b5ac:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   3b5ae:	4801      	ldr	r0, [pc, #4]	; (3b5b4 <bt_conn_create_frag_timeout+0x8>)
   3b5b0:	f7ff be5c 	b.w	3b26c <bt_conn_create_pdu_timeout>
   3b5b4:	20000a9c 	.word	0x20000a9c

0003b5b8 <bt_conn_process_tx>:
{
   3b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   3b5bc:	7a83      	ldrb	r3, [r0, #10]
{
   3b5be:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   3b5c0:	b993      	cbnz	r3, 3b5e8 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b5c2:	f3bf 8f5b 	dmb	ish
   3b5c6:	1d03      	adds	r3, r0, #4
   3b5c8:	e853 2f00 	ldrex	r2, [r3]
   3b5cc:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   3b5d0:	e843 1400 	strex	r4, r1, [r3]
   3b5d4:	2c00      	cmp	r4, #0
   3b5d6:	d1f7      	bne.n	3b5c8 <bt_conn_process_tx+0x10>
   3b5d8:	f3bf 8f5b 	dmb	ish
   3b5dc:	0653      	lsls	r3, r2, #25
   3b5de:	d503      	bpl.n	3b5e8 <bt_conn_process_tx+0x30>
}
   3b5e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   3b5e4:	f00a bd1c 	b.w	46020 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   3b5e8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3b5ec:	f00c feb4 	bl	48358 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   3b5f0:	4604      	mov	r4, r0
   3b5f2:	b960      	cbnz	r0, 3b60e <bt_conn_process_tx+0x56>
   3b5f4:	4a33      	ldr	r2, [pc, #204]	; (3b6c4 <bt_conn_process_tx+0x10c>)
   3b5f6:	4934      	ldr	r1, [pc, #208]	; (3b6c8 <bt_conn_process_tx+0x110>)
   3b5f8:	4834      	ldr	r0, [pc, #208]	; (3b6cc <bt_conn_process_tx+0x114>)
   3b5fa:	f44f 735d 	mov.w	r3, #884	; 0x374
   3b5fe:	f009 fd88 	bl	45112 <assert_print>
   3b602:	4040      	eors	r0, r0
   3b604:	f380 8811 	msr	BASEPRI, r0
   3b608:	f04f 0003 	mov.w	r0, #3
   3b60c:	df02      	svc	2
	buf = net_buf_ref(buf);
   3b60e:	4620      	mov	r0, r4
   3b610:	f00b ffad 	bl	4756e <net_buf_ref>
	return bt_dev.le.acl_mtu;
   3b614:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3b6d0 <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   3b618:	8a02      	ldrh	r2, [r0, #16]
   3b61a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   3b61e:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   3b620:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   3b622:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   3b624:	d807      	bhi.n	3b636 <bt_conn_process_tx+0x7e>
   3b626:	b932      	cbnz	r2, 3b636 <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   3b628:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   3b62a:	4621      	mov	r1, r4
   3b62c:	4628      	mov	r0, r5
   3b62e:	f7ff fb93 	bl	3ad58 <send_frag>
   3b632:	4606      	mov	r6, r0
   3b634:	e030      	b.n	3b698 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
   3b636:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   3b638:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   3b63c:	8a22      	ldrh	r2, [r4, #16]
   3b63e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   3b642:	429a      	cmp	r2, r3
   3b644:	d804      	bhi.n	3b650 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
   3b646:	2301      	movs	r3, #1
   3b648:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   3b64a:	2200      	movs	r2, #0
   3b64c:	2303      	movs	r3, #3
   3b64e:	e7ec      	b.n	3b62a <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
   3b650:	f04f 33ff 	mov.w	r3, #4294967295
   3b654:	f04f 32ff 	mov.w	r2, #4294967295
   3b658:	2000      	movs	r0, #0
   3b65a:	f7ff ffa7 	bl	3b5ac <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   3b65e:	7aab      	ldrb	r3, [r5, #10]
   3b660:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   3b662:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   3b664:	d006      	beq.n	3b674 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
   3b666:	f001 fce1 	bl	3d02c <net_buf_unref>
	net_buf_unref(buf);
   3b66a:	4620      	mov	r0, r4
}
   3b66c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   3b670:	f001 bcdc 	b.w	3d02c <net_buf_unref>
	tx_data(frag)->tx = NULL;
   3b674:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   3b678:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   3b67c:	4602      	mov	r2, r0
   3b67e:	463b      	mov	r3, r7
   3b680:	4621      	mov	r1, r4
   3b682:	4628      	mov	r0, r5
   3b684:	f7ff fb68 	bl	3ad58 <send_frag>
		if (err) {
   3b688:	4606      	mov	r6, r0
   3b68a:	b1b8      	cbz	r0, 3b6bc <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
   3b68c:	f007 0701 	and.w	r7, r7, #1
   3b690:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   3b692:	4640      	mov	r0, r8
   3b694:	f001 fcca 	bl	3d02c <net_buf_unref>
	net_buf_unref(buf);
   3b698:	4620      	mov	r0, r4
   3b69a:	f001 fcc7 	bl	3d02c <net_buf_unref>
	if (err  == -EIO) {
   3b69e:	3605      	adds	r6, #5
   3b6a0:	d10e      	bne.n	3b6c0 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   3b6a2:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   3b6a4:	2300      	movs	r3, #0
   3b6a6:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   3b6a8:	4620      	mov	r0, r4
   3b6aa:	f001 fcbf 	bl	3d02c <net_buf_unref>
		if (tx) {
   3b6ae:	b13e      	cbz	r6, 3b6c0 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
   3b6b0:	4631      	mov	r1, r6
   3b6b2:	4628      	mov	r0, r5
}
   3b6b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   3b6b8:	f7ff bb38 	b.w	3ad2c <conn_tx_destroy>
		flags = FRAG_CONT;
   3b6bc:	2701      	movs	r7, #1
   3b6be:	e7bd      	b.n	3b63c <bt_conn_process_tx+0x84>
}
   3b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b6c4:	00049ba8 	.word	0x00049ba8
   3b6c8:	00049c2c 	.word	0x00049c2c
   3b6cc:	00049aea 	.word	0x00049aea
   3b6d0:	20000388 	.word	0x20000388

0003b6d4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   3b6d4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   3b6d6:	480c      	ldr	r0, [pc, #48]	; (3b708 <bt_conn_init+0x34>)
   3b6d8:	f00c fe1d 	bl	48316 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   3b6dc:	490b      	ldr	r1, [pc, #44]	; (3b70c <bt_conn_init+0x38>)
   3b6de:	480a      	ldr	r0, [pc, #40]	; (3b708 <bt_conn_init+0x34>)
   3b6e0:	f00c fe25 	bl	4832e <k_queue_append>
   3b6e4:	490a      	ldr	r1, [pc, #40]	; (3b710 <bt_conn_init+0x3c>)
   3b6e6:	4808      	ldr	r0, [pc, #32]	; (3b708 <bt_conn_init+0x34>)
   3b6e8:	f00c fe21 	bl	4832e <k_queue_append>
   3b6ec:	4909      	ldr	r1, [pc, #36]	; (3b714 <bt_conn_init+0x40>)
   3b6ee:	4806      	ldr	r0, [pc, #24]	; (3b708 <bt_conn_init+0x34>)
   3b6f0:	f00c fe1d 	bl	4832e <k_queue_append>
	}

	bt_att_init();
   3b6f4:	f000 fdf0 	bl	3c2d8 <bt_att_init>

	err = bt_smp_init();
   3b6f8:	f00b ff00 	bl	474fc <bt_smp_init>
	if (err) {
   3b6fc:	4604      	mov	r4, r0
   3b6fe:	b908      	cbnz	r0, 3b704 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   3b700:	f00a fe77 	bl	463f2 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   3b704:	4620      	mov	r0, r4
   3b706:	bd10      	pop	{r4, pc}
   3b708:	20000a2c 	.word	0x20000a2c
   3b70c:	20002bd0 	.word	0x20002bd0
   3b710:	20002be0 	.word	0x20002be0
   3b714:	20002bf0 	.word	0x20002bf0

0003b718 <l2cap_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   3b718:	4b04      	ldr	r3, [pc, #16]	; (3b72c <l2cap_accept+0x14>)
   3b71a:	6818      	ldr	r0, [r3, #0]
   3b71c:	b918      	cbnz	r0, 3b726 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   3b71e:	4a04      	ldr	r2, [pc, #16]	; (3b730 <l2cap_accept+0x18>)
   3b720:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   3b722:	600b      	str	r3, [r1, #0]

		return 0;
   3b724:	4770      	bx	lr
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   3b726:	f06f 000b 	mvn.w	r0, #11
}
   3b72a:	4770      	bx	lr
   3b72c:	20002c04 	.word	0x20002c04
   3b730:	00049270 	.word	0x00049270

0003b734 <bt_l2cap_connected>:
{
   3b734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   3b736:	4d24      	ldr	r5, [pc, #144]	; (3b7c8 <bt_l2cap_connected+0x94>)
   3b738:	4f24      	ldr	r7, [pc, #144]	; (3b7cc <bt_l2cap_connected+0x98>)
{
   3b73a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3b73c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   3b73e:	42bd      	cmp	r5, r7
   3b740:	d301      	bcc.n	3b746 <bt_l2cap_connected+0x12>
}
   3b742:	b003      	add	sp, #12
   3b744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   3b746:	686b      	ldr	r3, [r5, #4]
   3b748:	a901      	add	r1, sp, #4
   3b74a:	4620      	mov	r0, r4
   3b74c:	4798      	blx	r3
   3b74e:	2800      	cmp	r0, #0
   3b750:	db34      	blt.n	3b7bc <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   3b752:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   3b754:	882a      	ldrh	r2, [r5, #0]
   3b756:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   3b758:	849a      	strh	r2, [r3, #36]	; 0x24
   3b75a:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   3b75e:	68a8      	ldr	r0, [r5, #8]
   3b760:	f3bf 8f5b 	dmb	ish
   3b764:	e852 1f00 	ldrex	r1, [r2]
   3b768:	e842 6c00 	strex	ip, r6, [r2]
   3b76c:	f1bc 0f00 	cmp.w	ip, #0
   3b770:	d1f8      	bne.n	3b764 <bt_l2cap_connected+0x30>
   3b772:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   3b776:	609e      	str	r6, [r3, #8]
	return list->tail;
   3b778:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   3b77a:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   3b77e:	b9f9      	cbnz	r1, 3b7c0 <bt_l2cap_connected+0x8c>
	list->head = node;
   3b780:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   3b784:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   3b786:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   3b788:	9801      	ldr	r0, [sp, #4]
   3b78a:	6843      	ldr	r3, [r0, #4]
   3b78c:	681b      	ldr	r3, [r3, #0]
   3b78e:	b103      	cbz	r3, 3b792 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   3b790:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b792:	9b01      	ldr	r3, [sp, #4]
   3b794:	f3bf 8f5b 	dmb	ish
   3b798:	3310      	adds	r3, #16
   3b79a:	e853 1f00 	ldrex	r1, [r3]
   3b79e:	f041 0101 	orr.w	r1, r1, #1
   3b7a2:	e843 1200 	strex	r2, r1, [r3]
   3b7a6:	2a00      	cmp	r2, #0
   3b7a8:	d1f7      	bne.n	3b79a <bt_l2cap_connected+0x66>
   3b7aa:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   3b7ae:	9801      	ldr	r0, [sp, #4]
   3b7b0:	6843      	ldr	r3, [r0, #4]
   3b7b2:	69db      	ldr	r3, [r3, #28]
   3b7b4:	b113      	cbz	r3, 3b7bc <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   3b7b6:	f100 0110 	add.w	r1, r0, #16
   3b7ba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   3b7bc:	350c      	adds	r5, #12
   3b7be:	e7be      	b.n	3b73e <bt_l2cap_connected+0xa>
	parent->next = child;
   3b7c0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   3b7c2:	6562      	str	r2, [r4, #84]	; 0x54
}
   3b7c4:	e7de      	b.n	3b784 <bt_l2cap_connected+0x50>
   3b7c6:	bf00      	nop
   3b7c8:	00048f98 	.word	0x00048f98
   3b7cc:	00048fbc 	.word	0x00048fbc

0003b7d0 <bt_l2cap_update_conn_param>:
{
   3b7d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   3b7d2:	4b17      	ldr	r3, [pc, #92]	; (3b830 <bt_l2cap_update_conn_param+0x60>)
{
   3b7d4:	460e      	mov	r6, r1
	ident++;
   3b7d6:	7819      	ldrb	r1, [r3, #0]
   3b7d8:	3101      	adds	r1, #1
   3b7da:	b2c9      	uxtb	r1, r1
   3b7dc:	2901      	cmp	r1, #1
   3b7de:	bf38      	it	cc
   3b7e0:	2101      	movcc	r1, #1
{
   3b7e2:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   3b7e4:	2208      	movs	r2, #8
   3b7e6:	2012      	movs	r0, #18
	ident++;
   3b7e8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   3b7ea:	f00a fd4c 	bl	46286 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   3b7ee:	4604      	mov	r4, r0
   3b7f0:	b1d0      	cbz	r0, 3b828 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   3b7f2:	2108      	movs	r1, #8
   3b7f4:	300c      	adds	r0, #12
   3b7f6:	f00b fee4 	bl	475c2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   3b7fa:	8833      	ldrh	r3, [r6, #0]
   3b7fc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   3b7fe:	8873      	ldrh	r3, [r6, #2]
   3b800:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   3b802:	88b3      	ldrh	r3, [r6, #4]
   3b804:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   3b806:	88f3      	ldrh	r3, [r6, #6]
   3b808:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   3b80a:	2300      	movs	r3, #0
   3b80c:	4628      	mov	r0, r5
   3b80e:	9300      	str	r3, [sp, #0]
   3b810:	4622      	mov	r2, r4
   3b812:	2105      	movs	r1, #5
   3b814:	f00a fd7e 	bl	46314 <bt_l2cap_send_cb>
	if (err) {
   3b818:	4605      	mov	r5, r0
   3b81a:	b110      	cbz	r0, 3b822 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   3b81c:	4620      	mov	r0, r4
   3b81e:	f001 fc05 	bl	3d02c <net_buf_unref>
}
   3b822:	4628      	mov	r0, r5
   3b824:	b002      	add	sp, #8
   3b826:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   3b828:	f06f 050b 	mvn.w	r5, #11
   3b82c:	e7f9      	b.n	3b822 <bt_l2cap_update_conn_param+0x52>
   3b82e:	bf00      	nop
   3b830:	20003992 	.word	0x20003992

0003b834 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   3b834:	2823      	cmp	r0, #35	; 0x23
   3b836:	d81f      	bhi.n	3b878 <att_op_get_type+0x44>
   3b838:	281a      	cmp	r0, #26
   3b83a:	d804      	bhi.n	3b846 <att_op_get_type+0x12>
   3b83c:	1e43      	subs	r3, r0, #1
   3b83e:	2b18      	cmp	r3, #24
   3b840:	d90e      	bls.n	3b860 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   3b842:	2006      	movs	r0, #6
   3b844:	4770      	bx	lr
	switch (op) {
   3b846:	f1a0 031b 	sub.w	r3, r0, #27
   3b84a:	2b08      	cmp	r3, #8
   3b84c:	d81e      	bhi.n	3b88c <att_op_get_type+0x58>
   3b84e:	e8df f003 	tbb	[pc, r3]
   3b852:	1d05      	.short	0x1d05
   3b854:	191d231b 	.word	0x191d231b
   3b858:	1d25      	.short	0x1d25
   3b85a:	05          	.byte	0x05
   3b85b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   3b85c:	2003      	movs	r0, #3
   3b85e:	4770      	bx	lr
	switch (op) {
   3b860:	4a0f      	ldr	r2, [pc, #60]	; (3b8a0 <att_op_get_type+0x6c>)
   3b862:	2301      	movs	r3, #1
   3b864:	4083      	lsls	r3, r0
   3b866:	401a      	ands	r2, r3
   3b868:	b9c2      	cbnz	r2, 3b89c <att_op_get_type+0x68>
   3b86a:	4a0e      	ldr	r2, [pc, #56]	; (3b8a4 <att_op_get_type+0x70>)
   3b86c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   3b86e:	2a00      	cmp	r2, #0
   3b870:	bf14      	ite	ne
   3b872:	2001      	movne	r0, #1
   3b874:	2006      	moveq	r0, #6
   3b876:	4770      	bx	lr
	switch (op) {
   3b878:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   3b87c:	2b52      	cmp	r3, #82	; 0x52
   3b87e:	d105      	bne.n	3b88c <att_op_get_type+0x58>
		return ATT_COMMAND;
   3b880:	2000      	movs	r0, #0
}
   3b882:	4770      	bx	lr
		return ATT_REQUEST;
   3b884:	2001      	movs	r0, #1
   3b886:	4770      	bx	lr
		return ATT_INDICATION;
   3b888:	2005      	movs	r0, #5
   3b88a:	4770      	bx	lr
		return ATT_COMMAND;
   3b88c:	f010 0f40 	tst.w	r0, #64	; 0x40
   3b890:	bf0c      	ite	eq
   3b892:	2006      	moveq	r0, #6
   3b894:	2000      	movne	r0, #0
   3b896:	4770      	bx	lr
	switch (op) {
   3b898:	2004      	movs	r0, #4
   3b89a:	4770      	bx	lr
		return ATT_RESPONSE;
   3b89c:	2002      	movs	r0, #2
   3b89e:	4770      	bx	lr
   3b8a0:	028aaaaa 	.word	0x028aaaaa
   3b8a4:	01455554 	.word	0x01455554

0003b8a8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   3b8a8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   3b8aa:	3804      	subs	r0, #4
   3b8ac:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   3b8ae:	a901      	add	r1, sp, #4
   3b8b0:	4802      	ldr	r0, [pc, #8]	; (3b8bc <bt_att_released+0x14>)
   3b8b2:	f00c fc72 	bl	4819a <k_mem_slab_free>
}
   3b8b6:	b003      	add	sp, #12
   3b8b8:	f85d fb04 	ldr.w	pc, [sp], #4
   3b8bc:	20000978 	.word	0x20000978

0003b8c0 <tx_meta_data_free>:
{
   3b8c0:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   3b8c2:	2100      	movs	r1, #0
{
   3b8c4:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   3b8c6:	2214      	movs	r2, #20
   3b8c8:	f009 ff2d 	bl	45726 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   3b8cc:	4621      	mov	r1, r4
   3b8ce:	4802      	ldr	r0, [pc, #8]	; (3b8d8 <tx_meta_data_free+0x18>)
}
   3b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   3b8d4:	f00c bd2b 	b.w	4832e <k_queue_append>
   3b8d8:	20000a14 	.word	0x20000a14

0003b8dc <chan_send>:
{
   3b8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3b8e0:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   3b8e2:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   3b8e6:	68cb      	ldr	r3, [r1, #12]
{
   3b8e8:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   3b8ea:	3034      	adds	r0, #52	; 0x34
   3b8ec:	2102      	movs	r1, #2
   3b8ee:	f00a fda5 	bl	4643c <atomic_test_bit>
   3b8f2:	2800      	cmp	r0, #0
   3b8f4:	d039      	beq.n	3b96a <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   3b8f6:	781b      	ldrb	r3, [r3, #0]
   3b8f8:	2bd2      	cmp	r3, #210	; 0xd2
   3b8fa:	d110      	bne.n	3b91e <chan_send+0x42>
		err = bt_smp_sign(chan->att->conn, buf);
   3b8fc:	6833      	ldr	r3, [r6, #0]
   3b8fe:	4621      	mov	r1, r4
   3b900:	6818      	ldr	r0, [r3, #0]
   3b902:	f00b fdf8 	bl	474f6 <bt_smp_sign>
		if (err) {
   3b906:	4605      	mov	r5, r0
   3b908:	b148      	cbz	r0, 3b91e <chan_send+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   3b90a:	69a0      	ldr	r0, [r4, #24]
   3b90c:	f7ff ffd8 	bl	3b8c0 <tx_meta_data_free>
			net_buf_unref(buf);
   3b910:	4620      	mov	r0, r4
   3b912:	f001 fb8b 	bl	3d02c <net_buf_unref>
}
   3b916:	4628      	mov	r0, r5
   3b918:	b003      	add	sp, #12
   3b91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   3b91e:	f104 000c 	add.w	r0, r4, #12
   3b922:	f00b fe85 	bl	47630 <net_buf_simple_headroom>
	state->len = buf->len;
   3b926:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   3b92a:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3b92e:	6833      	ldr	r3, [r6, #0]
   3b930:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   3b932:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   3b934:	4607      	mov	r7, r0
   3b936:	7818      	ldrb	r0, [r3, #0]
   3b938:	f7ff ff7c 	bl	3b834 <att_op_get_type>
	switch (op_type) {
   3b93c:	2805      	cmp	r0, #5
   3b93e:	bf96      	itet	ls
   3b940:	4b0b      	ldrls	r3, [pc, #44]	; (3b970 <chan_send+0x94>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   3b942:	4b0c      	ldrhi	r3, [pc, #48]	; (3b974 <chan_send+0x98>)
   3b944:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3b948:	f8cd 8000 	str.w	r8, [sp]
   3b94c:	4628      	mov	r0, r5
   3b94e:	4622      	mov	r2, r4
   3b950:	2104      	movs	r1, #4
   3b952:	f00a fcdf 	bl	46314 <bt_l2cap_send_cb>
	if (err) {
   3b956:	4605      	mov	r5, r0
   3b958:	2800      	cmp	r0, #0
   3b95a:	d0dc      	beq.n	3b916 <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
   3b95c:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   3b95e:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   3b962:	fa13 f787 	uxtah	r7, r3, r7
   3b966:	60e7      	str	r7, [r4, #12]
}
   3b968:	e7d5      	b.n	3b916 <chan_send+0x3a>
		return -EINVAL;
   3b96a:	f06f 0515 	mvn.w	r5, #21
   3b96e:	e7d2      	b.n	3b916 <chan_send+0x3a>
   3b970:	00049298 	.word	0x00049298
   3b974:	00046b25 	.word	0x00046b25

0003b978 <bt_att_connected>:
{
   3b978:	b510      	push	{r4, lr}
   3b97a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   3b97e:	4604      	mov	r4, r0
   3b980:	f3bf 8f5b 	dmb	ish
   3b984:	e853 1f00 	ldrex	r1, [r3]
   3b988:	f041 0104 	orr.w	r1, r1, #4
   3b98c:	e843 1200 	strex	r2, r1, [r3]
   3b990:	2a00      	cmp	r2, #0
   3b992:	d1f7      	bne.n	3b984 <bt_att_connected+0xc>
   3b994:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   3b998:	2317      	movs	r3, #23
   3b99a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   3b99c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   3b99e:	1f20      	subs	r0, r4, #4
   3b9a0:	f00a feac 	bl	466fc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   3b9a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   3b9a8:	4903      	ldr	r1, [pc, #12]	; (3b9b8 <bt_att_connected+0x40>)
   3b9aa:	f00c fda0 	bl	484ee <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   3b9ae:	6820      	ldr	r0, [r4, #0]
}
   3b9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   3b9b4:	f001 ba22 	b.w	3cdfc <bt_gatt_connected>
   3b9b8:	00046d3d 	.word	0x00046d3d

0003b9bc <read_group_cb>:
{
   3b9bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3b9c0:	4605      	mov	r5, r0
   3b9c2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3b9c4:	f04f 0800 	mov.w	r8, #0
   3b9c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3b9cc:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   3b9ce:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3b9d0:	f88d 8008 	strb.w	r8, [sp, #8]
   3b9d4:	a902      	add	r1, sp, #8
{
   3b9d6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3b9d8:	f8ad 300a 	strh.w	r3, [sp, #10]
   3b9dc:	f009 febe 	bl	4575c <bt_uuid_cmp>
   3b9e0:	b1a0      	cbz	r0, 3ba0c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   3b9e2:	f642 0301 	movw	r3, #10241	; 0x2801
   3b9e6:	6828      	ldr	r0, [r5, #0]
   3b9e8:	f88d 800c 	strb.w	r8, [sp, #12]
   3b9ec:	a903      	add	r1, sp, #12
   3b9ee:	f8ad 300e 	strh.w	r3, [sp, #14]
   3b9f2:	f009 feb3 	bl	4575c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3b9f6:	b148      	cbz	r0, 3ba0c <read_group_cb+0x50>
		if (data->group &&
   3b9f8:	6923      	ldr	r3, [r4, #16]
   3b9fa:	b11b      	cbz	r3, 3ba04 <read_group_cb+0x48>
   3b9fc:	885a      	ldrh	r2, [r3, #2]
   3b9fe:	42b2      	cmp	r2, r6
   3ba00:	d200      	bcs.n	3ba04 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   3ba02:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   3ba04:	2001      	movs	r0, #1
}
   3ba06:	b004      	add	sp, #16
   3ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   3ba0c:	6861      	ldr	r1, [r4, #4]
   3ba0e:	6828      	ldr	r0, [r5, #0]
   3ba10:	f009 fea4 	bl	4575c <bt_uuid_cmp>
   3ba14:	b110      	cbz	r0, 3ba1c <read_group_cb+0x60>
		data->group = NULL;
   3ba16:	2300      	movs	r3, #0
   3ba18:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   3ba1a:	e7f3      	b.n	3ba04 <read_group_cb+0x48>
	if (data->rsp->len &&
   3ba1c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   3ba1e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   3ba20:	781a      	ldrb	r2, [r3, #0]
   3ba22:	b132      	cbz	r2, 3ba32 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   3ba24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   3ba26:	8a01      	ldrh	r1, [r0, #16]
   3ba28:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   3ba2a:	4293      	cmp	r3, r2
   3ba2c:	da01      	bge.n	3ba32 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   3ba2e:	2000      	movs	r0, #0
   3ba30:	e7e9      	b.n	3ba06 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   3ba32:	2104      	movs	r1, #4
   3ba34:	300c      	adds	r0, #12
   3ba36:	f00b fdc4 	bl	475c2 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   3ba3a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   3ba3c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   3ba3e:	6923      	ldr	r3, [r4, #16]
   3ba40:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   3ba42:	4b08      	ldr	r3, [pc, #32]	; (3ba64 <read_group_cb+0xa8>)
   3ba44:	9300      	str	r3, [sp, #0]
   3ba46:	9401      	str	r4, [sp, #4]
   3ba48:	68a2      	ldr	r2, [r4, #8]
   3ba4a:	2300      	movs	r3, #0
   3ba4c:	4629      	mov	r1, r5
   3ba4e:	4638      	mov	r0, r7
   3ba50:	f00a feb0 	bl	467b4 <att_chan_read>
	if (read < 0) {
   3ba54:	2800      	cmp	r0, #0
   3ba56:	dbea      	blt.n	3ba2e <read_group_cb+0x72>
	if (!data->group) {
   3ba58:	6920      	ldr	r0, [r4, #16]
   3ba5a:	3800      	subs	r0, #0
   3ba5c:	bf18      	it	ne
   3ba5e:	2001      	movne	r0, #1
   3ba60:	e7d1      	b.n	3ba06 <read_group_cb+0x4a>
   3ba62:	bf00      	nop
   3ba64:	00046763 	.word	0x00046763

0003ba68 <read_type_cb>:
{
   3ba68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   3ba6c:	6817      	ldr	r7, [r2, #0]
{
   3ba6e:	4605      	mov	r5, r0
   3ba70:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   3ba72:	6800      	ldr	r0, [r0, #0]
   3ba74:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   3ba76:	687e      	ldr	r6, [r7, #4]
{
   3ba78:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   3ba7a:	f009 fe6f 	bl	4575c <bt_uuid_cmp>
   3ba7e:	4681      	mov	r9, r0
   3ba80:	2800      	cmp	r0, #0
   3ba82:	d13c      	bne.n	3bafe <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3ba84:	4630      	mov	r0, r6
   3ba86:	2295      	movs	r2, #149	; 0x95
   3ba88:	4629      	mov	r1, r5
   3ba8a:	f00b fbeb 	bl	47264 <bt_gatt_check_perm>
   3ba8e:	4606      	mov	r6, r0
   3ba90:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3ba92:	b140      	cbz	r0, 3baa6 <read_type_cb+0x3e>
		if (data->rsp->len) {
   3ba94:	68e3      	ldr	r3, [r4, #12]
   3ba96:	781b      	ldrb	r3, [r3, #0]
   3ba98:	b10b      	cbz	r3, 3ba9e <read_type_cb+0x36>
			data->err = 0x00;
   3ba9a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   3ba9e:	2000      	movs	r0, #0
}
   3baa0:	b003      	add	sp, #12
   3baa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   3baa6:	68a0      	ldr	r0, [r4, #8]
   3baa8:	f00b fd65 	bl	47576 <net_buf_frag_last>
   3baac:	2102      	movs	r1, #2
   3baae:	300c      	adds	r0, #12
   3bab0:	f00b fd87 	bl	475c2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   3bab4:	4b13      	ldr	r3, [pc, #76]	; (3bb04 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   3bab6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   3bab8:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   3babc:	9300      	str	r3, [sp, #0]
   3babe:	9401      	str	r4, [sp, #4]
   3bac0:	68a2      	ldr	r2, [r4, #8]
   3bac2:	4633      	mov	r3, r6
   3bac4:	4629      	mov	r1, r5
   3bac6:	4638      	mov	r0, r7
   3bac8:	f00a fe74 	bl	467b4 <att_chan_read>
	if (read < 0) {
   3bacc:	2800      	cmp	r0, #0
   3bace:	da07      	bge.n	3bae0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   3bad0:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   3bad4:	bf26      	itte	cs
   3bad6:	4240      	negcs	r0, r0
   3bad8:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   3bada:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   3badc:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   3bade:	e7de      	b.n	3ba9e <read_type_cb+0x36>
	if (!data->item) {
   3bae0:	6923      	ldr	r3, [r4, #16]
   3bae2:	2b00      	cmp	r3, #0
   3bae4:	d0db      	beq.n	3ba9e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   3bae6:	68a0      	ldr	r0, [r4, #8]
   3bae8:	f00a fc8e 	bl	46408 <net_buf_frags_len>
   3baec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   3baee:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   3baf0:	68e3      	ldr	r3, [r4, #12]
   3baf2:	781b      	ldrb	r3, [r3, #0]
   3baf4:	4298      	cmp	r0, r3
   3baf6:	bf94      	ite	ls
   3baf8:	2000      	movls	r0, #0
   3bafa:	2001      	movhi	r0, #1
   3bafc:	e7d0      	b.n	3baa0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   3bafe:	2001      	movs	r0, #1
   3bb00:	e7ce      	b.n	3baa0 <read_type_cb+0x38>
   3bb02:	bf00      	nop
   3bb04:	00046419 	.word	0x00046419

0003bb08 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   3bb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   3bb0a:	2300      	movs	r3, #0
{
   3bb0c:	4604      	mov	r4, r0
   3bb0e:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   3bb10:	4829      	ldr	r0, [pc, #164]	; (3bbb8 <bt_att_accept+0xb0>)
   3bb12:	2200      	movs	r2, #0
   3bb14:	4669      	mov	r1, sp
   3bb16:	f004 fde9 	bl	406ec <k_mem_slab_alloc>
   3bb1a:	4605      	mov	r5, r0
   3bb1c:	2800      	cmp	r0, #0
   3bb1e:	d143      	bne.n	3bba8 <bt_att_accept+0xa0>
	return z_impl_z_current_get();
   3bb20:	f005 fcd4 	bl	414cc <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   3bb24:	4b25      	ldr	r3, [pc, #148]	; (3bbbc <bt_att_accept+0xb4>)

	(void)memset(att, 0, sizeof(*att));
   3bb26:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   3bb28:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   3bb2a:	222c      	movs	r2, #44	; 0x2c
   3bb2c:	9800      	ldr	r0, [sp, #0]
   3bb2e:	f009 fdfa 	bl	45726 <memset>
	att->conn = conn;
   3bb32:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   3bb34:	4822      	ldr	r0, [pc, #136]	; (3bbc0 <bt_att_accept+0xb8>)
	att->conn = conn;
   3bb36:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   3bb38:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3bb3a:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   3bb3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3bb40:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   3bb44:	2200      	movs	r2, #0
   3bb46:	2300      	movs	r3, #0
   3bb48:	a901      	add	r1, sp, #4
   3bb4a:	f004 fdcf 	bl	406ec <k_mem_slab_alloc>
   3bb4e:	4605      	mov	r5, r0
   3bb50:	bb50      	cbnz	r0, 3bba8 <bt_att_accept+0xa0>
	(void)memset(chan, 0, sizeof(*chan));
   3bb52:	4601      	mov	r1, r0
   3bb54:	2290      	movs	r2, #144	; 0x90
   3bb56:	9801      	ldr	r0, [sp, #4]
   3bb58:	f009 fde5 	bl	45726 <memset>
	chan->chan.chan.ops = &ops;
   3bb5c:	9801      	ldr	r0, [sp, #4]
   3bb5e:	4b19      	ldr	r3, [pc, #100]	; (3bbc4 <bt_att_accept+0xbc>)
   3bb60:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   3bb62:	303c      	adds	r0, #60	; 0x3c
   3bb64:	f00c fbd7 	bl	48316 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3bb68:	9b01      	ldr	r3, [sp, #4]
   3bb6a:	f3bf 8f5b 	dmb	ish
   3bb6e:	3334      	adds	r3, #52	; 0x34
   3bb70:	e853 2f00 	ldrex	r2, [r3]
   3bb74:	e843 5100 	strex	r1, r5, [r3]
   3bb78:	2900      	cmp	r1, #0
   3bb7a:	d1f9      	bne.n	3bb70 <bt_att_accept+0x68>
   3bb7c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   3bb80:	9b01      	ldr	r3, [sp, #4]
   3bb82:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   3bb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   3bb86:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   3bb88:	b91b      	cbnz	r3, 3bb92 <bt_att_accept+0x8a>
   3bb8a:	f104 000c 	add.w	r0, r4, #12
   3bb8e:	f00c fbc2 	bl	48316 <z_impl_k_queue_init>
	return list->head;
   3bb92:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   3bb94:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   3bb98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   3bb9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
	list->head = node;
   3bb9e:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   3bba0:	b902      	cbnz	r2, 3bba4 <bt_att_accept+0x9c>
	list->tail = node;
   3bba2:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   3bba4:	9b01      	ldr	r3, [sp, #4]
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
   3bba6:	b923      	cbnz	r3, 3bbb2 <bt_att_accept+0xaa>
		return -ENOMEM;
   3bba8:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   3bbac:	4628      	mov	r0, r5
   3bbae:	b003      	add	sp, #12
   3bbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*ch = &chan->chan.chan;
   3bbb2:	3304      	adds	r3, #4
   3bbb4:	6033      	str	r3, [r6, #0]
	return 0;
   3bbb6:	e7f9      	b.n	3bbac <bt_att_accept+0xa4>
   3bbb8:	2000095c 	.word	0x2000095c
   3bbbc:	20002c70 	.word	0x20002c70
   3bbc0:	20000978 	.word	0x20000978
   3bbc4:	20000730 	.word	0x20000730

0003bbc8 <bt_att_chan_create_pdu>:
{
   3bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   3bbca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   3bbcc:	3201      	adds	r2, #1
   3bbce:	429a      	cmp	r2, r3
{
   3bbd0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   3bbd2:	d822      	bhi.n	3bc1a <bt_att_chan_create_pdu+0x52>
	switch (att_op_get_type(op)) {
   3bbd4:	4608      	mov	r0, r1
   3bbd6:	f7ff fe2d 	bl	3b834 <att_op_get_type>
   3bbda:	2802      	cmp	r0, #2
   3bbdc:	d020      	beq.n	3bc20 <bt_att_chan_create_pdu+0x58>
   3bbde:	2804      	cmp	r0, #4
   3bbe0:	d01e      	beq.n	3bc20 <bt_att_chan_create_pdu+0x58>
		timeout = K_FOREVER;
   3bbe2:	f04f 36ff 	mov.w	r6, #4294967295
   3bbe6:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   3bbea:	2100      	movs	r1, #0
   3bbec:	4632      	mov	r2, r6
   3bbee:	463b      	mov	r3, r7
   3bbf0:	4608      	mov	r0, r1
   3bbf2:	f00a fb8c 	bl	4630e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   3bbf6:	4604      	mov	r4, r0
   3bbf8:	b178      	cbz	r0, 3bc1a <bt_att_chan_create_pdu+0x52>
	return z_impl_z_current_get();
   3bbfa:	f005 fc67 	bl	414cc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   3bbfe:	4b0e      	ldr	r3, [pc, #56]	; (3bc38 <bt_att_chan_create_pdu+0x70>)
   3bc00:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   3bc02:	480e      	ldr	r0, [pc, #56]	; (3bc3c <bt_att_chan_create_pdu+0x74>)
   3bc04:	bf07      	ittee	eq
   3bc06:	2200      	moveq	r2, #0
   3bc08:	2300      	moveq	r3, #0
   3bc0a:	4632      	movne	r2, r6
   3bc0c:	463b      	movne	r3, r7
   3bc0e:	f004 ff2f 	bl	40a70 <z_impl_k_queue_get>
	if (!data) {
   3bc12:	b948      	cbnz	r0, 3bc28 <bt_att_chan_create_pdu+0x60>
		net_buf_unref(buf);
   3bc14:	4620      	mov	r0, r4
   3bc16:	f001 fa09 	bl	3d02c <net_buf_unref>
		return NULL;
   3bc1a:	2400      	movs	r4, #0
}
   3bc1c:	4620      	mov	r0, r4
   3bc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   3bc20:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   3bc24:	2700      	movs	r7, #0
   3bc26:	e7e0      	b.n	3bbea <bt_att_chan_create_pdu+0x22>
	bt_att_tx_meta_data(buf) = data;
   3bc28:	61a0      	str	r0, [r4, #24]
   3bc2a:	2101      	movs	r1, #1
   3bc2c:	f104 000c 	add.w	r0, r4, #12
   3bc30:	f00b fcc7 	bl	475c2 <net_buf_simple_add>
	hdr->code = op;
   3bc34:	7005      	strb	r5, [r0, #0]
	return buf;
   3bc36:	e7f1      	b.n	3bc1c <bt_att_chan_create_pdu+0x54>
   3bc38:	20002598 	.word	0x20002598
   3bc3c:	20000a14 	.word	0x20000a14

0003bc40 <bt_att_recv>:
{
   3bc40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   3bc44:	8a0b      	ldrh	r3, [r1, #16]
{
   3bc46:	4605      	mov	r5, r0
   3bc48:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   3bc4a:	2b00      	cmp	r3, #0
   3bc4c:	d05d      	beq.n	3bd0a <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
   3bc4e:	2101      	movs	r1, #1
   3bc50:	f104 000c 	add.w	r0, r4, #12
   3bc54:	f00b fcdc 	bl	47610 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   3bc58:	f855 3c04 	ldr.w	r3, [r5, #-4]
   3bc5c:	4680      	mov	r8, r0
   3bc5e:	2b00      	cmp	r3, #0
   3bc60:	d053      	beq.n	3bd0a <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
   3bc62:	7801      	ldrb	r1, [r0, #0]
   3bc64:	4e2b      	ldr	r6, [pc, #172]	; (3bd14 <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   3bc66:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   3bc68:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   3bc6a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   3bc6e:	428a      	cmp	r2, r1
   3bc70:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   3bc74:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
   3bc78:	d11e      	bne.n	3bcb8 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
   3bc7a:	f89b 9002 	ldrb.w	r9, [fp, #2]
   3bc7e:	f1b9 0f01 	cmp.w	r9, #1
   3bc82:	d129      	bne.n	3bcd8 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   3bc84:	2100      	movs	r1, #0
   3bc86:	f105 0030 	add.w	r0, r5, #48	; 0x30
   3bc8a:	f00a fe48 	bl	4691e <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   3bc8e:	2800      	cmp	r0, #0
   3bc90:	d13b      	bne.n	3bd0a <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   3bc92:	8a22      	ldrh	r2, [r4, #16]
   3bc94:	f89b 3001 	ldrb.w	r3, [fp, #1]
   3bc98:	429a      	cmp	r2, r3
   3bc9a:	d339      	bcc.n	3bd10 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   3bc9c:	4456      	add	r6, sl
   3bc9e:	4621      	mov	r1, r4
   3bca0:	6873      	ldr	r3, [r6, #4]
   3bca2:	4638      	mov	r0, r7
   3bca4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   3bca6:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   3bcaa:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   3bcac:	d12d      	bne.n	3bd0a <bt_att_recv+0xca>
   3bcae:	b360      	cbz	r0, 3bd0a <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
   3bcb0:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
   3bcb4:	b349      	cbz	r1, 3bd0a <bt_att_recv+0xca>
   3bcb6:	e00a      	b.n	3bcce <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   3bcb8:	3301      	adds	r3, #1
   3bcba:	2b0e      	cmp	r3, #14
   3bcbc:	d1d5      	bne.n	3bc6a <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   3bcbe:	4608      	mov	r0, r1
   3bcc0:	f7ff fdb8 	bl	3b834 <att_op_get_type>
   3bcc4:	b308      	cbz	r0, 3bd0a <bt_att_recv+0xca>
   3bcc6:	2805      	cmp	r0, #5
   3bcc8:	d01f      	beq.n	3bd0a <bt_att_recv+0xca>
	if (!req) {
   3bcca:	b1f1      	cbz	r1, 3bd0a <bt_att_recv+0xca>
   3bccc:	2306      	movs	r3, #6
   3bcce:	2200      	movs	r2, #0
   3bcd0:	4638      	mov	r0, r7
   3bcd2:	f00a ff82 	bl	46bda <send_err_rsp.part.0>
   3bcd6:	e018      	b.n	3bd0a <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
   3bcd8:	f1b9 0f05 	cmp.w	r9, #5
   3bcdc:	d00a      	beq.n	3bcf4 <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
   3bcde:	8a22      	ldrh	r2, [r4, #16]
   3bce0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   3bce4:	429a      	cmp	r2, r3
   3bce6:	d310      	bcc.n	3bd0a <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   3bce8:	f8db 3004 	ldr.w	r3, [fp, #4]
   3bcec:	4621      	mov	r1, r4
   3bcee:	4638      	mov	r0, r7
   3bcf0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   3bcf2:	e00a      	b.n	3bd0a <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
   3bcf4:	2101      	movs	r1, #1
   3bcf6:	f105 0030 	add.w	r0, r5, #48	; 0x30
   3bcfa:	f00a fe10 	bl	4691e <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   3bcfe:	b920      	cbnz	r0, 3bd0a <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   3bd00:	f89b 2001 	ldrb.w	r2, [fp, #1]
   3bd04:	8a23      	ldrh	r3, [r4, #16]
   3bd06:	429a      	cmp	r2, r3
   3bd08:	d9c8      	bls.n	3bc9c <bt_att_recv+0x5c>
}
   3bd0a:	2000      	movs	r0, #0
   3bd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   3bd10:	2304      	movs	r3, #4
   3bd12:	e7cd      	b.n	3bcb0 <bt_att_recv+0x70>
   3bd14:	000492b0 	.word	0x000492b0

0003bd18 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   3bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bd1a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   3bd1c:	6803      	ldr	r3, [r0, #0]
   3bd1e:	460d      	mov	r5, r1
   3bd20:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   3bd22:	b087      	sub	sp, #28
   3bd24:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   3bd26:	bf18      	it	ne
   3bd28:	2101      	movne	r1, #1
   3bd2a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   3bd2c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   3bd2e:	f00b fb77 	bl	47420 <bt_gatt_change_aware>
   3bd32:	b948      	cbnz	r0, 3bd48 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   3bd34:	2105      	movs	r1, #5
   3bd36:	f104 0034 	add.w	r0, r4, #52	; 0x34
   3bd3a:	f00a fdf0 	bl	4691e <atomic_test_and_set_bit>
   3bd3e:	2800      	cmp	r0, #0
   3bd40:	d048      	beq.n	3bdd4 <att_write_rsp.constprop.0+0xbc>
			return 0;
   3bd42:	2000      	movs	r0, #0
}
   3bd44:	b007      	add	sp, #28
   3bd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   3bd48:	2e00      	cmp	r6, #0
   3bd4a:	d045      	beq.n	3bdd8 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   3bd4c:	2218      	movs	r2, #24
   3bd4e:	2100      	movs	r1, #0
   3bd50:	4668      	mov	r0, sp
   3bd52:	f009 fce8 	bl	45726 <memset>
	if (rsp) {
   3bd56:	bb67      	cbnz	r7, 3bdb2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   3bd58:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   3bd5a:	4a20      	ldr	r2, [pc, #128]	; (3bddc <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   3bd5c:	681b      	ldr	r3, [r3, #0]
   3bd5e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   3bd60:	2300      	movs	r3, #0
   3bd62:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   3bd66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3bd68:	9303      	str	r3, [sp, #12]
	data.len = len;
   3bd6a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   3bd6e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   3bd72:	2301      	movs	r3, #1
   3bd74:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   3bd78:	4631      	mov	r1, r6
   3bd7a:	466b      	mov	r3, sp
   3bd7c:	4630      	mov	r0, r6
	data.req = req;
   3bd7e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   3bd82:	f00a fbc2 	bl	4650a <bt_gatt_foreach_attr>
	if (data.err) {
   3bd86:	f89d 3014 	ldrb.w	r3, [sp, #20]
   3bd8a:	b1e3      	cbz	r3, 3bdc6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   3bd8c:	2f00      	cmp	r7, #0
   3bd8e:	d0d8      	beq.n	3bd42 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3bd90:	9b01      	ldr	r3, [sp, #4]
   3bd92:	6998      	ldr	r0, [r3, #24]
   3bd94:	f7ff fd94 	bl	3b8c0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   3bd98:	9801      	ldr	r0, [sp, #4]
   3bd9a:	f001 f947 	bl	3d02c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   3bd9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   3bda2:	2d00      	cmp	r5, #0
   3bda4:	d0cd      	beq.n	3bd42 <att_write_rsp.constprop.0+0x2a>
   3bda6:	4632      	mov	r2, r6
   3bda8:	4629      	mov	r1, r5
   3bdaa:	4620      	mov	r0, r4
   3bdac:	f00a ff15 	bl	46bda <send_err_rsp.part.0>
   3bdb0:	e7c7      	b.n	3bd42 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   3bdb2:	2200      	movs	r2, #0
   3bdb4:	4639      	mov	r1, r7
   3bdb6:	4620      	mov	r0, r4
   3bdb8:	f7ff ff06 	bl	3bbc8 <bt_att_chan_create_pdu>
   3bdbc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   3bdbe:	2800      	cmp	r0, #0
   3bdc0:	d1ca      	bne.n	3bd58 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   3bdc2:	200e      	movs	r0, #14
   3bdc4:	e7be      	b.n	3bd44 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   3bdc6:	9901      	ldr	r1, [sp, #4]
   3bdc8:	2900      	cmp	r1, #0
   3bdca:	d0ba      	beq.n	3bd42 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   3bdcc:	4620      	mov	r0, r4
   3bdce:	f00a fba7 	bl	46520 <bt_att_chan_send_rsp>
   3bdd2:	e7b6      	b.n	3bd42 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   3bdd4:	2012      	movs	r0, #18
   3bdd6:	e7b5      	b.n	3bd44 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   3bdd8:	2001      	movs	r0, #1
   3bdda:	e7b3      	b.n	3bd44 <att_write_rsp.constprop.0+0x2c>
   3bddc:	000464a9 	.word	0x000464a9

0003bde0 <att_read_group_req>:
{
   3bde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   3bde4:	8a0e      	ldrh	r6, [r1, #16]
   3bde6:	3e04      	subs	r6, #4
   3bde8:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   3bdea:	2e02      	cmp	r6, #2
{
   3bdec:	4604      	mov	r4, r0
   3bdee:	b08c      	sub	sp, #48	; 0x30
   3bdf0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   3bdf2:	d001      	beq.n	3bdf8 <att_read_group_req+0x18>
   3bdf4:	2e10      	cmp	r6, #16
   3bdf6:	d16a      	bne.n	3bece <att_read_group_req+0xee>
   3bdf8:	2104      	movs	r1, #4
   3bdfa:	300c      	adds	r0, #12
   3bdfc:	f00b fc08 	bl	47610 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3be00:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   3be04:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3be06:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3be08:	1d01      	adds	r1, r0, #4
   3be0a:	4632      	mov	r2, r6
   3be0c:	4640      	mov	r0, r8
   3be0e:	f009 fcd3 	bl	457b8 <bt_uuid_create>
   3be12:	2800      	cmp	r0, #0
   3be14:	d05d      	beq.n	3bed2 <att_read_group_req+0xf2>
	if (!start || !end) {
   3be16:	2d00      	cmp	r5, #0
   3be18:	d03a      	beq.n	3be90 <att_read_group_req+0xb0>
   3be1a:	2600      	movs	r6, #0
   3be1c:	2f00      	cmp	r7, #0
   3be1e:	d036      	beq.n	3be8e <att_read_group_req+0xae>
	if (start > end) {
   3be20:	42bd      	cmp	r5, r7
   3be22:	d835      	bhi.n	3be90 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3be24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3be28:	a901      	add	r1, sp, #4
   3be2a:	4640      	mov	r0, r8
   3be2c:	f88d 6004 	strb.w	r6, [sp, #4]
   3be30:	f8ad 3006 	strh.w	r3, [sp, #6]
   3be34:	f009 fc92 	bl	4575c <bt_uuid_cmp>
   3be38:	bb70      	cbnz	r0, 3be98 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   3be3a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   3be3c:	2214      	movs	r2, #20
   3be3e:	2100      	movs	r1, #0
   3be40:	a807      	add	r0, sp, #28
   3be42:	f009 fc70 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   3be46:	2201      	movs	r2, #1
   3be48:	2111      	movs	r1, #17
   3be4a:	4630      	mov	r0, r6
   3be4c:	f00a ff08 	bl	46c60 <bt_att_create_pdu>
   3be50:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   3be52:	2800      	cmp	r0, #0
   3be54:	d03d      	beq.n	3bed2 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   3be56:	2101      	movs	r1, #1
   3be58:	300c      	adds	r0, #12
	data.uuid = uuid;
   3be5a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   3be5e:	f00b fbb0 	bl	475c2 <net_buf_simple_add>
	data.rsp->len = 0U;
   3be62:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   3be64:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   3be66:	4a1c      	ldr	r2, [pc, #112]	; (3bed8 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   3be68:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   3be6a:	4639      	mov	r1, r7
	data.group = NULL;
   3be6c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   3be6e:	4628      	mov	r0, r5
   3be70:	ab07      	add	r3, sp, #28
   3be72:	f00a fb4a 	bl	4650a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   3be76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3be78:	781b      	ldrb	r3, [r3, #0]
   3be7a:	bb1b      	cbnz	r3, 3bec4 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3be7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3be7e:	6998      	ldr	r0, [r3, #24]
   3be80:	f7ff fd1e 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   3be84:	9809      	ldr	r0, [sp, #36]	; 0x24
   3be86:	f001 f8d1 	bl	3d02c <net_buf_unref>
	if (!req) {
   3be8a:	230a      	movs	r3, #10
   3be8c:	e001      	b.n	3be92 <att_read_group_req+0xb2>
			*err = 0U;
   3be8e:	463d      	mov	r5, r7
	if (!req) {
   3be90:	2301      	movs	r3, #1
   3be92:	462a      	mov	r2, r5
   3be94:	2110      	movs	r1, #16
   3be96:	e00e      	b.n	3beb6 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   3be98:	f642 0301 	movw	r3, #10241	; 0x2801
   3be9c:	a907      	add	r1, sp, #28
   3be9e:	4640      	mov	r0, r8
   3bea0:	f88d 601c 	strb.w	r6, [sp, #28]
   3bea4:	f8ad 301e 	strh.w	r3, [sp, #30]
   3bea8:	f009 fc58 	bl	4575c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3beac:	2800      	cmp	r0, #0
   3beae:	d0c4      	beq.n	3be3a <att_read_group_req+0x5a>
	if (!req) {
   3beb0:	2310      	movs	r3, #16
   3beb2:	462a      	mov	r2, r5
   3beb4:	4619      	mov	r1, r3
   3beb6:	4620      	mov	r0, r4
   3beb8:	f00a fe8f 	bl	46bda <send_err_rsp.part.0>
		return 0;
   3bebc:	2000      	movs	r0, #0
}
   3bebe:	b00c      	add	sp, #48	; 0x30
   3bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   3bec4:	9909      	ldr	r1, [sp, #36]	; 0x24
   3bec6:	4620      	mov	r0, r4
   3bec8:	f00a fb2a 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3becc:	e7f6      	b.n	3bebc <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   3bece:	2004      	movs	r0, #4
   3bed0:	e7f5      	b.n	3bebe <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   3bed2:	200e      	movs	r0, #14
   3bed4:	e7f3      	b.n	3bebe <att_read_group_req+0xde>
   3bed6:	bf00      	nop
   3bed8:	0003b9bd 	.word	0x0003b9bd

0003bedc <att_read_mult_vl_req>:
{
   3bedc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   3bee0:	6846      	ldr	r6, [r0, #4]
{
   3bee2:	b085      	sub	sp, #20
   3bee4:	4604      	mov	r4, r0
   3bee6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   3bee8:	4630      	mov	r0, r6
   3beea:	2101      	movs	r1, #1
   3beec:	f00b fa98 	bl	47420 <bt_gatt_change_aware>
   3bef0:	b950      	cbnz	r0, 3bf08 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   3bef2:	2105      	movs	r1, #5
   3bef4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   3bef8:	f00a fd11 	bl	4691e <atomic_test_and_set_bit>
   3befc:	2800      	cmp	r0, #0
   3befe:	d13b      	bne.n	3bf78 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   3bf00:	2012      	movs	r0, #18
}
   3bf02:	b005      	add	sp, #20
   3bf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   3bf08:	2210      	movs	r2, #16
   3bf0a:	2100      	movs	r1, #0
   3bf0c:	4668      	mov	r0, sp
   3bf0e:	f009 fc0a 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   3bf12:	2200      	movs	r2, #0
   3bf14:	2121      	movs	r1, #33	; 0x21
   3bf16:	4630      	mov	r0, r6
   3bf18:	f00a fea2 	bl	46c60 <bt_att_create_pdu>
   3bf1c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3bf1e:	b368      	cbz	r0, 3bf7c <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   3bf20:	f8df 905c 	ldr.w	r9, [pc, #92]	; 3bf80 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   3bf24:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   3bf26:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   3bf2a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   3bf2e:	8a2b      	ldrh	r3, [r5, #16]
   3bf30:	2b01      	cmp	r3, #1
   3bf32:	d804      	bhi.n	3bf3e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   3bf34:	9902      	ldr	r1, [sp, #8]
   3bf36:	4620      	mov	r0, r4
   3bf38:	f00a faf2 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3bf3c:	e01c      	b.n	3bf78 <att_read_mult_vl_req+0x9c>
   3bf3e:	4638      	mov	r0, r7
   3bf40:	f00b fb6e 	bl	47620 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   3bf44:	466b      	mov	r3, sp
   3bf46:	464a      	mov	r2, r9
   3bf48:	4601      	mov	r1, r0
   3bf4a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   3bf4c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   3bf50:	f00a fadb 	bl	4650a <bt_gatt_foreach_attr>
		if (data.err) {
   3bf54:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3bf58:	2b00      	cmp	r3, #0
   3bf5a:	d0e8      	beq.n	3bf2e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3bf5c:	9b02      	ldr	r3, [sp, #8]
   3bf5e:	6998      	ldr	r0, [r3, #24]
   3bf60:	f7ff fcae 	bl	3b8c0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   3bf64:	9802      	ldr	r0, [sp, #8]
   3bf66:	f001 f861 	bl	3d02c <net_buf_unref>
	if (!req) {
   3bf6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3bf6e:	4632      	mov	r2, r6
   3bf70:	2120      	movs	r1, #32
   3bf72:	4620      	mov	r0, r4
   3bf74:	f00a fe31 	bl	46bda <send_err_rsp.part.0>
			return 0;
   3bf78:	2000      	movs	r0, #0
   3bf7a:	e7c2      	b.n	3bf02 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   3bf7c:	200e      	movs	r0, #14
   3bf7e:	e7c0      	b.n	3bf02 <att_read_mult_vl_req+0x26>
   3bf80:	0004698f 	.word	0x0004698f

0003bf84 <att_read_mult_req>:
{
   3bf84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   3bf88:	6846      	ldr	r6, [r0, #4]
{
   3bf8a:	b085      	sub	sp, #20
   3bf8c:	4604      	mov	r4, r0
   3bf8e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   3bf90:	4630      	mov	r0, r6
   3bf92:	2101      	movs	r1, #1
   3bf94:	f00b fa44 	bl	47420 <bt_gatt_change_aware>
   3bf98:	b950      	cbnz	r0, 3bfb0 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   3bf9a:	2105      	movs	r1, #5
   3bf9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   3bfa0:	f00a fcbd 	bl	4691e <atomic_test_and_set_bit>
   3bfa4:	2800      	cmp	r0, #0
   3bfa6:	d13b      	bne.n	3c020 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   3bfa8:	2012      	movs	r0, #18
}
   3bfaa:	b005      	add	sp, #20
   3bfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   3bfb0:	2210      	movs	r2, #16
   3bfb2:	2100      	movs	r1, #0
   3bfb4:	4668      	mov	r0, sp
   3bfb6:	f009 fbb6 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   3bfba:	2200      	movs	r2, #0
   3bfbc:	210f      	movs	r1, #15
   3bfbe:	4630      	mov	r0, r6
   3bfc0:	f00a fe4e 	bl	46c60 <bt_att_create_pdu>
   3bfc4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3bfc6:	b368      	cbz	r0, 3c024 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3bfc8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 3c028 <att_read_mult_req+0xa4>
	data.chan = chan;
   3bfcc:	9400      	str	r4, [sp, #0]
   3bfce:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   3bfd2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   3bfd6:	8a2b      	ldrh	r3, [r5, #16]
   3bfd8:	2b01      	cmp	r3, #1
   3bfda:	d804      	bhi.n	3bfe6 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   3bfdc:	9902      	ldr	r1, [sp, #8]
   3bfde:	4620      	mov	r0, r4
   3bfe0:	f00a fa9e 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3bfe4:	e01c      	b.n	3c020 <att_read_mult_req+0x9c>
   3bfe6:	4638      	mov	r0, r7
   3bfe8:	f00b fb1a 	bl	47620 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3bfec:	466b      	mov	r3, sp
   3bfee:	464a      	mov	r2, r9
   3bff0:	4601      	mov	r1, r0
   3bff2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   3bff4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3bff8:	f00a fa87 	bl	4650a <bt_gatt_foreach_attr>
		if (data.err) {
   3bffc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3c000:	2b00      	cmp	r3, #0
   3c002:	d0e8      	beq.n	3bfd6 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3c004:	9b02      	ldr	r3, [sp, #8]
   3c006:	6998      	ldr	r0, [r3, #24]
   3c008:	f7ff fc5a 	bl	3b8c0 <tx_meta_data_free>
			net_buf_unref(data.buf);
   3c00c:	9802      	ldr	r0, [sp, #8]
   3c00e:	f001 f80d 	bl	3d02c <net_buf_unref>
	if (!req) {
   3c012:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3c016:	4632      	mov	r2, r6
   3c018:	210e      	movs	r1, #14
   3c01a:	4620      	mov	r0, r4
   3c01c:	f00a fddd 	bl	46bda <send_err_rsp.part.0>
			return 0;
   3c020:	2000      	movs	r0, #0
   3c022:	e7c2      	b.n	3bfaa <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   3c024:	200e      	movs	r0, #14
   3c026:	e7c0      	b.n	3bfaa <att_read_mult_req+0x26>
   3c028:	00046949 	.word	0x00046949

0003c02c <att_read_rsp>:
{
   3c02c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   3c030:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   3c034:	4604      	mov	r4, r0
   3c036:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   3c038:	4640      	mov	r0, r8
   3c03a:	2101      	movs	r1, #1
{
   3c03c:	4617      	mov	r7, r2
   3c03e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   3c040:	f00b f9ee 	bl	47420 <bt_gatt_change_aware>
   3c044:	b948      	cbnz	r0, 3c05a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   3c046:	2105      	movs	r1, #5
   3c048:	f104 0034 	add.w	r0, r4, #52	; 0x34
   3c04c:	f00a fc67 	bl	4691e <atomic_test_and_set_bit>
   3c050:	bb78      	cbnz	r0, 3c0b2 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   3c052:	2012      	movs	r0, #18
}
   3c054:	b004      	add	sp, #16
   3c056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   3c05a:	b38d      	cbz	r5, 3c0c0 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   3c05c:	2210      	movs	r2, #16
   3c05e:	2100      	movs	r1, #0
   3c060:	4668      	mov	r0, sp
   3c062:	f009 fb60 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   3c066:	2200      	movs	r2, #0
   3c068:	4639      	mov	r1, r7
   3c06a:	4640      	mov	r0, r8
   3c06c:	f00a fdf8 	bl	46c60 <bt_att_create_pdu>
   3c070:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3c072:	b338      	cbz	r0, 3c0c4 <att_read_rsp+0x98>
	data.offset = offset;
   3c074:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   3c078:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   3c07c:	2301      	movs	r3, #1
   3c07e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3c082:	4a11      	ldr	r2, [pc, #68]	; (3c0c8 <att_read_rsp+0x9c>)
	data.chan = chan;
   3c084:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3c086:	466b      	mov	r3, sp
   3c088:	4629      	mov	r1, r5
   3c08a:	4628      	mov	r0, r5
   3c08c:	f00a fa3d 	bl	4650a <bt_gatt_foreach_attr>
	if (data.err) {
   3c090:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3c094:	b17b      	cbz	r3, 3c0b6 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3c096:	9b02      	ldr	r3, [sp, #8]
   3c098:	6998      	ldr	r0, [r3, #24]
   3c09a:	f7ff fc11 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   3c09e:	9802      	ldr	r0, [sp, #8]
   3c0a0:	f000 ffc4 	bl	3d02c <net_buf_unref>
	if (!req) {
   3c0a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3c0a8:	462a      	mov	r2, r5
   3c0aa:	4631      	mov	r1, r6
   3c0ac:	4620      	mov	r0, r4
   3c0ae:	f00a fd94 	bl	46bda <send_err_rsp.part.0>
			return 0;
   3c0b2:	2000      	movs	r0, #0
   3c0b4:	e7ce      	b.n	3c054 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   3c0b6:	9902      	ldr	r1, [sp, #8]
   3c0b8:	4620      	mov	r0, r4
   3c0ba:	f00a fa31 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3c0be:	e7f8      	b.n	3c0b2 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   3c0c0:	2001      	movs	r0, #1
   3c0c2:	e7c7      	b.n	3c054 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   3c0c4:	200e      	movs	r0, #14
   3c0c6:	e7c5      	b.n	3c054 <att_read_rsp+0x28>
   3c0c8:	00046949 	.word	0x00046949

0003c0cc <att_read_type_req>:
{
   3c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   3c0d0:	8a0d      	ldrh	r5, [r1, #16]
   3c0d2:	3d04      	subs	r5, #4
   3c0d4:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   3c0d6:	2d02      	cmp	r5, #2
{
   3c0d8:	4604      	mov	r4, r0
   3c0da:	b08c      	sub	sp, #48	; 0x30
   3c0dc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   3c0de:	d001      	beq.n	3c0e4 <att_read_type_req+0x18>
   3c0e0:	2d10      	cmp	r5, #16
   3c0e2:	d150      	bne.n	3c186 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   3c0e4:	2104      	movs	r1, #4
   3c0e6:	300c      	adds	r0, #12
   3c0e8:	f00b fa92 	bl	47610 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3c0ec:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   3c0f0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3c0f2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3c0f4:	1d01      	adds	r1, r0, #4
   3c0f6:	462a      	mov	r2, r5
   3c0f8:	4640      	mov	r0, r8
   3c0fa:	f009 fb5d 	bl	457b8 <bt_uuid_create>
   3c0fe:	b188      	cbz	r0, 3c124 <att_read_type_req+0x58>
	if (!start || !end) {
   3c100:	b19e      	cbz	r6, 3c12a <att_read_type_req+0x5e>
   3c102:	b18f      	cbz	r7, 3c128 <att_read_type_req+0x5c>
	if (start > end) {
   3c104:	42b7      	cmp	r7, r6
   3c106:	d310      	bcc.n	3c12a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   3c108:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   3c10a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   3c10c:	2100      	movs	r1, #0
   3c10e:	eb0d 0002 	add.w	r0, sp, r2
   3c112:	f009 fb08 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   3c116:	2201      	movs	r2, #1
   3c118:	2109      	movs	r1, #9
   3c11a:	4628      	mov	r0, r5
   3c11c:	f00a fda0 	bl	46c60 <bt_att_create_pdu>
   3c120:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   3c122:	b960      	cbnz	r0, 3c13e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   3c124:	200e      	movs	r0, #14
   3c126:	e007      	b.n	3c138 <att_read_type_req+0x6c>
			*err = 0U;
   3c128:	463e      	mov	r6, r7
	if (!req) {
   3c12a:	2301      	movs	r3, #1
   3c12c:	4632      	mov	r2, r6
   3c12e:	2108      	movs	r1, #8
   3c130:	4620      	mov	r0, r4
   3c132:	f00a fd52 	bl	46bda <send_err_rsp.part.0>
		return 0;
   3c136:	2000      	movs	r0, #0
}
   3c138:	b00c      	add	sp, #48	; 0x30
   3c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   3c13e:	2101      	movs	r1, #1
   3c140:	300c      	adds	r0, #12
	data.uuid = uuid;
   3c142:	e9cd 4806 	strd	r4, r8, [sp, #24]
   3c146:	f00b fa3c 	bl	475c2 <net_buf_simple_add>
	data.rsp->len = 0U;
   3c14a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   3c14c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   3c14e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   3c150:	230a      	movs	r3, #10
   3c152:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   3c156:	4a0d      	ldr	r2, [pc, #52]	; (3c18c <att_read_type_req+0xc0>)
   3c158:	ab06      	add	r3, sp, #24
   3c15a:	4639      	mov	r1, r7
   3c15c:	4630      	mov	r0, r6
   3c15e:	f00a f9d4 	bl	4650a <bt_gatt_foreach_attr>
	if (data.err) {
   3c162:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   3c166:	b14b      	cbz	r3, 3c17c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3c168:	9b08      	ldr	r3, [sp, #32]
   3c16a:	6998      	ldr	r0, [r3, #24]
   3c16c:	f7ff fba8 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   3c170:	9808      	ldr	r0, [sp, #32]
   3c172:	f000 ff5b 	bl	3d02c <net_buf_unref>
	if (!req) {
   3c176:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   3c17a:	e7d7      	b.n	3c12c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   3c17c:	9908      	ldr	r1, [sp, #32]
   3c17e:	4620      	mov	r0, r4
   3c180:	f00a f9ce 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3c184:	e7d7      	b.n	3c136 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   3c186:	2004      	movs	r0, #4
   3c188:	e7d6      	b.n	3c138 <att_read_type_req+0x6c>
   3c18a:	bf00      	nop
   3c18c:	0003ba69 	.word	0x0003ba69

0003c190 <att_find_type_req>:
{
   3c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c194:	460f      	mov	r7, r1
   3c196:	b086      	sub	sp, #24
   3c198:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   3c19a:	2106      	movs	r1, #6
   3c19c:	f107 000c 	add.w	r0, r7, #12
   3c1a0:	f00b fa36 	bl	47610 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   3c1a4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3c1a6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   3c1aa:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   3c1ac:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   3c1b0:	b1c5      	cbz	r5, 3c1e4 <att_find_type_req+0x54>
   3c1b2:	2300      	movs	r3, #0
   3c1b4:	f1b8 0f00 	cmp.w	r8, #0
   3c1b8:	d013      	beq.n	3c1e2 <att_find_type_req+0x52>
	if (start > end) {
   3c1ba:	4545      	cmp	r5, r8
   3c1bc:	d812      	bhi.n	3c1e4 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   3c1be:	f88d 3000 	strb.w	r3, [sp]
   3c1c2:	f88d 3004 	strb.w	r3, [sp, #4]
   3c1c6:	a901      	add	r1, sp, #4
   3c1c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3c1cc:	4668      	mov	r0, sp
   3c1ce:	f8ad 2002 	strh.w	r2, [sp, #2]
   3c1d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   3c1d6:	f009 fac1 	bl	4575c <bt_uuid_cmp>
   3c1da:	4606      	mov	r6, r0
   3c1dc:	b160      	cbz	r0, 3c1f8 <att_find_type_req+0x68>
	if (!req) {
   3c1de:	230a      	movs	r3, #10
   3c1e0:	e001      	b.n	3c1e6 <att_find_type_req+0x56>
			*err = 0U;
   3c1e2:	4645      	mov	r5, r8
	if (!req) {
   3c1e4:	2301      	movs	r3, #1
   3c1e6:	462a      	mov	r2, r5
   3c1e8:	2106      	movs	r1, #6
   3c1ea:	4620      	mov	r0, r4
   3c1ec:	f00a fcf5 	bl	46bda <send_err_rsp.part.0>
		return 0;
   3c1f0:	2000      	movs	r0, #0
}
   3c1f2:	b006      	add	sp, #24
   3c1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   3c1f8:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   3c1fc:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   3c1fe:	4601      	mov	r1, r0
   3c200:	2214      	movs	r2, #20
   3c202:	a801      	add	r0, sp, #4
   3c204:	f009 fa8f 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   3c208:	4632      	mov	r2, r6
   3c20a:	2107      	movs	r1, #7
   3c20c:	4650      	mov	r0, sl
   3c20e:	f00a fd27 	bl	46c60 <bt_att_create_pdu>
   3c212:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   3c214:	b1f8      	cbz	r0, 3c256 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   3c216:	230a      	movs	r3, #10
   3c218:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   3c21c:	4a0f      	ldr	r2, [pc, #60]	; (3c25c <att_find_type_req+0xcc>)
	data.chan = chan;
   3c21e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   3c220:	ab01      	add	r3, sp, #4
   3c222:	4641      	mov	r1, r8
   3c224:	4628      	mov	r0, r5
	data.value = value;
   3c226:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   3c22a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   3c22e:	f00a f96c 	bl	4650a <bt_gatt_foreach_attr>
	if (data.err) {
   3c232:	f89d 3015 	ldrb.w	r3, [sp, #21]
   3c236:	b14b      	cbz	r3, 3c24c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3c238:	9b02      	ldr	r3, [sp, #8]
   3c23a:	6998      	ldr	r0, [r3, #24]
   3c23c:	f7ff fb40 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   3c240:	9802      	ldr	r0, [sp, #8]
   3c242:	f000 fef3 	bl	3d02c <net_buf_unref>
	if (!req) {
   3c246:	f89d 3015 	ldrb.w	r3, [sp, #21]
   3c24a:	e7cc      	b.n	3c1e6 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   3c24c:	9902      	ldr	r1, [sp, #8]
   3c24e:	4620      	mov	r0, r4
   3c250:	f00a f966 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3c254:	e7cc      	b.n	3c1f0 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   3c256:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   3c258:	e7cb      	b.n	3c1f2 <att_find_type_req+0x62>
   3c25a:	bf00      	nop
   3c25c:	0004653d 	.word	0x0004653d

0003c260 <att_find_info_req>:
{
   3c260:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   3c262:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   3c264:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3c266:	885e      	ldrh	r6, [r3, #2]
{
   3c268:	b085      	sub	sp, #20
   3c26a:	4604      	mov	r4, r0
	if (!start || !end) {
   3c26c:	b195      	cbz	r5, 3c294 <att_find_info_req+0x34>
   3c26e:	b186      	cbz	r6, 3c292 <att_find_info_req+0x32>
	if (start > end) {
   3c270:	42b5      	cmp	r5, r6
   3c272:	d80f      	bhi.n	3c294 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   3c274:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   3c276:	2210      	movs	r2, #16
   3c278:	2100      	movs	r1, #0
   3c27a:	4668      	mov	r0, sp
   3c27c:	f009 fa53 	bl	45726 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   3c280:	2200      	movs	r2, #0
   3c282:	2105      	movs	r1, #5
   3c284:	4638      	mov	r0, r7
   3c286:	f00a fceb 	bl	46c60 <bt_att_create_pdu>
   3c28a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   3c28c:	b958      	cbnz	r0, 3c2a6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   3c28e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   3c290:	e007      	b.n	3c2a2 <att_find_info_req+0x42>
			*err = 0U;
   3c292:	4635      	mov	r5, r6
	if (!req) {
   3c294:	2301      	movs	r3, #1
   3c296:	462a      	mov	r2, r5
   3c298:	2104      	movs	r1, #4
   3c29a:	4620      	mov	r0, r4
   3c29c:	f00a fc9d 	bl	46bda <send_err_rsp.part.0>
		return 0;
   3c2a0:	2000      	movs	r0, #0
}
   3c2a2:	b005      	add	sp, #20
   3c2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   3c2a6:	466b      	mov	r3, sp
   3c2a8:	4a0a      	ldr	r2, [pc, #40]	; (3c2d4 <att_find_info_req+0x74>)
	data.chan = chan;
   3c2aa:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   3c2ac:	4631      	mov	r1, r6
   3c2ae:	4628      	mov	r0, r5
   3c2b0:	f00a f92b 	bl	4650a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   3c2b4:	9b02      	ldr	r3, [sp, #8]
   3c2b6:	b943      	cbnz	r3, 3c2ca <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   3c2b8:	9b01      	ldr	r3, [sp, #4]
   3c2ba:	6998      	ldr	r0, [r3, #24]
   3c2bc:	f7ff fb00 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(data.buf);
   3c2c0:	9801      	ldr	r0, [sp, #4]
   3c2c2:	f000 feb3 	bl	3d02c <net_buf_unref>
	if (!req) {
   3c2c6:	230a      	movs	r3, #10
   3c2c8:	e7e5      	b.n	3c296 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   3c2ca:	9901      	ldr	r1, [sp, #4]
   3c2cc:	4620      	mov	r0, r4
   3c2ce:	f00a f927 	bl	46520 <bt_att_chan_send_rsp>
	return 0;
   3c2d2:	e7e5      	b.n	3c2a0 <att_find_info_req+0x40>
   3c2d4:	00046665 	.word	0x00046665

0003c2d8 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   3c2d8:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   3c2da:	4c0b      	ldr	r4, [pc, #44]	; (3c308 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   3c2dc:	4d0b      	ldr	r5, [pc, #44]	; (3c30c <bt_att_init+0x34>)
   3c2de:	4620      	mov	r0, r4
   3c2e0:	f00c f819 	bl	48316 <z_impl_k_queue_init>
   3c2e4:	4629      	mov	r1, r5
   3c2e6:	4620      	mov	r0, r4
   3c2e8:	f00c f821 	bl	4832e <k_queue_append>
   3c2ec:	f105 0114 	add.w	r1, r5, #20
   3c2f0:	4620      	mov	r0, r4
   3c2f2:	f00c f81c 	bl	4832e <k_queue_append>
   3c2f6:	f105 0128 	add.w	r1, r5, #40	; 0x28
   3c2fa:	4620      	mov	r0, r4
   3c2fc:	f00c f817 	bl	4832e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   3c300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   3c304:	f000 ba46 	b.w	3c794 <bt_gatt_init>
   3c308:	20000a14 	.word	0x20000a14
   3c30c:	20002c34 	.word	0x20002c34

0003c310 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   3c310:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   3c312:	2300      	movs	r3, #0
{
   3c314:	4605      	mov	r5, r0
   3c316:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   3c318:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   3c31a:	f005 f8d7 	bl	414cc <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   3c31e:	4b0b      	ldr	r3, [pc, #44]	; (3c34c <bt_att_req_alloc+0x3c>)
   3c320:	681b      	ldr	r3, [r3, #0]
   3c322:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   3c324:	bf04      	itt	eq
   3c326:	2500      	moveq	r5, #0
   3c328:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   3c32a:	a901      	add	r1, sp, #4
   3c32c:	4808      	ldr	r0, [pc, #32]	; (3c350 <bt_att_req_alloc+0x40>)
   3c32e:	462a      	mov	r2, r5
   3c330:	4623      	mov	r3, r4
   3c332:	f004 f9db 	bl	406ec <k_mem_slab_alloc>
   3c336:	4601      	mov	r1, r0
   3c338:	b930      	cbnz	r0, 3c348 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   3c33a:	9801      	ldr	r0, [sp, #4]
   3c33c:	2210      	movs	r2, #16
   3c33e:	f009 f9f2 	bl	45726 <memset>

	return req;
   3c342:	9801      	ldr	r0, [sp, #4]
}
   3c344:	b003      	add	sp, #12
   3c346:	bd30      	pop	{r4, r5, pc}
		return NULL;
   3c348:	2000      	movs	r0, #0
   3c34a:	e7fb      	b.n	3c344 <bt_att_req_alloc+0x34>
   3c34c:	20002c70 	.word	0x20002c70
   3c350:	20000994 	.word	0x20000994

0003c354 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   3c354:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   3c356:	6883      	ldr	r3, [r0, #8]
{
   3c358:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   3c35a:	b14b      	cbz	r3, 3c370 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   3c35c:	6998      	ldr	r0, [r3, #24]
   3c35e:	f7ff faaf 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(req->buf);
   3c362:	9b01      	ldr	r3, [sp, #4]
   3c364:	6898      	ldr	r0, [r3, #8]
   3c366:	f000 fe61 	bl	3d02c <net_buf_unref>
		req->buf = NULL;
   3c36a:	9b01      	ldr	r3, [sp, #4]
   3c36c:	2200      	movs	r2, #0
   3c36e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   3c370:	4803      	ldr	r0, [pc, #12]	; (3c380 <bt_att_req_free+0x2c>)
   3c372:	a901      	add	r1, sp, #4
   3c374:	f00b ff11 	bl	4819a <k_mem_slab_free>
}
   3c378:	b003      	add	sp, #12
   3c37a:	f85d fb04 	ldr.w	pc, [sp], #4
   3c37e:	bf00      	nop
   3c380:	20000994 	.word	0x20000994

0003c384 <att_handle_rsp>:
{
   3c384:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3c388:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   3c38a:	3058      	adds	r0, #88	; 0x58
{
   3c38c:	460e      	mov	r6, r1
   3c38e:	4617      	mov	r7, r2
   3c390:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   3c392:	f00c f8ba 	bl	4850a <k_work_cancel_delayable>
	if (!chan->req) {
   3c396:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   3c398:	b930      	cbnz	r0, 3c3a8 <att_handle_rsp+0x24>
	att_req_send_process(chan->att);
   3c39a:	6820      	ldr	r0, [r4, #0]
   3c39c:	f00a fb58 	bl	46a50 <att_req_send_process>
}
   3c3a0:	2000      	movs	r0, #0
   3c3a2:	b002      	add	sp, #8
   3c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   3c3a8:	4b10      	ldr	r3, [pc, #64]	; (3c3ec <att_handle_rsp+0x68>)
   3c3aa:	4298      	cmp	r0, r3
   3c3ac:	f04f 0800 	mov.w	r8, #0
   3c3b0:	d102      	bne.n	3c3b8 <att_handle_rsp+0x34>
		chan->req = NULL;
   3c3b2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   3c3b6:	e7f0      	b.n	3c39a <att_handle_rsp+0x16>
	func = chan->req->func;
   3c3b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   3c3bc:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   3c3c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   3c3c2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   3c3c6:	f7ff ffc5 	bl	3c354 <bt_att_req_free>
	att_req_send_process(chan->att);
   3c3ca:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   3c3cc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   3c3d0:	f00a fb3e 	bl	46a50 <att_req_send_process>
	if (func) {
   3c3d4:	f1b9 0f00 	cmp.w	r9, #0
   3c3d8:	d0e2      	beq.n	3c3a0 <att_handle_rsp+0x1c>
		func(chan->att->conn, err, pdu, len, params);
   3c3da:	6820      	ldr	r0, [r4, #0]
   3c3dc:	f8cd a000 	str.w	sl, [sp]
   3c3e0:	6800      	ldr	r0, [r0, #0]
   3c3e2:	463b      	mov	r3, r7
   3c3e4:	4632      	mov	r2, r6
   3c3e6:	4629      	mov	r1, r5
   3c3e8:	47c8      	blx	r9
   3c3ea:	e7d9      	b.n	3c3a0 <att_handle_rsp+0x1c>
   3c3ec:	20002c74 	.word	0x20002c74

0003c3f0 <bt_att_disconnected>:
{
   3c3f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   3c3f4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   3c3f8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   3c3fa:	2e00      	cmp	r6, #0
   3c3fc:	d05a      	beq.n	3c4b4 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   3c3fe:	f100 0184 	add.w	r1, r0, #132	; 0x84
   3c402:	f106 0024 	add.w	r0, r6, #36	; 0x24
   3c406:	f00a fa60 	bl	468ca <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   3c40a:	1f27      	subs	r7, r4, #4
   3c40c:	f104 0838 	add.w	r8, r4, #56	; 0x38
   3c410:	2200      	movs	r2, #0
   3c412:	2300      	movs	r3, #0
   3c414:	4640      	mov	r0, r8
   3c416:	f00b f879 	bl	4750c <net_buf_get>
   3c41a:	4605      	mov	r5, r0
   3c41c:	bb48      	cbnz	r0, 3c472 <bt_att_disconnected+0x82>
	if (chan->req) {
   3c41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3c420:	b12b      	cbz	r3, 3c42e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   3c422:	4602      	mov	r2, r0
   3c424:	4601      	mov	r1, r0
   3c426:	230e      	movs	r3, #14
   3c428:	4638      	mov	r0, r7
   3c42a:	f7ff ffab 	bl	3c384 <att_handle_rsp>
	chan->att = NULL;
   3c42e:	2300      	movs	r3, #0
   3c430:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   3c434:	2102      	movs	r1, #2
   3c436:	f104 0030 	add.w	r0, r4, #48	; 0x30
   3c43a:	f00a fa5f 	bl	468fc <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   3c43e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   3c440:	2b00      	cmp	r3, #0
   3c442:	d137      	bne.n	3c4b4 <bt_att_disconnected+0xc4>
	att_reset(att);
   3c444:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   3c446:	9803      	ldr	r0, [sp, #12]
   3c448:	2200      	movs	r2, #0
   3c44a:	2300      	movs	r3, #0
   3c44c:	300c      	adds	r0, #12
   3c44e:	f00b f85d 	bl	4750c <net_buf_get>
   3c452:	4605      	mov	r5, r0
   3c454:	b9a0      	cbnz	r0, 3c480 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   3c456:	9803      	ldr	r0, [sp, #12]
	return list->head;
   3c458:	6845      	ldr	r5, [r0, #4]
   3c45a:	b9c5      	cbnz	r5, 3c48e <bt_att_disconnected+0x9e>
	att->conn = NULL;
   3c45c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   3c45e:	a903      	add	r1, sp, #12
   3c460:	4816      	ldr	r0, [pc, #88]	; (3c4bc <bt_att_disconnected+0xcc>)
   3c462:	f00b fe9a 	bl	4819a <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   3c466:	6820      	ldr	r0, [r4, #0]
}
   3c468:	b004      	add	sp, #16
   3c46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   3c46e:	f000 bce9 	b.w	3ce44 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   3c472:	69a8      	ldr	r0, [r5, #24]
   3c474:	f7ff fa24 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(buf);
   3c478:	4628      	mov	r0, r5
   3c47a:	f000 fdd7 	bl	3d02c <net_buf_unref>
   3c47e:	e7c7      	b.n	3c410 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   3c480:	69a8      	ldr	r0, [r5, #24]
   3c482:	f7ff fa1d 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(buf);
   3c486:	4628      	mov	r0, r5
   3c488:	f000 fdd0 	bl	3d02c <net_buf_unref>
   3c48c:	e7db      	b.n	3c446 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3c48e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   3c490:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   3c492:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3c494:	4295      	cmp	r5, r2
	list->tail = node;
   3c496:	bf08      	it	eq
   3c498:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   3c49a:	686e      	ldr	r6, [r5, #4]
   3c49c:	b136      	cbz	r6, 3c4ac <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   3c49e:	68eb      	ldr	r3, [r5, #12]
   3c4a0:	9300      	str	r3, [sp, #0]
   3c4a2:	2300      	movs	r3, #0
   3c4a4:	6800      	ldr	r0, [r0, #0]
   3c4a6:	461a      	mov	r2, r3
   3c4a8:	210e      	movs	r1, #14
   3c4aa:	47b0      	blx	r6
		bt_att_req_free(req);
   3c4ac:	4628      	mov	r0, r5
   3c4ae:	f7ff ff51 	bl	3c354 <bt_att_req_free>
   3c4b2:	e7d0      	b.n	3c456 <bt_att_disconnected+0x66>
}
   3c4b4:	b004      	add	sp, #16
   3c4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c4ba:	bf00      	nop
   3c4bc:	2000095c 	.word	0x2000095c

0003c4c0 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   3c4c0:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   3c4c2:	b930      	cbnz	r0, 3c4d2 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   3c4c4:	4907      	ldr	r1, [pc, #28]	; (3c4e4 <find_cf_cfg+0x24>)
   3c4c6:	4808      	ldr	r0, [pc, #32]	; (3c4e8 <find_cf_cfg+0x28>)
   3c4c8:	f00a fd2a 	bl	46f20 <bt_addr_le_eq>
   3c4cc:	b138      	cbz	r0, 3c4de <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   3c4ce:	4807      	ldr	r0, [pc, #28]	; (3c4ec <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   3c4d0:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3c4d2:	4a05      	ldr	r2, [pc, #20]	; (3c4e8 <find_cf_cfg+0x28>)
   3c4d4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   3c4d8:	f009 fe84 	bl	461e4 <bt_conn_is_peer_addr_le>
   3c4dc:	e7f6      	b.n	3c4cc <find_cf_cfg+0xc>
	return NULL;
   3c4de:	2000      	movs	r0, #0
   3c4e0:	e7f6      	b.n	3c4d0 <find_cf_cfg+0x10>
   3c4e2:	bf00      	nop
   3c4e4:	00049a68 	.word	0x00049a68
   3c4e8:	20002c9d 	.word	0x20002c9d
   3c4ec:	20002c9c 	.word	0x20002c9c

0003c4f0 <find_sc_cfg>:
{
   3c4f0:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   3c4f2:	4c06      	ldr	r4, [pc, #24]	; (3c50c <find_sc_cfg+0x1c>)
   3c4f4:	7823      	ldrb	r3, [r4, #0]
   3c4f6:	4283      	cmp	r3, r0
   3c4f8:	d103      	bne.n	3c502 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   3c4fa:	1c60      	adds	r0, r4, #1
   3c4fc:	f00a fd10 	bl	46f20 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   3c500:	b908      	cbnz	r0, 3c506 <find_sc_cfg+0x16>
	return NULL;
   3c502:	2000      	movs	r0, #0
}
   3c504:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   3c506:	4620      	mov	r0, r4
   3c508:	e7fc      	b.n	3c504 <find_sc_cfg+0x14>
   3c50a:	bf00      	nop
   3c50c:	20003982 	.word	0x20003982

0003c510 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   3c510:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   3c512:	1c4a      	adds	r2, r1, #1
{
   3c514:	460c      	mov	r4, r1
		if (conn) {
   3c516:	b138      	cbz	r0, 3c528 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   3c518:	7809      	ldrb	r1, [r1, #0]
   3c51a:	f009 fe63 	bl	461e4 <bt_conn_is_peer_addr_le>
   3c51e:	b108      	cbz	r0, 3c524 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   3c520:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   3c522:	bd10      	pop	{r4, pc}
	return NULL;
   3c524:	2000      	movs	r0, #0
   3c526:	e7fc      	b.n	3c522 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   3c528:	4902      	ldr	r1, [pc, #8]	; (3c534 <find_ccc_cfg+0x24>)
   3c52a:	4610      	mov	r0, r2
   3c52c:	f00a fcf8 	bl	46f20 <bt_addr_le_eq>
   3c530:	e7f5      	b.n	3c51e <find_ccc_cfg+0xe>
   3c532:	bf00      	nop
   3c534:	00049a68 	.word	0x00049a68

0003c538 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   3c538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c53c:	461e      	mov	r6, r3
   3c53e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   3c542:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   3c546:	4681      	mov	r9, r0
   3c548:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   3c54a:	2b00      	cmp	r3, #0
   3c54c:	d13d      	bne.n	3c5ca <bt_gatt_attr_write_ccc+0x92>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   3c54e:	1e73      	subs	r3, r6, #1
   3c550:	2b01      	cmp	r3, #1
   3c552:	d83d      	bhi.n	3c5d0 <bt_gatt_attr_write_ccc+0x98>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   3c554:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   3c556:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   3c558:	7815      	ldrb	r5, [r2, #0]
   3c55a:	bf18      	it	ne
   3c55c:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   3c55e:	f7ff ffd7 	bl	3c510 <find_ccc_cfg>
	if (!cfg) {
   3c562:	4604      	mov	r4, r0
   3c564:	b980      	cbnz	r0, 3c588 <bt_gatt_attr_write_ccc+0x50>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   3c566:	b915      	cbnz	r5, 3c56e <bt_gatt_attr_write_ccc+0x36>
			return len;
   3c568:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   3c56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   3c56e:	4641      	mov	r1, r8
   3c570:	f7ff ffce 	bl	3c510 <find_ccc_cfg>
		if (!cfg) {
   3c574:	4604      	mov	r4, r0
   3c576:	b370      	cbz	r0, 3c5d6 <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3c578:	f109 0188 	add.w	r1, r9, #136	; 0x88
   3c57c:	3001      	adds	r0, #1
   3c57e:	f00a fce6 	bl	46f4e <bt_addr_le_copy>
		cfg->id = conn->id;
   3c582:	f899 3008 	ldrb.w	r3, [r9, #8]
   3c586:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   3c588:	f8d8 3010 	ldr.w	r3, [r8, #16]
   3c58c:	b98b      	cbnz	r3, 3c5b2 <bt_gatt_attr_write_ccc+0x7a>
	cfg->value = value;
   3c58e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   3c590:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   3c594:	42ab      	cmp	r3, r5
   3c596:	d003      	beq.n	3c5a0 <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   3c598:	4641      	mov	r1, r8
   3c59a:	4638      	mov	r0, r7
   3c59c:	f00a fc4c 	bl	46e38 <gatt_ccc_changed>
	if (!value) {
   3c5a0:	2d00      	cmp	r5, #0
   3c5a2:	d1e1      	bne.n	3c568 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   3c5a4:	490d      	ldr	r1, [pc, #52]	; (3c5dc <bt_gatt_attr_write_ccc+0xa4>)
   3c5a6:	1c60      	adds	r0, r4, #1
   3c5a8:	f00a fcd1 	bl	46f4e <bt_addr_le_copy>
	cfg->id = 0U;
   3c5ac:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   3c5ae:	8125      	strh	r5, [r4, #8]
}
   3c5b0:	e7da      	b.n	3c568 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   3c5b2:	462a      	mov	r2, r5
   3c5b4:	4639      	mov	r1, r7
   3c5b6:	4648      	mov	r0, r9
   3c5b8:	4798      	blx	r3
		if (write < 0) {
   3c5ba:	2800      	cmp	r0, #0
   3c5bc:	dbd5      	blt.n	3c56a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   3c5be:	3801      	subs	r0, #1
   3c5c0:	2801      	cmp	r0, #1
   3c5c2:	d9e4      	bls.n	3c58e <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   3c5c4:	f06f 000d 	mvn.w	r0, #13
   3c5c8:	e7cf      	b.n	3c56a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3c5ca:	f06f 0006 	mvn.w	r0, #6
   3c5ce:	e7cc      	b.n	3c56a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   3c5d0:	f06f 000c 	mvn.w	r0, #12
   3c5d4:	e7c9      	b.n	3c56a <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   3c5d6:	f06f 0010 	mvn.w	r0, #16
   3c5da:	e7c6      	b.n	3c56a <bt_gatt_attr_write_ccc+0x32>
   3c5dc:	00049a68 	.word	0x00049a68

0003c5e0 <clear_cf_cfg>:
{
   3c5e0:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   3c5e2:	490c      	ldr	r1, [pc, #48]	; (3c614 <clear_cf_cfg+0x34>)
{
   3c5e4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   3c5e6:	3001      	adds	r0, #1
   3c5e8:	f00a fcb1 	bl	46f4e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   3c5ec:	f104 0008 	add.w	r0, r4, #8
   3c5f0:	2201      	movs	r2, #1
   3c5f2:	2100      	movs	r1, #0
   3c5f4:	f009 f897 	bl	45726 <memset>
   3c5f8:	f3bf 8f5b 	dmb	ish
   3c5fc:	340c      	adds	r4, #12
   3c5fe:	2300      	movs	r3, #0
   3c600:	e854 2f00 	ldrex	r2, [r4]
   3c604:	e844 3100 	strex	r1, r3, [r4]
   3c608:	2900      	cmp	r1, #0
   3c60a:	d1f9      	bne.n	3c600 <clear_cf_cfg+0x20>
   3c60c:	f3bf 8f5b 	dmb	ish
}
   3c610:	bd10      	pop	{r4, pc}
   3c612:	bf00      	nop
   3c614:	00049a68 	.word	0x00049a68

0003c618 <sc_save>:
{
   3c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c61c:	4680      	mov	r8, r0
   3c61e:	460f      	mov	r7, r1
   3c620:	4616      	mov	r6, r2
   3c622:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   3c624:	f7ff ff64 	bl	3c4f0 <find_sc_cfg>
	if (!cfg) {
   3c628:	4604      	mov	r4, r0
   3c62a:	b948      	cbnz	r0, 3c640 <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   3c62c:	490b      	ldr	r1, [pc, #44]	; (3c65c <sc_save+0x44>)
   3c62e:	f7ff ff5f 	bl	3c4f0 <find_sc_cfg>
		if (!cfg) {
   3c632:	4604      	mov	r4, r0
   3c634:	b180      	cbz	r0, 3c658 <sc_save+0x40>
		cfg->id = id;
   3c636:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   3c63a:	4639      	mov	r1, r7
   3c63c:	f00a fc87 	bl	46f4e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   3c640:	8922      	ldrh	r2, [r4, #8]
   3c642:	8963      	ldrh	r3, [r4, #10]
   3c644:	b91a      	cbnz	r2, 3c64e <sc_save+0x36>
   3c646:	b92b      	cbnz	r3, 3c654 <sc_save+0x3c>
		cfg->data.start = start;
   3c648:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   3c64a:	8165      	strh	r5, [r4, #10]
   3c64c:	e004      	b.n	3c658 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   3c64e:	4296      	cmp	r6, r2
		*start = new_start;
   3c650:	bf38      	it	cc
   3c652:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   3c654:	429d      	cmp	r5, r3
   3c656:	d8f8      	bhi.n	3c64a <sc_save+0x32>
}
   3c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c65c:	00049a68 	.word	0x00049a68

0003c660 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   3c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   3c664:	4b23      	ldr	r3, [pc, #140]	; (3c6f4 <disconnected_cb+0x94>)
{
   3c666:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3c668:	6882      	ldr	r2, [r0, #8]
   3c66a:	429a      	cmp	r2, r3
{
   3c66c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   3c66e:	d102      	bne.n	3c676 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   3c670:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   3c672:	8963      	ldrh	r3, [r4, #10]
   3c674:	bb33      	cbnz	r3, 3c6c4 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   3c676:	2001      	movs	r0, #1
   3c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   3c67c:	f009 fd5c 	bl	46138 <bt_conn_unref>
		if (ccc->cfg_changed) {
   3c680:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   3c682:	2100      	movs	r1, #0
   3c684:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   3c686:	2b00      	cmp	r3, #0
   3c688:	d0f5      	beq.n	3c676 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   3c68a:	4638      	mov	r0, r7
   3c68c:	4798      	blx	r3
   3c68e:	e7f2      	b.n	3c676 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3c690:	f105 0888 	add.w	r8, r5, #136	; 0x88
   3c694:	7a28      	ldrb	r0, [r5, #8]
   3c696:	4641      	mov	r1, r8
   3c698:	f009 fb29 	bl	45cee <bt_addr_le_is_bonded>
   3c69c:	b968      	cbnz	r0, 3c6ba <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   3c69e:	4b16      	ldr	r3, [pc, #88]	; (3c6f8 <disconnected_cb+0x98>)
   3c6a0:	429c      	cmp	r4, r3
   3c6a2:	d102      	bne.n	3c6aa <disconnected_cb+0x4a>
					sc_clear(conn);
   3c6a4:	4628      	mov	r0, r5
   3c6a6:	f00a fc55 	bl	46f54 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   3c6aa:	4914      	ldr	r1, [pc, #80]	; (3c6fc <disconnected_cb+0x9c>)
   3c6ac:	4630      	mov	r0, r6
   3c6ae:	f00a fc4e 	bl	46f4e <bt_addr_le_copy>
	cfg->id = 0U;
   3c6b2:	2300      	movs	r3, #0
   3c6b4:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   3c6b6:	8123      	strh	r3, [r4, #8]
}
   3c6b8:	e7e2      	b.n	3c680 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3c6ba:	4641      	mov	r1, r8
   3c6bc:	4630      	mov	r0, r6
   3c6be:	f00a fc46 	bl	46f4e <bt_addr_le_copy>
   3c6c2:	e7dd      	b.n	3c680 <disconnected_cb+0x20>
		if (!cfg->value) {
   3c6c4:	8923      	ldrh	r3, [r4, #8]
   3c6c6:	2b00      	cmp	r3, #0
   3c6c8:	d0da      	beq.n	3c680 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3c6ca:	4626      	mov	r6, r4
   3c6cc:	4628      	mov	r0, r5
   3c6ce:	f816 1b01 	ldrb.w	r1, [r6], #1
   3c6d2:	4632      	mov	r2, r6
   3c6d4:	f009 fd86 	bl	461e4 <bt_conn_is_peer_addr_le>
   3c6d8:	2800      	cmp	r0, #0
   3c6da:	d1d9      	bne.n	3c690 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   3c6dc:	7820      	ldrb	r0, [r4, #0]
   3c6de:	4631      	mov	r1, r6
   3c6e0:	f7fe fe76 	bl	3b3d0 <bt_conn_lookup_addr_le>
			if (tmp) {
   3c6e4:	2800      	cmp	r0, #0
   3c6e6:	d0cb      	beq.n	3c680 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   3c6e8:	7a83      	ldrb	r3, [r0, #10]
   3c6ea:	2b07      	cmp	r3, #7
   3c6ec:	d1c6      	bne.n	3c67c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   3c6ee:	f009 fd23 	bl	46138 <bt_conn_unref>
	if (!value_used) {
   3c6f2:	e7c0      	b.n	3c676 <disconnected_cb+0x16>
   3c6f4:	0003c539 	.word	0x0003c539
   3c6f8:	20000770 	.word	0x20000770
   3c6fc:	00049a68 	.word	0x00049a68

0003c700 <read_ppcp>:
{
   3c700:	b513      	push	{r0, r1, r4, lr}
   3c702:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   3c706:	4c0b      	ldr	r4, [pc, #44]	; (3c734 <read_ppcp+0x34>)
{
   3c708:	4610      	mov	r0, r2
	if (offset > value_len) {
   3c70a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   3c70c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   3c710:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   3c714:	d80b      	bhi.n	3c72e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   3c716:	f1c1 0408 	rsb	r4, r1, #8
   3c71a:	429c      	cmp	r4, r3
   3c71c:	bfa8      	it	ge
   3c71e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   3c720:	4622      	mov	r2, r4
   3c722:	4469      	add	r1, sp
   3c724:	f008 fff4 	bl	45710 <memcpy>
}
   3c728:	4620      	mov	r0, r4
   3c72a:	b002      	add	sp, #8
   3c72c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3c72e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   3c732:	e7f9      	b.n	3c728 <read_ppcp+0x28>
   3c734:	00280018 	.word	0x00280018

0003c738 <sc_indicate_rsp>:
{
   3c738:	b510      	push	{r4, lr}
   3c73a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3c73c:	4814      	ldr	r0, [pc, #80]	; (3c790 <sc_indicate_rsp+0x58>)
   3c73e:	f3bf 8f5b 	dmb	ish
   3c742:	e850 3f00 	ldrex	r3, [r0]
   3c746:	f023 0302 	bic.w	r3, r3, #2
   3c74a:	e840 3200 	strex	r2, r3, [r0]
   3c74e:	2a00      	cmp	r2, #0
   3c750:	d1f7      	bne.n	3c742 <sc_indicate_rsp+0xa>
   3c752:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3c756:	f3bf 8f5b 	dmb	ish
   3c75a:	6803      	ldr	r3, [r0, #0]
   3c75c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   3c760:	07da      	lsls	r2, r3, #31
   3c762:	d504      	bpl.n	3c76e <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   3c764:	2200      	movs	r2, #0
   3c766:	2300      	movs	r3, #0
   3c768:	3830      	subs	r0, #48	; 0x30
   3c76a:	f004 fbcd 	bl	40f08 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   3c76e:	4620      	mov	r0, r4
   3c770:	f00a fb3a 	bl	46de8 <bt_att_fixed_chan_only>
   3c774:	b150      	cbz	r0, 3c78c <sc_indicate_rsp+0x54>
		cfg = find_cf_cfg(conn);
   3c776:	4620      	mov	r0, r4
   3c778:	f7ff fea2 	bl	3c4c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   3c77c:	b130      	cbz	r0, 3c78c <sc_indicate_rsp+0x54>
   3c77e:	7a03      	ldrb	r3, [r0, #8]
   3c780:	07db      	lsls	r3, r3, #31
   3c782:	d503      	bpl.n	3c78c <sc_indicate_rsp+0x54>
}
   3c784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   3c788:	f00a bcaf 	b.w	470ea <set_change_aware_no_store.constprop.0.isra.0>
}
   3c78c:	bd10      	pop	{r4, pc}
   3c78e:	bf00      	nop
   3c790:	20001b10 	.word	0x20001b10

0003c794 <bt_gatt_init>:
{
   3c794:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   3c796:	4817      	ldr	r0, [pc, #92]	; (3c7f4 <bt_gatt_init+0x60>)
   3c798:	2101      	movs	r1, #1
   3c79a:	f00a fbc9 	bl	46f30 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   3c79e:	07c3      	lsls	r3, r0, #31
   3c7a0:	d427      	bmi.n	3c7f2 <bt_gatt_init+0x5e>
   3c7a2:	2102      	movs	r1, #2
   3c7a4:	4813      	ldr	r0, [pc, #76]	; (3c7f4 <bt_gatt_init+0x60>)
   3c7a6:	f00a fbc3 	bl	46f30 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   3c7aa:	4008      	ands	r0, r1
   3c7ac:	d107      	bne.n	3c7be <bt_gatt_init+0x2a>
   3c7ae:	4912      	ldr	r1, [pc, #72]	; (3c7f8 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   3c7b0:	4a12      	ldr	r2, [pc, #72]	; (3c7fc <bt_gatt_init+0x68>)
   3c7b2:	880b      	ldrh	r3, [r1, #0]
   3c7b4:	4c12      	ldr	r4, [pc, #72]	; (3c800 <bt_gatt_init+0x6c>)
   3c7b6:	42a2      	cmp	r2, r4
   3c7b8:	d315      	bcc.n	3c7e6 <bt_gatt_init+0x52>
   3c7ba:	b100      	cbz	r0, 3c7be <bt_gatt_init+0x2a>
   3c7bc:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   3c7be:	4b11      	ldr	r3, [pc, #68]	; (3c804 <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   3c7c0:	4911      	ldr	r1, [pc, #68]	; (3c808 <bt_gatt_init+0x74>)
   3c7c2:	4812      	ldr	r0, [pc, #72]	; (3c80c <bt_gatt_init+0x78>)
   3c7c4:	2200      	movs	r2, #0
	list->tail = NULL;
   3c7c6:	e9c3 2200 	strd	r2, r2, [r3]
   3c7ca:	f00b fe90 	bl	484ee <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   3c7ce:	480f      	ldr	r0, [pc, #60]	; (3c80c <bt_gatt_init+0x78>)
   3c7d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   3c7d4:	2300      	movs	r3, #0
   3c7d6:	f7fc fdd1 	bl	3937c <bt_long_wq_schedule>
}
   3c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   3c7de:	490c      	ldr	r1, [pc, #48]	; (3c810 <bt_gatt_init+0x7c>)
   3c7e0:	480c      	ldr	r0, [pc, #48]	; (3c814 <bt_gatt_init+0x80>)
   3c7e2:	f00b be84 	b.w	484ee <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   3c7e6:	6850      	ldr	r0, [r2, #4]
   3c7e8:	4403      	add	r3, r0
   3c7ea:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   3c7ec:	3208      	adds	r2, #8
   3c7ee:	2001      	movs	r0, #1
   3c7f0:	e7e1      	b.n	3c7b6 <bt_gatt_init+0x22>
}
   3c7f2:	bd10      	pop	{r4, pc}
   3c7f4:	20002cac 	.word	0x20002cac
   3c7f8:	2000398e 	.word	0x2000398e
   3c7fc:	00048fbc 	.word	0x00048fbc
   3c800:	00048fcc 	.word	0x00048fcc
   3c804:	20002cb0 	.word	0x20002cb0
   3c808:	0003ca15 	.word	0x0003ca15
   3c80c:	20001a68 	.word	0x20001a68
   3c810:	0003cbf5 	.word	0x0003cbf5
   3c814:	20001ae0 	.word	0x20001ae0

0003c818 <bt_gatt_attr_get_handle>:
{
   3c818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   3c81c:	4603      	mov	r3, r0
   3c81e:	b148      	cbz	r0, 3c834 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   3c820:	8a00      	ldrh	r0, [r0, #16]
   3c822:	b938      	cbnz	r0, 3c834 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3c824:	4912      	ldr	r1, [pc, #72]	; (3c870 <bt_gatt_attr_get_handle+0x58>)
   3c826:	f8df e04c 	ldr.w	lr, [pc, #76]	; 3c874 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   3c82a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   3c82c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3c830:	4571      	cmp	r1, lr
   3c832:	d301      	bcc.n	3c838 <bt_gatt_attr_get_handle+0x20>
}
   3c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   3c838:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   3c83c:	42bb      	cmp	r3, r7
   3c83e:	d304      	bcc.n	3c84a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   3c840:	fb0c 7206 	mla	r2, ip, r6, r7
   3c844:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   3c846:	4293      	cmp	r3, r2
   3c848:	d90e      	bls.n	3c868 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   3c84a:	4434      	add	r4, r6
   3c84c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3c84e:	3108      	adds	r1, #8
   3c850:	4614      	mov	r4, r2
   3c852:	e7ed      	b.n	3c830 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   3c854:	fb0c 7805 	mla	r8, ip, r5, r7
   3c858:	4543      	cmp	r3, r8
   3c85a:	d007      	beq.n	3c86c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   3c85c:	3501      	adds	r5, #1
   3c85e:	1962      	adds	r2, r4, r5
   3c860:	42b5      	cmp	r5, r6
   3c862:	b292      	uxth	r2, r2
   3c864:	d1f6      	bne.n	3c854 <bt_gatt_attr_get_handle+0x3c>
   3c866:	e7f2      	b.n	3c84e <bt_gatt_attr_get_handle+0x36>
   3c868:	2500      	movs	r5, #0
   3c86a:	e7f8      	b.n	3c85e <bt_gatt_attr_get_handle+0x46>
   3c86c:	4610      	mov	r0, r2
   3c86e:	e7e1      	b.n	3c834 <bt_gatt_attr_get_handle+0x1c>
   3c870:	00048fbc 	.word	0x00048fbc
   3c874:	00048fcc 	.word	0x00048fcc

0003c878 <bt_gatt_foreach_attr_type>:
{
   3c878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c87c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   3c880:	9100      	str	r1, [sp, #0]
   3c882:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   3c884:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3c888:	2d00      	cmp	r5, #0
   3c88a:	bf08      	it	eq
   3c88c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   3c88e:	4b24      	ldr	r3, [pc, #144]	; (3c920 <bt_gatt_foreach_attr_type+0xa8>)
   3c890:	881b      	ldrh	r3, [r3, #0]
   3c892:	4283      	cmp	r3, r0
{
   3c894:	4607      	mov	r7, r0
   3c896:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   3c898:	d23c      	bcs.n	3c914 <bt_gatt_foreach_attr_type+0x9c>
}
   3c89a:	b003      	add	sp, #12
   3c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   3c8a0:	6873      	ldr	r3, [r6, #4]
   3c8a2:	4423      	add	r3, r4
   3c8a4:	42bb      	cmp	r3, r7
   3c8a6:	d232      	bcs.n	3c90e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   3c8a8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3c8aa:	3608      	adds	r6, #8
   3c8ac:	4b1d      	ldr	r3, [pc, #116]	; (3c924 <bt_gatt_foreach_attr_type+0xac>)
   3c8ae:	429e      	cmp	r6, r3
   3c8b0:	d3f6      	bcc.n	3c8a0 <bt_gatt_foreach_attr_type+0x28>
   3c8b2:	e7f2      	b.n	3c89a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   3c8b4:	5889      	ldr	r1, [r1, r2]
   3c8b6:	9301      	str	r3, [sp, #4]
   3c8b8:	4640      	mov	r0, r8
   3c8ba:	f008 ff4f 	bl	4575c <bt_uuid_cmp>
   3c8be:	9b01      	ldr	r3, [sp, #4]
   3c8c0:	b190      	cbz	r0, 3c8e8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   3c8c2:	3401      	adds	r4, #1
   3c8c4:	f10a 0a01 	add.w	sl, sl, #1
   3c8c8:	b2a4      	uxth	r4, r4
   3c8ca:	6873      	ldr	r3, [r6, #4]
   3c8cc:	4553      	cmp	r3, sl
   3c8ce:	d9ec      	bls.n	3c8aa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   3c8d0:	9b00      	ldr	r3, [sp, #0]
   3c8d2:	429c      	cmp	r4, r3
   3c8d4:	d8e1      	bhi.n	3c89a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   3c8d6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   3c8d8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   3c8da:	d3f2      	bcc.n	3c8c2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   3c8dc:	fb0b f20a 	mul.w	r2, fp, sl
   3c8e0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   3c8e2:	f1b8 0f00 	cmp.w	r8, #0
   3c8e6:	d1e5      	bne.n	3c8b4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   3c8e8:	f1b9 0f00 	cmp.w	r9, #0
   3c8ec:	d10b      	bne.n	3c906 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   3c8ee:	3d01      	subs	r5, #1
   3c8f0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   3c8f2:	4618      	mov	r0, r3
   3c8f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3c8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3c8f8:	4621      	mov	r1, r4
   3c8fa:	4798      	blx	r3
	if (!*num_matches) {
   3c8fc:	2d00      	cmp	r5, #0
   3c8fe:	d0cc      	beq.n	3c89a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   3c900:	2800      	cmp	r0, #0
   3c902:	d1de      	bne.n	3c8c2 <bt_gatt_foreach_attr_type+0x4a>
   3c904:	e7c9      	b.n	3c89a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   3c906:	68da      	ldr	r2, [r3, #12]
   3c908:	4591      	cmp	r9, r2
   3c90a:	d1da      	bne.n	3c8c2 <bt_gatt_foreach_attr_type+0x4a>
   3c90c:	e7ef      	b.n	3c8ee <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   3c90e:	f04f 0a00 	mov.w	sl, #0
   3c912:	e7da      	b.n	3c8ca <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3c914:	4e04      	ldr	r6, [pc, #16]	; (3c928 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   3c916:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   3c918:	f04f 0b14 	mov.w	fp, #20
   3c91c:	e7c6      	b.n	3c8ac <bt_gatt_foreach_attr_type+0x34>
   3c91e:	bf00      	nop
   3c920:	2000398e 	.word	0x2000398e
   3c924:	00048fcc 	.word	0x00048fcc
   3c928:	00048fbc 	.word	0x00048fbc

0003c92c <db_hash_gen>:
{
   3c92c:	b510      	push	{r4, lr}
   3c92e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   3c930:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   3c932:	aa1c      	add	r2, sp, #112	; 0x70
   3c934:	4669      	mov	r1, sp
   3c936:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   3c938:	e9cd 3300 	strd	r3, r3, [sp]
   3c93c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   3c940:	f008 fdd0 	bl	454e4 <tc_cmac_setup>
   3c944:	b1d8      	cbz	r0, 3c97e <db_hash_gen+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   3c946:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3c94a:	2001      	movs	r0, #1
   3c94c:	4a0d      	ldr	r2, [pc, #52]	; (3c984 <db_hash_gen+0x58>)
   3c94e:	ab04      	add	r3, sp, #16
   3c950:	f00a fc7d 	bl	4724e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   3c954:	480c      	ldr	r0, [pc, #48]	; (3c988 <db_hash_gen+0x5c>)
   3c956:	a904      	add	r1, sp, #16
   3c958:	f008 fe59 	bl	4560e <tc_cmac_final>
   3c95c:	b178      	cbz	r0, 3c97e <db_hash_gen+0x52>
   3c95e:	4b0a      	ldr	r3, [pc, #40]	; (3c988 <db_hash_gen+0x5c>)
   3c960:	2208      	movs	r2, #8
   3c962:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   3c966:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3c968:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   3c96c:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   3c970:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   3c972:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   3c974:	d1f7      	bne.n	3c966 <db_hash_gen+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3c976:	4805      	ldr	r0, [pc, #20]	; (3c98c <db_hash_gen+0x60>)
   3c978:	2108      	movs	r1, #8
   3c97a:	f00a fad9 	bl	46f30 <atomic_or>
}
   3c97e:	b048      	add	sp, #288	; 0x120
   3c980:	bd10      	pop	{r4, pc}
   3c982:	bf00      	nop
   3c984:	00046e7b 	.word	0x00046e7b
   3c988:	20001a58 	.word	0x20001a58
   3c98c:	20001b10 	.word	0x20001b10

0003c990 <db_hash_read>:
{
   3c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3c992:	491d      	ldr	r1, [pc, #116]	; (3ca08 <db_hash_read+0x78>)
{
   3c994:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   3c998:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3c99a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   3c99e:	461f      	mov	r7, r3
   3c9a0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3c9a2:	f00b fdc6 	bl	48532 <k_work_cancel_delayable_sync>
   3c9a6:	f3bf 8f5b 	dmb	ish
   3c9aa:	4b18      	ldr	r3, [pc, #96]	; (3ca0c <db_hash_read+0x7c>)
   3c9ac:	681b      	ldr	r3, [r3, #0]
   3c9ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   3c9b2:	0719      	lsls	r1, r3, #28
   3c9b4:	d401      	bmi.n	3c9ba <db_hash_read+0x2a>
		db_hash_gen();
   3c9b6:	f7ff ffb9 	bl	3c92c <db_hash_gen>
	cfg = find_cf_cfg(conn);
   3c9ba:	4620      	mov	r0, r4
   3c9bc:	f7ff fd80 	bl	3c4c0 <find_cf_cfg>
	if (cfg &&
   3c9c0:	4601      	mov	r1, r0
   3c9c2:	b170      	cbz	r0, 3c9e2 <db_hash_read+0x52>
   3c9c4:	7a03      	ldrb	r3, [r0, #8]
   3c9c6:	07da      	lsls	r2, r3, #31
   3c9c8:	d50b      	bpl.n	3c9e2 <db_hash_read+0x52>
   3c9ca:	f3bf 8f5b 	dmb	ish
   3c9ce:	68cb      	ldr	r3, [r1, #12]
   3c9d0:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   3c9d4:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   3c9d6:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   3c9da:	d402      	bmi.n	3c9e2 <db_hash_read+0x52>
   3c9dc:	2102      	movs	r1, #2
   3c9de:	f00a faa7 	bl	46f30 <atomic_or>
	if (offset > value_len) {
   3c9e2:	2e10      	cmp	r6, #16
   3c9e4:	d80c      	bhi.n	3ca00 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   3c9e6:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   3c9ea:	4909      	ldr	r1, [pc, #36]	; (3ca10 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   3c9ec:	42bc      	cmp	r4, r7
   3c9ee:	bfa8      	it	ge
   3c9f0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3c9f2:	4622      	mov	r2, r4
   3c9f4:	4431      	add	r1, r6
   3c9f6:	4628      	mov	r0, r5
   3c9f8:	f008 fe8a 	bl	45710 <memcpy>
}
   3c9fc:	4620      	mov	r0, r4
   3c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3ca00:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   3ca04:	e7fa      	b.n	3c9fc <db_hash_read+0x6c>
   3ca06:	bf00      	nop
   3ca08:	20001a98 	.word	0x20001a98
   3ca0c:	20001b10 	.word	0x20001b10
   3ca10:	20001a58 	.word	0x20001a58

0003ca14 <db_hash_process>:
   3ca14:	4b05      	ldr	r3, [pc, #20]	; (3ca2c <db_hash_process+0x18>)
   3ca16:	f3bf 8f5b 	dmb	ish
   3ca1a:	681b      	ldr	r3, [r3, #0]
   3ca1c:	f3bf 8f5b 	dmb	ish
	if (new_hash) {
   3ca20:	071b      	lsls	r3, r3, #28
   3ca22:	d401      	bmi.n	3ca28 <db_hash_process+0x14>
		db_hash_gen();
   3ca24:	f7ff bf82 	b.w	3c92c <db_hash_gen>
}
   3ca28:	4770      	bx	lr
   3ca2a:	bf00      	nop
   3ca2c:	20001b10 	.word	0x20001b10

0003ca30 <bt_gatt_attr_next>:
{
   3ca30:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   3ca32:	2300      	movs	r3, #0
   3ca34:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   3ca36:	f7ff feef 	bl	3c818 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   3ca3a:	1c41      	adds	r1, r0, #1
   3ca3c:	b289      	uxth	r1, r1
   3ca3e:	4608      	mov	r0, r1
   3ca40:	4a03      	ldr	r2, [pc, #12]	; (3ca50 <bt_gatt_attr_next+0x20>)
   3ca42:	ab01      	add	r3, sp, #4
   3ca44:	f00a fc03 	bl	4724e <bt_gatt_foreach_attr>
}
   3ca48:	9801      	ldr	r0, [sp, #4]
   3ca4a:	b003      	add	sp, #12
   3ca4c:	f85d fb04 	ldr.w	pc, [sp], #4
   3ca50:	00046e33 	.word	0x00046e33

0003ca54 <gatt_indicate>:
{
   3ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ca58:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   3ca5a:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   3ca5c:	8a4f      	ldrh	r7, [r1, #18]
   3ca5e:	f017 0714 	ands.w	r7, r7, #20
{
   3ca62:	4680      	mov	r8, r0
   3ca64:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   3ca66:	d142      	bne.n	3caee <gatt_indicate+0x9a>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   3ca68:	2202      	movs	r2, #2
   3ca6a:	f00a fc17 	bl	4729c <bt_gatt_is_subscribed>
   3ca6e:	2800      	cmp	r0, #0
   3ca70:	d040      	beq.n	3caf4 <gatt_indicate+0xa0>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3ca72:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   3ca76:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   3ca78:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3ca7a:	f7ff fc49 	bl	3c310 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   3ca7e:	3602      	adds	r6, #2
	if (!req) {
   3ca80:	4604      	mov	r4, r0
   3ca82:	b160      	cbz	r0, 3ca9e <gatt_indicate+0x4a>
	req->func = func;
   3ca84:	4b1d      	ldr	r3, [pc, #116]	; (3cafc <gatt_indicate+0xa8>)
   3ca86:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   3ca88:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   3ca8a:	4632      	mov	r2, r6
   3ca8c:	211d      	movs	r1, #29
   3ca8e:	4640      	mov	r0, r8
   3ca90:	f00a f8e6 	bl	46c60 <bt_att_create_pdu>
	if (!buf) {
   3ca94:	4606      	mov	r6, r0
   3ca96:	b938      	cbnz	r0, 3caa8 <gatt_indicate+0x54>
		bt_att_req_free(req);
   3ca98:	4620      	mov	r0, r4
   3ca9a:	f7ff fc5b 	bl	3c354 <bt_att_req_free>
		return -ENOMEM;
   3ca9e:	f06f 050b 	mvn.w	r5, #11
}
   3caa2:	4628      	mov	r0, r5
   3caa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   3caa8:	2301      	movs	r3, #1
   3caaa:	463a      	mov	r2, r7
   3caac:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   3caae:	f106 0a0c 	add.w	sl, r6, #12
   3cab2:	f00a f9b7 	bl	46e24 <bt_att_set_tx_meta_data>
   3cab6:	2102      	movs	r1, #2
   3cab8:	4650      	mov	r0, sl
   3caba:	f00a fd82 	bl	475c2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   3cabe:	4607      	mov	r7, r0
   3cac0:	4650      	mov	r0, sl
   3cac2:	f827 9b02 	strh.w	r9, [r7], #2
   3cac6:	8aa9      	ldrh	r1, [r5, #20]
   3cac8:	f00a fd7b 	bl	475c2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   3cacc:	8aaa      	ldrh	r2, [r5, #20]
   3cace:	6929      	ldr	r1, [r5, #16]
   3cad0:	4638      	mov	r0, r7
   3cad2:	f008 fe1d 	bl	45710 <memcpy>
	req->buf = buf;
   3cad6:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   3cad8:	4621      	mov	r1, r4
   3cada:	4640      	mov	r0, r8
   3cadc:	f00a f96f 	bl	46dbe <bt_att_req_send>
	if (err) {
   3cae0:	4605      	mov	r5, r0
   3cae2:	2800      	cmp	r0, #0
   3cae4:	d0dd      	beq.n	3caa2 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   3cae6:	4620      	mov	r0, r4
   3cae8:	f7ff fc34 	bl	3c354 <bt_att_req_free>
   3caec:	e7d9      	b.n	3caa2 <gatt_indicate+0x4e>
		return -EPERM;
   3caee:	f04f 35ff 	mov.w	r5, #4294967295
   3caf2:	e7d6      	b.n	3caa2 <gatt_indicate+0x4e>
			return -EINVAL;
   3caf4:	f06f 0515 	mvn.w	r5, #21
   3caf8:	e7d3      	b.n	3caa2 <gatt_indicate+0x4e>
   3cafa:	bf00      	nop
   3cafc:	00046e4d 	.word	0x00046e4d

0003cb00 <bt_gatt_indicate>:
{
   3cb00:	b530      	push	{r4, r5, lr}
   3cb02:	4b39      	ldr	r3, [pc, #228]	; (3cbe8 <bt_gatt_indicate+0xe8>)
   3cb04:	f3bf 8f5b 	dmb	ish
   3cb08:	681b      	ldr	r3, [r3, #0]
   3cb0a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3cb0e:	075a      	lsls	r2, r3, #29
{
   3cb10:	b08b      	sub	sp, #44	; 0x2c
   3cb12:	4604      	mov	r4, r0
   3cb14:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3cb16:	d561      	bpl.n	3cbdc <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   3cb18:	b110      	cbz	r0, 3cb20 <bt_gatt_indicate+0x20>
   3cb1a:	7a83      	ldrb	r3, [r0, #10]
   3cb1c:	2b07      	cmp	r3, #7
   3cb1e:	d160      	bne.n	3cbe2 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   3cb20:	6868      	ldr	r0, [r5, #4]
   3cb22:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   3cb24:	f7ff fe78 	bl	3c818 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   3cb28:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   3cb2a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   3cb2e:	b33a      	cbz	r2, 3cb80 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   3cb30:	a905      	add	r1, sp, #20
   3cb32:	9102      	str	r1, [sp, #8]
   3cb34:	492d      	ldr	r1, [pc, #180]	; (3cbec <bt_gatt_indicate+0xec>)
   3cb36:	9101      	str	r1, [sp, #4]
   3cb38:	2101      	movs	r1, #1
	found->attr = NULL;
   3cb3a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   3cb3c:	9100      	str	r1, [sp, #0]
   3cb3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   3cb42:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   3cb44:	f7ff fe98 	bl	3c878 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   3cb48:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   3cb4a:	b91b      	cbnz	r3, 3cb54 <bt_gatt_indicate+0x54>
			return -ENOENT;
   3cb4c:	f06f 0001 	mvn.w	r0, #1
}
   3cb50:	b00b      	add	sp, #44	; 0x2c
   3cb52:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   3cb54:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   3cb56:	9b05      	ldr	r3, [sp, #20]
   3cb58:	6818      	ldr	r0, [r3, #0]
   3cb5a:	2300      	movs	r3, #0
   3cb5c:	f88d 3010 	strb.w	r3, [sp, #16]
   3cb60:	a904      	add	r1, sp, #16
   3cb62:	f642 0303 	movw	r3, #10243	; 0x2803
   3cb66:	f8ad 3012 	strh.w	r3, [sp, #18]
   3cb6a:	f008 fdf7 	bl	4575c <bt_uuid_cmp>
   3cb6e:	b970      	cbnz	r0, 3cb8e <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   3cb70:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   3cb72:	68c3      	ldr	r3, [r0, #12]
   3cb74:	799b      	ldrb	r3, [r3, #6]
   3cb76:	069b      	lsls	r3, r3, #26
   3cb78:	d405      	bmi.n	3cb86 <bt_gatt_indicate+0x86>
			return -EINVAL;
   3cb7a:	f06f 0015 	mvn.w	r0, #21
   3cb7e:	e7e7      	b.n	3cb50 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   3cb80:	2800      	cmp	r0, #0
   3cb82:	d1e8      	bne.n	3cb56 <bt_gatt_indicate+0x56>
   3cb84:	e7e2      	b.n	3cb4c <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   3cb86:	f00a fb14 	bl	471b2 <bt_gatt_attr_value_handle>
   3cb8a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   3cb8e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   3cb92:	b13c      	cbz	r4, 3cba4 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   3cb94:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   3cb96:	4601      	mov	r1, r0
		params->_ref = 1;
   3cb98:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   3cb9a:	462a      	mov	r2, r5
   3cb9c:	4620      	mov	r0, r4
   3cb9e:	f7ff ff59 	bl	3ca54 <gatt_indicate>
   3cba2:	e7d5      	b.n	3cb50 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   3cba4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   3cba8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   3cbaa:	2302      	movs	r3, #2
   3cbac:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3cbb0:	f642 1302 	movw	r3, #10498	; 0x2902
   3cbb4:	f8ad 3012 	strh.w	r3, [sp, #18]
   3cbb8:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   3cbba:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3cbbc:	9302      	str	r3, [sp, #8]
   3cbbe:	4b0c      	ldr	r3, [pc, #48]	; (3cbf0 <bt_gatt_indicate+0xf0>)
   3cbc0:	9301      	str	r3, [sp, #4]
   3cbc2:	2301      	movs	r3, #1
   3cbc4:	9300      	str	r3, [sp, #0]
   3cbc6:	aa04      	add	r2, sp, #16
   3cbc8:	4623      	mov	r3, r4
   3cbca:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   3cbce:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3cbd0:	f88d 4010 	strb.w	r4, [sp, #16]
   3cbd4:	f7ff fe50 	bl	3c878 <bt_gatt_foreach_attr_type>
	return data.err;
   3cbd8:	9807      	ldr	r0, [sp, #28]
   3cbda:	e7b9      	b.n	3cb50 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   3cbdc:	f06f 000a 	mvn.w	r0, #10
   3cbe0:	e7b6      	b.n	3cb50 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   3cbe2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3cbe6:	e7b3      	b.n	3cb50 <bt_gatt_indicate+0x50>
   3cbe8:	2000045c 	.word	0x2000045c
   3cbec:	00046e73 	.word	0x00046e73
   3cbf0:	0003cd09 	.word	0x0003cd09

0003cbf4 <sc_process>:
{
   3cbf4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   3cbf6:	f850 2c08 	ldr.w	r2, [r0, #-8]
   3cbfa:	9201      	str	r2, [sp, #4]
{
   3cbfc:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   3cbfe:	f1a0 0120 	sub.w	r1, r0, #32
   3cc02:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3cc06:	f3bf 8f5b 	dmb	ish
   3cc0a:	e854 2f00 	ldrex	r2, [r4]
   3cc0e:	f022 0201 	bic.w	r2, r2, #1
   3cc12:	e844 2000 	strex	r0, r2, [r4]
   3cc16:	2800      	cmp	r0, #0
   3cc18:	d1f7      	bne.n	3cc0a <sc_process+0x16>
   3cc1a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   3cc1e:	4a0d      	ldr	r2, [pc, #52]	; (3cc54 <sc_process+0x60>)
   3cc20:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   3cc24:	4a0c      	ldr	r2, [pc, #48]	; (3cc58 <sc_process+0x64>)
   3cc26:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   3cc2a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   3cc2c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   3cc2e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   3cc32:	2204      	movs	r2, #4
	sc->start = 0U;
   3cc34:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   3cc38:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   3cc3c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   3cc40:	f7ff ff5e 	bl	3cb00 <bt_gatt_indicate>
   3cc44:	b918      	cbnz	r0, 3cc4e <sc_process+0x5a>
   3cc46:	2102      	movs	r1, #2
   3cc48:	4620      	mov	r0, r4
   3cc4a:	f00a f971 	bl	46f30 <atomic_or>
}
   3cc4e:	b002      	add	sp, #8
   3cc50:	bd10      	pop	{r4, pc}
   3cc52:	bf00      	nop
   3cc54:	00049348 	.word	0x00049348
   3cc58:	0003c739 	.word	0x0003c739

0003cc5c <update_ccc>:
{
   3cc5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cc5e:	4b25      	ldr	r3, [pc, #148]	; (3ccf4 <update_ccc+0x98>)
	struct bt_conn *conn = data->conn;
   3cc60:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cc62:	6882      	ldr	r2, [r0, #8]
   3cc64:	429a      	cmp	r2, r3
{
   3cc66:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cc68:	d140      	bne.n	3ccec <update_ccc+0x90>
	ccc = attr->user_data;
   3cc6a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   3cc6c:	8933      	ldrh	r3, [r6, #8]
   3cc6e:	2b00      	cmp	r3, #0
   3cc70:	d03c      	beq.n	3ccec <update_ccc+0x90>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   3cc72:	4632      	mov	r2, r6
   3cc74:	4620      	mov	r0, r4
   3cc76:	f812 1b01 	ldrb.w	r1, [r2], #1
   3cc7a:	f009 fab3 	bl	461e4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   3cc7e:	2800      	cmp	r0, #0
   3cc80:	d034      	beq.n	3ccec <update_ccc+0x90>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   3cc82:	f44f 7295 	mov.w	r2, #298	; 0x12a
   3cc86:	4629      	mov	r1, r5
   3cc88:	4620      	mov	r0, r4
   3cc8a:	f00a faeb 	bl	47264 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   3cc8e:	2803      	cmp	r0, #3
   3cc90:	d02c      	beq.n	3ccec <update_ccc+0x90>
		gatt_ccc_changed(attr, ccc);
   3cc92:	4631      	mov	r1, r6
   3cc94:	4628      	mov	r0, r5
   3cc96:	f00a f8cf 	bl	46e38 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   3cc9a:	4b17      	ldr	r3, [pc, #92]	; (3ccf8 <update_ccc+0x9c>)
   3cc9c:	429e      	cmp	r6, r3
   3cc9e:	d125      	bne.n	3ccec <update_ccc+0x90>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   3cca0:	7a20      	ldrb	r0, [r4, #8]
   3cca2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   3cca6:	f7ff fc23 	bl	3c4f0 <find_sc_cfg>
	if (!cfg) {
   3ccaa:	b1f8      	cbz	r0, 3ccec <update_ccc+0x90>
	if (!(cfg->data.start || cfg->data.end)) {
   3ccac:	8902      	ldrh	r2, [r0, #8]
   3ccae:	8943      	ldrh	r3, [r0, #10]
   3ccb0:	ea53 0102 	orrs.w	r1, r3, r2
   3ccb4:	d01a      	beq.n	3ccec <update_ccc+0x90>
	index = bt_conn_index(conn);
   3ccb6:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   3ccb8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   3ccbc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   3ccc0:	f7fe fac8 	bl	3b254 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   3ccc4:	490d      	ldr	r1, [pc, #52]	; (3ccfc <update_ccc+0xa0>)
   3ccc6:	4a0e      	ldr	r2, [pc, #56]	; (3cd00 <update_ccc+0xa4>)
   3ccc8:	2318      	movs	r3, #24
   3ccca:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3ccce:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   3ccd0:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   3ccd2:	4a0c      	ldr	r2, [pc, #48]	; (3cd04 <update_ccc+0xa8>)
   3ccd4:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3ccd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   3ccda:	aa01      	add	r2, sp, #4
   3ccdc:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3ccde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   3cce2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3cce4:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   3cce6:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3cce8:	f7ff ff0a 	bl	3cb00 <bt_gatt_indicate>
}
   3ccec:	2001      	movs	r0, #1
   3ccee:	b002      	add	sp, #8
   3ccf0:	bd70      	pop	{r4, r5, r6, pc}
   3ccf2:	bf00      	nop
   3ccf4:	0003c539 	.word	0x0003c539
   3ccf8:	20000770 	.word	0x20000770
   3ccfc:	20002c84 	.word	0x20002c84
   3cd00:	00049348 	.word	0x00049348
   3cd04:	00047177 	.word	0x00047177

0003cd08 <notify_cb>:
{
   3cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cd0a:	4b38      	ldr	r3, [pc, #224]	; (3cdec <notify_cb+0xe4>)
{
   3cd0c:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cd0e:	6882      	ldr	r2, [r0, #8]
   3cd10:	429a      	cmp	r2, r3
{
   3cd12:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   3cd14:	d001      	beq.n	3cd1a <notify_cb+0x12>
		return BT_GATT_ITER_CONTINUE;
   3cd16:	2001      	movs	r0, #1
}
   3cd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   3cd1a:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   3cd1c:	4b34      	ldr	r3, [pc, #208]	; (3cdf0 <notify_cb+0xe8>)
   3cd1e:	429e      	cmp	r6, r3
   3cd20:	d04a      	beq.n	3cdb8 <notify_cb+0xb0>
		if (cfg->value != data->type) {
   3cd22:	8932      	ldrh	r2, [r6, #8]
   3cd24:	89ab      	ldrh	r3, [r5, #12]
   3cd26:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   3cd28:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   3cd2c:	d1f3      	bne.n	3cd16 <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   3cd2e:	7830      	ldrb	r0, [r6, #0]
   3cd30:	f7fe fb4e 	bl	3b3d0 <bt_conn_lookup_addr_le>
		if (!conn) {
   3cd34:	4604      	mov	r4, r0
   3cd36:	2800      	cmp	r0, #0
   3cd38:	d0ed      	beq.n	3cd16 <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
   3cd3a:	7a83      	ldrb	r3, [r0, #10]
   3cd3c:	2b07      	cmp	r3, #7
   3cd3e:	d005      	beq.n	3cd4c <notify_cb+0x44>
			bt_conn_unref(conn);
   3cd40:	f009 f9fa 	bl	46138 <bt_conn_unref>
			continue;
   3cd44:	e7e7      	b.n	3cd16 <notify_cb+0xe>
			bt_conn_unref(conn);
   3cd46:	f009 f9f7 	bl	46138 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   3cd4a:	e7ea      	b.n	3cd22 <notify_cb+0x1a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   3cd4c:	6973      	ldr	r3, [r6, #20]
   3cd4e:	b123      	cbz	r3, 3cd5a <notify_cb+0x52>
   3cd50:	4639      	mov	r1, r7
   3cd52:	4798      	blx	r3
   3cd54:	b908      	cbnz	r0, 3cd5a <notify_cb+0x52>
			bt_conn_unref(conn);
   3cd56:	4620      	mov	r0, r4
   3cd58:	e7f2      	b.n	3cd40 <notify_cb+0x38>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   3cd5a:	8a7b      	ldrh	r3, [r7, #18]
   3cd5c:	f003 0314 	and.w	r3, r3, #20
   3cd60:	2b00      	cmp	r3, #0
   3cd62:	d1f8      	bne.n	3cd56 <notify_cb+0x4e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   3cd64:	89ab      	ldrh	r3, [r5, #12]
   3cd66:	2b02      	cmp	r3, #2
   3cd68:	d114      	bne.n	3cd94 <notify_cb+0x8c>
   3cd6a:	8933      	ldrh	r3, [r6, #8]
   3cd6c:	079a      	lsls	r2, r3, #30
   3cd6e:	d405      	bmi.n	3cd7c <notify_cb+0x74>
		bt_conn_unref(conn);
   3cd70:	4620      	mov	r0, r4
   3cd72:	f009 f9e1 	bl	46138 <bt_conn_unref>
		data->err = 0;
   3cd76:	2300      	movs	r3, #0
   3cd78:	60ab      	str	r3, [r5, #8]
   3cd7a:	e7cc      	b.n	3cd16 <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   3cd7c:	692a      	ldr	r2, [r5, #16]
   3cd7e:	88a9      	ldrh	r1, [r5, #4]
   3cd80:	4620      	mov	r0, r4
   3cd82:	f7ff fe67 	bl	3ca54 <gatt_indicate>
			if (err == 0) {
   3cd86:	4606      	mov	r6, r0
   3cd88:	b978      	cbnz	r0, 3cdaa <notify_cb+0xa2>
				data->ind_params->_ref++;
   3cd8a:	692a      	ldr	r2, [r5, #16]
   3cd8c:	7d93      	ldrb	r3, [r2, #22]
   3cd8e:	3301      	adds	r3, #1
   3cd90:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   3cd92:	e7ed      	b.n	3cd70 <notify_cb+0x68>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   3cd94:	2b01      	cmp	r3, #1
   3cd96:	d1eb      	bne.n	3cd70 <notify_cb+0x68>
   3cd98:	8933      	ldrh	r3, [r6, #8]
   3cd9a:	07db      	lsls	r3, r3, #31
   3cd9c:	d5e8      	bpl.n	3cd70 <notify_cb+0x68>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   3cd9e:	692a      	ldr	r2, [r5, #16]
   3cda0:	88a9      	ldrh	r1, [r5, #4]
   3cda2:	4620      	mov	r0, r4
   3cda4:	f00a fafe 	bl	473a4 <gatt_notify>
   3cda8:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   3cdaa:	4620      	mov	r0, r4
   3cdac:	f009 f9c4 	bl	46138 <bt_conn_unref>
		if (err < 0) {
   3cdb0:	2e00      	cmp	r6, #0
   3cdb2:	dae0      	bge.n	3cd76 <notify_cb+0x6e>
			return BT_GATT_ITER_STOP;
   3cdb4:	2000      	movs	r0, #0
   3cdb6:	e7af      	b.n	3cd18 <notify_cb+0x10>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   3cdb8:	4c0e      	ldr	r4, [pc, #56]	; (3cdf4 <notify_cb+0xec>)
   3cdba:	490f      	ldr	r1, [pc, #60]	; (3cdf8 <notify_cb+0xf0>)
   3cdbc:	4620      	mov	r0, r4
   3cdbe:	f00a f8af 	bl	46f20 <bt_addr_le_eq>
   3cdc2:	2800      	cmp	r0, #0
   3cdc4:	d1ad      	bne.n	3cd22 <notify_cb+0x1a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   3cdc6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3cdca:	2207      	movs	r2, #7
   3cdcc:	4621      	mov	r1, r4
   3cdce:	f7fe fb19 	bl	3b404 <bt_conn_lookup_state_le>
			if (!conn) {
   3cdd2:	2800      	cmp	r0, #0
   3cdd4:	d1b7      	bne.n	3cd46 <notify_cb+0x3e>
				sc = (struct sc_data *)data->ind_params->data;
   3cdd6:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   3cdd8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   3cddc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   3cdde:	4621      	mov	r1, r4
   3cde0:	8853      	ldrh	r3, [r2, #2]
   3cde2:	8812      	ldrh	r2, [r2, #0]
   3cde4:	f7ff fc18 	bl	3c618 <sc_save>
				continue;
   3cde8:	e79b      	b.n	3cd22 <notify_cb+0x1a>
   3cdea:	bf00      	nop
   3cdec:	0003c539 	.word	0x0003c539
   3cdf0:	20000770 	.word	0x20000770
   3cdf4:	20003983 	.word	0x20003983
   3cdf8:	00049a68 	.word	0x00049a68

0003cdfc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   3cdfc:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3cdfe:	4a06      	ldr	r2, [pc, #24]	; (3ce18 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   3ce00:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3ce02:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   3ce04:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3ce06:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   3ce0a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3ce0e:	f00a fa1e 	bl	4724e <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   3ce12:	b003      	add	sp, #12
   3ce14:	f85d fb04 	ldr.w	pc, [sp], #4
   3ce18:	0003cc5d 	.word	0x0003cc5d

0003ce1c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   3ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   3ce1e:	4b08      	ldr	r3, [pc, #32]	; (3ce40 <bt_gatt_att_max_mtu_changed+0x24>)
   3ce20:	681c      	ldr	r4, [r3, #0]
   3ce22:	4605      	mov	r5, r0
   3ce24:	460e      	mov	r6, r1
   3ce26:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   3ce28:	b14c      	cbz	r4, 3ce3e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   3ce2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   3ce2e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   3ce30:	b11b      	cbz	r3, 3ce3a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   3ce32:	463a      	mov	r2, r7
   3ce34:	4631      	mov	r1, r6
   3ce36:	4628      	mov	r0, r5
   3ce38:	4798      	blx	r3
	return node->next;
   3ce3a:	6864      	ldr	r4, [r4, #4]
   3ce3c:	e7f4      	b.n	3ce28 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   3ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ce40:	20002cb0 	.word	0x20002cb0

0003ce44 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   3ce44:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   3ce46:	4603      	mov	r3, r0
   3ce48:	4a0f      	ldr	r2, [pc, #60]	; (3ce88 <bt_gatt_disconnected+0x44>)
{
   3ce4a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   3ce4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ce50:	2001      	movs	r0, #1
   3ce52:	f00a f9fc 	bl	4724e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   3ce56:	4620      	mov	r0, r4
   3ce58:	f7ff fb32 	bl	3c4c0 <find_cf_cfg>
	if (!cfg) {
   3ce5c:	4605      	mov	r5, r0
   3ce5e:	b188      	cbz	r0, 3ce84 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3ce60:	f104 0688 	add.w	r6, r4, #136	; 0x88
   3ce64:	7a20      	ldrb	r0, [r4, #8]
   3ce66:	4631      	mov	r1, r6
   3ce68:	f008 ff41 	bl	45cee <bt_addr_le_is_bonded>
   3ce6c:	b920      	cbnz	r0, 3ce78 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   3ce6e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   3ce70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   3ce74:	f7ff bbb4 	b.w	3c5e0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3ce78:	4631      	mov	r1, r6
   3ce7a:	1c68      	adds	r0, r5, #1
}
   3ce7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   3ce80:	f00a b865 	b.w	46f4e <bt_addr_le_copy>
}
   3ce84:	bd70      	pop	{r4, r5, r6, pc}
   3ce86:	bf00      	nop
   3ce88:	0003c661 	.word	0x0003c661

0003ce8c <bt_smp_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   3ce8c:	4b04      	ldr	r3, [pc, #16]	; (3cea0 <bt_smp_accept+0x14>)
   3ce8e:	6818      	ldr	r0, [r3, #0]
   3ce90:	b918      	cbnz	r0, 3ce9a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   3ce92:	4a04      	ldr	r2, [pc, #16]	; (3cea4 <bt_smp_accept+0x18>)
   3ce94:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   3ce96:	600b      	str	r3, [r1, #0]

		return 0;
   3ce98:	4770      	bx	lr
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   3ce9a:	f06f 000b 	mvn.w	r0, #11
}
   3ce9e:	4770      	bx	lr
   3cea0:	20002cb8 	.word	0x20002cb8
   3cea4:	0004944c 	.word	0x0004944c

0003cea8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   3cea8:	4b02      	ldr	r3, [pc, #8]	; (3ceb4 <net_buf_pool_get+0xc>)
   3ceaa:	222c      	movs	r2, #44	; 0x2c
   3ceac:	fb02 3000 	mla	r0, r2, r0, r3
   3ceb0:	4770      	bx	lr
   3ceb2:	bf00      	nop
   3ceb4:	20000a44 	.word	0x20000a44

0003ceb8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3ceb8:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3ceba:	4b06      	ldr	r3, [pc, #24]	; (3ced4 <net_buf_id+0x1c>)
   3cebc:	212c      	movs	r1, #44	; 0x2c
   3cebe:	fb01 3302 	mla	r3, r1, r2, r3
   3cec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cec4:	7f1b      	ldrb	r3, [r3, #28]
   3cec6:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3cec8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3ceca:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   3cece:	fbb0 f0f3 	udiv	r0, r0, r3
   3ced2:	4770      	bx	lr
   3ced4:	20000a44 	.word	0x20000a44

0003ced8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   3ced8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3ceda:	4b0a      	ldr	r3, [pc, #40]	; (3cf04 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cedc:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cede:	242c      	movs	r4, #44	; 0x2c
   3cee0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   3cee4:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3cee8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3ceea:	681a      	ldr	r2, [r3, #0]
   3ceec:	4294      	cmp	r4, r2
   3ceee:	bf94      	ite	ls
   3cef0:	600c      	strls	r4, [r1, #0]
   3cef2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3cef4:	e9d3 5400 	ldrd	r5, r4, [r3]
   3cef8:	f7ff ffde 	bl	3ceb8 <net_buf_id>
}
   3cefc:	fb05 4000 	mla	r0, r5, r0, r4
   3cf00:	bd38      	pop	{r3, r4, r5, pc}
   3cf02:	bf00      	nop
   3cf04:	20000a44 	.word	0x20000a44

0003cf08 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3cf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf0c:	4605      	mov	r5, r0
   3cf0e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3cf10:	4610      	mov	r0, r2
   3cf12:	4619      	mov	r1, r3
{
   3cf14:	4691      	mov	r9, r2
   3cf16:	4698      	mov	r8, r3
   3cf18:	4617      	mov	r7, r2
   3cf1a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3cf1c:	f00b fcb3 	bl	48886 <sys_clock_timeout_end_calc>
   3cf20:	4682      	mov	sl, r0
   3cf22:	468b      	mov	fp, r1
	__asm__ volatile(
   3cf24:	f04f 0340 	mov.w	r3, #64	; 0x40
   3cf28:	f3ef 8111 	mrs	r1, BASEPRI
   3cf2c:	f383 8812 	msr	BASEPRI_MAX, r3
   3cf30:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3cf34:	8b6b      	ldrh	r3, [r5, #26]
   3cf36:	2b00      	cmp	r3, #0
   3cf38:	d058      	beq.n	3cfec <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3cf3a:	8b2a      	ldrh	r2, [r5, #24]
   3cf3c:	429a      	cmp	r2, r3
   3cf3e:	d93c      	bls.n	3cfba <net_buf_alloc_len+0xb2>
   3cf40:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   3cf42:	2200      	movs	r2, #0
   3cf44:	2300      	movs	r3, #0
   3cf46:	4628      	mov	r0, r5
   3cf48:	f003 fd92 	bl	40a70 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3cf4c:	9900      	ldr	r1, [sp, #0]
   3cf4e:	4604      	mov	r4, r0
   3cf50:	2800      	cmp	r0, #0
   3cf52:	d032      	beq.n	3cfba <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   3cf54:	f381 8811 	msr	BASEPRI, r1
   3cf58:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3cf5c:	9b01      	ldr	r3, [sp, #4]
   3cf5e:	2b00      	cmp	r3, #0
   3cf60:	d055      	beq.n	3d00e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3cf62:	ea58 0309 	orrs.w	r3, r8, r9
   3cf66:	d00f      	beq.n	3cf88 <net_buf_alloc_len+0x80>
   3cf68:	f1b8 3fff 	cmp.w	r8, #4294967295
   3cf6c:	bf08      	it	eq
   3cf6e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   3cf72:	d009      	beq.n	3cf88 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   3cf74:	f004 fc62 	bl	4183c <sys_clock_tick_get>
   3cf78:	ebba 0700 	subs.w	r7, sl, r0
   3cf7c:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   3cf80:	2e00      	cmp	r6, #0
   3cf82:	bfbc      	itt	lt
   3cf84:	2700      	movlt	r7, #0
   3cf86:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cf88:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   3cf8a:	4d26      	ldr	r5, [pc, #152]	; (3d024 <net_buf_alloc_len+0x11c>)
   3cf8c:	f04f 082c 	mov.w	r8, #44	; 0x2c
   3cf90:	fb08 5303 	mla	r3, r8, r3, r5
   3cf94:	463a      	mov	r2, r7
   3cf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3cf98:	681b      	ldr	r3, [r3, #0]
   3cf9a:	a901      	add	r1, sp, #4
   3cf9c:	f8d3 9000 	ldr.w	r9, [r3]
   3cfa0:	4620      	mov	r0, r4
   3cfa2:	4633      	mov	r3, r6
   3cfa4:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3cfa6:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   3cfa8:	2800      	cmp	r0, #0
   3cfaa:	d131      	bne.n	3d010 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   3cfac:	7aa0      	ldrb	r0, [r4, #10]
   3cfae:	4621      	mov	r1, r4
   3cfb0:	fb00 5008 	mla	r0, r0, r8, r5
   3cfb4:	f00b f9c6 	bl	48344 <k_queue_prepend>
}
   3cfb8:	e024      	b.n	3d004 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   3cfba:	8b68      	ldrh	r0, [r5, #26]
   3cfbc:	1e43      	subs	r3, r0, #1
   3cfbe:	836b      	strh	r3, [r5, #26]
   3cfc0:	f381 8811 	msr	BASEPRI, r1
   3cfc4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cfc8:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3cfca:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3cfcc:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cfce:	331b      	adds	r3, #27
   3cfd0:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3cfd4:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3cfd6:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   3cfda:	4b12      	ldr	r3, [pc, #72]	; (3d024 <net_buf_alloc_len+0x11c>)
   3cfdc:	4a12      	ldr	r2, [pc, #72]	; (3d028 <net_buf_alloc_len+0x120>)
   3cfde:	1aeb      	subs	r3, r5, r3
   3cfe0:	109b      	asrs	r3, r3, #2
   3cfe2:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   3cfe4:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   3cfe6:	7f2b      	ldrb	r3, [r5, #28]
   3cfe8:	72e3      	strb	r3, [r4, #11]
		goto success;
   3cfea:	e7b7      	b.n	3cf5c <net_buf_alloc_len+0x54>
   3cfec:	f381 8811 	msr	BASEPRI, r1
   3cff0:	f3bf 8f6f 	isb	sy
   3cff4:	464a      	mov	r2, r9
   3cff6:	4643      	mov	r3, r8
   3cff8:	4628      	mov	r0, r5
   3cffa:	f003 fd39 	bl	40a70 <z_impl_k_queue_get>
	if (!buf) {
   3cffe:	4604      	mov	r4, r0
   3d000:	2800      	cmp	r0, #0
   3d002:	d1ab      	bne.n	3cf5c <net_buf_alloc_len+0x54>
		return NULL;
   3d004:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3d006:	4620      	mov	r0, r4
   3d008:	b003      	add	sp, #12
   3d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   3d00e:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   3d010:	2300      	movs	r3, #0
	buf->ref   = 1U;
   3d012:	2201      	movs	r2, #1
	buf->frags = NULL;
   3d014:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   3d016:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   3d018:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   3d01a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   3d01c:	6963      	ldr	r3, [r4, #20]
   3d01e:	8262      	strh	r2, [r4, #18]
   3d020:	60e3      	str	r3, [r4, #12]
	return buf;
   3d022:	e7f0      	b.n	3d006 <net_buf_alloc_len+0xfe>
   3d024:	20000a44 	.word	0x20000a44
   3d028:	ba2e8ba3 	.word	0xba2e8ba3

0003d02c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3d02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d030:	4d16      	ldr	r5, [pc, #88]	; (3d08c <net_buf_unref+0x60>)
   3d032:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   3d034:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   3d036:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   3d038:	b90c      	cbnz	r4, 3d03e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3d03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   3d03e:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   3d040:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   3d044:	3b01      	subs	r3, #1
   3d046:	b2db      	uxtb	r3, r3
   3d048:	7223      	strb	r3, [r4, #8]
   3d04a:	2b00      	cmp	r3, #0
   3d04c:	d1f5      	bne.n	3d03a <net_buf_unref+0xe>
		if (buf->__buf) {
   3d04e:	6961      	ldr	r1, [r4, #20]
   3d050:	b159      	cbz	r1, 3d06a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3d052:	7a63      	ldrb	r3, [r4, #9]
   3d054:	07db      	lsls	r3, r3, #31
   3d056:	d407      	bmi.n	3d068 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d058:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   3d05a:	fb07 5303 	mla	r3, r7, r3, r5
   3d05e:	4620      	mov	r0, r4
   3d060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d062:	681b      	ldr	r3, [r3, #0]
   3d064:	689b      	ldr	r3, [r3, #8]
   3d066:	4798      	blx	r3
			buf->__buf = NULL;
   3d068:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   3d06a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   3d06c:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   3d06e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   3d072:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   3d074:	6a1b      	ldr	r3, [r3, #32]
   3d076:	b11b      	cbz	r3, 3d080 <net_buf_unref+0x54>
			pool->destroy(buf);
   3d078:	4620      	mov	r0, r4
   3d07a:	4798      	blx	r3
{
   3d07c:	4644      	mov	r4, r8
   3d07e:	e7db      	b.n	3d038 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   3d080:	4621      	mov	r1, r4
   3d082:	fb00 5007 	mla	r0, r0, r7, r5
   3d086:	f00b f95d 	bl	48344 <k_queue_prepend>
}
   3d08a:	e7f7      	b.n	3d07c <net_buf_unref+0x50>
   3d08c:	20000a44 	.word	0x20000a44

0003d090 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   3d090:	2813      	cmp	r0, #19
   3d092:	d80e      	bhi.n	3d0b2 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   3d094:	4a08      	ldr	r2, [pc, #32]	; (3d0b8 <adc_gain_invert+0x28>)
   3d096:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   3d09a:	b153      	cbz	r3, 3d0b2 <adc_gain_invert+0x22>
   3d09c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   3d0a0:	7852      	ldrb	r2, [r2, #1]
   3d0a2:	b132      	cbz	r2, 3d0b2 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   3d0a4:	6808      	ldr	r0, [r1, #0]
   3d0a6:	4343      	muls	r3, r0
			rv = 0;
   3d0a8:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   3d0aa:	fb93 f3f2 	sdiv	r3, r3, r2
   3d0ae:	600b      	str	r3, [r1, #0]
			rv = 0;
   3d0b0:	4770      	bx	lr
	int rv = -EINVAL;
   3d0b2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   3d0b6:	4770      	bx	lr
   3d0b8:	00049c3f 	.word	0x00049c3f

0003d0bc <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   3d0bc:	4b05      	ldr	r3, [pc, #20]	; (3d0d4 <adc_context_start_sampling+0x18>)
   3d0be:	2201      	movs	r2, #1
   3d0c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   3d0c4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   3d0c8:	b109      	cbz	r1, 3d0ce <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d0ca:	60da      	str	r2, [r3, #12]
}
   3d0cc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d0ce:	601a      	str	r2, [r3, #0]
   3d0d0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   3d0d2:	4770      	bx	lr
   3d0d4:	40007000 	.word	0x40007000

0003d0d8 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   3d0d8:	7908      	ldrb	r0, [r1, #4]
{
   3d0da:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   3d0dc:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   3d0e0:	2c07      	cmp	r4, #7
   3d0e2:	d820      	bhi.n	3d126 <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
   3d0e4:	780b      	ldrb	r3, [r1, #0]
   3d0e6:	2b0b      	cmp	r3, #11
   3d0e8:	d81d      	bhi.n	3d126 <adc_nrfx_channel_setup+0x4e>
   3d0ea:	e8df f003 	tbb	[pc, r3]
   3d0ee:	0707      	.short	0x0707
   3d0f0:	061c0707 	.word	0x061c0707
   3d0f4:	211f1c1c 	.word	0x211f1c1c
   3d0f8:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
   3d0fa:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   3d0fc:	784a      	ldrb	r2, [r1, #1]
   3d0fe:	2a03      	cmp	r2, #3
   3d100:	d01a      	beq.n	3d138 <adc_nrfx_channel_setup+0x60>
   3d102:	2a04      	cmp	r2, #4
   3d104:	d10f      	bne.n	3d126 <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   3d106:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   3d108:	884a      	ldrh	r2, [r1, #2]
   3d10a:	f244 060a 	movw	r6, #16394	; 0x400a
   3d10e:	42b2      	cmp	r2, r6
   3d110:	d046      	beq.n	3d1a0 <adc_nrfx_channel_setup+0xc8>
   3d112:	d813      	bhi.n	3d13c <adc_nrfx_channel_setup+0x64>
   3d114:	f244 0603 	movw	r6, #16387	; 0x4003
   3d118:	42b2      	cmp	r2, r6
   3d11a:	d03d      	beq.n	3d198 <adc_nrfx_channel_setup+0xc0>
   3d11c:	f244 0605 	movw	r6, #16389	; 0x4005
   3d120:	42b2      	cmp	r2, r6
   3d122:	d03b      	beq.n	3d19c <adc_nrfx_channel_setup+0xc4>
   3d124:	b3e2      	cbz	r2, 3d1a0 <adc_nrfx_channel_setup+0xc8>
   3d126:	f06f 0015 	mvn.w	r0, #21
   3d12a:	e034      	b.n	3d196 <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
   3d12c:	2305      	movs	r3, #5
		break;
   3d12e:	e7e5      	b.n	3d0fc <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   3d130:	2306      	movs	r3, #6
		break;
   3d132:	e7e3      	b.n	3d0fc <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   3d134:	2307      	movs	r3, #7
		break;
   3d136:	e7e1      	b.n	3d0fc <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
   3d138:	2501      	movs	r5, #1
   3d13a:	e7e5      	b.n	3d108 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
   3d13c:	f244 0614 	movw	r6, #16404	; 0x4014
   3d140:	42b2      	cmp	r2, r6
   3d142:	d02f      	beq.n	3d1a4 <adc_nrfx_channel_setup+0xcc>
   3d144:	f244 0628 	movw	r6, #16424	; 0x4028
   3d148:	42b2      	cmp	r2, r6
   3d14a:	d02d      	beq.n	3d1a8 <adc_nrfx_channel_setup+0xd0>
   3d14c:	f244 060f 	movw	r6, #16399	; 0x400f
   3d150:	42b2      	cmp	r2, r6
   3d152:	d1e8      	bne.n	3d126 <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   3d154:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3d156:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   3d15a:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3d15c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   3d160:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   3d164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   3d168:	0122      	lsls	r2, r4, #4
   3d16a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3d16e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   3d172:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   3d174:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   3d178:	0123      	lsls	r3, r4, #4
   3d17a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3d17e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   3d182:	798a      	ldrb	r2, [r1, #6]
   3d184:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   3d188:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   3d18c:	4b07      	ldr	r3, [pc, #28]	; (3d1ac <adc_nrfx_channel_setup+0xd4>)
   3d18e:	794a      	ldrb	r2, [r1, #5]
   3d190:	4423      	add	r3, r4
   3d192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
   3d196:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   3d198:	2200      	movs	r2, #0
   3d19a:	e7dc      	b.n	3d156 <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
   3d19c:	2201      	movs	r2, #1
   3d19e:	e7da      	b.n	3d156 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   3d1a0:	2202      	movs	r2, #2
   3d1a2:	e7d8      	b.n	3d156 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   3d1a4:	2204      	movs	r2, #4
   3d1a6:	e7d6      	b.n	3d156 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   3d1a8:	2205      	movs	r2, #5
   3d1aa:	e7d4      	b.n	3d156 <adc_nrfx_channel_setup+0x7e>
   3d1ac:	200004e8 	.word	0x200004e8

0003d1b0 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   3d1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d1b2:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   3d1b4:	f04f 33ff 	mov.w	r3, #4294967295
   3d1b8:	4856      	ldr	r0, [pc, #344]	; (3d314 <adc_nrfx_read+0x164>)
   3d1ba:	f04f 32ff 	mov.w	r2, #4294967295
   3d1be:	f003 fcb1 	bl	40b24 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   3d1c2:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   3d1c4:	1e73      	subs	r3, r6, #1
   3d1c6:	2bfe      	cmp	r3, #254	; 0xfe
   3d1c8:	d83c      	bhi.n	3d244 <adc_nrfx_read+0x94>
   3d1ca:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   3d1cc:	4852      	ldr	r0, [pc, #328]	; (3d318 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   3d1ce:	4f53      	ldr	r7, [pc, #332]	; (3d31c <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   3d1d0:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   3d1d2:	fa26 f103 	lsr.w	r1, r6, r3
   3d1d6:	f011 0101 	ands.w	r1, r1, #1
   3d1da:	d026      	beq.n	3d22a <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   3d1dc:	f817 c003 	ldrb.w	ip, [r7, r3]
   3d1e0:	f1bc 0f00 	cmp.w	ip, #0
   3d1e4:	d02e      	beq.n	3d244 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   3d1e6:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   3d1ea:	7c65      	ldrb	r5, [r4, #17]
   3d1ec:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   3d1f0:	3d00      	subs	r5, #0
   3d1f2:	bf18      	it	ne
   3d1f4:	2501      	movne	r5, #1
   3d1f6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   3d1fa:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   3d1fe:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   3d202:	f103 0151 	add.w	r1, r3, #81	; 0x51
   3d206:	0109      	lsls	r1, r1, #4
			++active_channels;
   3d208:	3201      	adds	r2, #1
   3d20a:	f840 c001 	str.w	ip, [r0, r1]
   3d20e:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   3d210:	3301      	adds	r3, #1
   3d212:	2b08      	cmp	r3, #8
   3d214:	d1dd      	bne.n	3d1d2 <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   3d216:	7c23      	ldrb	r3, [r4, #16]
   3d218:	3b08      	subs	r3, #8
   3d21a:	2b06      	cmp	r3, #6
   3d21c:	d812      	bhi.n	3d244 <adc_nrfx_read+0x94>
   3d21e:	e8df f003 	tbb	[pc, r3]
   3d222:	1109      	.short	0x1109
   3d224:	1119111d 	.word	0x1119111d
   3d228:	1b          	.byte	0x1b
   3d229:	00          	.byte	0x00
   3d22a:	f103 0551 	add.w	r5, r3, #81	; 0x51
   3d22e:	012d      	lsls	r5, r5, #4
   3d230:	5141      	str	r1, [r0, r5]
}
   3d232:	e7ed      	b.n	3d210 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   3d234:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   3d236:	4938      	ldr	r1, [pc, #224]	; (3d318 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3d238:	2a01      	cmp	r2, #1
   3d23a:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   3d23e:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3d240:	d90e      	bls.n	3d260 <adc_nrfx_read+0xb0>
   3d242:	b17b      	cbz	r3, 3d264 <adc_nrfx_read+0xb4>
		return -EINVAL;
   3d244:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   3d248:	4832      	ldr	r0, [pc, #200]	; (3d314 <adc_nrfx_read+0x164>)
   3d24a:	f003 fc45 	bl	40ad8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   3d24e:	4620      	mov	r0, r4
   3d250:	b003      	add	sp, #12
   3d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   3d254:	2302      	movs	r3, #2
		break;
   3d256:	e7ee      	b.n	3d236 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   3d258:	2303      	movs	r3, #3
		break;
   3d25a:	e7ec      	b.n	3d236 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   3d25c:	2301      	movs	r3, #1
   3d25e:	e7ea      	b.n	3d236 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   3d260:	2b08      	cmp	r3, #8
   3d262:	d8ef      	bhi.n	3d244 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   3d264:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   3d268:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   3d26a:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   3d26c:	b111      	cbz	r1, 3d274 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   3d26e:	8989      	ldrh	r1, [r1, #12]
   3d270:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   3d274:	68e1      	ldr	r1, [r4, #12]
   3d276:	4299      	cmp	r1, r3
   3d278:	d348      	bcc.n	3d30c <adc_nrfx_read+0x15c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3d27a:	4b27      	ldr	r3, [pc, #156]	; (3d318 <adc_nrfx_read+0x168>)
   3d27c:	68a1      	ldr	r1, [r4, #8]
   3d27e:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   3d282:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
   3d284:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   3d288:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3d28a:	4d25      	ldr	r5, [pc, #148]	; (3d320 <adc_nrfx_read+0x170>)
   3d28c:	f105 0674 	add.w	r6, r5, #116	; 0x74
   3d290:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3d292:	683b      	ldr	r3, [r7, #0]
   3d294:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   3d296:	2600      	movs	r6, #0
   3d298:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   3d29a:	6823      	ldr	r3, [r4, #0]
   3d29c:	462f      	mov	r7, r5
   3d29e:	b38b      	cbz	r3, 3d304 <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   3d2a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   3d2a2:	f105 0488 	add.w	r4, r5, #136	; 0x88
   3d2a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   3d2aa:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   3d2ac:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   3d2b0:	b340      	cbz	r0, 3d304 <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3d2b2:	f3bf 8f5b 	dmb	ish
   3d2b6:	e857 3f00 	ldrex	r3, [r7]
   3d2ba:	e847 6200 	strex	r2, r6, [r7]
   3d2be:	2a00      	cmp	r2, #0
   3d2c0:	d1f9      	bne.n	3d2b6 <adc_nrfx_read+0x106>
   3d2c2:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   3d2c6:	4917      	ldr	r1, [pc, #92]	; (3d324 <adc_nrfx_read+0x174>)
   3d2c8:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
   3d2cc:	4a16      	ldr	r2, [pc, #88]	; (3d328 <adc_nrfx_read+0x178>)
   3d2ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3d2d2:	460f      	mov	r7, r1
   3d2d4:	4631      	mov	r1, r6
   3d2d6:	fbe4 7100 	umlal	r7, r1, r4, r0
   3d2da:	2300      	movs	r3, #0
   3d2dc:	4638      	mov	r0, r7
   3d2de:	f7e9 ff5f 	bl	271a0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   3d2e2:	2200      	movs	r2, #0
   3d2e4:	e9cd 0100 	strd	r0, r1, [sp]
   3d2e8:	2300      	movs	r3, #0
   3d2ea:	f105 0008 	add.w	r0, r5, #8
   3d2ee:	f004 fb31 	bl	41954 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   3d2f2:	480e      	ldr	r0, [pc, #56]	; (3d32c <adc_nrfx_read+0x17c>)
   3d2f4:	f04f 32ff 	mov.w	r2, #4294967295
   3d2f8:	f04f 33ff 	mov.w	r3, #4294967295
   3d2fc:	f003 fc12 	bl	40b24 <z_impl_k_sem_take>
	return ctx->status;
   3d300:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   3d302:	e7a1      	b.n	3d248 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   3d304:	4806      	ldr	r0, [pc, #24]	; (3d320 <adc_nrfx_read+0x170>)
   3d306:	f7ff fed9 	bl	3d0bc <adc_context_start_sampling>
   3d30a:	e7f2      	b.n	3d2f2 <adc_nrfx_read+0x142>
		return -ENOMEM;
   3d30c:	f06f 040b 	mvn.w	r4, #11
   3d310:	e79a      	b.n	3d248 <adc_nrfx_read+0x98>
   3d312:	bf00      	nop
   3d314:	20000528 	.word	0x20000528
   3d318:	40007000 	.word	0x40007000
   3d31c:	20000588 	.word	0x20000588
   3d320:	200004e8 	.word	0x200004e8
   3d324:	000f423f 	.word	0x000f423f
   3d328:	000f4240 	.word	0x000f4240
   3d32c:	20000540 	.word	0x20000540

0003d330 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   3d330:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d332:	4b0e      	ldr	r3, [pc, #56]	; (3d36c <init_saadc+0x3c>)
   3d334:	2400      	movs	r4, #0
   3d336:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3d33a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3d33e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   3d342:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   3d346:	2212      	movs	r2, #18
   3d348:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   3d34c:	2007      	movs	r0, #7
   3d34e:	f7fb fbaf 	bl	38ab0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d352:	4622      	mov	r2, r4
   3d354:	2101      	movs	r1, #1
   3d356:	2007      	movs	r0, #7
   3d358:	f7fb fbda 	bl	38b10 <z_arm_irq_priority_set>
   3d35c:	4804      	ldr	r0, [pc, #16]	; (3d370 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   3d35e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3d360:	b913      	cbnz	r3, 3d368 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   3d362:	3040      	adds	r0, #64	; 0x40
   3d364:	f003 fbb8 	bl	40ad8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   3d368:	2000      	movs	r0, #0
   3d36a:	bd10      	pop	{r4, pc}
   3d36c:	40007000 	.word	0x40007000
   3d370:	200004e8 	.word	0x200004e8

0003d374 <saadc_irq_handler>:
{
   3d374:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d376:	4b2f      	ldr	r3, [pc, #188]	; (3d434 <saadc_irq_handler+0xc0>)
   3d378:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   3d37c:	2a00      	cmp	r2, #0
   3d37e:	d04c      	beq.n	3d41a <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d380:	2200      	movs	r2, #0
   3d382:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3d386:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   3d38a:	4c2b      	ldr	r4, [pc, #172]	; (3d438 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d38c:	2101      	movs	r1, #1
   3d38e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   3d390:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   3d394:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3d396:	4625      	mov	r5, r4
   3d398:	b3d3      	cbz	r3, 3d410 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   3d39a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   3d39e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   3d3a2:	b133      	cbz	r3, 3d3b2 <saadc_irq_handler+0x3e>
			action = callback(dev,
   3d3a4:	f104 0174 	add.w	r1, r4, #116	; 0x74
   3d3a8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   3d3aa:	2801      	cmp	r0, #1
   3d3ac:	d014      	beq.n	3d3d8 <saadc_irq_handler+0x64>
   3d3ae:	2802      	cmp	r0, #2
   3d3b0:	d028      	beq.n	3d404 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   3d3b2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   3d3b6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   3d3ba:	429a      	cmp	r2, r3
   3d3bc:	d922      	bls.n	3d404 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   3d3be:	3301      	adds	r3, #1
   3d3c0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   3d3c4:	4b1b      	ldr	r3, [pc, #108]	; (3d434 <saadc_irq_handler+0xc0>)
   3d3c6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   3d3ca:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   3d3ce:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   3d3d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3d3d4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   3d3d8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3d3dc:	b923      	cbnz	r3, 3d3e8 <saadc_irq_handler+0x74>
}
   3d3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   3d3e2:	4815      	ldr	r0, [pc, #84]	; (3d438 <saadc_irq_handler+0xc4>)
   3d3e4:	f7ff be6a 	b.w	3d0bc <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3d3e8:	f3bf 8f5b 	dmb	ish
   3d3ec:	e855 3f00 	ldrex	r3, [r5]
   3d3f0:	1e5a      	subs	r2, r3, #1
   3d3f2:	e845 2100 	strex	r1, r2, [r5]
   3d3f6:	2900      	cmp	r1, #0
   3d3f8:	d1f8      	bne.n	3d3ec <saadc_irq_handler+0x78>
   3d3fa:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   3d3fe:	2b01      	cmp	r3, #1
   3d400:	dced      	bgt.n	3d3de <saadc_irq_handler+0x6a>
   3d402:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   3d404:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3d408:	b113      	cbz	r3, 3d410 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   3d40a:	480c      	ldr	r0, [pc, #48]	; (3d43c <saadc_irq_handler+0xc8>)
   3d40c:	f00b fa5d 	bl	488ca <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   3d410:	480b      	ldr	r0, [pc, #44]	; (3d440 <saadc_irq_handler+0xcc>)
   3d412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3d416:	f003 bb5f 	b.w	40ad8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d41a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   3d41e:	2900      	cmp	r1, #0
   3d420:	d0ef      	beq.n	3d402 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d422:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3d426:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d42a:	2201      	movs	r2, #1
   3d42c:	609a      	str	r2, [r3, #8]
   3d42e:	601a      	str	r2, [r3, #0]
   3d430:	605a      	str	r2, [r3, #4]
}
   3d432:	e7e6      	b.n	3d402 <saadc_irq_handler+0x8e>
   3d434:	40007000 	.word	0x40007000
   3d438:	200004e8 	.word	0x200004e8
   3d43c:	200004f0 	.word	0x200004f0
   3d440:	20000540 	.word	0x20000540

0003d444 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   3d444:	4b08      	ldr	r3, [pc, #32]	; (3d468 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3d446:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3d448:	1ac3      	subs	r3, r0, r3
{
   3d44a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d44c:	4907      	ldr	r1, [pc, #28]	; (3d46c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   3d44e:	109b      	asrs	r3, r3, #2
{
   3d450:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d452:	4359      	muls	r1, r3
   3d454:	4806      	ldr	r0, [pc, #24]	; (3d470 <onoff_stop+0x2c>)
   3d456:	2240      	movs	r2, #64	; 0x40
   3d458:	f00a f929 	bl	476ae <stop>
	notify(mgr, res);
   3d45c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d45e:	4601      	mov	r1, r0
	notify(mgr, res);
   3d460:	4620      	mov	r0, r4
}
   3d462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   3d466:	4718      	bx	r3
   3d468:	20002cfc 	.word	0x20002cfc
   3d46c:	b6db6db7 	.word	0xb6db6db7
   3d470:	00048cc0 	.word	0x00048cc0

0003d474 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3d474:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3d476:	4c0c      	ldr	r4, [pc, #48]	; (3d4a8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d478:	4a0c      	ldr	r2, [pc, #48]	; (3d4ac <onoff_start+0x38>)
   3d47a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3d47c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d47e:	9300      	str	r3, [sp, #0]
{
   3d480:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d482:	460b      	mov	r3, r1
   3d484:	490a      	ldr	r1, [pc, #40]	; (3d4b0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   3d486:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d488:	4361      	muls	r1, r4
{
   3d48a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d48c:	4809      	ldr	r0, [pc, #36]	; (3d4b4 <onoff_start+0x40>)
   3d48e:	f00a f93b 	bl	47708 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   3d492:	1e01      	subs	r1, r0, #0
   3d494:	da05      	bge.n	3d4a2 <onoff_start+0x2e>
		notify(mgr, err);
   3d496:	4630      	mov	r0, r6
   3d498:	462b      	mov	r3, r5
	}
}
   3d49a:	b002      	add	sp, #8
   3d49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   3d4a0:	4718      	bx	r3
}
   3d4a2:	b002      	add	sp, #8
   3d4a4:	bd70      	pop	{r4, r5, r6, pc}
   3d4a6:	bf00      	nop
   3d4a8:	20002cfc 	.word	0x20002cfc
   3d4ac:	00047775 	.word	0x00047775
   3d4b0:	b6db6db7 	.word	0xb6db6db7
   3d4b4:	00048cc0 	.word	0x00048cc0

0003d4b8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d4b8:	2200      	movs	r2, #0
{
   3d4ba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d4bc:	2101      	movs	r1, #1
{
   3d4be:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d4c0:	4610      	mov	r0, r2
   3d4c2:	f7fb fb25 	bl	38b10 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   3d4c6:	480f      	ldr	r0, [pc, #60]	; (3d504 <clk_init+0x4c>)
   3d4c8:	f002 f81e 	bl	3f508 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   3d4cc:	4b0e      	ldr	r3, [pc, #56]	; (3d508 <clk_init+0x50>)
   3d4ce:	4298      	cmp	r0, r3
   3d4d0:	d115      	bne.n	3d4fe <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   3d4d2:	f00a fc83 	bl	47ddc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   3d4d6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   3d4d8:	490c      	ldr	r1, [pc, #48]	; (3d50c <clk_init+0x54>)
   3d4da:	4630      	mov	r0, r6
   3d4dc:	f007 fd24 	bl	44f28 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   3d4e0:	2800      	cmp	r0, #0
   3d4e2:	db0b      	blt.n	3d4fc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3d4e4:	2501      	movs	r5, #1
   3d4e6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   3d4e8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3d4ea:	4908      	ldr	r1, [pc, #32]	; (3d50c <clk_init+0x54>)
   3d4ec:	f104 001c 	add.w	r0, r4, #28
   3d4f0:	f007 fd1a 	bl	44f28 <onoff_manager_init>
		if (err < 0) {
   3d4f4:	2800      	cmp	r0, #0
   3d4f6:	db01      	blt.n	3d4fc <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3d4f8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   3d4fa:	2000      	movs	r0, #0
}
   3d4fc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3d4fe:	f06f 0004 	mvn.w	r0, #4
   3d502:	e7fb      	b.n	3d4fc <clk_init+0x44>
   3d504:	0003d545 	.word	0x0003d545
   3d508:	0bad0000 	.word	0x0bad0000
   3d50c:	0004948c 	.word	0x0004948c

0003d510 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   3d510:	b570      	push	{r4, r5, r6, lr}
   3d512:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   3d514:	230c      	movs	r3, #12
   3d516:	4809      	ldr	r0, [pc, #36]	; (3d53c <clkstarted_handle.constprop.0+0x2c>)
   3d518:	434b      	muls	r3, r1
   3d51a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   3d51c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3d520:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   3d522:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   3d524:	4418      	add	r0, r3
	sub_data->cb = NULL;
   3d526:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3d528:	f00a f8ae 	bl	47688 <set_on_state>
	if (callback) {
   3d52c:	b12d      	cbz	r5, 3d53a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3d52e:	4632      	mov	r2, r6
   3d530:	462b      	mov	r3, r5
   3d532:	4803      	ldr	r0, [pc, #12]	; (3d540 <clkstarted_handle.constprop.0+0x30>)
}
   3d534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   3d538:	4718      	bx	r3
}
   3d53a:	bd70      	pop	{r4, r5, r6, pc}
   3d53c:	20002cfc 	.word	0x20002cfc
   3d540:	00048cc0 	.word	0x00048cc0

0003d544 <clock_event_handler>:
	switch (event) {
   3d544:	b110      	cbz	r0, 3d54c <clock_event_handler+0x8>
   3d546:	2801      	cmp	r0, #1
   3d548:	d004      	beq.n	3d554 <clock_event_handler+0x10>
   3d54a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   3d54c:	4b03      	ldr	r3, [pc, #12]	; (3d55c <clock_event_handler+0x18>)
   3d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3d550:	075b      	lsls	r3, r3, #29
   3d552:	d101      	bne.n	3d558 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3d554:	f7ff bfdc 	b.w	3d510 <clkstarted_handle.constprop.0>
}
   3d558:	4770      	bx	lr
   3d55a:	bf00      	nop
   3d55c:	20002cfc 	.word	0x20002cfc

0003d560 <generic_hfclk_start>:
{
   3d560:	b508      	push	{r3, lr}
	__asm__ volatile(
   3d562:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d566:	f3ef 8111 	mrs	r1, BASEPRI
   3d56a:	f383 8812 	msr	BASEPRI_MAX, r3
   3d56e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   3d572:	4a12      	ldr	r2, [pc, #72]	; (3d5bc <generic_hfclk_start+0x5c>)
   3d574:	6813      	ldr	r3, [r2, #0]
   3d576:	f043 0002 	orr.w	r0, r3, #2
   3d57a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   3d57c:	07da      	lsls	r2, r3, #31
   3d57e:	d408      	bmi.n	3d592 <generic_hfclk_start+0x32>
	__asm__ volatile(
   3d580:	f381 8811 	msr	BASEPRI, r1
   3d584:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3d588:	2001      	movs	r0, #1
}
   3d58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3d58e:	f001 bfab 	b.w	3f4e8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3d592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d596:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3d59a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   3d59e:	07d3      	lsls	r3, r2, #31
   3d5a0:	d5ee      	bpl.n	3d580 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   3d5a2:	4807      	ldr	r0, [pc, #28]	; (3d5c0 <generic_hfclk_start+0x60>)
   3d5a4:	f00a f870 	bl	47688 <set_on_state>
   3d5a8:	f381 8811 	msr	BASEPRI, r1
   3d5ac:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   3d5b0:	2000      	movs	r0, #0
}
   3d5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3d5b6:	f7ff bfab 	b.w	3d510 <clkstarted_handle.constprop.0>
   3d5ba:	bf00      	nop
   3d5bc:	20002d4c 	.word	0x20002d4c
   3d5c0:	20002d3c 	.word	0x20002d3c

0003d5c4 <api_blocking_start>:
{
   3d5c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d5c6:	2200      	movs	r2, #0
   3d5c8:	2301      	movs	r3, #1
   3d5ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3d5ce:	ab04      	add	r3, sp, #16
   3d5d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d5d4:	4a09      	ldr	r2, [pc, #36]	; (3d5fc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d5d6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d5da:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d5dc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d5e0:	f00a f8c1 	bl	47766 <api_start>
	if (err < 0) {
   3d5e4:	2800      	cmp	r0, #0
   3d5e6:	db05      	blt.n	3d5f4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   3d5e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3d5ec:	2300      	movs	r3, #0
   3d5ee:	4668      	mov	r0, sp
   3d5f0:	f003 fa98 	bl	40b24 <z_impl_k_sem_take>
}
   3d5f4:	b007      	add	sp, #28
   3d5f6:	f85d fb04 	ldr.w	pc, [sp], #4
   3d5fa:	bf00      	nop
   3d5fc:	00047793 	.word	0x00047793

0003d600 <generic_hfclk_stop>:
{
   3d600:	b510      	push	{r4, lr}
	__asm__ volatile(
   3d602:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d606:	f3ef 8411 	mrs	r4, BASEPRI
   3d60a:	f383 8812 	msr	BASEPRI_MAX, r3
   3d60e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   3d612:	4a07      	ldr	r2, [pc, #28]	; (3d630 <generic_hfclk_stop+0x30>)
   3d614:	6813      	ldr	r3, [r2, #0]
   3d616:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   3d61a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   3d61c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   3d61e:	d402      	bmi.n	3d626 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3d620:	2001      	movs	r0, #1
   3d622:	f00a fbd6 	bl	47dd2 <nrfx_clock_stop>
	__asm__ volatile(
   3d626:	f384 8811 	msr	BASEPRI, r4
   3d62a:	f3bf 8f6f 	isb	sy
}
   3d62e:	bd10      	pop	{r4, pc}
   3d630:	20002d4c 	.word	0x20002d4c

0003d634 <z_nrf_clock_control_lf_on>:
{
   3d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3d638:	4938      	ldr	r1, [pc, #224]	; (3d71c <z_nrf_clock_control_lf_on+0xe8>)
   3d63a:	f3bf 8f5b 	dmb	ish
   3d63e:	4607      	mov	r7, r0
   3d640:	2201      	movs	r2, #1
   3d642:	e851 3f00 	ldrex	r3, [r1]
   3d646:	e841 2000 	strex	r0, r2, [r1]
   3d64a:	2800      	cmp	r0, #0
   3d64c:	d1f9      	bne.n	3d642 <z_nrf_clock_control_lf_on+0xe>
   3d64e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   3d652:	b933      	cbnz	r3, 3d662 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   3d654:	4932      	ldr	r1, [pc, #200]	; (3d720 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   3d656:	4833      	ldr	r0, [pc, #204]	; (3d724 <z_nrf_clock_control_lf_on+0xf0>)
   3d658:	604b      	str	r3, [r1, #4]
   3d65a:	60cb      	str	r3, [r1, #12]
   3d65c:	608a      	str	r2, [r1, #8]
   3d65e:	f007 fc76 	bl	44f4e <onoff_request>
	switch (start_mode) {
   3d662:	1e7b      	subs	r3, r7, #1
   3d664:	2b01      	cmp	r3, #1
   3d666:	d82b      	bhi.n	3d6c0 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   3d668:	2f01      	cmp	r7, #1
   3d66a:	d107      	bne.n	3d67c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   3d66c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d670:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   3d674:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   3d678:	2b01      	cmp	r3, #1
   3d67a:	d021      	beq.n	3d6c0 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3d67c:	f00a fdb7 	bl	481ee <k_is_in_isr>
   3d680:	4605      	mov	r5, r0
   3d682:	b9f8      	cbnz	r0, 3d6c4 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   3d684:	4b28      	ldr	r3, [pc, #160]	; (3d728 <z_nrf_clock_control_lf_on+0xf4>)
   3d686:	781b      	ldrb	r3, [r3, #0]
   3d688:	b1e3      	cbz	r3, 3d6c4 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   3d68a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d68e:	2202      	movs	r2, #2
   3d690:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   3d694:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3d696:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3d72c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3d69a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3d69e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3d6a2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   3d6a6:	03d2      	lsls	r2, r2, #15
   3d6a8:	d516      	bpl.n	3d6d8 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3d6aa:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   3d6ae:	2b01      	cmp	r3, #1
   3d6b0:	d001      	beq.n	3d6b6 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3d6b2:	2f01      	cmp	r7, #1
   3d6b4:	d110      	bne.n	3d6d8 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   3d6b6:	b35d      	cbz	r5, 3d710 <z_nrf_clock_control_lf_on+0xdc>
   3d6b8:	f386 8811 	msr	BASEPRI, r6
   3d6bc:	f3bf 8f6f 	isb	sy
}
   3d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   3d6c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d6c8:	f3ef 8611 	mrs	r6, BASEPRI
   3d6cc:	f383 8812 	msr	BASEPRI_MAX, r3
   3d6d0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3d6d4:	2501      	movs	r5, #1
   3d6d6:	e7de      	b.n	3d696 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3d6d8:	b1ad      	cbz	r5, 3d706 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   3d6da:	4630      	mov	r0, r6
   3d6dc:	f7fb f9dc 	bl	38a98 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   3d6e0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   3d6e4:	2b00      	cmp	r3, #0
   3d6e6:	d1da      	bne.n	3d69e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3d6e8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   3d6ec:	2a00      	cmp	r2, #0
   3d6ee:	d0d6      	beq.n	3d69e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d6f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3d6f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   3d6f8:	2301      	movs	r3, #1
   3d6fa:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   3d6fe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d702:	60a3      	str	r3, [r4, #8]
}
   3d704:	e7cb      	b.n	3d69e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   3d706:	2100      	movs	r1, #0
   3d708:	2021      	movs	r0, #33	; 0x21
   3d70a:	f003 fec5 	bl	41498 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3d70e:	e7e7      	b.n	3d6e0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   3d710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d714:	2202      	movs	r2, #2
   3d716:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d71a:	e7d1      	b.n	3d6c0 <z_nrf_clock_control_lf_on+0x8c>
   3d71c:	20002cf8 	.word	0x20002cf8
   3d720:	20002ce8 	.word	0x20002ce8
   3d724:	20002d18 	.word	0x20002d18
   3d728:	20003a80 	.word	0x20003a80
   3d72c:	e000e100 	.word	0xe000e100

0003d730 <random_byte_get>:
   3d730:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d734:	f3ef 8211 	mrs	r2, BASEPRI
   3d738:	f383 8812 	msr	BASEPRI_MAX, r3
   3d73c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3d740:	4b09      	ldr	r3, [pc, #36]	; (3d768 <random_byte_get+0x38>)
   3d742:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3d746:	b161      	cbz	r1, 3d762 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3d748:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   3d74a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3d74e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3d752:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3d756:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   3d758:	f382 8811 	msr	BASEPRI, r2
   3d75c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   3d760:	4770      	bx	lr
	int retval = -EAGAIN;
   3d762:	f06f 000a 	mvn.w	r0, #10
   3d766:	e7f7      	b.n	3d758 <random_byte_get+0x28>
   3d768:	4000d000 	.word	0x4000d000

0003d76c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   3d76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d76e:	4603      	mov	r3, r0
   3d770:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   3d772:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   3d774:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   3d778:	f04f 0540 	mov.w	r5, #64	; 0x40
   3d77c:	f3ef 8211 	mrs	r2, BASEPRI
   3d780:	f385 8812 	msr	BASEPRI_MAX, r5
   3d784:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   3d788:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   3d78a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   3d78e:	1be4      	subs	r4, r4, r7
   3d790:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   3d794:	42a0      	cmp	r0, r4
		len = available;
   3d796:	bf88      	it	hi
   3d798:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   3d79a:	183e      	adds	r6, r7, r0
   3d79c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   3d7a0:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   3d7a2:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   3d7a4:	f382 8811 	msr	BASEPRI, r2
   3d7a8:	f3bf 8f6f 	isb	sy
   3d7ac:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   3d7ae:	428a      	cmp	r2, r1
   3d7b0:	d117      	bne.n	3d7e2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3d7b2:	4577      	cmp	r7, lr
   3d7b4:	d10d      	bne.n	3d7d2 <rng_pool_get+0x66>
	__asm__ volatile(
   3d7b6:	f04f 0140 	mov.w	r1, #64	; 0x40
   3d7ba:	f3ef 8211 	mrs	r2, BASEPRI
   3d7be:	f381 8812 	msr	BASEPRI_MAX, r1
   3d7c2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3d7c6:	7819      	ldrb	r1, [r3, #0]
   3d7c8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   3d7ca:	f382 8811 	msr	BASEPRI, r2
   3d7ce:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   3d7d2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   3d7d4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   3d7d6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3d7d8:	bf22      	ittt	cs
   3d7da:	4b06      	ldrcs	r3, [pc, #24]	; (3d7f4 <rng_pool_get+0x88>)
   3d7dc:	2201      	movcs	r2, #1
   3d7de:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   3d7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   3d7e2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   3d7e4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   3d7e6:	7976      	ldrb	r6, [r6, #5]
   3d7e8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   3d7ec:	ea05 050c 	and.w	r5, r5, ip
   3d7f0:	e7dd      	b.n	3d7ae <rng_pool_get+0x42>
   3d7f2:	bf00      	nop
   3d7f4:	4000d000 	.word	0x4000d000

0003d7f8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3d7f8:	43db      	mvns	r3, r3
{
   3d7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3d7fe:	f013 0501 	ands.w	r5, r3, #1
{
   3d802:	460e      	mov	r6, r1
   3d804:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3d806:	d004      	beq.n	3d812 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   3d808:	4823      	ldr	r0, [pc, #140]	; (3d898 <entropy_nrf5_get_entropy_isr+0xa0>)
   3d80a:	f7ff ffaf 	bl	3d76c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   3d80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   3d812:	b3a2      	cbz	r2, 3d87e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   3d814:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d818:	f3ef 8811 	mrs	r8, BASEPRI
   3d81c:	f383 8812 	msr	BASEPRI_MAX, r3
   3d820:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3d824:	200d      	movs	r0, #13
   3d826:	f7fb f965 	bl	38af4 <arch_irq_is_enabled>
   3d82a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   3d82c:	200d      	movs	r0, #13
   3d82e:	f7fb f94d 	bl	38acc <arch_irq_disable>
	__asm__ volatile(
   3d832:	f388 8811 	msr	BASEPRI, r8
   3d836:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3d83a:	f8df a060 	ldr.w	sl, [pc, #96]	; 3d89c <entropy_nrf5_get_entropy_isr+0xa4>
   3d83e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3d8a0 <entropy_nrf5_get_entropy_isr+0xa8>
   3d842:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   3d846:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   3d84a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3d84e:	2301      	movs	r3, #1
   3d850:	f8ca 3000 	str.w	r3, [sl]
   3d854:	4625      	mov	r5, r4
   3d856:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3d85a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   3d85e:	b183      	cbz	r3, 3d882 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   3d860:	f7ff ff66 	bl	3d730 <random_byte_get>
			if (byte < 0) {
   3d864:	1e03      	subs	r3, r0, #0
   3d866:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   3d86a:	dbf6      	blt.n	3d85a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   3d86c:	3d01      	subs	r5, #1
   3d86e:	b2ad      	uxth	r5, r5
   3d870:	5573      	strb	r3, [r6, r5]
		} while (len);
   3d872:	2d00      	cmp	r5, #0
   3d874:	d1f1      	bne.n	3d85a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   3d876:	b117      	cbz	r7, 3d87e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   3d878:	200d      	movs	r0, #13
   3d87a:	f7fb f919 	bl	38ab0 <arch_irq_enable>
	return cnt;
   3d87e:	4620      	mov	r0, r4
   3d880:	e7c5      	b.n	3d80e <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   3d882:	f04f 0340 	mov.w	r3, #64	; 0x40
   3d886:	f3ef 8011 	mrs	r0, BASEPRI
   3d88a:	f383 8812 	msr	BASEPRI_MAX, r3
   3d88e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   3d892:	f7fb f901 	bl	38a98 <arch_cpu_atomic_idle>
}
   3d896:	e7e0      	b.n	3d85a <entropy_nrf5_get_entropy_isr+0x62>
   3d898:	20002d80 	.word	0x20002d80
   3d89c:	4000d000 	.word	0x4000d000
   3d8a0:	e000e100 	.word	0xe000e100

0003d8a4 <entropy_nrf5_get_entropy>:
{
   3d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   3d8a8:	4f12      	ldr	r7, [pc, #72]	; (3d8f4 <entropy_nrf5_get_entropy+0x50>)
   3d8aa:	460d      	mov	r5, r1
   3d8ac:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3d8ae:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   3d8b2:	b914      	cbnz	r4, 3d8ba <entropy_nrf5_get_entropy+0x16>
}
   3d8b4:	4620      	mov	r0, r4
   3d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d8ba:	f04f 33ff 	mov.w	r3, #4294967295
   3d8be:	f04f 32ff 	mov.w	r2, #4294967295
   3d8c2:	4638      	mov	r0, r7
   3d8c4:	f003 f92e 	bl	40b24 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3d8c8:	4622      	mov	r2, r4
   3d8ca:	4629      	mov	r1, r5
   3d8cc:	4640      	mov	r0, r8
   3d8ce:	f7ff ff4d 	bl	3d76c <rng_pool_get>
   3d8d2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   3d8d4:	4638      	mov	r0, r7
   3d8d6:	f003 f8ff 	bl	40ad8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   3d8da:	b93e      	cbnz	r6, 3d8ec <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   3d8dc:	f04f 32ff 	mov.w	r2, #4294967295
   3d8e0:	f04f 33ff 	mov.w	r3, #4294967295
   3d8e4:	4804      	ldr	r0, [pc, #16]	; (3d8f8 <entropy_nrf5_get_entropy+0x54>)
   3d8e6:	f003 f91d 	bl	40b24 <z_impl_k_sem_take>
	while (len) {
   3d8ea:	e7e6      	b.n	3d8ba <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   3d8ec:	1ba4      	subs	r4, r4, r6
   3d8ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   3d8f0:	4435      	add	r5, r6
   3d8f2:	e7de      	b.n	3d8b2 <entropy_nrf5_get_entropy+0xe>
   3d8f4:	20002d50 	.word	0x20002d50
   3d8f8:	20002d68 	.word	0x20002d68

0003d8fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   3d8fc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3d8fe:	4c19      	ldr	r4, [pc, #100]	; (3d964 <entropy_nrf5_init+0x68>)
   3d900:	2201      	movs	r2, #1
   3d902:	4611      	mov	r1, r2
   3d904:	4620      	mov	r0, r4
   3d906:	f00a fd2b 	bl	48360 <z_impl_k_sem_init>
   3d90a:	2201      	movs	r2, #1
   3d90c:	2100      	movs	r1, #0
   3d90e:	f104 0018 	add.w	r0, r4, #24
   3d912:	f00a fd25 	bl	48360 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   3d916:	f240 4307 	movw	r3, #1031	; 0x407
   3d91a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3d91e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   3d922:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   3d924:	230c      	movs	r3, #12
   3d926:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3d92a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   3d92c:	4b0e      	ldr	r3, [pc, #56]	; (3d968 <entropy_nrf5_init+0x6c>)
   3d92e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   3d932:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   3d936:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3d93a:	f022 0201 	bic.w	r2, r2, #1
   3d93e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   3d942:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3d944:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   3d948:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3d94c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   3d950:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3d952:	6019      	str	r1, [r3, #0]
   3d954:	200d      	movs	r0, #13
   3d956:	f7fb f8db 	bl	38b10 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3d95a:	200d      	movs	r0, #13
   3d95c:	f7fb f8a8 	bl	38ab0 <arch_irq_enable>

	return 0;
}
   3d960:	4628      	mov	r0, r5
   3d962:	bd38      	pop	{r3, r4, r5, pc}
   3d964:	20002d50 	.word	0x20002d50
   3d968:	4000d000 	.word	0x4000d000

0003d96c <isr>:
{
   3d96c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   3d96e:	f7ff fedf 	bl	3d730 <random_byte_get>
	if (byte < 0) {
   3d972:	2800      	cmp	r0, #0
   3d974:	db20      	blt.n	3d9b8 <isr+0x4c>
	uint8_t last  = rngp->last;
   3d976:	4b17      	ldr	r3, [pc, #92]	; (3d9d4 <isr+0x68>)
   3d978:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   3d97c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   3d980:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   3d984:	1b14      	subs	r4, r2, r4
   3d986:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   3d98a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   3d98c:	d10d      	bne.n	3d9aa <isr+0x3e>
	uint8_t last  = rngp->last;
   3d98e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   3d992:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   3d996:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   3d99a:	1b14      	subs	r4, r2, r4
   3d99c:	ea31 0404 	bics.w	r4, r1, r4
   3d9a0:	d10b      	bne.n	3d9ba <isr+0x4e>
   3d9a2:	4b0d      	ldr	r3, [pc, #52]	; (3d9d8 <isr+0x6c>)
   3d9a4:	2201      	movs	r2, #1
   3d9a6:	605a      	str	r2, [r3, #4]
}
   3d9a8:	e00e      	b.n	3d9c8 <isr+0x5c>
	rngp->buffer[last] = byte;
   3d9aa:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3d9ac:	3201      	adds	r2, #1
   3d9ae:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3d9b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   3d9b4:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   3d9b8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   3d9ba:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3d9bc:	3201      	adds	r2, #1
   3d9be:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3d9c0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   3d9c4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   3d9c8:	4804      	ldr	r0, [pc, #16]	; (3d9dc <isr+0x70>)
}
   3d9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d9ce:	f003 b883 	b.w	40ad8 <z_impl_k_sem_give>
   3d9d2:	bf00      	nop
   3d9d4:	20002d50 	.word	0x20002d50
   3d9d8:	4000d000 	.word	0x4000d000
   3d9dc:	20002d68 	.word	0x20002d68

0003d9e0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   3d9e0:	b530      	push	{r4, r5, lr}
	return port->config;
   3d9e2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3d9e4:	7b05      	ldrb	r5, [r0, #12]
   3d9e6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   3d9ea:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   3d9ee:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3d9f0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   3d9f4:	d105      	bne.n	3da02 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   3d9f6:	4620      	mov	r0, r4
   3d9f8:	f002 f920 	bl	3fc3c <nrfx_gpiote_trigger_disable>

		return 0;
   3d9fc:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   3d9fe:	b005      	add	sp, #20
   3da00:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   3da02:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   3da04:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3da08:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   3da0c:	d114      	bne.n	3da38 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3da0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3da12:	bf0c      	ite	eq
   3da14:	2304      	moveq	r3, #4
   3da16:	2305      	movne	r3, #5
   3da18:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3da1c:	2300      	movs	r3, #0
   3da1e:	4619      	mov	r1, r3
   3da20:	aa02      	add	r2, sp, #8
   3da22:	4620      	mov	r0, r4
   3da24:	f001 ff48 	bl	3f8b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3da28:	4b1f      	ldr	r3, [pc, #124]	; (3daa8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3da2a:	4298      	cmp	r0, r3
   3da2c:	d139      	bne.n	3daa2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   3da2e:	2101      	movs	r1, #1
   3da30:	4620      	mov	r0, r4
   3da32:	f002 f8bb 	bl	3fbac <nrfx_gpiote_trigger_enable>
	return 0;
   3da36:	e7e1      	b.n	3d9fc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3da38:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   3da3c:	d026      	beq.n	3da8c <gpio_nrfx_pin_interrupt_configure+0xac>
   3da3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   3da42:	bf14      	ite	ne
   3da44:	2301      	movne	r3, #1
   3da46:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   3da48:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   3da4c:	6883      	ldr	r3, [r0, #8]
   3da4e:	40cb      	lsrs	r3, r1
   3da50:	07d9      	lsls	r1, r3, #31
   3da52:	d4e3      	bmi.n	3da1c <gpio_nrfx_pin_interrupt_configure+0x3c>
   3da54:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   3da58:	d1e0      	bne.n	3da1c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   3da5a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   3da5c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   3da5e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   3da62:	4a12      	ldr	r2, [pc, #72]	; (3daac <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3da64:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   3da68:	bf18      	it	ne
   3da6a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3da6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   3da72:	07db      	lsls	r3, r3, #31
   3da74:	d4d2      	bmi.n	3da1c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3da76:	f10d 0507 	add.w	r5, sp, #7
   3da7a:	4629      	mov	r1, r5
   3da7c:	4620      	mov	r0, r4
   3da7e:	f002 f841 	bl	3fb04 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   3da82:	4b0b      	ldr	r3, [pc, #44]	; (3dab0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3da84:	4298      	cmp	r0, r3
   3da86:	d003      	beq.n	3da90 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   3da88:	9503      	str	r5, [sp, #12]
   3da8a:	e7c7      	b.n	3da1c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3da8c:	2303      	movs	r3, #3
   3da8e:	e7db      	b.n	3da48 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   3da90:	4628      	mov	r0, r5
   3da92:	f002 f885 	bl	3fba0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   3da96:	4b04      	ldr	r3, [pc, #16]	; (3daa8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3da98:	4298      	cmp	r0, r3
   3da9a:	d0f5      	beq.n	3da88 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   3da9c:	f06f 000b 	mvn.w	r0, #11
   3daa0:	e7ad      	b.n	3d9fe <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   3daa2:	f06f 0015 	mvn.w	r0, #21
   3daa6:	e7aa      	b.n	3d9fe <gpio_nrfx_pin_interrupt_configure+0x1e>
   3daa8:	0bad0000 	.word	0x0bad0000
   3daac:	50000300 	.word	0x50000300
   3dab0:	0bad0004 	.word	0x0bad0004

0003dab4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3dab4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   3dab6:	f002 f863 	bl	3fb80 <nrfx_gpiote_is_init>
   3daba:	4604      	mov	r4, r0
   3dabc:	b968      	cbnz	r0, 3dada <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   3dabe:	f002 f837 	bl	3fb30 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   3dac2:	4b08      	ldr	r3, [pc, #32]	; (3dae4 <gpio_nrfx_init+0x30>)
   3dac4:	4298      	cmp	r0, r3
   3dac6:	d10a      	bne.n	3dade <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   3dac8:	4807      	ldr	r0, [pc, #28]	; (3dae8 <gpio_nrfx_init+0x34>)
   3daca:	4621      	mov	r1, r4
   3dacc:	f002 f814 	bl	3faf8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3dad0:	4622      	mov	r2, r4
   3dad2:	2105      	movs	r1, #5
   3dad4:	2006      	movs	r0, #6
   3dad6:	f7fb f81b 	bl	38b10 <z_arm_irq_priority_set>
		return 0;
   3dada:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   3dadc:	bd10      	pop	{r4, pc}
		return -EIO;
   3dade:	f06f 0004 	mvn.w	r0, #4
   3dae2:	e7fb      	b.n	3dadc <gpio_nrfx_init+0x28>
   3dae4:	0bad0000 	.word	0x0bad0000
   3dae8:	0003daed 	.word	0x0003daed

0003daec <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3daec:	0942      	lsrs	r2, r0, #5
{
   3daee:	b570      	push	{r4, r5, r6, lr}
   3daf0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3daf2:	d002      	beq.n	3dafa <nrfx_gpio_handler+0xe>
   3daf4:	2a01      	cmp	r2, #1
   3daf6:	d017      	beq.n	3db28 <nrfx_gpio_handler+0x3c>
}
   3daf8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3dafa:	4e0d      	ldr	r6, [pc, #52]	; (3db30 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   3dafc:	6932      	ldr	r2, [r6, #16]
   3dafe:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3db00:	2900      	cmp	r1, #0
   3db02:	d0f9      	beq.n	3daf8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   3db04:	f003 031f 	and.w	r3, r3, #31
   3db08:	2501      	movs	r5, #1
   3db0a:	680c      	ldr	r4, [r1, #0]
   3db0c:	409d      	lsls	r5, r3
   3db0e:	2900      	cmp	r1, #0
   3db10:	d0f2      	beq.n	3daf8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   3db12:	688a      	ldr	r2, [r1, #8]
   3db14:	402a      	ands	r2, r5
   3db16:	d002      	beq.n	3db1e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3db18:	684b      	ldr	r3, [r1, #4]
   3db1a:	4630      	mov	r0, r6
   3db1c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3db1e:	b12c      	cbz	r4, 3db2c <nrfx_gpio_handler+0x40>
   3db20:	6823      	ldr	r3, [r4, #0]
   3db22:	4621      	mov	r1, r4
   3db24:	461c      	mov	r4, r3
   3db26:	e7f2      	b.n	3db0e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3db28:	4e02      	ldr	r6, [pc, #8]	; (3db34 <nrfx_gpio_handler+0x48>)
   3db2a:	e7e7      	b.n	3dafc <nrfx_gpio_handler+0x10>
   3db2c:	4623      	mov	r3, r4
   3db2e:	e7f8      	b.n	3db22 <nrfx_gpio_handler+0x36>
   3db30:	00048cf8 	.word	0x00048cf8
   3db34:	00048cdc 	.word	0x00048cdc

0003db38 <gpio_nrfx_pin_configure>:
{
   3db38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   3db3c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3db3e:	7b3b      	ldrb	r3, [r7, #12]
   3db40:	f001 051f 	and.w	r5, r1, #31
   3db44:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   3db48:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3db4a:	4628      	mov	r0, r5
   3db4c:	f10d 0103 	add.w	r1, sp, #3
{
   3db50:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3db52:	f001 ffd7 	bl	3fb04 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   3db56:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3db5a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   3db5c:	d10b      	bne.n	3db76 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   3db5e:	4628      	mov	r0, r5
   3db60:	f002 f894 	bl	3fc8c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   3db64:	4b3d      	ldr	r3, [pc, #244]	; (3dc5c <gpio_nrfx_pin_configure+0x124>)
   3db66:	4598      	cmp	r8, r3
   3db68:	d103      	bne.n	3db72 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   3db6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3db6e:	f002 f811 	bl	3fb94 <nrfx_gpiote_channel_free>
		return 0;
   3db72:	2000      	movs	r0, #0
   3db74:	e00c      	b.n	3db90 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   3db76:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3db78:	4619      	mov	r1, r3
   3db7a:	aa02      	add	r2, sp, #8
   3db7c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   3db7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3db82:	f001 fe99 	bl	3f8b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3db86:	4b35      	ldr	r3, [pc, #212]	; (3dc5c <gpio_nrfx_pin_configure+0x124>)
   3db88:	4298      	cmp	r0, r3
   3db8a:	d004      	beq.n	3db96 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   3db8c:	f06f 0015 	mvn.w	r0, #21
}
   3db90:	b004      	add	sp, #16
   3db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   3db96:	4580      	cmp	r8, r0
   3db98:	d103      	bne.n	3dba2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   3db9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3db9e:	f001 fff9 	bl	3fb94 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   3dba2:	03a3      	lsls	r3, r4, #14
   3dba4:	d54b      	bpl.n	3dc3e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3dba6:	f240 3306 	movw	r3, #774	; 0x306
   3dbaa:	4023      	ands	r3, r4
   3dbac:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   3dbb0:	d019      	beq.n	3dbe6 <gpio_nrfx_pin_configure+0xae>
   3dbb2:	d80c      	bhi.n	3dbce <gpio_nrfx_pin_configure+0x96>
   3dbb4:	2b06      	cmp	r3, #6
   3dbb6:	d017      	beq.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
   3dbb8:	d804      	bhi.n	3dbc4 <gpio_nrfx_pin_configure+0x8c>
   3dbba:	b1ab      	cbz	r3, 3dbe8 <gpio_nrfx_pin_configure+0xb0>
   3dbbc:	2b02      	cmp	r3, #2
   3dbbe:	d1e5      	bne.n	3db8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   3dbc0:	2304      	movs	r3, #4
   3dbc2:	e011      	b.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3dbc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   3dbc8:	d1e0      	bne.n	3db8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   3dbca:	2301      	movs	r3, #1
   3dbcc:	e00c      	b.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3dbce:	f240 2202 	movw	r2, #514	; 0x202
   3dbd2:	4293      	cmp	r3, r2
   3dbd4:	d027      	beq.n	3dc26 <gpio_nrfx_pin_configure+0xee>
   3dbd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   3dbda:	d026      	beq.n	3dc2a <gpio_nrfx_pin_configure+0xf2>
   3dbdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3dbe0:	d1d4      	bne.n	3db8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   3dbe2:	2302      	movs	r3, #2
   3dbe4:	e000      	b.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   3dbe6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   3dbe8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   3dbec:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   3dbf0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   3dbf4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   3dbf6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   3dbfa:	bf54      	ite	pl
   3dbfc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3dc00:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3dc02:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   3dc04:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3dc08:	d511      	bpl.n	3dc2e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   3dc0a:	687a      	ldr	r2, [r7, #4]
   3dc0c:	2301      	movs	r3, #1
   3dc0e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   3dc10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   3dc14:	2200      	movs	r2, #0
   3dc16:	a901      	add	r1, sp, #4
   3dc18:	4628      	mov	r0, r5
   3dc1a:	f001 fefb 	bl	3fa14 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3dc1e:	4b0f      	ldr	r3, [pc, #60]	; (3dc5c <gpio_nrfx_pin_configure+0x124>)
   3dc20:	4298      	cmp	r0, r3
   3dc22:	d0a6      	beq.n	3db72 <gpio_nrfx_pin_configure+0x3a>
   3dc24:	e7b2      	b.n	3db8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   3dc26:	2305      	movs	r3, #5
   3dc28:	e7de      	b.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3dc2a:	2303      	movs	r3, #3
   3dc2c:	e7dc      	b.n	3dbe8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   3dc2e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   3dc30:	bf41      	itttt	mi
   3dc32:	2301      	movmi	r3, #1
   3dc34:	687a      	ldrmi	r2, [r7, #4]
   3dc36:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   3dc38:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   3dc3c:	e7ea      	b.n	3dc14 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   3dc3e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3dc40:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   3dc44:	bf54      	ite	pl
   3dc46:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3dc4a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3dc4c:	461a      	mov	r2, r3
   3dc4e:	a901      	add	r1, sp, #4
   3dc50:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   3dc52:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3dc56:	f001 fe2f 	bl	3f8b8 <nrfx_gpiote_input_configure>
   3dc5a:	e7e0      	b.n	3dc1e <gpio_nrfx_pin_configure+0xe6>
   3dc5c:	0bad0000 	.word	0x0bad0000

0003dc60 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   3dc60:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
   3dc62:	6843      	ldr	r3, [r0, #4]
   3dc64:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
   3dc66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
   3dc6a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   3dc6e:	f002 fbbd 	bl	403ec <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   3dc72:	4b03      	ldr	r3, [pc, #12]	; (3dc80 <i2c_nrfx_twi_recover_bus+0x20>)
   3dc74:	4298      	cmp	r0, r3
}
   3dc76:	bf14      	ite	ne
   3dc78:	f06f 000f 	mvnne.w	r0, #15
   3dc7c:	2000      	moveq	r0, #0
   3dc7e:	bd08      	pop	{r3, pc}
   3dc80:	0bad0000 	.word	0x0bad0000

0003dc84 <twi_nrfx_pm_action>:
}

#ifdef CONFIG_PM_DEVICE
static int twi_nrfx_pm_action(const struct device *dev,
			      enum pm_device_action action)
{
   3dc84:	b570      	push	{r4, r5, r6, lr}
   3dc86:	4604      	mov	r4, r0
	const struct i2c_nrfx_twi_config *config = dev->config;
   3dc88:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   3dc8a:	6906      	ldr	r6, [r0, #16]
	int ret = 0;

	switch (action) {
   3dc8c:	b1a9      	cbz	r1, 3dcba <twi_nrfx_pm_action+0x36>
   3dc8e:	2901      	cmp	r1, #1
   3dc90:	d11c      	bne.n	3dccc <twi_nrfx_pm_action+0x48>
	case PM_DEVICE_ACTION_RESUME:
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
   3dc92:	69a8      	ldr	r0, [r5, #24]
   3dc94:	2100      	movs	r1, #0
   3dc96:	f009 fe2b 	bl	478f0 <pinctrl_apply_state>
		if (ret < 0) {
   3dc9a:	1e05      	subs	r5, r0, #0
   3dc9c:	db0b      	blt.n	3dcb6 <twi_nrfx_pm_action+0x32>
	const struct i2c_nrfx_twi_config *config = dev->config;
   3dc9e:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   3dca0:	6923      	ldr	r3, [r4, #16]
   3dca2:	4a0c      	ldr	r2, [pc, #48]	; (3dcd4 <twi_nrfx_pm_action+0x50>)
   3dca4:	f100 0108 	add.w	r1, r0, #8
   3dca8:	f002 f9e6 	bl	40078 <nrfx_twi_init>
			return ret;
		}
		init_twi(dev);
		if (data->dev_config) {
   3dcac:	6b71      	ldr	r1, [r6, #52]	; 0x34
   3dcae:	b111      	cbz	r1, 3dcb6 <twi_nrfx_pm_action+0x32>
			i2c_nrfx_twi_configure(dev, data->dev_config);
   3dcb0:	4620      	mov	r0, r4
   3dcb2:	f009 fe04 	bl	478be <i2c_nrfx_twi_configure>
	default:
		ret = -ENOTSUP;
	}

	return ret;
}
   3dcb6:	4628      	mov	r0, r5
   3dcb8:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_twi_uninit(&config->twi);
   3dcba:	4628      	mov	r0, r5
   3dcbc:	f002 fa6a 	bl	40194 <nrfx_twi_uninit>
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_SLEEP);
   3dcc0:	69a8      	ldr	r0, [r5, #24]
   3dcc2:	2101      	movs	r1, #1
}
   3dcc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_SLEEP);
   3dcc8:	f009 be12 	b.w	478f0 <pinctrl_apply_state>
	switch (action) {
   3dccc:	f06f 0585 	mvn.w	r5, #133	; 0x85
   3dcd0:	e7f1      	b.n	3dcb6 <twi_nrfx_pm_action+0x32>
   3dcd2:	bf00      	nop
   3dcd4:	0003dcd9 	.word	0x0003dcd9

0003dcd8 <event_handler>:
	switch (p_event->type) {
   3dcd8:	7803      	ldrb	r3, [r0, #0]
   3dcda:	2b01      	cmp	r3, #1
   3dcdc:	d008      	beq.n	3dcf0 <event_handler+0x18>
   3dcde:	2b02      	cmp	r3, #2
   3dce0:	d008      	beq.n	3dcf4 <event_handler+0x1c>
   3dce2:	b94b      	cbnz	r3, 3dcf8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   3dce4:	4b05      	ldr	r3, [pc, #20]	; (3dcfc <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   3dce6:	630b      	str	r3, [r1, #48]	; 0x30
   3dce8:	f101 0018 	add.w	r0, r1, #24
   3dcec:	f002 bef4 	b.w	40ad8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   3dcf0:	4b03      	ldr	r3, [pc, #12]	; (3dd00 <event_handler+0x28>)
   3dcf2:	e7f8      	b.n	3dce6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   3dcf4:	4b03      	ldr	r3, [pc, #12]	; (3dd04 <event_handler+0x2c>)
   3dcf6:	e7f6      	b.n	3dce6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   3dcf8:	4b03      	ldr	r3, [pc, #12]	; (3dd08 <event_handler+0x30>)
   3dcfa:	e7f4      	b.n	3dce6 <event_handler+0xe>
   3dcfc:	0bad0000 	.word	0x0bad0000
   3dd00:	0bae0001 	.word	0x0bae0001
   3dd04:	0bae0002 	.word	0x0bae0002
   3dd08:	0bad0001 	.word	0x0bad0001

0003dd0c <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
   3dd0c:	b510      	push	{r4, lr}
   3dd0e:	4604      	mov	r4, r0
   3dd10:	2200      	movs	r2, #0
   3dd12:	2101      	movs	r1, #1
   3dd14:	2004      	movs	r0, #4
   3dd16:	f7fa fefb 	bl	38b10 <z_arm_irq_priority_set>
   3dd1a:	6863      	ldr	r3, [r4, #4]
   3dd1c:	2100      	movs	r1, #0
   3dd1e:	6998      	ldr	r0, [r3, #24]
   3dd20:	f009 fde6 	bl	478f0 <pinctrl_apply_state>
   3dd24:	2800      	cmp	r0, #0
   3dd26:	db0c      	blt.n	3dd42 <twi_1_init+0x36>
	const struct i2c_nrfx_twi_config *config = dev->config;
   3dd28:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   3dd2a:	6923      	ldr	r3, [r4, #16]
   3dd2c:	4a05      	ldr	r2, [pc, #20]	; (3dd44 <twi_1_init+0x38>)
   3dd2e:	f100 0108 	add.w	r1, r0, #8
   3dd32:	f002 f9a1 	bl	40078 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   3dd36:	4b04      	ldr	r3, [pc, #16]	; (3dd48 <twi_1_init+0x3c>)
	return 0;
   3dd38:	4298      	cmp	r0, r3
   3dd3a:	bf14      	ite	ne
   3dd3c:	f06f 000f 	mvnne.w	r0, #15
   3dd40:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(1);
   3dd42:	bd10      	pop	{r4, pc}
   3dd44:	0003dcd9 	.word	0x0003dcd9
   3dd48:	0bad0000 	.word	0x0bad0000

0003dd4c <i2c_nrfx_twi_transfer>:
{
   3dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd50:	b08b      	sub	sp, #44	; 0x2c
   3dd52:	4605      	mov	r5, r0
   3dd54:	460c      	mov	r4, r1
   3dd56:	4690      	mov	r8, r2
   3dd58:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
   3dd5a:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   3dd5c:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   3dd5e:	f04f 32ff 	mov.w	r2, #4294967295
   3dd62:	f04f 33ff 	mov.w	r3, #4294967295
   3dd66:	4630      	mov	r0, r6
   3dd68:	f002 fedc 	bl	40b24 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   3dd6c:	f106 0a18 	add.w	sl, r6, #24
   3dd70:	2200      	movs	r2, #0
   3dd72:	2300      	movs	r3, #0
   3dd74:	4650      	mov	r0, sl
   3dd76:	f002 fed5 	bl	40b24 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   3dd7a:	4638      	mov	r0, r7
   3dd7c:	f002 f9de 	bl	4013c <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
   3dd80:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 3de44 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
   3dd84:	f04f 0900 	mov.w	r9, #0
   3dd88:	45c1      	cmp	r9, r8
   3dd8a:	d301      	bcc.n	3dd90 <i2c_nrfx_twi_transfer+0x44>
   3dd8c:	2400      	movs	r4, #0
   3dd8e:	e02e      	b.n	3ddee <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   3dd90:	7a23      	ldrb	r3, [r4, #8]
   3dd92:	9303      	str	r3, [sp, #12]
   3dd94:	f013 0108 	ands.w	r1, r3, #8
   3dd98:	d14d      	bne.n	3de36 <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
   3dd9a:	2212      	movs	r2, #18
   3dd9c:	f10d 0016 	add.w	r0, sp, #22
   3dda0:	9102      	str	r1, [sp, #8]
   3dda2:	f007 fcc0 	bl	45726 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   3dda6:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
   3dda8:	6860      	ldr	r0, [r4, #4]
   3ddaa:	9901      	ldr	r1, [sp, #4]
   3ddac:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   3ddae:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   3ddb2:	6820      	ldr	r0, [r4, #0]
   3ddb4:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   3ddb8:	f013 0f02 	tst.w	r3, #2
   3ddbc:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
   3ddbe:	f88d 2014 	strb.w	r2, [sp, #20]
   3ddc2:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   3ddc4:	d11d      	bne.n	3de02 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
   3ddc6:	f108 33ff 	add.w	r3, r8, #4294967295
   3ddca:	454b      	cmp	r3, r9
   3ddcc:	d902      	bls.n	3ddd4 <i2c_nrfx_twi_transfer+0x88>
   3ddce:	7d23      	ldrb	r3, [r4, #20]
   3ddd0:	075b      	lsls	r3, r3, #29
   3ddd2:	d518      	bpl.n	3de06 <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   3ddd4:	bb7a      	cbnz	r2, 3de36 <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   3ddd6:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   3ddd8:	a905      	add	r1, sp, #20
   3ddda:	4638      	mov	r0, r7
   3dddc:	f002 fa1e 	bl	4021c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   3dde0:	4558      	cmp	r0, fp
   3dde2:	d012      	beq.n	3de0a <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
   3dde4:	4b18      	ldr	r3, [pc, #96]	; (3de48 <i2c_nrfx_twi_transfer+0xfc>)
   3dde6:	4298      	cmp	r0, r3
   3dde8:	d028      	beq.n	3de3c <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
   3ddea:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
   3ddee:	4638      	mov	r0, r7
   3ddf0:	f002 f9b4 	bl	4015c <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   3ddf4:	4630      	mov	r0, r6
   3ddf6:	f002 fe6f 	bl	40ad8 <z_impl_k_sem_give>
}
   3ddfa:	4620      	mov	r0, r4
   3ddfc:	b00b      	add	sp, #44	; 0x2c
   3ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   3de02:	460a      	mov	r2, r1
   3de04:	e7e8      	b.n	3ddd8 <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   3de06:	2240      	movs	r2, #64	; 0x40
   3de08:	e7e6      	b.n	3ddd8 <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   3de0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3de0e:	2300      	movs	r3, #0
   3de10:	4650      	mov	r0, sl
   3de12:	f002 fe87 	bl	40b24 <z_impl_k_sem_take>
		if (ret != 0) {
   3de16:	b130      	cbz	r0, 3de26 <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
   3de18:	4638      	mov	r0, r7
   3de1a:	f002 f99f 	bl	4015c <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
   3de1e:	4628      	mov	r0, r5
   3de20:	f7ff ff1e 	bl	3dc60 <i2c_nrfx_twi_recover_bus>
			break;
   3de24:	e7e1      	b.n	3ddea <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
   3de26:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   3de28:	455b      	cmp	r3, fp
   3de2a:	f104 040c 	add.w	r4, r4, #12
   3de2e:	d1dc      	bne.n	3ddea <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
   3de30:	f109 0901 	add.w	r9, r9, #1
   3de34:	e7a8      	b.n	3dd88 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
   3de36:	f06f 0485 	mvn.w	r4, #133	; 0x85
   3de3a:	e7d8      	b.n	3ddee <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
   3de3c:	f06f 040f 	mvn.w	r4, #15
   3de40:	e7d5      	b.n	3ddee <i2c_nrfx_twi_transfer+0xa2>
   3de42:	bf00      	nop
   3de44:	0bad0000 	.word	0x0bad0000
   3de48:	0bad000b 	.word	0x0bad000b

0003de4c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   3de50:	4e5a      	ldr	r6, [pc, #360]	; (3dfbc <pinctrl_configure_pins+0x170>)
   3de52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3de56:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3de58:	4281      	cmp	r1, r0
   3de5a:	d102      	bne.n	3de62 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   3de5c:	2000      	movs	r0, #0
}
   3de5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3de62:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   3de64:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   3de68:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   3de6c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   3de6e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   3de72:	bf08      	it	eq
   3de74:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   3de78:	2c22      	cmp	r4, #34	; 0x22
   3de7a:	f200 809b 	bhi.w	3dfb4 <pinctrl_configure_pins+0x168>
   3de7e:	e8df f004 	tbb	[pc, r4]
   3de82:	2412      	.short	0x2412
   3de84:	402c4429 	.word	0x402c4429
   3de88:	99999944 	.word	0x99999944
   3de8c:	99704799 	.word	0x99704799
   3de90:	99999999 	.word	0x99999999
   3de94:	99999999 	.word	0x99999999
   3de98:	817e7b73 	.word	0x817e7b73
   3de9c:	84999999 	.word	0x84999999
   3dea0:	93908d8a 	.word	0x93908d8a
   3dea4:	96          	.byte	0x96
   3dea5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   3dea6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   3deaa:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   3deae:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   3deb2:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   3deb6:	bf14      	ite	ne
   3deb8:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   3debc:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3debe:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   3dec2:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   3dec6:	2401      	movs	r4, #1
   3dec8:	e002      	b.n	3ded0 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   3deca:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3dece:	2400      	movs	r4, #0
   3ded0:	46a6      	mov	lr, r4
   3ded2:	e024      	b.n	3df1e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   3ded4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   3ded8:	e7e7      	b.n	3deaa <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   3deda:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3dede:	2400      	movs	r4, #0
    return pin_number >> 5;
   3dee0:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   3dee4:	f1be 0f01 	cmp.w	lr, #1
   3dee8:	bf14      	ite	ne
   3deea:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   3deee:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   3def0:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3def4:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   3def8:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   3defc:	f04f 0e01 	mov.w	lr, #1
   3df00:	e00d      	b.n	3df1e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   3df02:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   3df06:	2401      	movs	r4, #1
   3df08:	e7ea      	b.n	3dee0 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   3df0a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   3df0e:	e7de      	b.n	3dece <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   3df10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   3df14:	2d00      	cmp	r5, #0
   3df16:	d1da      	bne.n	3dece <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   3df18:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3df1a:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   3df1c:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   3df1e:	f850 cb04 	ldr.w	ip, [r0], #4
   3df22:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3df26:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3df2a:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   3df2e:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   3df32:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   3df36:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3df3a:	bf1c      	itt	ne
   3df3c:	2401      	movne	r4, #1
   3df3e:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3df42:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   3df46:	2b01      	cmp	r3, #1
   3df48:	bf0c      	ite	eq
   3df4a:	4633      	moveq	r3, r6
   3df4c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3df50:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   3df54:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3df58:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3df5c:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3df60:	e77a      	b.n	3de58 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   3df62:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   3df66:	e7d5      	b.n	3df14 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   3df68:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   3df6c:	6804      	ldr	r4, [r0, #0]
   3df6e:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   3df72:	2c00      	cmp	r4, #0
   3df74:	d0c7      	beq.n	3df06 <pinctrl_configure_pins+0xba>
   3df76:	e798      	b.n	3deaa <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   3df78:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   3df7c:	e7f6      	b.n	3df6c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   3df7e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   3df82:	e7f3      	b.n	3df6c <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   3df84:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   3df88:	e7f0      	b.n	3df6c <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   3df8a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3df8e:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   3df90:	f04f 0e00 	mov.w	lr, #0
   3df94:	e7c3      	b.n	3df1e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   3df96:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   3df9a:	e786      	b.n	3deaa <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   3df9c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   3dfa0:	e7f5      	b.n	3df8e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   3dfa2:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   3dfa6:	e7f2      	b.n	3df8e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   3dfa8:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   3dfac:	e7ef      	b.n	3df8e <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   3dfae:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   3dfb2:	e7ec      	b.n	3df8e <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   3dfb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3dfb8:	e751      	b.n	3de5e <pinctrl_configure_pins+0x12>
   3dfba:	bf00      	nop
   3dfbc:	50000300 	.word	0x50000300

0003dfc0 <bme280_channel_get>:
}

static int bme280_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
   3dfc0:	b510      	push	{r4, lr}
	struct bme280_data *data = dev->data;

	switch (chan) {
   3dfc2:	290e      	cmp	r1, #14
	struct bme280_data *data = dev->data;
   3dfc4:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   3dfc6:	d013      	beq.n	3dff0 <bme280_channel_get+0x30>
   3dfc8:	2910      	cmp	r1, #16
   3dfca:	d024      	beq.n	3e016 <bme280_channel_get+0x56>
   3dfcc:	290d      	cmp	r1, #13
   3dfce:	d12c      	bne.n	3e02a <bme280_channel_get+0x6a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
   3dfd0:	2164      	movs	r1, #100	; 0x64
   3dfd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
   3dfd4:	fb90 f0f1 	sdiv	r0, r0, r1
   3dfd8:	6010      	str	r0, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
   3dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3dfdc:	fb93 f0f1 	sdiv	r0, r3, r1
   3dfe0:	fb01 3310 	mls	r3, r1, r0, r3
   3dfe4:	f242 7110 	movw	r1, #10000	; 0x2710
   3dfe8:	434b      	muls	r3, r1
   3dfea:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
   3dfec:	2000      	movs	r0, #0
}
   3dfee:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
   3dff0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   3dff2:	0a08      	lsrs	r0, r1, #8
   3dff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   3dff8:	fbb0 f0f1 	udiv	r0, r0, r1
   3dffc:	6010      	str	r0, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   3dffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3e000:	0a18      	lsrs	r0, r3, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
   3e002:	b2db      	uxtb	r3, r3
   3e004:	434b      	muls	r3, r1
   3e006:	0a1b      	lsrs	r3, r3, #8
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
   3e008:	fbb0 f4f1 	udiv	r4, r0, r1
   3e00c:	fb01 0014 	mls	r0, r1, r4, r0
   3e010:	fb01 3300 	mla	r3, r1, r0, r3
		break;
   3e014:	e7e9      	b.n	3dfea <bme280_channel_get+0x2a>
		val->val1 = (data->comp_humidity >> 10);
   3e016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   3e018:	0a89      	lsrs	r1, r1, #10
   3e01a:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
   3e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3e01e:	4904      	ldr	r1, [pc, #16]	; (3e030 <bme280_channel_get+0x70>)
   3e020:	f3c3 0309 	ubfx	r3, r3, #0, #10
   3e024:	434b      	muls	r3, r1
   3e026:	0a9b      	lsrs	r3, r3, #10
		break;
   3e028:	e7df      	b.n	3dfea <bme280_channel_get+0x2a>
	switch (chan) {
   3e02a:	f06f 0015 	mvn.w	r0, #21
   3e02e:	e7de      	b.n	3dfee <bme280_channel_get+0x2e>
   3e030:	000f4240 	.word	0x000f4240

0003e034 <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
   3e034:	b570      	push	{r4, r5, r6, lr}
   3e036:	4604      	mov	r4, r0
	struct bme280_data *data = dev->data;
   3e038:	6905      	ldr	r5, [r0, #16]
	int err;

	err = bme280_bus_check(dev);
   3e03a:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
   3e03c:	6883      	ldr	r3, [r0, #8]
{
   3e03e:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
   3e040:	681b      	ldr	r3, [r3, #0]
   3e042:	4798      	blx	r3
	if (err < 0) {
   3e044:	2800      	cmp	r0, #0
   3e046:	f2c0 8087 	blt.w	3e158 <bme280_chip_init+0x124>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
   3e04a:	6860      	ldr	r0, [r4, #4]
   3e04c:	2301      	movs	r3, #1
   3e04e:	f105 0234 	add.w	r2, r5, #52	; 0x34
   3e052:	21d0      	movs	r1, #208	; 0xd0
   3e054:	f009 fc71 	bl	4793a <bme280_reg_read.isra.0>
	if (err < 0) {
   3e058:	2800      	cmp	r0, #0
   3e05a:	db7d      	blt.n	3e158 <bme280_chip_init+0x124>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
   3e05c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   3e060:	3b56      	subs	r3, #86	; 0x56
   3e062:	b2db      	uxtb	r3, r3
   3e064:	2b0a      	cmp	r3, #10
   3e066:	f200 808d 	bhi.w	3e184 <bme280_chip_init+0x150>
   3e06a:	4a48      	ldr	r2, [pc, #288]	; (3e18c <bme280_chip_init+0x158>)
   3e06c:	fa42 f303 	asr.w	r3, r2, r3
   3e070:	07db      	lsls	r3, r3, #31
   3e072:	f100 8087 	bmi.w	3e184 <bme280_chip_init+0x150>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
   3e076:	22b6      	movs	r2, #182	; 0xb6
   3e078:	21e0      	movs	r1, #224	; 0xe0
   3e07a:	6860      	ldr	r0, [r4, #4]
   3e07c:	f009 fc5a 	bl	47934 <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
   3e080:	4620      	mov	r0, r4
   3e082:	f009 fc60 	bl	47946 <bme280_wait_until_ready>
	if (err < 0) {
   3e086:	2800      	cmp	r0, #0
   3e088:	db66      	blt.n	3e158 <bme280_chip_init+0x124>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   3e08a:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = dev->data;
   3e08c:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
   3e08e:	2318      	movs	r3, #24
   3e090:	aa02      	add	r2, sp, #8
   3e092:	2188      	movs	r1, #136	; 0x88
   3e094:	f009 fc51 	bl	4793a <bme280_reg_read.isra.0>
	if (err < 0) {
   3e098:	2800      	cmp	r0, #0
   3e09a:	db5d      	blt.n	3e158 <bme280_chip_init+0x124>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
   3e09c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3e0a0:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
   3e0a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3e0a6:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
   3e0a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3e0ac:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
   3e0ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3e0b2:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
   3e0b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   3e0b8:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
   3e0ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   3e0be:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
   3e0c0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3e0c4:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
   3e0c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   3e0ca:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
   3e0cc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   3e0d0:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
   3e0d2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   3e0d6:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
   3e0d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   3e0dc:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
   3e0de:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   3e0e2:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
   3e0e4:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   3e0e8:	2b60      	cmp	r3, #96	; 0x60
   3e0ea:	d129      	bne.n	3e140 <bme280_chip_init+0x10c>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
   3e0ec:	6860      	ldr	r0, [r4, #4]
   3e0ee:	2301      	movs	r3, #1
   3e0f0:	f106 0218 	add.w	r2, r6, #24
   3e0f4:	21a1      	movs	r1, #161	; 0xa1
   3e0f6:	f009 fc20 	bl	4793a <bme280_reg_read.isra.0>
		if (err < 0) {
   3e0fa:	2800      	cmp	r0, #0
   3e0fc:	db2c      	blt.n	3e158 <bme280_chip_init+0x124>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
   3e0fe:	6860      	ldr	r0, [r4, #4]
   3e100:	2307      	movs	r3, #7
   3e102:	466a      	mov	r2, sp
   3e104:	21e1      	movs	r1, #225	; 0xe1
   3e106:	f009 fc18 	bl	4793a <bme280_reg_read.isra.0>
		if (err < 0) {
   3e10a:	2800      	cmp	r0, #0
   3e10c:	db24      	blt.n	3e158 <bme280_chip_init+0x124>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
   3e10e:	f8bd 3000 	ldrh.w	r3, [sp]
   3e112:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
   3e114:	f89d 3002 	ldrb.w	r3, [sp, #2]
   3e118:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
   3e11a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3e11e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   3e122:	f003 020f 	and.w	r2, r3, #15
   3e126:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   3e12a:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
   3e12c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   3e130:	091b      	lsrs	r3, r3, #4
   3e132:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   3e136:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
   3e138:	f89d 3006 	ldrb.w	r3, [sp, #6]
   3e13c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
   3e140:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   3e144:	6860      	ldr	r0, [r4, #4]
   3e146:	2b60      	cmp	r3, #96	; 0x60
   3e148:	d008      	beq.n	3e15c <bme280_chip_init+0x128>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
   3e14a:	6860      	ldr	r0, [r4, #4]
   3e14c:	22ab      	movs	r2, #171	; 0xab
   3e14e:	21f4      	movs	r1, #244	; 0xf4
   3e150:	f009 fbf0 	bl	47934 <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
   3e154:	2800      	cmp	r0, #0
   3e156:	da08      	bge.n	3e16a <bme280_chip_init+0x136>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
   3e158:	b008      	add	sp, #32
   3e15a:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
   3e15c:	2205      	movs	r2, #5
   3e15e:	21f2      	movs	r1, #242	; 0xf2
   3e160:	f009 fbe8 	bl	47934 <bme280_reg_write.isra.0>
		if (err < 0) {
   3e164:	2800      	cmp	r0, #0
   3e166:	daf0      	bge.n	3e14a <bme280_chip_init+0x116>
   3e168:	e7f6      	b.n	3e158 <bme280_chip_init+0x124>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
   3e16a:	6860      	ldr	r0, [r4, #4]
   3e16c:	2268      	movs	r2, #104	; 0x68
   3e16e:	21f5      	movs	r1, #245	; 0xf5
   3e170:	f009 fbe0 	bl	47934 <bme280_reg_write.isra.0>
	if (err < 0) {
   3e174:	2800      	cmp	r0, #0
   3e176:	dbef      	blt.n	3e158 <bme280_chip_init+0x124>
	return z_impl_k_sleep(timeout);
   3e178:	2021      	movs	r0, #33	; 0x21
   3e17a:	2100      	movs	r1, #0
   3e17c:	f003 f98c 	bl	41498 <z_impl_k_sleep>
	return 0;
   3e180:	2000      	movs	r0, #0
   3e182:	e7e9      	b.n	3e158 <bme280_chip_init+0x124>
		return -ENOTSUP;
   3e184:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3e188:	e7e6      	b.n	3e158 <bme280_chip_init+0x124>
   3e18a:	bf00      	nop
   3e18c:	fffffbfa 	.word	0xfffffbfa

0003e190 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   3e190:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   3e192:	2301      	movs	r3, #1
   3e194:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e196:	4a0e      	ldr	r2, [pc, #56]	; (3e1d0 <compare_int_lock+0x40>)
   3e198:	f3bf 8f5b 	dmb	ish
   3e19c:	43dc      	mvns	r4, r3
   3e19e:	e852 1f00 	ldrex	r1, [r2]
   3e1a2:	ea01 0504 	and.w	r5, r1, r4
   3e1a6:	e842 5600 	strex	r6, r5, [r2]
   3e1aa:	2e00      	cmp	r6, #0
   3e1ac:	d1f7      	bne.n	3e19e <compare_int_lock+0xe>
   3e1ae:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e1b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3e1b6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   3e1b8:	4806      	ldr	r0, [pc, #24]	; (3e1d4 <compare_int_lock+0x44>)
   3e1ba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   3e1be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3e1c2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   3e1c6:	420b      	tst	r3, r1
}
   3e1c8:	bf14      	ite	ne
   3e1ca:	2001      	movne	r0, #1
   3e1cc:	2000      	moveq	r0, #0
   3e1ce:	bd70      	pop	{r4, r5, r6, pc}
   3e1d0:	20002df8 	.word	0x20002df8
   3e1d4:	40011000 	.word	0x40011000

0003e1d8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   3e1d8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   3e1da:	490e      	ldr	r1, [pc, #56]	; (3e214 <sys_clock_timeout_handler+0x3c>)
   3e1dc:	e9d1 3400 	ldrd	r3, r4, [r1]
   3e1e0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   3e1e2:	18c3      	adds	r3, r0, r3
   3e1e4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   3e1e8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   3e1ec:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   3e1f0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   3e1f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   3e1f8:	d209      	bcs.n	3e20e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   3e1fa:	4b07      	ldr	r3, [pc, #28]	; (3e218 <sys_clock_timeout_handler+0x40>)
   3e1fc:	681b      	ldr	r3, [r3, #0]
   3e1fe:	0a1a      	lsrs	r2, r3, #8
   3e200:	061b      	lsls	r3, r3, #24
   3e202:	199c      	adds	r4, r3, r6
   3e204:	4b05      	ldr	r3, [pc, #20]	; (3e21c <sys_clock_timeout_handler+0x44>)
   3e206:	f142 0500 	adc.w	r5, r2, #0
   3e20a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   3e20e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   3e210:	f003 baaa 	b.w	41768 <sys_clock_announce>
   3e214:	20001b28 	.word	0x20001b28
   3e218:	20002dfc 	.word	0x20002dfc
   3e21c:	20001b30 	.word	0x20001b30

0003e220 <compare_int_unlock>:
	if (key) {
   3e220:	b311      	cbz	r1, 3e268 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e222:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   3e226:	2301      	movs	r3, #1
   3e228:	4a10      	ldr	r2, [pc, #64]	; (3e26c <compare_int_unlock+0x4c>)
   3e22a:	4083      	lsls	r3, r0
   3e22c:	e852 cf00 	ldrex	ip, [r2]
   3e230:	ea4c 0c03 	orr.w	ip, ip, r3
   3e234:	e842 c100 	strex	r1, ip, [r2]
   3e238:	2900      	cmp	r1, #0
   3e23a:	d1f7      	bne.n	3e22c <compare_int_unlock+0xc>
   3e23c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   3e240:	4a0b      	ldr	r2, [pc, #44]	; (3e270 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e246:	4083      	lsls	r3, r0
   3e248:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3e24c:	4b09      	ldr	r3, [pc, #36]	; (3e274 <compare_int_unlock+0x54>)
   3e24e:	f3bf 8f5b 	dmb	ish
   3e252:	681b      	ldr	r3, [r3, #0]
   3e254:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   3e258:	40c3      	lsrs	r3, r0
   3e25a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e25c:	bf42      	ittt	mi
   3e25e:	4b06      	ldrmi	r3, [pc, #24]	; (3e278 <compare_int_unlock+0x58>)
   3e260:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   3e264:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   3e268:	4770      	bx	lr
   3e26a:	bf00      	nop
   3e26c:	20002df8 	.word	0x20002df8
   3e270:	40011000 	.word	0x40011000
   3e274:	20002df4 	.word	0x20002df4
   3e278:	e000e100 	.word	0xe000e100

0003e27c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   3e27c:	4b0d      	ldr	r3, [pc, #52]	; (3e2b4 <z_nrf_rtc_timer_read+0x38>)
   3e27e:	6818      	ldr	r0, [r3, #0]
   3e280:	0a01      	lsrs	r1, r0, #8
   3e282:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   3e284:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   3e288:	4b0b      	ldr	r3, [pc, #44]	; (3e2b8 <z_nrf_rtc_timer_read+0x3c>)
   3e28a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   3e28e:	1818      	adds	r0, r3, r0
   3e290:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   3e294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3e298:	d20a      	bcs.n	3e2b0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   3e29a:	4b08      	ldr	r3, [pc, #32]	; (3e2bc <z_nrf_rtc_timer_read+0x40>)
   3e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
   3e2a0:	4290      	cmp	r0, r2
   3e2a2:	eb71 0303 	sbcs.w	r3, r1, r3
   3e2a6:	d203      	bcs.n	3e2b0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   3e2a8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   3e2ac:	f141 0100 	adc.w	r1, r1, #0
}
   3e2b0:	4770      	bx	lr
   3e2b2:	bf00      	nop
   3e2b4:	20002dfc 	.word	0x20002dfc
   3e2b8:	40011000 	.word	0x40011000
   3e2bc:	20001b30 	.word	0x20001b30

0003e2c0 <compare_set>:
{
   3e2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2c4:	4616      	mov	r6, r2
   3e2c6:	461f      	mov	r7, r3
   3e2c8:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   3e2ca:	f7ff ff61 	bl	3e190 <compare_int_lock>
   3e2ce:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   3e2d0:	f7ff ffd4 	bl	3e27c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   3e2d4:	42b0      	cmp	r0, r6
   3e2d6:	eb71 0307 	sbcs.w	r3, r1, r7
   3e2da:	d251      	bcs.n	3e380 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   3e2dc:	4b3a      	ldr	r3, [pc, #232]	; (3e3c8 <compare_set+0x108>)
   3e2de:	1a30      	subs	r0, r6, r0
   3e2e0:	eb67 0101 	sbc.w	r1, r7, r1
   3e2e4:	4298      	cmp	r0, r3
   3e2e6:	f171 0100 	sbcs.w	r1, r1, #0
   3e2ea:	d26a      	bcs.n	3e3c2 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   3e2ec:	4b37      	ldr	r3, [pc, #220]	; (3e3cc <compare_set+0x10c>)
   3e2ee:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   3e2f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   3e2f6:	429f      	cmp	r7, r3
   3e2f8:	bf08      	it	eq
   3e2fa:	4296      	cmpeq	r6, r2
   3e2fc:	d04e      	beq.n	3e39c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   3e2fe:	4934      	ldr	r1, [pc, #208]	; (3e3d0 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e300:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3e304:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e308:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3e30c:	00ad      	lsls	r5, r5, #2
   3e30e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   3e312:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e314:	b2ad      	uxth	r5, r5
   3e316:	f009 fca0 	bl	47c5a <event_clear>
	return absolute_time & COUNTER_MAX;
   3e31a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   3e31e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   3e322:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   3e326:	4a2b      	ldr	r2, [pc, #172]	; (3e3d4 <compare_set+0x114>)
   3e328:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e32a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   3e32e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   3e330:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   3e334:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3e336:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   3e33a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   3e33e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   3e342:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3e346:	f06f 0002 	mvn.w	r0, #2
   3e34a:	eba0 0008 	sub.w	r0, r0, r8
   3e34e:	4460      	add	r0, ip
   3e350:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   3e354:	4290      	cmp	r0, r2
   3e356:	d921      	bls.n	3e39c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e358:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   3e35a:	b160      	cbz	r0, 3e376 <compare_set+0xb6>
     return p_reg->COUNTER;
   3e35c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3e360:	eba8 000b 	sub.w	r0, r8, fp
   3e364:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   3e368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3e36c:	d916      	bls.n	3e39c <compare_set+0xdc>
					event_clear(chan);
   3e36e:	4620      	mov	r0, r4
   3e370:	f009 fc73 	bl	47c5a <event_clear>
   3e374:	4a17      	ldr	r2, [pc, #92]	; (3e3d4 <compare_set+0x114>)
			cc_val = now + cc_inc;
   3e376:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   3e37a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   3e37e:	e7d9      	b.n	3e334 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   3e380:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e382:	4a15      	ldr	r2, [pc, #84]	; (3e3d8 <compare_set+0x118>)
   3e384:	f3bf 8f5b 	dmb	ish
   3e388:	40a3      	lsls	r3, r4
   3e38a:	e852 0f00 	ldrex	r0, [r2]
   3e38e:	4318      	orrs	r0, r3
   3e390:	e842 0100 	strex	r1, r0, [r2]
   3e394:	2900      	cmp	r1, #0
   3e396:	d1f8      	bne.n	3e38a <compare_set+0xca>
   3e398:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   3e39c:	490b      	ldr	r1, [pc, #44]	; (3e3cc <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   3e39e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   3e3a0:	0123      	lsls	r3, r4, #4
   3e3a2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   3e3a6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   3e3aa:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   3e3ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e3ae:	6053      	str	r3, [r2, #4]
	return ret;
   3e3b0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   3e3b2:	4620      	mov	r0, r4
   3e3b4:	9900      	ldr	r1, [sp, #0]
   3e3b6:	f7ff ff33 	bl	3e220 <compare_int_unlock>
}
   3e3ba:	4628      	mov	r0, r5
   3e3bc:	b003      	add	sp, #12
   3e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   3e3c2:	f06f 0515 	mvn.w	r5, #21
   3e3c6:	e7f4      	b.n	3e3b2 <compare_set+0xf2>
   3e3c8:	00800001 	.word	0x00800001
   3e3cc:	20001b18 	.word	0x20001b18
   3e3d0:	40011000 	.word	0x40011000
   3e3d4:	007ffffd 	.word	0x007ffffd
   3e3d8:	20002df4 	.word	0x20002df4

0003e3dc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   3e3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   3e3de:	4c1b      	ldr	r4, [pc, #108]	; (3e44c <sys_clock_driver_init+0x70>)
   3e3e0:	4b1b      	ldr	r3, [pc, #108]	; (3e450 <sys_clock_driver_init+0x74>)
   3e3e2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   3e3e6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   3e3ea:	4b1a      	ldr	r3, [pc, #104]	; (3e454 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   3e3ec:	2500      	movs	r5, #0
   3e3ee:	f04f 30ff 	mov.w	r0, #4294967295
   3e3f2:	f04f 31ff 	mov.w	r1, #4294967295
   3e3f6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   3e3fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   3e3fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e402:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e406:	4b14      	ldr	r3, [pc, #80]	; (3e458 <sys_clock_driver_init+0x7c>)
   3e408:	2602      	movs	r6, #2
   3e40a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   3e40e:	2101      	movs	r1, #1
   3e410:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   3e414:	2011      	movs	r0, #17
   3e416:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   3e41a:	462a      	mov	r2, r5
   3e41c:	f7fa fb78 	bl	38b10 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   3e420:	2011      	movs	r0, #17
   3e422:	f7fa fb45 	bl	38ab0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   3e426:	4a0d      	ldr	r2, [pc, #52]	; (3e45c <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3e428:	2301      	movs	r3, #1
   3e42a:	60a3      	str	r3, [r4, #8]
   3e42c:	6023      	str	r3, [r4, #0]
   3e42e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   3e430:	4b0b      	ldr	r3, [pc, #44]	; (3e460 <sys_clock_driver_init+0x84>)
   3e432:	4a0c      	ldr	r2, [pc, #48]	; (3e464 <sys_clock_driver_init+0x88>)
   3e434:	9300      	str	r3, [sp, #0]
   3e436:	9501      	str	r5, [sp, #4]
   3e438:	2300      	movs	r3, #0
   3e43a:	4628      	mov	r0, r5
   3e43c:	f7ff ff40 	bl	3e2c0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   3e440:	4630      	mov	r0, r6
   3e442:	f7ff f8f7 	bl	3d634 <z_nrf_clock_control_lf_on>

	return 0;
}
   3e446:	4628      	mov	r0, r5
   3e448:	b002      	add	sp, #8
   3e44a:	bd70      	pop	{r4, r5, r6, pc}
   3e44c:	40011000 	.word	0x40011000
   3e450:	000f0003 	.word	0x000f0003
   3e454:	20001b18 	.word	0x20001b18
   3e458:	e000e100 	.word	0xe000e100
   3e45c:	20002df8 	.word	0x20002df8
   3e460:	0003e1d9 	.word	0x0003e1d9
   3e464:	007fffff 	.word	0x007fffff

0003e468 <rtc_nrf_isr>:
{
   3e468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   3e46c:	4c2b      	ldr	r4, [pc, #172]	; (3e51c <rtc_nrf_isr+0xb4>)
   3e46e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   3e472:	0799      	lsls	r1, r3, #30
   3e474:	d50b      	bpl.n	3e48e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e476:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3e47a:	b143      	cbz	r3, 3e48e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   3e47c:	4a28      	ldr	r2, [pc, #160]	; (3e520 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e47e:	2300      	movs	r3, #0
   3e480:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3e484:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3e488:	6813      	ldr	r3, [r2, #0]
   3e48a:	3301      	adds	r3, #1
   3e48c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3e48e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   3e492:	03da      	lsls	r2, r3, #15
   3e494:	d523      	bpl.n	3e4de <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e496:	f3bf 8f5b 	dmb	ish
   3e49a:	4b22      	ldr	r3, [pc, #136]	; (3e524 <rtc_nrf_isr+0xbc>)
   3e49c:	e853 2f00 	ldrex	r2, [r3]
   3e4a0:	f022 0101 	bic.w	r1, r2, #1
   3e4a4:	e843 1000 	strex	r0, r1, [r3]
   3e4a8:	2800      	cmp	r0, #0
   3e4aa:	d1f7      	bne.n	3e49c <rtc_nrf_isr+0x34>
   3e4ac:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   3e4b0:	07d3      	lsls	r3, r2, #31
   3e4b2:	d402      	bmi.n	3e4ba <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e4b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3e4b8:	b18b      	cbz	r3, 3e4de <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e4ba:	2500      	movs	r5, #0
   3e4bc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   3e4c0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   3e4c4:	f7ff feda 	bl	3e27c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   3e4c8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   3e4cc:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   3e4ce:	4b16      	ldr	r3, [pc, #88]	; (3e528 <rtc_nrf_isr+0xc0>)
   3e4d0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   3e4d4:	42b0      	cmp	r0, r6
   3e4d6:	41b9      	sbcs	r1, r7
   3e4d8:	d204      	bcs.n	3e4e4 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   3e4da:	f382 8810 	msr	PRIMASK, r2
}
   3e4de:	b003      	add	sp, #12
   3e4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3e4e4:	f04f 38ff 	mov.w	r8, #4294967295
   3e4e8:	f04f 39ff 	mov.w	r9, #4294967295
   3e4ec:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   3e4f0:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   3e4f4:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   3e4f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e4fa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e4fe:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   3e502:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3e506:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   3e50a:	2900      	cmp	r1, #0
   3e50c:	d0e7      	beq.n	3e4de <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   3e50e:	9000      	str	r0, [sp, #0]
   3e510:	4632      	mov	r2, r6
   3e512:	463b      	mov	r3, r7
   3e514:	4628      	mov	r0, r5
   3e516:	4788      	blx	r1
   3e518:	e7e1      	b.n	3e4de <rtc_nrf_isr+0x76>
   3e51a:	bf00      	nop
   3e51c:	40011000 	.word	0x40011000
   3e520:	20002dfc 	.word	0x20002dfc
   3e524:	20002df4 	.word	0x20002df4
   3e528:	20001b18 	.word	0x20001b18

0003e52c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   3e52c:	1c43      	adds	r3, r0, #1
{
   3e52e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   3e530:	d022      	beq.n	3e578 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   3e532:	2801      	cmp	r0, #1
   3e534:	dd22      	ble.n	3e57c <sys_clock_set_timeout+0x50>
   3e536:	4a12      	ldr	r2, [pc, #72]	; (3e580 <sys_clock_set_timeout+0x54>)
   3e538:	4b12      	ldr	r3, [pc, #72]	; (3e584 <sys_clock_set_timeout+0x58>)
   3e53a:	4290      	cmp	r0, r2
   3e53c:	bfd4      	ite	le
   3e53e:	4604      	movle	r4, r0
   3e540:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3e542:	f7ff fe9b 	bl	3e27c <z_nrf_rtc_timer_read>
   3e546:	4b10      	ldr	r3, [pc, #64]	; (3e588 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   3e548:	490e      	ldr	r1, [pc, #56]	; (3e584 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3e54e:	1a80      	subs	r0, r0, r2
		cyc = 0;
   3e550:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3e554:	bf28      	it	cs
   3e556:	2400      	movcs	r4, #0
	cyc += unannounced;
   3e558:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   3e55a:	428c      	cmp	r4, r1
   3e55c:	bf28      	it	cs
   3e55e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   3e560:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3e562:	490a      	ldr	r1, [pc, #40]	; (3e58c <sys_clock_set_timeout+0x60>)
   3e564:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   3e566:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3e56a:	9001      	str	r0, [sp, #4]
   3e56c:	f143 0300 	adc.w	r3, r3, #0
   3e570:	f7ff fea6 	bl	3e2c0 <compare_set>
}
   3e574:	b002      	add	sp, #8
   3e576:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   3e578:	4c02      	ldr	r4, [pc, #8]	; (3e584 <sys_clock_set_timeout+0x58>)
   3e57a:	e7e2      	b.n	3e542 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   3e57c:	2401      	movs	r4, #1
   3e57e:	e7e0      	b.n	3e542 <sys_clock_set_timeout+0x16>
   3e580:	007ffffe 	.word	0x007ffffe
   3e584:	007fffff 	.word	0x007fffff
   3e588:	20001b28 	.word	0x20001b28
   3e58c:	0003e1d9 	.word	0x0003e1d9

0003e590 <sys_clock_elapsed>:
{
   3e590:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   3e592:	f7ff fe73 	bl	3e27c <z_nrf_rtc_timer_read>
   3e596:	4b02      	ldr	r3, [pc, #8]	; (3e5a0 <sys_clock_elapsed+0x10>)
   3e598:	681b      	ldr	r3, [r3, #0]
}
   3e59a:	1ac0      	subs	r0, r0, r3
   3e59c:	bd08      	pop	{r3, pc}
   3e59e:	bf00      	nop
   3e5a0:	20001b28 	.word	0x20001b28

0003e5a4 <sys_clock_disable>:
{
   3e5a4:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3e5a6:	4c08      	ldr	r4, [pc, #32]	; (3e5c8 <sys_clock_disable+0x24>)
   3e5a8:	2301      	movs	r3, #1
   3e5aa:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   3e5ac:	2011      	movs	r0, #17
   3e5ae:	f7fa fa8d 	bl	38acc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   3e5b2:	4b06      	ldr	r3, [pc, #24]	; (3e5cc <sys_clock_disable+0x28>)
   3e5b4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   3e5b8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   3e5bc:	4b04      	ldr	r3, [pc, #16]	; (3e5d0 <sys_clock_disable+0x2c>)
   3e5be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3e5c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   3e5c6:	bd10      	pop	{r4, pc}
   3e5c8:	40011000 	.word	0x40011000
   3e5cc:	000f0003 	.word	0x000f0003
   3e5d0:	e000e100 	.word	0xe000e100

0003e5d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   3e5d4:	4602      	mov	r2, r0
   3e5d6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   3e5d8:	4801      	ldr	r0, [pc, #4]	; (3e5e0 <multithreading_lock_acquire+0xc>)
   3e5da:	f002 b991 	b.w	40900 <z_impl_k_mutex_lock>
   3e5de:	bf00      	nop
   3e5e0:	200009c4 	.word	0x200009c4

0003e5e4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   3e5e4:	4801      	ldr	r0, [pc, #4]	; (3e5ec <multithreading_lock_release+0x8>)
   3e5e6:	f002 ba05 	b.w	409f4 <z_impl_k_mutex_unlock>
   3e5ea:	bf00      	nop
   3e5ec:	200009c4 	.word	0x200009c4

0003e5f0 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   3e5f0:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   3e5f2:	4917      	ldr	r1, [pc, #92]	; (3e650 <hci_driver_open+0x60>)
   3e5f4:	4817      	ldr	r0, [pc, #92]	; (3e654 <hci_driver_open+0x64>)
{
   3e5f6:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   3e5f8:	f009 ff35 	bl	48466 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   3e5fc:	f000 fe9e 	bl	3f33c <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   3e600:	a803      	add	r0, sp, #12
   3e602:	f7e9 f947 	bl	27894 <sdc_build_revision_get>
   3e606:	4814      	ldr	r0, [pc, #80]	; (3e658 <hci_driver_open+0x68>)
   3e608:	f009 fd07 	bl	4801a <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   3e60c:	b1d0      	cbz	r0, 3e644 <hci_driver_open+0x54>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
   3e60e:	4a13      	ldr	r2, [pc, #76]	; (3e65c <hci_driver_open+0x6c>)
   3e610:	ca07      	ldmia	r2, {r0, r1, r2}
   3e612:	466b      	mov	r3, sp
   3e614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
   3e618:	4618      	mov	r0, r3
   3e61a:	f7e9 fae5 	bl	27be8 <sdc_rand_source_register>
	if (err) {
   3e61e:	b9a0      	cbnz	r0, 3e64a <hci_driver_open+0x5a>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
   3e620:	f04f 30ff 	mov.w	r0, #4294967295
   3e624:	f04f 31ff 	mov.w	r1, #4294967295
   3e628:	f7ff ffd4 	bl	3e5d4 <multithreading_lock_acquire>
	if (err) {
   3e62c:	4604      	mov	r4, r0
   3e62e:	b930      	cbnz	r0, 3e63e <hci_driver_open+0x4e>
		MULTITHREADING_LOCK_RELEASE();
		return -ENOTSUP;
	}
#endif

	err = sdc_enable(receive_signal_raise, sdc_mempool);
   3e630:	490b      	ldr	r1, [pc, #44]	; (3e660 <hci_driver_open+0x70>)
   3e632:	480c      	ldr	r0, [pc, #48]	; (3e664 <hci_driver_open+0x74>)
   3e634:	f7e9 f99c 	bl	27970 <sdc_enable>
	if (err) {
   3e638:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
   3e63a:	f7ff ffd3 	bl	3e5e4 <multithreading_lock_release>

	return 0;
}
   3e63e:	4620      	mov	r0, r4
   3e640:	b008      	add	sp, #32
   3e642:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3e644:	f06f 0412 	mvn.w	r4, #18
   3e648:	e7f9      	b.n	3e63e <hci_driver_open+0x4e>
		return -EINVAL;
   3e64a:	f06f 0415 	mvn.w	r4, #21
   3e64e:	e7f6      	b.n	3e63e <hci_driver_open+0x4e>
   3e650:	00047d1d 	.word	0x00047d1d
   3e654:	20002e00 	.word	0x20002e00
   3e658:	00048d14 	.word	0x00048d14
   3e65c:	00049110 	.word	0x00049110
   3e660:	20001b38 	.word	0x20001b38
   3e664:	0003e769 	.word	0x0003e769

0003e668 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   3e668:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
   3e66a:	4832      	ldr	r0, [pc, #200]	; (3e734 <hci_driver_init+0xcc>)
   3e66c:	f7fb fbc4 	bl	39df8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   3e670:	4831      	ldr	r0, [pc, #196]	; (3e738 <hci_driver_init+0xd0>)
   3e672:	f7e9 f9a7 	bl	279c4 <sdc_init>
		err = sdc_support_adv();
   3e676:	f7e9 fa1f 	bl	27ab8 <sdc_support_adv>
		if (err) {
   3e67a:	b118      	cbz	r0, 3e684 <hci_driver_init+0x1c>
			return -ENOTSUP;
   3e67c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   3e680:	b003      	add	sp, #12
   3e682:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   3e684:	f7e9 fa48 	bl	27b18 <sdc_support_peripheral>
		if (err) {
   3e688:	2800      	cmp	r0, #0
   3e68a:	d1f7      	bne.n	3e67c <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   3e68c:	f7e9 fa24 	bl	27ad8 <sdc_support_dle_peripheral>
			if (err) {
   3e690:	2800      	cmp	r0, #0
   3e692:	d1f3      	bne.n	3e67c <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   3e694:	f7e9 fa30 	bl	27af8 <sdc_support_le_2m_phy>
		if (err) {
   3e698:	2800      	cmp	r0, #0
   3e69a:	d1ef      	bne.n	3e67c <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   3e69c:	f7e9 fa4c 	bl	27b38 <sdc_support_phy_update_peripheral>
			if (err) {
   3e6a0:	4604      	mov	r4, r0
   3e6a2:	2800      	cmp	r0, #0
   3e6a4:	d1ea      	bne.n	3e67c <hci_driver_init+0x14>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   3e6a6:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6a8:	aa01      	add	r2, sp, #4
   3e6aa:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   3e6ac:	f88d 5004 	strb.w	r5, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6b0:	f7e9 f8fe 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e6b4:	2800      	cmp	r0, #0
   3e6b6:	dbe3      	blt.n	3e680 <hci_driver_init+0x18>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   3e6b8:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6ba:	aa01      	add	r2, sp, #4
   3e6bc:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   3e6be:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6c2:	f7e9 f8f5 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e6c6:	2800      	cmp	r0, #0
   3e6c8:	dbda      	blt.n	3e680 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   3e6ca:	4b1c      	ldr	r3, [pc, #112]	; (3e73c <hci_driver_init+0xd4>)
   3e6cc:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6ce:	aa01      	add	r2, sp, #4
   3e6d0:	2103      	movs	r1, #3
   3e6d2:	4620      	mov	r0, r4
   3e6d4:	f7e9 f8ec 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e6d8:	2800      	cmp	r0, #0
   3e6da:	dbd1      	blt.n	3e680 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   3e6dc:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6e0:	aa01      	add	r2, sp, #4
   3e6e2:	2104      	movs	r1, #4
   3e6e4:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   3e6e6:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6e8:	f7e9 f8e2 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e6ec:	2800      	cmp	r0, #0
   3e6ee:	dbc7      	blt.n	3e680 <hci_driver_init+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6f0:	aa01      	add	r2, sp, #4
   3e6f2:	2105      	movs	r1, #5
   3e6f4:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   3e6f6:	f88d 5004 	strb.w	r5, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e6fa:	f7e9 f8d9 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e6fe:	2800      	cmp	r0, #0
   3e700:	dbbe      	blt.n	3e680 <hci_driver_init+0x18>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   3e702:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e704:	aa01      	add	r2, sp, #4
   3e706:	2107      	movs	r1, #7
   3e708:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   3e70a:	f8ad 3004 	strh.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   3e70e:	f7e9 f8cf 	bl	278b0 <sdc_cfg_set>
	if (required_memory < 0) {
   3e712:	2800      	cmp	r0, #0
   3e714:	dbb4      	blt.n	3e680 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   3e716:	f240 73fa 	movw	r3, #2042	; 0x7fa
   3e71a:	4298      	cmp	r0, r3
   3e71c:	dd08      	ble.n	3e730 <hci_driver_init+0xc8>
		k_panic();
   3e71e:	4040      	eors	r0, r0
   3e720:	f380 8811 	msr	BASEPRI, r0
   3e724:	f04f 0004 	mov.w	r0, #4
   3e728:	df02      	svc	2
		return -ENOMEM;
   3e72a:	f06f 000b 	mvn.w	r0, #11
   3e72e:	e7a7      	b.n	3e680 <hci_driver_init+0x18>
	return 0;
   3e730:	2000      	movs	r0, #0
	if (err) {
   3e732:	e7a5      	b.n	3e680 <hci_driver_init+0x18>
   3e734:	000495ac 	.word	0x000495ac
   3e738:	00047c7b 	.word	0x00047c7b
   3e73c:	02031b1b 	.word	0x02031b1b

0003e740 <rand_prio_low_vector_get>:
{
   3e740:	b538      	push	{r3, r4, r5, lr}
   3e742:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   3e744:	4807      	ldr	r0, [pc, #28]	; (3e764 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3e746:	6883      	ldr	r3, [r0, #8]
   3e748:	685d      	ldr	r5, [r3, #4]
   3e74a:	460a      	mov	r2, r1
   3e74c:	b135      	cbz	r5, 3e75c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   3e74e:	2300      	movs	r3, #0
   3e750:	4621      	mov	r1, r4
   3e752:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   3e754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   3e758:	b2c0      	uxtb	r0, r0
   3e75a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   3e75c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3e760:	e7f8      	b.n	3e754 <rand_prio_low_vector_get+0x14>
   3e762:	bf00      	nop
   3e764:	00048d14 	.word	0x00048d14

0003e768 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   3e768:	4901      	ldr	r1, [pc, #4]	; (3e770 <receive_signal_raise+0x8>)
   3e76a:	4802      	ldr	r0, [pc, #8]	; (3e774 <receive_signal_raise+0xc>)
   3e76c:	f009 bea8 	b.w	484c0 <k_work_submit_to_queue>
   3e770:	20002e00 	.word	0x20002e00
   3e774:	200023c8 	.word	0x200023c8

0003e778 <rand_prio_low_vector_get_blocking>:
{
   3e778:	b410      	push	{r4}
   3e77a:	4603      	mov	r3, r0
   3e77c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   3e77e:	4803      	ldr	r0, [pc, #12]	; (3e78c <rand_prio_low_vector_get_blocking+0x14>)
   3e780:	6881      	ldr	r1, [r0, #8]
   3e782:	680c      	ldr	r4, [r1, #0]
   3e784:	4619      	mov	r1, r3
   3e786:	4623      	mov	r3, r4
}
   3e788:	bc10      	pop	{r4}
   3e78a:	4718      	bx	r3
   3e78c:	00048d14 	.word	0x00048d14

0003e790 <hci_driver_receive_process>:
{
   3e790:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   3e792:	f04f 30ff 	mov.w	r0, #4294967295
   3e796:	f04f 31ff 	mov.w	r1, #4294967295
   3e79a:	f7ff ff1b 	bl	3e5d4 <multithreading_lock_acquire>
	if (!errcode) {
   3e79e:	2800      	cmp	r0, #0
   3e7a0:	d145      	bne.n	3e82e <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   3e7a2:	4d24      	ldr	r5, [pc, #144]	; (3e834 <hci_driver_receive_process+0xa4>)
   3e7a4:	f10d 0107 	add.w	r1, sp, #7
   3e7a8:	4628      	mov	r0, r5
   3e7aa:	f000 fcbd 	bl	3f128 <hci_internal_msg_get>
   3e7ae:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   3e7b0:	f7ff ff18 	bl	3e5e4 <multithreading_lock_release>
	if (errcode) {
   3e7b4:	2c00      	cmp	r4, #0
   3e7b6:	d13a      	bne.n	3e82e <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   3e7b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3e7bc:	2b04      	cmp	r3, #4
   3e7be:	d126      	bne.n	3e80e <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
   3e7c0:	7828      	ldrb	r0, [r5, #0]
   3e7c2:	283e      	cmp	r0, #62	; 0x3e
   3e7c4:	d019      	beq.n	3e7fa <hci_driver_receive_process+0x6a>
   3e7c6:	28ff      	cmp	r0, #255	; 0xff
   3e7c8:	d01e      	beq.n	3e808 <hci_driver_receive_process+0x78>
		switch (subevent) {
   3e7ca:	f04f 32ff 	mov.w	r2, #4294967295
   3e7ce:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   3e7d2:	4621      	mov	r1, r4
   3e7d4:	f7fa fe3e 	bl	39454 <bt_buf_get_evt>
	if (!evt_buf) {
   3e7d8:	4604      	mov	r4, r0
   3e7da:	b148      	cbz	r0, 3e7f0 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   3e7dc:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   3e7de:	4915      	ldr	r1, [pc, #84]	; (3e834 <hci_driver_receive_process+0xa4>)
   3e7e0:	3202      	adds	r2, #2
   3e7e2:	f104 000c 	add.w	r0, r4, #12
   3e7e6:	f008 fef2 	bl	475ce <net_buf_simple_add_mem>
	bt_recv(data_buf);
   3e7ea:	4620      	mov	r0, r4
   3e7ec:	f7fb fada 	bl	39da4 <bt_recv>
}
   3e7f0:	b003      	add	sp, #12
   3e7f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
   3e7f6:	f7ff bfb7 	b.w	3e768 <receive_signal_raise>
		switch (me->subevent) {
   3e7fa:	78ab      	ldrb	r3, [r5, #2]
   3e7fc:	2b02      	cmp	r3, #2
		switch (subevent) {
   3e7fe:	d1e4      	bne.n	3e7ca <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   3e800:	2200      	movs	r2, #0
   3e802:	2300      	movs	r3, #0
			return true;
   3e804:	2401      	movs	r4, #1
   3e806:	e7e4      	b.n	3e7d2 <hci_driver_receive_process+0x42>
		switch (subevent) {
   3e808:	78ab      	ldrb	r3, [r5, #2]
   3e80a:	2b80      	cmp	r3, #128	; 0x80
   3e80c:	e7f7      	b.n	3e7fe <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   3e80e:	2b02      	cmp	r3, #2
   3e810:	d1ee      	bne.n	3e7f0 <hci_driver_receive_process+0x60>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   3e812:	f04f 32ff 	mov.w	r2, #4294967295
   3e816:	f04f 33ff 	mov.w	r3, #4294967295
   3e81a:	2003      	movs	r0, #3
   3e81c:	f7fa fdea 	bl	393f4 <bt_buf_get_rx>
	if (!data_buf) {
   3e820:	4604      	mov	r4, r0
   3e822:	2800      	cmp	r0, #0
   3e824:	d0e4      	beq.n	3e7f0 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   3e826:	886a      	ldrh	r2, [r5, #2]
   3e828:	4629      	mov	r1, r5
   3e82a:	3204      	adds	r2, #4
   3e82c:	e7d9      	b.n	3e7e2 <hci_driver_receive_process+0x52>
}
   3e82e:	b003      	add	sp, #12
   3e830:	bd30      	pop	{r4, r5, pc}
   3e832:	bf00      	nop
   3e834:	20003993 	.word	0x20003993

0003e838 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   3e838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   3e83a:	4cc7      	ldr	r4, [pc, #796]	; (3eb58 <hci_internal_cmd_put+0x320>)
   3e83c:	8806      	ldrh	r6, [r0, #0]
   3e83e:	7823      	ldrb	r3, [r4, #0]
{
   3e840:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   3e842:	2b00      	cmp	r3, #0
   3e844:	f040 8468 	bne.w	3f118 <hci_internal_cmd_put+0x8e0>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   3e848:	2304      	movs	r3, #4
   3e84a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   3e84e:	4bc3      	ldr	r3, [pc, #780]	; (3eb5c <hci_internal_cmd_put+0x324>)
   3e850:	681f      	ldr	r7, [r3, #0]
   3e852:	b1bf      	cbz	r7, 3e884 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   3e854:	f10d 0306 	add.w	r3, sp, #6
   3e858:	f10d 0207 	add.w	r2, sp, #7
   3e85c:	1c61      	adds	r1, r4, #1
   3e85e:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   3e860:	2801      	cmp	r0, #1
   3e862:	d00f      	beq.n	3e884 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   3e864:	f89d 3006 	ldrb.w	r3, [sp, #6]
   3e868:	2b00      	cmp	r3, #0
   3e86a:	f040 8431 	bne.w	3f0d0 <hci_internal_cmd_put+0x898>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   3e86e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   3e872:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3e874:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   3e876:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3e878:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   3e87a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   3e87c:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   3e87e:	71a0      	strb	r0, [r4, #6]
}
   3e880:	f000 bc2f 	b.w	3f0e2 <hci_internal_cmd_put+0x8aa>
		switch (BT_OGF(opcode)) {
   3e884:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   3e888:	ea4f 2396 	mov.w	r3, r6, lsr #10
   3e88c:	d20f      	bcs.n	3e8ae <hci_internal_cmd_put+0x76>
   3e88e:	2b00      	cmp	r3, #0
   3e890:	d079      	beq.n	3e986 <hci_internal_cmd_put+0x14e>
   3e892:	3b01      	subs	r3, #1
   3e894:	2b07      	cmp	r3, #7
   3e896:	f200 8411 	bhi.w	3f0bc <hci_internal_cmd_put+0x884>
   3e89a:	e8df f013 	tbh	[pc, r3, lsl #1]
   3e89e:	000d      	.short	0x000d
   3e8a0:	003f040f 	.word	0x003f040f
   3e8a4:	040f008e 	.word	0x040f008e
   3e8a8:	040f040f 	.word	0x040f040f
   3e8ac:	0163      	.short	0x0163
   3e8ae:	2b3f      	cmp	r3, #63	; 0x3f
   3e8b0:	f000 8339 	beq.w	3ef26 <hci_internal_cmd_put+0x6ee>
	switch (opcode)	{
   3e8b4:	2001      	movs	r0, #1
   3e8b6:	e391      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
	return ((uint16_t)src[1] << 8) | src[0];
   3e8b8:	4628      	mov	r0, r5
	switch (opcode)	{
   3e8ba:	f240 4206 	movw	r2, #1030	; 0x406
   3e8be:	f930 3b03 	ldrsh.w	r3, [r0], #3
   3e8c2:	4293      	cmp	r3, r2
   3e8c4:	d010      	beq.n	3e8e8 <hci_internal_cmd_put+0xb0>
   3e8c6:	f240 421d 	movw	r2, #1053	; 0x41d
   3e8ca:	4293      	cmp	r3, r2
   3e8cc:	d023      	beq.n	3e916 <hci_internal_cmd_put+0xde>
   3e8ce:	2001      	movs	r0, #1
	switch (hci_opcode) {
   3e8d0:	f240 4306 	movw	r3, #1030	; 0x406
   3e8d4:	429e      	cmp	r6, r3
   3e8d6:	f040 83eb 	bne.w	3f0b0 <hci_internal_cmd_put+0x878>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3e8da:	230f      	movs	r3, #15
   3e8dc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3e8de:	2304      	movs	r3, #4
   3e8e0:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3e8e2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   3e8e4:	2301      	movs	r3, #1
   3e8e6:	e033      	b.n	3e950 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   3e8e8:	f7f5 fa24 	bl	33d34 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   3e8ec:	f242 0332 	movw	r3, #8242	; 0x2032
   3e8f0:	429e      	cmp	r6, r3
   3e8f2:	f240 83d5 	bls.w	3f0a0 <hci_internal_cmd_put+0x868>
   3e8f6:	f242 0385 	movw	r3, #8325	; 0x2085
   3e8fa:	429e      	cmp	r6, r3
   3e8fc:	d840      	bhi.n	3e980 <hci_internal_cmd_put+0x148>
   3e8fe:	f242 036c 	movw	r3, #8300	; 0x206c
   3e902:	429e      	cmp	r6, r3
   3e904:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   3e908:	f200 83da 	bhi.w	3f0c0 <hci_internal_cmd_put+0x888>
   3e90c:	3b03      	subs	r3, #3
   3e90e:	b29b      	uxth	r3, r3
   3e910:	2b01      	cmp	r3, #1
   3e912:	d835      	bhi.n	3e980 <hci_internal_cmd_put+0x148>
   3e914:	e7e1      	b.n	3e8da <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   3e916:	f7f5 fa0f 	bl	33d38 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   3e91a:	e7e7      	b.n	3e8ec <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3e91c:	4628      	mov	r0, r5
	switch (opcode)	{
   3e91e:	f640 4263 	movw	r2, #3171	; 0xc63
   3e922:	f930 3b03 	ldrsh.w	r3, [r0], #3
   3e926:	4293      	cmp	r3, r2
   3e928:	d03b      	beq.n	3e9a2 <hci_internal_cmd_put+0x16a>
   3e92a:	dc16      	bgt.n	3e95a <hci_internal_cmd_put+0x122>
   3e92c:	f640 4203 	movw	r2, #3075	; 0xc03
   3e930:	4293      	cmp	r3, r2
   3e932:	d02a      	beq.n	3e98a <hci_internal_cmd_put+0x152>
   3e934:	f640 422d 	movw	r2, #3117	; 0xc2d
   3e938:	4293      	cmp	r3, r2
   3e93a:	d029      	beq.n	3e990 <hci_internal_cmd_put+0x158>
   3e93c:	f640 4201 	movw	r2, #3073	; 0xc01
   3e940:	4293      	cmp	r3, r2
   3e942:	d01b      	beq.n	3e97c <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3e944:	230f      	movs	r3, #15
   3e946:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3e948:	2304      	movs	r3, #4
   3e94a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3e94c:	2301      	movs	r3, #1
   3e94e:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   3e950:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   3e952:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   3e956:	7023      	strb	r3, [r4, #0]
   3e958:	e0d5      	b.n	3eb06 <hci_internal_cmd_put+0x2ce>
	switch (opcode)	{
   3e95a:	f640 427b 	movw	r2, #3195	; 0xc7b
   3e95e:	4293      	cmp	r3, r2
   3e960:	d022      	beq.n	3e9a8 <hci_internal_cmd_put+0x170>
   3e962:	f640 427c 	movw	r2, #3196	; 0xc7c
   3e966:	4293      	cmp	r3, r2
   3e968:	d1ec      	bne.n	3e944 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   3e96a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   3e96e:	497c      	ldr	r1, [pc, #496]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   3e970:	3302      	adds	r3, #2
   3e972:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   3e976:	f7f5 f96b 	bl	33c50 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   3e97a:	e001      	b.n	3e980 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   3e97c:	f7f5 f95e 	bl	33c3c <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   3e980:	2801      	cmp	r0, #1
   3e982:	f47f af74 	bne.w	3e86e <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   3e986:	2001      	movs	r0, #1
   3e988:	e3a2      	b.n	3f0d0 <hci_internal_cmd_put+0x898>
		return sdc_hci_cmd_cb_reset();
   3e98a:	f7e9 fa2d 	bl	27de8 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   3e98e:	e7f7      	b.n	3e980 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   3e990:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   3e994:	4972      	ldr	r1, [pc, #456]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   3e996:	3303      	adds	r3, #3
   3e998:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   3e99c:	f7f5 f94c 	bl	33c38 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   3e9a0:	e7ee      	b.n	3e980 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   3e9a2:	f7f5 f950 	bl	33c46 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   3e9a6:	e7eb      	b.n	3e980 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   3e9a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   3e9ac:	496c      	ldr	r1, [pc, #432]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   3e9ae:	3304      	adds	r3, #4
   3e9b0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   3e9b4:	f7f5 f93e 	bl	33c34 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   3e9b8:	e7e2      	b.n	3e980 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   3e9ba:	882b      	ldrh	r3, [r5, #0]
   3e9bc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   3e9c0:	3b01      	subs	r3, #1
   3e9c2:	2b08      	cmp	r3, #8
   3e9c4:	d8be      	bhi.n	3e944 <hci_internal_cmd_put+0x10c>
   3e9c6:	a201      	add	r2, pc, #4	; (adr r2, 3e9cc <hci_internal_cmd_put+0x194>)
   3e9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3e9cc:	0003e9f1 	.word	0x0003e9f1
   3e9d0:	0003ea03 	.word	0x0003ea03
   3e9d4:	0003eb0d 	.word	0x0003eb0d
   3e9d8:	0003e945 	.word	0x0003e945
   3e9dc:	0003e945 	.word	0x0003e945
   3e9e0:	0003e945 	.word	0x0003e945
   3e9e4:	0003e945 	.word	0x0003e945
   3e9e8:	0003e945 	.word	0x0003e945
   3e9ec:	0003eb45 	.word	0x0003eb45
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   3e9f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   3e9f4:	485a      	ldr	r0, [pc, #360]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   3e9f6:	3308      	adds	r3, #8
   3e9f8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   3e9fc:	f7f5 f95b 	bl	33cb6 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   3ea00:	e7be      	b.n	3e980 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   3ea02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3ea06:	4d56      	ldr	r5, [pc, #344]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   3ea08:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   3ea0a:	2230      	movs	r2, #48	; 0x30
   3ea0c:	2100      	movs	r1, #0
   3ea0e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   3ea10:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3ea14:	f006 fe87 	bl	45726 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   3ea18:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   3ea1c:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   3ea1e:	2300      	movs	r3, #0
   3ea20:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   3ea22:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   3ea24:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   3ea26:	f043 0320 	orr.w	r3, r3, #32
   3ea2a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   3ea2c:	7a63      	ldrb	r3, [r4, #9]
   3ea2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3ea32:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   3ea34:	7b23      	ldrb	r3, [r4, #12]
   3ea36:	f063 033f 	orn	r3, r3, #63	; 0x3f
   3ea3a:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   3ea3c:	7c63      	ldrb	r3, [r4, #17]
   3ea3e:	f043 0304 	orr.w	r3, r3, #4
   3ea42:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   3ea44:	7d63      	ldrb	r3, [r4, #21]
   3ea46:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   3ea4a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   3ea4e:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   3ea50:	7da3      	ldrb	r3, [r4, #22]
   3ea52:	f043 0302 	orr.w	r3, r3, #2
   3ea56:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   3ea58:	7f63      	ldrb	r3, [r4, #29]
   3ea5a:	f043 0304 	orr.w	r3, r3, #4
   3ea5e:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   3ea60:	f894 3020 	ldrb.w	r3, [r4, #32]
   3ea64:	f063 0308 	orn	r3, r3, #8
   3ea68:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   3ea6c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   3ea70:	f063 033c 	orn	r3, r3, #60	; 0x3c
   3ea74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   3ea78:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   3ea7c:	f063 030c 	orn	r3, r3, #12
   3ea80:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   3ea84:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   3ea88:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   3ea8c:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   3ea90:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   3ea94:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   3ea98:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   3ea9c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   3eaa0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   3eaa4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3eaa8:	220e      	movs	r2, #14
   3eaaa:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   3eaac:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   3eab0:	2201      	movs	r2, #1
   3eab2:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   3eab4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   3eab8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   3eabc:	f023 0307 	bic.w	r3, r3, #7
   3eac0:	f043 0307 	orr.w	r3, r3, #7
   3eac4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   3eac8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   3eacc:	f063 0307 	orn	r3, r3, #7
   3ead0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   3ead4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   3ead8:	4313      	orrs	r3, r2
   3eada:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   3eade:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   3eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3eae6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   3eaea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   3eaee:	f043 0304 	orr.w	r3, r3, #4
   3eaf2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   3eaf6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   3eafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3eafe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   3eb02:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   3eb06:	2000      	movs	r0, #0
}
   3eb08:	b003      	add	sp, #12
   3eb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   3eb0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   3eb10:	4d13      	ldr	r5, [pc, #76]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   3eb12:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   3eb14:	2208      	movs	r2, #8
   3eb16:	2100      	movs	r1, #0
   3eb18:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   3eb1a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   3eb1e:	f006 fe02 	bl	45726 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   3eb22:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   3eb26:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   3eb28:	2300      	movs	r3, #0
   3eb2a:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   3eb2c:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   3eb2e:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3eb30:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   3eb32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   3eb36:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   3eb38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   3eb3c:	2201      	movs	r2, #1
   3eb3e:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   3eb40:	72e3      	strb	r3, [r4, #11]
   3eb42:	e7de      	b.n	3eb02 <hci_internal_cmd_put+0x2ca>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   3eb44:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   3eb48:	4805      	ldr	r0, [pc, #20]	; (3eb60 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   3eb4a:	3306      	adds	r3, #6
   3eb4c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   3eb50:	f7f5 f8af 	bl	33cb2 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   3eb54:	e714      	b.n	3e980 <hci_internal_cmd_put+0x148>
   3eb56:	bf00      	nop
   3eb58:	200039d9 	.word	0x200039d9
   3eb5c:	20002e10 	.word	0x20002e10
   3eb60:	200039e0 	.word	0x200039e0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3eb64:	4628      	mov	r0, r5
	switch (opcode)	{
   3eb66:	f242 014b 	movw	r1, #8267	; 0x204b
   3eb6a:	f830 3b03 	ldrh.w	r3, [r0], #3
   3eb6e:	b21a      	sxth	r2, r3
   3eb70:	428a      	cmp	r2, r1
   3eb72:	f300 80bf 	bgt.w	3ecf4 <hci_internal_cmd_put+0x4bc>
   3eb76:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   3eb7a:	f242 0232 	movw	r2, #8242	; 0x2032
   3eb7e:	dc1a      	bgt.n	3ebb6 <hci_internal_cmd_put+0x37e>
	switch (hci_opcode) {
   3eb80:	4296      	cmp	r6, r2
   3eb82:	f000 80c4 	beq.w	3ed0e <hci_internal_cmd_put+0x4d6>
   3eb86:	f200 82bf 	bhi.w	3f108 <hci_internal_cmd_put+0x8d0>
   3eb8a:	f242 0326 	movw	r3, #8230	; 0x2026
   3eb8e:	429e      	cmp	r6, r3
   3eb90:	f63f aef9 	bhi.w	3e986 <hci_internal_cmd_put+0x14e>
   3eb94:	2001      	movs	r0, #1
   3eb96:	f242 030c 	movw	r3, #8204	; 0x200c
   3eb9a:	429e      	cmp	r6, r3
   3eb9c:	f67f ae98 	bls.w	3e8d0 <hci_internal_cmd_put+0x98>
   3eba0:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   3eba4:	4ad9      	ldr	r2, [pc, #868]	; (3ef0c <hci_internal_cmd_put+0x6d4>)
   3eba6:	3b0d      	subs	r3, #13
   3eba8:	b29b      	uxth	r3, r3
   3ebaa:	fa22 f303 	lsr.w	r3, r2, r3
   3ebae:	07db      	lsls	r3, r3, #31
   3ebb0:	f57f aee6 	bpl.w	3e980 <hci_internal_cmd_put+0x148>
   3ebb4:	e691      	b.n	3e8da <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   3ebb6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   3ebba:	3b01      	subs	r3, #1
   3ebbc:	2b4a      	cmp	r3, #74	; 0x4a
   3ebbe:	d8df      	bhi.n	3eb80 <hci_internal_cmd_put+0x348>
   3ebc0:	a101      	add	r1, pc, #4	; (adr r1, 3ebc8 <hci_internal_cmd_put+0x390>)
   3ebc2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3ebc6:	bf00      	nop
   3ebc8:	0003ed27 	.word	0x0003ed27
   3ebcc:	0003ed41 	.word	0x0003ed41
   3ebd0:	0003ed53 	.word	0x0003ed53
   3ebd4:	0003eb81 	.word	0x0003eb81
   3ebd8:	0003edb9 	.word	0x0003edb9
   3ebdc:	0003edbf 	.word	0x0003edbf
   3ebe0:	0003edc5 	.word	0x0003edc5
   3ebe4:	0003edd7 	.word	0x0003edd7
   3ebe8:	0003eddd 	.word	0x0003eddd
   3ebec:	0003ede3 	.word	0x0003ede3
   3ebf0:	0003eb81 	.word	0x0003eb81
   3ebf4:	0003eb81 	.word	0x0003eb81
   3ebf8:	0003eb81 	.word	0x0003eb81
   3ebfc:	0003eb81 	.word	0x0003eb81
   3ec00:	0003edef 	.word	0x0003edef
   3ec04:	0003ee01 	.word	0x0003ee01
   3ec08:	0003ee07 	.word	0x0003ee07
   3ec0c:	0003ee0d 	.word	0x0003ee0d
   3ec10:	0003eb81 	.word	0x0003eb81
   3ec14:	0003eb81 	.word	0x0003eb81
   3ec18:	0003ee13 	.word	0x0003ee13
   3ec1c:	0003ee25 	.word	0x0003ee25
   3ec20:	0003ee2b 	.word	0x0003ee2b
   3ec24:	0003ee3d 	.word	0x0003ee3d
   3ec28:	0003eb81 	.word	0x0003eb81
   3ec2c:	0003ee4f 	.word	0x0003ee4f
   3ec30:	0003ee61 	.word	0x0003ee61
   3ec34:	0003ee73 	.word	0x0003ee73
   3ec38:	0003eb81 	.word	0x0003eb81
   3ec3c:	0003eb81 	.word	0x0003eb81
   3ec40:	0003eb81 	.word	0x0003eb81
   3ec44:	0003eb81 	.word	0x0003eb81
   3ec48:	0003eb81 	.word	0x0003eb81
   3ec4c:	0003ee9f 	.word	0x0003ee9f
   3ec50:	0003eeb1 	.word	0x0003eeb1
   3ec54:	0003eec3 	.word	0x0003eec3
   3ec58:	0003eec9 	.word	0x0003eec9
   3ec5c:	0003eecf 	.word	0x0003eecf
   3ec60:	0003eb81 	.word	0x0003eb81
   3ec64:	0003eb81 	.word	0x0003eb81
   3ec68:	0003eb81 	.word	0x0003eb81
   3ec6c:	0003eb81 	.word	0x0003eb81
   3ec70:	0003eb81 	.word	0x0003eb81
   3ec74:	0003eb81 	.word	0x0003eb81
   3ec78:	0003eb81 	.word	0x0003eb81
   3ec7c:	0003eb81 	.word	0x0003eb81
   3ec80:	0003eedb 	.word	0x0003eedb
   3ec84:	0003eeed 	.word	0x0003eeed
   3ec88:	0003eeff 	.word	0x0003eeff
   3ec8c:	0003ef05 	.word	0x0003ef05
   3ec90:	0003eb81 	.word	0x0003eb81
   3ec94:	0003eb81 	.word	0x0003eb81
   3ec98:	0003eb81 	.word	0x0003eb81
   3ec9c:	0003eb81 	.word	0x0003eb81
   3eca0:	0003eb81 	.word	0x0003eb81
   3eca4:	0003eb81 	.word	0x0003eb81
   3eca8:	0003eb81 	.word	0x0003eb81
   3ecac:	0003eb81 	.word	0x0003eb81
   3ecb0:	0003eb81 	.word	0x0003eb81
   3ecb4:	0003eb81 	.word	0x0003eb81
   3ecb8:	0003eb81 	.word	0x0003eb81
   3ecbc:	0003eb81 	.word	0x0003eb81
   3ecc0:	0003eb81 	.word	0x0003eb81
   3ecc4:	0003eb81 	.word	0x0003eb81
   3ecc8:	0003eb81 	.word	0x0003eb81
   3eccc:	0003eb81 	.word	0x0003eb81
   3ecd0:	0003eb81 	.word	0x0003eb81
   3ecd4:	0003eb81 	.word	0x0003eb81
   3ecd8:	0003eb81 	.word	0x0003eb81
   3ecdc:	0003eb81 	.word	0x0003eb81
   3ece0:	0003eb81 	.word	0x0003eb81
   3ece4:	0003eb81 	.word	0x0003eb81
   3ece8:	0003eb81 	.word	0x0003eb81
   3ecec:	0003eb81 	.word	0x0003eb81
   3ecf0:	0003ef15 	.word	0x0003ef15
   3ecf4:	f242 035e 	movw	r3, #8286	; 0x205e
   3ecf8:	429a      	cmp	r2, r3
   3ecfa:	f000 80eb 	beq.w	3eed4 <hci_internal_cmd_put+0x69c>
   3ecfe:	f242 037c 	movw	r3, #8316	; 0x207c
   3ed02:	429a      	cmp	r2, r3
   3ed04:	d070      	beq.n	3ede8 <hci_internal_cmd_put+0x5b0>
	switch (hci_opcode) {
   3ed06:	f242 0332 	movw	r3, #8242	; 0x2032
   3ed0a:	429e      	cmp	r6, r3
   3ed0c:	e739      	b.n	3eb82 <hci_internal_cmd_put+0x34a>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3ed0e:	230f      	movs	r3, #15
   3ed10:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3ed12:	2304      	movs	r3, #4
   3ed14:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3ed16:	2301      	movs	r3, #1
   3ed18:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   3ed1a:	2232      	movs	r2, #50	; 0x32
   3ed1c:	7162      	strb	r2, [r4, #5]
   3ed1e:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   3ed20:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   3ed22:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   3ed24:	e617      	b.n	3e956 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   3ed26:	f7f4 fff8 	bl	33d1a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   3ed2a:	f242 0332 	movw	r3, #8242	; 0x2032
   3ed2e:	429e      	cmp	r6, r3
   3ed30:	f47f addc 	bne.w	3e8ec <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3ed34:	230f      	movs	r3, #15
   3ed36:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3ed38:	2304      	movs	r3, #4
   3ed3a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3ed3c:	70e0      	strb	r0, [r4, #3]
   3ed3e:	e0ac      	b.n	3ee9a <hci_internal_cmd_put+0x662>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   3ed40:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   3ed44:	4872      	ldr	r0, [pc, #456]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   3ed46:	3303      	adds	r3, #3
   3ed48:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   3ed4c:	f7f4 ffc7 	bl	33cde <sdc_hci_cmd_le_read_buffer_size>
   3ed50:	e7eb      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   3ed52:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   3ed56:	4d6e      	ldr	r5, [pc, #440]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   3ed58:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   3ed5a:	2208      	movs	r2, #8
   3ed5c:	2100      	movs	r1, #0
   3ed5e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   3ed60:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   3ed64:	f006 fcdf 	bl	45726 <memset>
	features->params.le_encryption = 1;
   3ed68:	79e3      	ldrb	r3, [r4, #7]
   3ed6a:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   3ed6e:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   3ed72:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   3ed74:	7a23      	ldrb	r3, [r4, #8]
   3ed76:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   3ed7a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   3ed7e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   3ed80:	f242 0332 	movw	r3, #8242	; 0x2032
   3ed84:	429e      	cmp	r6, r3
   3ed86:	d008      	beq.n	3ed9a <hci_internal_cmd_put+0x562>
   3ed88:	f200 81b8 	bhi.w	3f0fc <hci_internal_cmd_put+0x8c4>
   3ed8c:	f242 0326 	movw	r3, #8230	; 0x2026
   3ed90:	429e      	cmp	r6, r3
   3ed92:	f240 818b 	bls.w	3f0ac <hci_internal_cmd_put+0x874>
		return 0;
   3ed96:	2000      	movs	r0, #0
   3ed98:	e569      	b.n	3e86e <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3ed9a:	230f      	movs	r3, #15
   3ed9c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3ed9e:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   3eda0:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3eda2:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3eda4:	2300      	movs	r3, #0
   3eda6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   3eda8:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   3edaa:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   3edac:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   3edae:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   3edb0:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   3edb2:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   3edb6:	e6a6      	b.n	3eb06 <hci_internal_cmd_put+0x2ce>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   3edb8:	f7f4 ffb6 	bl	33d28 <sdc_hci_cmd_le_set_random_address>
   3edbc:	e7b5      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   3edbe:	f7f4 ffa4 	bl	33d0a <sdc_hci_cmd_le_set_adv_params>
   3edc2:	e7b2      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   3edc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   3edc8:	4851      	ldr	r0, [pc, #324]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   3edca:	3301      	adds	r3, #1
   3edcc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   3edd0:	f7f4 ff83 	bl	33cda <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   3edd4:	e7a9      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   3edd6:	f7f4 ff94 	bl	33d02 <sdc_hci_cmd_le_set_adv_data>
   3edda:	e7a6      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   3eddc:	f7f4 ffa6 	bl	33d2c <sdc_hci_cmd_le_set_scan_response_data>
   3ede0:	e7a3      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   3ede2:	f7f4 ff90 	bl	33d06 <sdc_hci_cmd_le_set_adv_enable>
   3ede6:	e7a0      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   3ede8:	f7f4 ff93 	bl	33d12 <sdc_hci_cmd_le_set_data_related_address_changes>
   3edec:	e79d      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   3edee:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   3edf2:	4847      	ldr	r0, [pc, #284]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   3edf4:	3301      	adds	r3, #1
   3edf6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   3edfa:	f7f4 ff74 	bl	33ce6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   3edfe:	e794      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   3ee00:	f7f4 ff5d 	bl	33cbe <sdc_hci_cmd_le_clear_filter_accept_list>
   3ee04:	e791      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   3ee06:	f7f4 ff58 	bl	33cba <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   3ee0a:	e78e      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   3ee0c:	f7f4 ff77 	bl	33cfe <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   3ee10:	e78b      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   3ee12:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   3ee16:	493e      	ldr	r1, [pc, #248]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   3ee18:	3307      	adds	r3, #7
   3ee1a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   3ee1e:	f7f4 ff60 	bl	33ce2 <sdc_hci_cmd_le_read_channel_map>
   3ee22:	e782      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   3ee24:	f7f4 ff65 	bl	33cf2 <sdc_hci_cmd_le_read_remote_features>
   3ee28:	e77f      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   3ee2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   3ee2e:	4938      	ldr	r1, [pc, #224]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   3ee30:	3310      	adds	r3, #16
   3ee32:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   3ee36:	f7f4 ff44 	bl	33cc2 <sdc_hci_cmd_le_encrypt>
   3ee3a:	e776      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3ee3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   3ee40:	4833      	ldr	r0, [pc, #204]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   3ee42:	3308      	adds	r3, #8
   3ee44:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   3ee48:	f7f4 ff45 	bl	33cd6 <sdc_hci_cmd_le_rand>
   3ee4c:	e76d      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   3ee4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   3ee52:	492f      	ldr	r1, [pc, #188]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   3ee54:	3302      	adds	r3, #2
   3ee56:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   3ee5a:	f7f4 ff38 	bl	33cce <sdc_hci_cmd_le_long_term_key_request_reply>
   3ee5e:	e764      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   3ee60:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   3ee64:	492a      	ldr	r1, [pc, #168]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   3ee66:	3302      	adds	r3, #2
   3ee68:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   3ee6c:	f7f4 ff2b 	bl	33cc6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   3ee70:	e75b      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   3ee72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3ee76:	3308      	adds	r3, #8
   3ee78:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   3ee7c:	238f      	movs	r3, #143	; 0x8f
   3ee7e:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   3ee80:	23c0      	movs	r3, #192	; 0xc0
   3ee82:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   3ee84:	f242 0332 	movw	r3, #8242	; 0x2032
   3ee88:	429e      	cmp	r6, r3
   3ee8a:	f47f af7d 	bne.w	3ed88 <hci_internal_cmd_put+0x550>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3ee8e:	230f      	movs	r3, #15
   3ee90:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3ee92:	2304      	movs	r3, #4
   3ee94:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   3ee96:	2300      	movs	r3, #0
   3ee98:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   3ee9a:	2301      	movs	r3, #1
   3ee9c:	e73d      	b.n	3ed1a <hci_internal_cmd_put+0x4e2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   3ee9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3eea2:	491b      	ldr	r1, [pc, #108]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   3eea4:	3302      	adds	r3, #2
   3eea6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   3eeaa:	f7f4 ff30 	bl	33d0e <sdc_hci_cmd_le_set_data_length>
   3eeae:	e73c      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   3eeb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   3eeb4:	4816      	ldr	r0, [pc, #88]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   3eeb6:	3304      	adds	r3, #4
   3eeb8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   3eebc:	f7f4 ff1b 	bl	33cf6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   3eec0:	e733      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   3eec2:	f7f4 ff35 	bl	33d30 <sdc_hci_cmd_le_write_suggested_default_data_length>
   3eec6:	e730      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_read_local_p256_public_key();
   3eec8:	f000 fa68 	bl	3f39c <hci_cmd_le_read_local_p256_public_key>
   3eecc:	e72d      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   3eece:	f008 ff31 	bl	47d34 <hci_cmd_le_generate_dhkey>
   3eed2:	e72a      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   3eed4:	f008 ff31 	bl	47d3a <hci_cmd_le_generate_dhkey_v2>
   3eed8:	e727      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   3eeda:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   3eede:	480c      	ldr	r0, [pc, #48]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   3eee0:	3308      	adds	r3, #8
   3eee2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   3eee6:	f7f4 ff00 	bl	33cea <sdc_hci_cmd_le_read_max_data_length>
   3eeea:	e71e      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   3eeec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   3eef0:	4907      	ldr	r1, [pc, #28]	; (3ef10 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   3eef2:	3304      	adds	r3, #4
   3eef4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   3eef8:	f7f4 fef9 	bl	33cee <sdc_hci_cmd_le_read_phy>
   3eefc:	e715      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   3eefe:	f7f4 ff0a 	bl	33d16 <sdc_hci_cmd_le_set_default_phy>
   3ef02:	e712      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   3ef04:	f7f4 ff0e 	bl	33d24 <sdc_hci_cmd_le_set_phy>
   3ef08:	e70f      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
   3ef0a:	bf00      	nop
   3ef0c:	03001241 	.word	0x03001241
   3ef10:	200039e0 	.word	0x200039e0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   3ef14:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   3ef18:	4881      	ldr	r0, [pc, #516]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   3ef1a:	3302      	adds	r3, #2
   3ef1c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   3ef20:	f7f4 feeb 	bl	33cfa <sdc_hci_cmd_le_read_transmit_power>
   3ef24:	e701      	b.n	3ed2a <hci_internal_cmd_put+0x4f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   3ef26:	4628      	mov	r0, r5
	switch (opcode)	{
   3ef28:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   3ef2c:	f830 3b03 	ldrh.w	r3, [r0], #3
   3ef30:	4293      	cmp	r3, r2
   3ef32:	d823      	bhi.n	3ef7c <hci_internal_cmd_put+0x744>
   3ef34:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   3ef38:	f67f acbc 	bls.w	3e8b4 <hci_internal_cmd_put+0x7c>
   3ef3c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   3ef40:	3b01      	subs	r3, #1
   3ef42:	2b0a      	cmp	r3, #10
   3ef44:	f63f acb6 	bhi.w	3e8b4 <hci_internal_cmd_put+0x7c>
   3ef48:	a201      	add	r2, pc, #4	; (adr r2, 3ef50 <hci_internal_cmd_put+0x718>)
   3ef4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3ef4e:	bf00      	nop
   3ef50:	0003efcd 	.word	0x0003efcd
   3ef54:	0003efe9 	.word	0x0003efe9
   3ef58:	0003e8b5 	.word	0x0003e8b5
   3ef5c:	0003e8b5 	.word	0x0003e8b5
   3ef60:	0003e8b5 	.word	0x0003e8b5
   3ef64:	0003f03d 	.word	0x0003f03d
   3ef68:	0003e8b5 	.word	0x0003e8b5
   3ef6c:	0003e8b5 	.word	0x0003e8b5
   3ef70:	0003f019 	.word	0x0003f019
   3ef74:	0003f02b 	.word	0x0003f02b
   3ef78:	0003f043 	.word	0x0003f043
   3ef7c:	f503 7240 	add.w	r2, r3, #768	; 0x300
   3ef80:	b292      	uxth	r2, r2
   3ef82:	2a0c      	cmp	r2, #12
   3ef84:	f63f ac96 	bhi.w	3e8b4 <hci_internal_cmd_put+0x7c>
   3ef88:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   3ef8c:	2b0c      	cmp	r3, #12
   3ef8e:	f63f ac91 	bhi.w	3e8b4 <hci_internal_cmd_put+0x7c>
   3ef92:	a201      	add	r2, pc, #4	; (adr r2, 3ef98 <hci_internal_cmd_put+0x760>)
   3ef94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3ef98:	0003f055 	.word	0x0003f055
   3ef9c:	0003f077 	.word	0x0003f077
   3efa0:	0003f07d 	.word	0x0003f07d
   3efa4:	0003f083 	.word	0x0003f083
   3efa8:	0003f089 	.word	0x0003f089
   3efac:	0003f08f 	.word	0x0003f08f
   3efb0:	0003e8b5 	.word	0x0003e8b5
   3efb4:	0003e8b5 	.word	0x0003e8b5
   3efb8:	0003e8b5 	.word	0x0003e8b5
   3efbc:	0003f095 	.word	0x0003f095
   3efc0:	0003e8b5 	.word	0x0003e8b5
   3efc4:	0003e8b5 	.word	0x0003e8b5
   3efc8:	0003f09b 	.word	0x0003f09b
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   3efcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   3efd0:	4853      	ldr	r0, [pc, #332]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   3efd2:	330c      	adds	r3, #12
   3efd4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   3efd8:	f7e8 ffae 	bl	27f38 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   3efdc:	f026 0308 	bic.w	r3, r6, #8
   3efe0:	f64f 5202 	movw	r2, #64770	; 0xfd02
   3efe4:	4293      	cmp	r3, r2
   3efe6:	e066      	b.n	3f0b6 <hci_internal_cmd_put+0x87e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   3efe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3efec:	484c      	ldr	r0, [pc, #304]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   3efee:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   3eff0:	2202      	movs	r2, #2
   3eff2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   3eff4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3eff8:	f006 fb95 	bl	45726 <memset>
	cmds->read_version_info = 1;
   3effc:	79e3      	ldrb	r3, [r4, #7]
   3effe:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   3f002:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   3f006:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   3f008:	7a23      	ldrb	r3, [r4, #8]
   3f00a:	f023 0307 	bic.w	r3, r3, #7
   3f00e:	f043 0307 	orr.w	r3, r3, #7
   3f012:	7223      	strb	r3, [r4, #8]
		return 0;
   3f014:	2000      	movs	r0, #0
   3f016:	e7e1      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   3f018:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   3f01c:	4840      	ldr	r0, [pc, #256]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   3f01e:	3317      	adds	r3, #23
   3f020:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   3f024:	f7e8 ff3c 	bl	27ea0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   3f028:	e7d8      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		*param_length_out +=
   3f02a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   3f02e:	483c      	ldr	r0, [pc, #240]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out +=
   3f030:	3320      	adds	r3, #32
   3f032:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   3f036:	f7e8 feeb 	bl	27e10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   3f03a:	e7cf      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   3f03c:	f7f4 fe37 	bl	33cae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   3f040:	e7cc      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   3f042:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   3f046:	4836      	ldr	r0, [pc, #216]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   3f048:	3301      	adds	r3, #1
   3f04a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   3f04e:	f7f4 fe1a 	bl	33c86 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   3f052:	e7c3      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   3f054:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3f058:	4831      	ldr	r0, [pc, #196]	; (3f120 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   3f05a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   3f05c:	2202      	movs	r2, #2
   3f05e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   3f060:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   3f064:	f006 fb5f 	bl	45726 <memset>
	cmds->read_supported_vs_commands = 1;
   3f068:	79e3      	ldrb	r3, [r4, #7]
   3f06a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   3f06e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   3f072:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   3f074:	e7ce      	b.n	3f014 <hci_internal_cmd_put+0x7dc>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   3f076:	f7f4 fdf9 	bl	33c6c <sdc_hci_cmd_vs_llpm_mode_set>
   3f07a:	e7af      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   3f07c:	f7f4 fdf2 	bl	33c64 <sdc_hci_cmd_vs_conn_update>
   3f080:	e7ac      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   3f082:	f7f4 fde7 	bl	33c54 <sdc_hci_cmd_vs_conn_event_extend>
   3f086:	e7a9      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   3f088:	f7f4 fdf6 	bl	33c78 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   3f08c:	e7a6      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   3f08e:	f7f4 fdeb 	bl	33c68 <sdc_hci_cmd_vs_event_length_set>
   3f092:	e7a3      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   3f094:	f7f4 fdec 	bl	33c70 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   3f098:	e7a0      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   3f09a:	f7f4 fdf2 	bl	33c82 <sdc_hci_cmd_vs_set_adv_randomness>
   3f09e:	e79d      	b.n	3efdc <hci_internal_cmd_put+0x7a4>
	switch (hci_opcode) {
   3f0a0:	f242 0326 	movw	r3, #8230	; 0x2026
   3f0a4:	429e      	cmp	r6, r3
   3f0a6:	f67f ad76 	bls.w	3eb96 <hci_internal_cmd_put+0x35e>
   3f0aa:	e469      	b.n	3e980 <hci_internal_cmd_put+0x148>
		return 0;
   3f0ac:	2000      	movs	r0, #0
   3f0ae:	e572      	b.n	3eb96 <hci_internal_cmd_put+0x35e>
	switch (hci_opcode) {
   3f0b0:	f240 431d 	movw	r3, #1053	; 0x41d
   3f0b4:	429e      	cmp	r6, r3
   3f0b6:	f43f ac10 	beq.w	3e8da <hci_internal_cmd_put+0xa2>
   3f0ba:	e461      	b.n	3e980 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   3f0bc:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   3f0be:	e45f      	b.n	3e980 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   3f0c0:	4a18      	ldr	r2, [pc, #96]	; (3f124 <hci_internal_cmd_put+0x8ec>)
   3f0c2:	3b2d      	subs	r3, #45	; 0x2d
   3f0c4:	b29b      	uxth	r3, r3
   3f0c6:	fa22 f303 	lsr.w	r3, r2, r3
   3f0ca:	07da      	lsls	r2, r3, #31
   3f0cc:	f57f ac58 	bpl.w	3e980 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   3f0d0:	230f      	movs	r3, #15
   3f0d2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   3f0d4:	2304      	movs	r3, #4
   3f0d6:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   3f0d8:	2301      	movs	r3, #1
	evt_data->status = status_code;
   3f0da:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   3f0dc:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   3f0de:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   3f0e2:	2301      	movs	r3, #1
   3f0e4:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   3f0e6:	f242 0383 	movw	r3, #8323	; 0x2083
   3f0ea:	429e      	cmp	r6, r3
   3f0ec:	f47f ad0b 	bne.w	3eb06 <hci_internal_cmd_put+0x2ce>
		&&
   3f0f0:	7863      	ldrb	r3, [r4, #1]
   3f0f2:	2b0e      	cmp	r3, #14
   3f0f4:	f47f ad07 	bne.w	3eb06 <hci_internal_cmd_put+0x2ce>
		cmd_complete_or_status.occurred = false;
   3f0f8:	2300      	movs	r3, #0
   3f0fa:	e42c      	b.n	3e956 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   3f0fc:	f242 0385 	movw	r3, #8325	; 0x2085
   3f100:	429e      	cmp	r6, r3
   3f102:	d906      	bls.n	3f112 <hci_internal_cmd_put+0x8da>
		return 0;
   3f104:	2000      	movs	r0, #0
   3f106:	e43b      	b.n	3e980 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   3f108:	f242 0385 	movw	r3, #8325	; 0x2085
   3f10c:	2001      	movs	r0, #1
   3f10e:	f7ff bbf4 	b.w	3e8fa <hci_internal_cmd_put+0xc2>
		return 0;
   3f112:	2000      	movs	r0, #0
   3f114:	f7ff bbf3 	b.w	3e8fe <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   3f118:	f04f 30ff 	mov.w	r0, #4294967295
   3f11c:	e4f4      	b.n	3eb08 <hci_internal_cmd_put+0x2d0>
   3f11e:	bf00      	nop
   3f120:	200039e0 	.word	0x200039e0
   3f124:	01000401 	.word	0x01000401

0003f128 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   3f128:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   3f12a:	4c09      	ldr	r4, [pc, #36]	; (3f150 <hci_internal_msg_get+0x28>)
   3f12c:	7823      	ldrb	r3, [r4, #0]
{
   3f12e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   3f130:	b91b      	cbnz	r3, 3f13a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   3f132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   3f136:	f7f4 bd6d 	b.w	33c14 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   3f13a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   3f13c:	1c61      	adds	r1, r4, #1
   3f13e:	3202      	adds	r2, #2
   3f140:	f006 fae6 	bl	45710 <memcpy>
		cmd_complete_or_status.occurred = false;
   3f144:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   3f146:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   3f148:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   3f14a:	702b      	strb	r3, [r5, #0]
}
   3f14c:	bd38      	pop	{r3, r4, r5, pc}
   3f14e:	bf00      	nop
   3f150:	200039d9 	.word	0x200039d9

0003f154 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   3f154:	b570      	push	{r4, r5, r6, lr}
   3f156:	4605      	mov	r5, r0
   3f158:	460e      	mov	r6, r1
   3f15a:	4c08      	ldr	r4, [pc, #32]	; (3f17c <bt_rand+0x28>)
   3f15c:	4620      	mov	r0, r4
   3f15e:	f008 ff5c 	bl	4801a <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   3f162:	b138      	cbz	r0, 3f174 <bt_rand+0x20>
   3f164:	68a3      	ldr	r3, [r4, #8]
   3f166:	b2b2      	uxth	r2, r6
   3f168:	4629      	mov	r1, r5
   3f16a:	4620      	mov	r0, r4
   3f16c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   3f16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3f172:	4718      	bx	r3
   3f174:	f06f 0012 	mvn.w	r0, #18
   3f178:	bd70      	pop	{r4, r5, r6, pc}
   3f17a:	bf00      	nop
   3f17c:	00048d14 	.word	0x00048d14

0003f180 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   3f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   3f182:	4d1c      	ldr	r5, [pc, #112]	; (3f1f4 <ecdh_p256_common_secret+0x74>)
   3f184:	491c      	ldr	r1, [pc, #112]	; (3f1f8 <ecdh_p256_common_secret+0x78>)
   3f186:	f105 0220 	add.w	r2, r5, #32
   3f18a:	2800      	cmp	r0, #0
   3f18c:	bf08      	it	eq
   3f18e:	4629      	moveq	r1, r5
   3f190:	4610      	mov	r0, r2
   3f192:	f002 fcf9 	bl	41b88 <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3f196:	f04f 32ff 	mov.w	r2, #4294967295
	return 0;
   3f19a:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3f19c:	f04f 33ff 	mov.w	r3, #4294967295
   3f1a0:	f04f 0001 	mov.w	r0, #1
	return 0;
   3f1a4:	bf14      	ite	ne
   3f1a6:	2712      	movne	r7, #18
   3f1a8:	2700      	moveq	r7, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3f1aa:	f7fa f923 	bl	393f4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   3f1ae:	f100 060c 	add.w	r6, r0, #12
   3f1b2:	2102      	movs	r1, #2
   3f1b4:	4604      	mov	r4, r0
   3f1b6:	4630      	mov	r0, r6
   3f1b8:	f008 fa03 	bl	475c2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   3f1bc:	233e      	movs	r3, #62	; 0x3e
   3f1be:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   3f1c0:	2322      	movs	r3, #34	; 0x22
   3f1c2:	7043      	strb	r3, [r0, #1]
   3f1c4:	2101      	movs	r1, #1
   3f1c6:	4630      	mov	r0, r6
   3f1c8:	f008 f9fb 	bl	475c2 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   3f1cc:	2309      	movs	r3, #9
   3f1ce:	7003      	strb	r3, [r0, #0]
   3f1d0:	2121      	movs	r1, #33	; 0x21
   3f1d2:	4630      	mov	r0, r6
   3f1d4:	f008 f9f5 	bl	475c2 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   3f1d8:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   3f1dc:	b12f      	cbz	r7, 3f1ea <ecdh_p256_common_secret+0x6a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   3f1de:	2220      	movs	r2, #32
   3f1e0:	21ff      	movs	r1, #255	; 0xff
   3f1e2:	f006 faa0 	bl	45726 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   3f1e6:	4620      	mov	r0, r4
   3f1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   3f1ea:	f105 0120 	add.w	r1, r5, #32
   3f1ee:	f008 fd97 	bl	47d20 <sys_memcpy_swap.constprop.0>
   3f1f2:	e7f8      	b.n	3f1e6 <ecdh_p256_common_secret+0x66>
   3f1f4:	20003a20 	.word	0x20003a20
   3f1f8:	00049d62 	.word	0x00049d62

0003f1fc <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   3f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3f1fe:	4b3b      	ldr	r3, [pc, #236]	; (3f2ec <ecdh_cmd_process+0xf0>)
   3f200:	f3bf 8f5b 	dmb	ish
   3f204:	681a      	ldr	r2, [r3, #0]
   3f206:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   3f20a:	2a02      	cmp	r2, #2
   3f20c:	461f      	mov	r7, r3
   3f20e:	d065      	beq.n	3f2dc <ecdh_cmd_process+0xe0>
   3f210:	2a04      	cmp	r2, #4
   3f212:	d068      	beq.n	3f2e6 <ecdh_cmd_process+0xea>
   3f214:	2a01      	cmp	r2, #1
   3f216:	d14a      	bne.n	3f2ae <ecdh_cmd_process+0xb2>
		err = bt_rand(ecdh.private_key_be, 32);
   3f218:	4c35      	ldr	r4, [pc, #212]	; (3f2f0 <ecdh_cmd_process+0xf4>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   3f21a:	4e36      	ldr	r6, [pc, #216]	; (3f2f4 <ecdh_cmd_process+0xf8>)
		err = bt_rand(ecdh.private_key_be, 32);
   3f21c:	2120      	movs	r1, #32
   3f21e:	4620      	mov	r0, r4
   3f220:	f7ff ff98 	bl	3f154 <bt_rand>
		if (err) {
   3f224:	2800      	cmp	r0, #0
   3f226:	d14e      	bne.n	3f2c6 <ecdh_cmd_process+0xca>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   3f228:	2220      	movs	r2, #32
   3f22a:	4631      	mov	r1, r6
   3f22c:	4620      	mov	r0, r4
   3f22e:	f006 fa48 	bl	456c2 <memcmp>
   3f232:	2800      	cmp	r0, #0
   3f234:	d0f2      	beq.n	3f21c <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   3f236:	4830      	ldr	r0, [pc, #192]	; (3f2f8 <ecdh_cmd_process+0xfc>)
   3f238:	4621      	mov	r1, r4
   3f23a:	f002 fc91 	bl	41b60 <ocrypto_ecdh_p256_public_key>
	} while (err);
   3f23e:	4605      	mov	r5, r0
   3f240:	2800      	cmp	r0, #0
   3f242:	d1eb      	bne.n	3f21c <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3f244:	f04f 32ff 	mov.w	r2, #4294967295
   3f248:	f04f 33ff 	mov.w	r3, #4294967295
   3f24c:	2001      	movs	r0, #1
   3f24e:	f7fa f8d1 	bl	393f4 <bt_buf_get_rx>
   3f252:	f100 060c 	add.w	r6, r0, #12
   3f256:	2102      	movs	r1, #2
   3f258:	4604      	mov	r4, r0
   3f25a:	4630      	mov	r0, r6
   3f25c:	f008 f9b1 	bl	475c2 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   3f260:	233e      	movs	r3, #62	; 0x3e
   3f262:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   3f264:	2342      	movs	r3, #66	; 0x42
   3f266:	7043      	strb	r3, [r0, #1]
   3f268:	2101      	movs	r1, #1
   3f26a:	4630      	mov	r0, r6
   3f26c:	f008 f9a9 	bl	475c2 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   3f270:	2308      	movs	r3, #8
   3f272:	7003      	strb	r3, [r0, #0]
   3f274:	2141      	movs	r1, #65	; 0x41
   3f276:	4630      	mov	r0, r6
   3f278:	f008 f9a3 	bl	475c2 <net_buf_simple_add>
   3f27c:	4606      	mov	r6, r0
	evt->status = status;
   3f27e:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   3f282:	b315      	cbz	r5, 3f2ca <ecdh_cmd_process+0xce>
		(void)memset(evt->key, 0, sizeof(evt->key));
   3f284:	2240      	movs	r2, #64	; 0x40
   3f286:	2100      	movs	r1, #0
   3f288:	f006 fa4d 	bl	45726 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3f28c:	f3bf 8f5b 	dmb	ish
   3f290:	2300      	movs	r3, #0
   3f292:	e857 2f00 	ldrex	r2, [r7]
   3f296:	e847 3100 	strex	r1, r3, [r7]
   3f29a:	2900      	cmp	r1, #0
   3f29c:	d1f9      	bne.n	3f292 <ecdh_cmd_process+0x96>
   3f29e:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   3f2a2:	b17c      	cbz	r4, 3f2c4 <ecdh_cmd_process+0xc8>
		bt_recv(buf);
   3f2a4:	4620      	mov	r0, r4
	}
}
   3f2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   3f2aa:	f7fa bd7b 	b.w	39da4 <bt_recv>
   3f2ae:	2200      	movs	r2, #0
   3f2b0:	f3bf 8f5b 	dmb	ish
   3f2b4:	e853 1f00 	ldrex	r1, [r3]
   3f2b8:	e843 2000 	strex	r0, r2, [r3]
   3f2bc:	2800      	cmp	r0, #0
   3f2be:	d1f9      	bne.n	3f2b4 <ecdh_cmd_process+0xb8>
   3f2c0:	f3bf 8f5b 	dmb	ish
}
   3f2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BT_HCI_ERR_UNSPECIFIED;
   3f2c6:	251f      	movs	r5, #31
   3f2c8:	e7bc      	b.n	3f244 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   3f2ca:	490b      	ldr	r1, [pc, #44]	; (3f2f8 <ecdh_cmd_process+0xfc>)
   3f2cc:	f008 fd28 	bl	47d20 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   3f2d0:	3120      	adds	r1, #32
   3f2d2:	f106 0021 	add.w	r0, r6, #33	; 0x21
   3f2d6:	f008 fd23 	bl	47d20 <sys_memcpy_swap.constprop.0>
		break;
   3f2da:	e7d7      	b.n	3f28c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   3f2dc:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   3f2de:	f7ff ff4f 	bl	3f180 <ecdh_p256_common_secret>
   3f2e2:	4604      	mov	r4, r0
		break;
   3f2e4:	e7d2      	b.n	3f28c <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   3f2e6:	2001      	movs	r0, #1
   3f2e8:	e7f9      	b.n	3f2de <ecdh_cmd_process+0xe2>
   3f2ea:	bf00      	nop
   3f2ec:	20002e24 	.word	0x20002e24
   3f2f0:	20003a20 	.word	0x20003a20
   3f2f4:	00049d62 	.word	0x00049d62
   3f2f8:	20003a40 	.word	0x20003a40

0003f2fc <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   3f2fc:	b510      	push	{r4, lr}
   3f2fe:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   3f300:	2210      	movs	r2, #16
   3f302:	2100      	movs	r1, #0
   3f304:	a801      	add	r0, sp, #4
   3f306:	f006 fa0e 	bl	45726 <memset>
   3f30a:	4c0b      	ldr	r4, [pc, #44]	; (3f338 <ecdh_thread+0x3c>)
   3f30c:	9405      	str	r4, [sp, #20]
   3f30e:	2301      	movs	r3, #1
   3f310:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   3f314:	f04f 32ff 	mov.w	r2, #4294967295
   3f318:	f04f 33ff 	mov.w	r3, #4294967295
   3f31c:	2101      	movs	r1, #1
   3f31e:	a801      	add	r0, sp, #4
   3f320:	f002 fb48 	bl	419b4 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   3f324:	4620      	mov	r0, r4
   3f326:	f009 fc40 	bl	48baa <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   3f32a:	9b04      	ldr	r3, [sp, #16]
   3f32c:	f36f 3394 	bfc	r3, #14, #7
   3f330:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   3f332:	f7ff ff63 	bl	3f1fc <ecdh_cmd_process>
	while (true) {
   3f336:	e7ed      	b.n	3f314 <ecdh_thread+0x18>
   3f338:	20002e14 	.word	0x20002e14

0003f33c <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   3f33c:	b510      	push	{r4, lr}
   3f33e:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   3f340:	480e      	ldr	r0, [pc, #56]	; (3f37c <hci_ecdh_init+0x40>)
   3f342:	f009 fc2d 	bl	48ba0 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3f346:	4c0e      	ldr	r4, [pc, #56]	; (3f380 <hci_ecdh_init+0x44>)
   3f348:	490e      	ldr	r1, [pc, #56]	; (3f384 <hci_ecdh_init+0x48>)
   3f34a:	2200      	movs	r2, #0
   3f34c:	2300      	movs	r3, #0
   3f34e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3f352:	2300      	movs	r3, #0
   3f354:	220a      	movs	r2, #10
   3f356:	e9cd 2303 	strd	r2, r3, [sp, #12]
   3f35a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3f35e:	9300      	str	r3, [sp, #0]
   3f360:	f44f 7262 	mov.w	r2, #904	; 0x388
   3f364:	4b08      	ldr	r3, [pc, #32]	; (3f388 <hci_ecdh_init+0x4c>)
   3f366:	4620      	mov	r0, r4
   3f368:	f001 fa26 	bl	407b8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   3f36c:	4907      	ldr	r1, [pc, #28]	; (3f38c <hci_ecdh_init+0x50>)
   3f36e:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   3f370:	b008      	add	sp, #32
   3f372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f376:	f008 bf40 	b.w	481fa <z_impl_k_thread_name_set>
   3f37a:	bf00      	nop
   3f37c:	20002e14 	.word	0x20002e14
   3f380:	20002338 	.word	0x20002338
   3f384:	20004ac0 	.word	0x20004ac0
   3f388:	0003f2fd 	.word	0x0003f2fd
   3f38c:	00049d55 	.word	0x00049d55

0003f390 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   3f390:	4801      	ldr	r0, [pc, #4]	; (3f398 <hci_ecdh_uninit+0x8>)
   3f392:	f7f9 be9d 	b.w	390d0 <z_impl_k_thread_abort>
   3f396:	bf00      	nop
   3f398:	20002338 	.word	0x20002338

0003f39c <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   3f39c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f39e:	4b0b      	ldr	r3, [pc, #44]	; (3f3cc <hci_cmd_le_read_local_p256_public_key+0x30>)
   3f3a0:	f3bf 8f5b 	dmb	ish
   3f3a4:	2201      	movs	r2, #1
   3f3a6:	e853 1f00 	ldrex	r1, [r3]
   3f3aa:	2900      	cmp	r1, #0
   3f3ac:	d103      	bne.n	3f3b6 <hci_cmd_le_read_local_p256_public_key+0x1a>
   3f3ae:	e843 2000 	strex	r0, r2, [r3]
   3f3b2:	2800      	cmp	r0, #0
   3f3b4:	d1f7      	bne.n	3f3a6 <hci_cmd_le_read_local_p256_public_key+0xa>
   3f3b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   3f3ba:	d105      	bne.n	3f3c8 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   3f3bc:	4804      	ldr	r0, [pc, #16]	; (3f3d0 <hci_cmd_le_read_local_p256_public_key+0x34>)
   3f3be:	2100      	movs	r1, #0
   3f3c0:	f002 fb54 	bl	41a6c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   3f3c4:	2000      	movs	r0, #0
}
   3f3c6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f3c8:	200c      	movs	r0, #12
   3f3ca:	e7fc      	b.n	3f3c6 <hci_cmd_le_read_local_p256_public_key+0x2a>
   3f3cc:	20002e24 	.word	0x20002e24
   3f3d0:	20002e14 	.word	0x20002e14

0003f3d4 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   3f3d4:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   3f3d6:	2900      	cmp	r1, #0
   3f3d8:	4b11      	ldr	r3, [pc, #68]	; (3f420 <cmd_le_generate_dhkey+0x4c>)
   3f3da:	f3bf 8f5b 	dmb	ish
{
   3f3de:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   3f3e0:	bf0c      	ite	eq
   3f3e2:	2202      	moveq	r2, #2
   3f3e4:	2204      	movne	r2, #4
   3f3e6:	e853 1f00 	ldrex	r1, [r3]
   3f3ea:	2900      	cmp	r1, #0
   3f3ec:	d103      	bne.n	3f3f6 <cmd_le_generate_dhkey+0x22>
   3f3ee:	e843 2000 	strex	r0, r2, [r3]
   3f3f2:	2800      	cmp	r0, #0
   3f3f4:	d1f7      	bne.n	3f3e6 <cmd_le_generate_dhkey+0x12>
   3f3f6:	f3bf 8f5b 	dmb	ish
   3f3fa:	d10e      	bne.n	3f41a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   3f3fc:	4621      	mov	r1, r4
   3f3fe:	4809      	ldr	r0, [pc, #36]	; (3f424 <cmd_le_generate_dhkey+0x50>)
   3f400:	f008 fc8e 	bl	47d20 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   3f404:	4808      	ldr	r0, [pc, #32]	; (3f428 <cmd_le_generate_dhkey+0x54>)
   3f406:	f104 0120 	add.w	r1, r4, #32
   3f40a:	f008 fc89 	bl	47d20 <sys_memcpy_swap.constprop.0>
   3f40e:	4807      	ldr	r0, [pc, #28]	; (3f42c <cmd_le_generate_dhkey+0x58>)
   3f410:	2100      	movs	r1, #0
   3f412:	f002 fb2b 	bl	41a6c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   3f416:	2000      	movs	r0, #0
}
   3f418:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f41a:	200c      	movs	r0, #12
   3f41c:	e7fc      	b.n	3f418 <cmd_le_generate_dhkey+0x44>
   3f41e:	bf00      	nop
   3f420:	20002e24 	.word	0x20002e24
   3f424:	20003a40 	.word	0x20003a40
   3f428:	20003a60 	.word	0x20003a60
   3f42c:	20002e14 	.word	0x20002e14

0003f430 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   3f430:	4901      	ldr	r1, [pc, #4]	; (3f438 <mpsl_low_prio_irq_handler+0x8>)
   3f432:	4802      	ldr	r0, [pc, #8]	; (3f43c <mpsl_low_prio_irq_handler+0xc>)
   3f434:	f009 b844 	b.w	484c0 <k_work_submit_to_queue>
   3f438:	20002e28 	.word	0x20002e28
   3f43c:	200023c8 	.word	0x200023c8

0003f440 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   3f440:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   3f442:	2332      	movs	r3, #50	; 0x32
   3f444:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   3f448:	4a10      	ldr	r2, [pc, #64]	; (3f48c <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   3f44a:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   3f44c:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   3f44e:	2119      	movs	r1, #25
   3f450:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   3f452:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   3f456:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   3f45a:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   3f45e:	f7f3 fdbf 	bl	32fe0 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   3f462:	4604      	mov	r4, r0
   3f464:	b970      	cbnz	r0, 3f484 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   3f466:	4601      	mov	r1, r0
   3f468:	462a      	mov	r2, r5
   3f46a:	2008      	movs	r0, #8
   3f46c:	f7f9 fb50 	bl	38b10 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   3f470:	462a      	mov	r2, r5
   3f472:	4621      	mov	r1, r4
   3f474:	200b      	movs	r0, #11
   3f476:	f7f9 fb4b 	bl	38b10 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   3f47a:	462a      	mov	r2, r5
   3f47c:	4621      	mov	r1, r4
   3f47e:	4628      	mov	r0, r5
   3f480:	f7f9 fb46 	bl	38b10 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   3f484:	4620      	mov	r0, r4
   3f486:	b003      	add	sp, #12
   3f488:	bd30      	pop	{r4, r5, pc}
   3f48a:	bf00      	nop
   3f48c:	00047d4b 	.word	0x00047d4b

0003f490 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   3f490:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   3f492:	4d0d      	ldr	r5, [pc, #52]	; (3f4c8 <__kernel_ram_size+0x18>)
   3f494:	490d      	ldr	r1, [pc, #52]	; (3f4cc <__kernel_ram_size+0x1c>)
   3f496:	2400      	movs	r4, #0
   3f498:	9400      	str	r4, [sp, #0]
   3f49a:	f06f 0309 	mvn.w	r3, #9
   3f49e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3f4a2:	4628      	mov	r0, r5
   3f4a4:	f001 fc9a 	bl	40ddc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   3f4a8:	4909      	ldr	r1, [pc, #36]	; (3f4d0 <__kernel_ram_size+0x20>)
   3f4aa:	4628      	mov	r0, r5
   3f4ac:	f008 fea5 	bl	481fa <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   3f4b0:	4908      	ldr	r1, [pc, #32]	; (3f4d4 <__kernel_ram_size+0x24>)
   3f4b2:	4809      	ldr	r0, [pc, #36]	; (3f4d8 <__kernel_ram_size+0x28>)
   3f4b4:	f008 ffd7 	bl	48466 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   3f4b8:	4622      	mov	r2, r4
   3f4ba:	2104      	movs	r1, #4
   3f4bc:	2019      	movs	r0, #25
   3f4be:	f7f9 fb27 	bl	38b10 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   3f4c2:	4620      	mov	r0, r4
   3f4c4:	b003      	add	sp, #12
   3f4c6:	bd30      	pop	{r4, r5, pc}
   3f4c8:	200023c8 	.word	0x200023c8
   3f4cc:	20004ec0 	.word	0x20004ec0
   3f4d0:	00049d8e 	.word	0x00049d8e
   3f4d4:	00047d77 	.word	0x00047d77
   3f4d8:	20002e28 	.word	0x20002e28

0003f4dc <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3f4dc:	4b01      	ldr	r3, [pc, #4]	; (3f4e4 <mpsl_hfclk_callback+0x8>)
   3f4de:	2000      	movs	r0, #0
   3f4e0:	681b      	ldr	r3, [r3, #0]
   3f4e2:	4718      	bx	r3
   3f4e4:	20002e38 	.word	0x20002e38

0003f4e8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   3f4e8:	b120      	cbz	r0, 3f4f4 <nrfx_clock_start+0xc>
   3f4ea:	2801      	cmp	r0, #1
   3f4ec:	d106      	bne.n	3f4fc <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   3f4ee:	4804      	ldr	r0, [pc, #16]	; (3f500 <nrfx_clock_start+0x18>)
   3f4f0:	f7f3 bbd8 	b.w	32ca4 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f4f4:	4b03      	ldr	r3, [pc, #12]	; (3f504 <nrfx_clock_start+0x1c>)
   3f4f6:	2001      	movs	r0, #1
   3f4f8:	681b      	ldr	r3, [r3, #0]
   3f4fa:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   3f4fc:	4770      	bx	lr
   3f4fe:	bf00      	nop
   3f500:	0003f4dd 	.word	0x0003f4dd
   3f504:	20002e38 	.word	0x20002e38

0003f508 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   3f508:	4b01      	ldr	r3, [pc, #4]	; (3f510 <nrfx_clock_init+0x8>)
   3f50a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   3f50c:	4801      	ldr	r0, [pc, #4]	; (3f514 <nrfx_clock_init+0xc>)
   3f50e:	4770      	bx	lr
   3f510:	20002e38 	.word	0x20002e38
   3f514:	0bad0000 	.word	0x0bad0000

0003f518 <temp_nrf5_mpsl_channel_get>:
}

static int temp_nrf5_mpsl_channel_get(const struct device *dev,
				      enum sensor_channel chan,
				      struct sensor_value *val)
{
   3f518:	b510      	push	{r4, lr}
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   3f51a:	290c      	cmp	r1, #12
	struct temp_nrf5_mpsl_data *data = dev->data;
   3f51c:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   3f51e:	d112      	bne.n	3f546 <temp_nrf5_mpsl_channel_get+0x2e>
		return -ENOTSUP;
	}

	uval = data->sample;
   3f520:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   3f522:	4c0a      	ldr	r4, [pc, #40]	; (3f54c <temp_nrf5_mpsl_channel_get+0x34>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   3f524:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   3f528:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   3f52c:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   3f52e:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   3f532:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   3f534:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   3f538:	bfbc      	itt	lt
   3f53a:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   3f53c:	425b      	neglt	r3, r3
	} else {
		val->val1 = (int32_t)val1_abs;
		val->val2 = (int32_t)val2_abs;
   3f53e:	e9c2 1300 	strd	r1, r3, [r2]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   3f542:	2000      	movs	r0, #0
}
   3f544:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3f546:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3f54a:	e7fb      	b.n	3f544 <temp_nrf5_mpsl_channel_get+0x2c>
   3f54c:	0003d090 	.word	0x0003d090

0003f550 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f550:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f554:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f558:	2a08      	cmp	r2, #8
   3f55a:	d106      	bne.n	3f56a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f55c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f560:	2b05      	cmp	r3, #5
   3f562:	d802      	bhi.n	3f56a <nrf52_errata_103+0x1a>
   3f564:	4a02      	ldr	r2, [pc, #8]	; (3f570 <nrf52_errata_103+0x20>)
   3f566:	5cd0      	ldrb	r0, [r2, r3]
   3f568:	4770      	bx	lr
                        return false;
   3f56a:	2000      	movs	r0, #0
}
   3f56c:	4770      	bx	lr
   3f56e:	bf00      	nop
   3f570:	00049dc5 	.word	0x00049dc5

0003f574 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   3f574:	4a02      	ldr	r2, [pc, #8]	; (3f580 <nvmc_wait+0xc>)
   3f576:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   3f57a:	2b00      	cmp	r3, #0
   3f57c:	d0fb      	beq.n	3f576 <nvmc_wait+0x2>
}
   3f57e:	4770      	bx	lr
   3f580:	4001e000 	.word	0x4001e000

0003f584 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   3f584:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f58a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f58e:	2a08      	cmp	r2, #8
   3f590:	d14e      	bne.n	3f630 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   3f592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3f596:	2100      	movs	r1, #0
   3f598:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   3f59c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   3f5a0:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   3f5a4:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   3f5a8:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   3f5ac:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3f5b0:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   3f5b4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   3f5b8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   3f5bc:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3f5c0:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   3f5c4:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   3f5c8:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   3f5cc:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3f5d0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   3f5d4:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   3f5d8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   3f5dc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3f5e0:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   3f5e4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   3f5e8:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   3f5ec:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3f5f0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   3f5f4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   3f5f8:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   3f5fc:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3f600:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   3f604:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   3f608:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   3f60c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   3f610:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   3f614:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   3f618:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   3f61c:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   3f620:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   3f624:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   3f628:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   3f62c:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   3f630:	f7ff ff8e 	bl	3f550 <nrf52_errata_103>
   3f634:	b118      	cbz	r0, 3f63e <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   3f636:	4b3a      	ldr	r3, [pc, #232]	; (3f720 <SystemInit+0x19c>)
   3f638:	4a3a      	ldr	r2, [pc, #232]	; (3f724 <SystemInit+0x1a0>)
   3f63a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   3f63e:	f7ff ff87 	bl	3f550 <nrf52_errata_103>
   3f642:	b118      	cbz	r0, 3f64c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   3f644:	4b38      	ldr	r3, [pc, #224]	; (3f728 <SystemInit+0x1a4>)
   3f646:	22fb      	movs	r2, #251	; 0xfb
   3f648:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   3f64c:	f7ff ff80 	bl	3f550 <nrf52_errata_103>
   3f650:	b170      	cbz	r0, 3f670 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   3f652:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3f656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f65a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   3f65e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   3f662:	f022 020f 	bic.w	r2, r2, #15
   3f666:	f003 030f 	and.w	r3, r3, #15
   3f66a:	4313      	orrs	r3, r2
   3f66c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   3f670:	f7ff ff6e 	bl	3f550 <nrf52_errata_103>
   3f674:	b120      	cbz	r0, 3f680 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   3f676:	4b2d      	ldr	r3, [pc, #180]	; (3f72c <SystemInit+0x1a8>)
   3f678:	f44f 7200 	mov.w	r2, #512	; 0x200
   3f67c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f684:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f688:	2b08      	cmp	r3, #8
   3f68a:	d11a      	bne.n	3f6c2 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   3f68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f690:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   3f694:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   3f696:	bf44      	itt	mi
   3f698:	f06f 0201 	mvnmi.w	r2, #1
   3f69c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f6a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f6a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   3f6a8:	2b05      	cmp	r3, #5
   3f6aa:	d802      	bhi.n	3f6b2 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   3f6ac:	4a20      	ldr	r2, [pc, #128]	; (3f730 <SystemInit+0x1ac>)
   3f6ae:	5cd3      	ldrb	r3, [r2, r3]
   3f6b0:	b13b      	cbz	r3, 3f6c2 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3f6b2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f6b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   3f6ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f6be:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f6c2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f6c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3f6ca:	2a00      	cmp	r2, #0
   3f6cc:	db03      	blt.n	3f6d6 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   3f6ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f6d2:	2b00      	cmp	r3, #0
   3f6d4:	da22      	bge.n	3f71c <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f6d6:	4917      	ldr	r1, [pc, #92]	; (3f734 <SystemInit+0x1b0>)
   3f6d8:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f6da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f6de:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f6e2:	2412      	movs	r4, #18
    nvmc_wait();
   3f6e4:	f7ff ff46 	bl	3f574 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f6e8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   3f6ec:	f7ff ff42 	bl	3f574 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3f6f0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3f6f4:	f7ff ff3e 	bl	3f574 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f6f8:	2300      	movs	r3, #0
   3f6fa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   3f6fe:	f7ff ff39 	bl	3f574 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3f702:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   3f706:	490c      	ldr	r1, [pc, #48]	; (3f738 <SystemInit+0x1b4>)
   3f708:	4b0c      	ldr	r3, [pc, #48]	; (3f73c <SystemInit+0x1b8>)
   3f70a:	68ca      	ldr	r2, [r1, #12]
   3f70c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   3f710:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   3f712:	60cb      	str	r3, [r1, #12]
   3f714:	f3bf 8f4f 	dsb	sy
    __NOP();
   3f718:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3f71a:	e7fd      	b.n	3f718 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   3f71c:	bd10      	pop	{r4, pc}
   3f71e:	bf00      	nop
   3f720:	40005000 	.word	0x40005000
   3f724:	00038148 	.word	0x00038148
   3f728:	4000f000 	.word	0x4000f000
   3f72c:	40029000 	.word	0x40029000
   3f730:	00049dbf 	.word	0x00049dbf
   3f734:	4001e000 	.word	0x4001e000
   3f738:	e000ed00 	.word	0xe000ed00
   3f73c:	05fa0004 	.word	0x05fa0004

0003f740 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   3f740:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f742:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3f744:	6802      	ldr	r2, [r0, #0]
   3f746:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   3f74a:	fab2 f382 	clz	r3, r2
   3f74e:	f1c3 031f 	rsb	r3, r3, #31
   3f752:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f754:	fa05 f403 	lsl.w	r4, r5, r3
   3f758:	ea22 0404 	bic.w	r4, r2, r4
   3f75c:	e850 6f00 	ldrex	r6, [r0]
   3f760:	4296      	cmp	r6, r2
   3f762:	d104      	bne.n	3f76e <nrfx_flag32_alloc+0x2e>
   3f764:	e840 4c00 	strex	ip, r4, [r0]
   3f768:	f1bc 0f00 	cmp.w	ip, #0
   3f76c:	d1f6      	bne.n	3f75c <nrfx_flag32_alloc+0x1c>
   3f76e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f772:	d1e7      	bne.n	3f744 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   3f774:	4801      	ldr	r0, [pc, #4]	; (3f77c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3f776:	700b      	strb	r3, [r1, #0]
}
   3f778:	bd70      	pop	{r4, r5, r6, pc}
   3f77a:	bf00      	nop
   3f77c:	0bad0000 	.word	0x0bad0000

0003f780 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   3f780:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3f782:	6803      	ldr	r3, [r0, #0]
   3f784:	40cb      	lsrs	r3, r1
   3f786:	07db      	lsls	r3, r3, #31
   3f788:	d414      	bmi.n	3f7b4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   3f78a:	2301      	movs	r3, #1
   3f78c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   3f78e:	6802      	ldr	r2, [r0, #0]
   3f790:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3f794:	ea43 0102 	orr.w	r1, r3, r2
   3f798:	e850 4f00 	ldrex	r4, [r0]
   3f79c:	4294      	cmp	r4, r2
   3f79e:	d104      	bne.n	3f7aa <nrfx_flag32_free+0x2a>
   3f7a0:	e840 1c00 	strex	ip, r1, [r0]
   3f7a4:	f1bc 0f00 	cmp.w	ip, #0
   3f7a8:	d1f6      	bne.n	3f798 <nrfx_flag32_free+0x18>
   3f7aa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f7ae:	d1ee      	bne.n	3f78e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   3f7b0:	4801      	ldr	r0, [pc, #4]	; (3f7b8 <nrfx_flag32_free+0x38>)
}
   3f7b2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f7b4:	4801      	ldr	r0, [pc, #4]	; (3f7bc <nrfx_flag32_free+0x3c>)
   3f7b6:	e7fc      	b.n	3f7b2 <nrfx_flag32_free+0x32>
   3f7b8:	0bad0000 	.word	0x0bad0000
   3f7bc:	0bad0004 	.word	0x0bad0004

0003f7c0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   3f7c0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3f7c2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3f7c6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   3f7c8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3f7ca:	6002      	str	r2, [r0, #0]
}
   3f7cc:	4802      	ldr	r0, [pc, #8]	; (3f7d8 <nrf_gpio_pin_port_decode+0x18>)
   3f7ce:	bf18      	it	ne
   3f7d0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   3f7d4:	4770      	bx	lr
   3f7d6:	bf00      	nop
   3f7d8:	50000300 	.word	0x50000300

0003f7dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   3f7dc:	4b03      	ldr	r3, [pc, #12]	; (3f7ec <pin_in_use_by_te+0x10>)
   3f7de:	3008      	adds	r0, #8
   3f7e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3f7e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3f7e8:	4770      	bx	lr
   3f7ea:	bf00      	nop
   3f7ec:	200007d8 	.word	0x200007d8

0003f7f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   3f7f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f7f2:	f100 0308 	add.w	r3, r0, #8
   3f7f6:	4c0c      	ldr	r4, [pc, #48]	; (3f828 <call_handler+0x38>)
   3f7f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   3f7fc:	05da      	lsls	r2, r3, #23
{
   3f7fe:	4605      	mov	r5, r0
   3f800:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f802:	d507      	bpl.n	3f814 <call_handler+0x24>
   3f804:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   3f808:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f80c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3f810:	6852      	ldr	r2, [r2, #4]
   3f812:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3f814:	68a3      	ldr	r3, [r4, #8]
   3f816:	b12b      	cbz	r3, 3f824 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f818:	68e2      	ldr	r2, [r4, #12]
   3f81a:	4631      	mov	r1, r6
   3f81c:	4628      	mov	r0, r5
    }
}
   3f81e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f822:	4718      	bx	r3
}
   3f824:	bd70      	pop	{r4, r5, r6, pc}
   3f826:	bf00      	nop
   3f828:	200007d8 	.word	0x200007d8

0003f82c <release_handler>:
{
   3f82c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f82e:	4a12      	ldr	r2, [pc, #72]	; (3f878 <release_handler+0x4c>)
   3f830:	3008      	adds	r0, #8
   3f832:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   3f836:	05d9      	lsls	r1, r3, #23
   3f838:	d51b      	bpl.n	3f872 <release_handler+0x46>
   3f83a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3f83e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f842:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f846:	f102 040e 	add.w	r4, r2, #14
   3f84a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3f84c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   3f850:	f413 7f80 	tst.w	r3, #256	; 0x100
   3f854:	d003      	beq.n	3f85e <release_handler+0x32>
   3f856:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3f85a:	4299      	cmp	r1, r3
   3f85c:	d009      	beq.n	3f872 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f85e:	3001      	adds	r0, #1
   3f860:	2830      	cmp	r0, #48	; 0x30
   3f862:	d1f3      	bne.n	3f84c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3f864:	2300      	movs	r3, #0
   3f866:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f86a:	4804      	ldr	r0, [pc, #16]	; (3f87c <release_handler+0x50>)
}
   3f86c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f86e:	f7ff bf87 	b.w	3f780 <nrfx_flag32_free>
}
   3f872:	bc10      	pop	{r4}
   3f874:	4770      	bx	lr
   3f876:	bf00      	nop
   3f878:	200007d8 	.word	0x200007d8
   3f87c:	2000084c 	.word	0x2000084c

0003f880 <pin_handler_trigger_uninit>:
{
   3f880:	b538      	push	{r3, r4, r5, lr}
   3f882:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f884:	f7ff ffaa 	bl	3f7dc <pin_in_use_by_te>
   3f888:	4c09      	ldr	r4, [pc, #36]	; (3f8b0 <pin_handler_trigger_uninit+0x30>)
   3f88a:	f102 0508 	add.w	r5, r2, #8
   3f88e:	b140      	cbz	r0, 3f8a2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f890:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3f894:	4907      	ldr	r1, [pc, #28]	; (3f8b4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3f896:	0b5b      	lsrs	r3, r3, #13
   3f898:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3f89c:	2000      	movs	r0, #0
   3f89e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3f8a2:	4610      	mov	r0, r2
   3f8a4:	f7ff ffc2 	bl	3f82c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   3f8a8:	2300      	movs	r3, #0
   3f8aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3f8ae:	bd38      	pop	{r3, r4, r5, pc}
   3f8b0:	200007d8 	.word	0x200007d8
   3f8b4:	40006000 	.word	0x40006000

0003f8b8 <nrfx_gpiote_input_configure>:
{
   3f8b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3f8bc:	4604      	mov	r4, r0
   3f8be:	4616      	mov	r6, r2
   3f8c0:	461d      	mov	r5, r3
    if (p_input_config)
   3f8c2:	b301      	cbz	r1, 3f906 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f8c4:	4f4e      	ldr	r7, [pc, #312]	; (3fa00 <nrfx_gpiote_input_configure+0x148>)
   3f8c6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3f8ca:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   3f8ce:	079b      	lsls	r3, r3, #30
   3f8d0:	d502      	bpl.n	3f8d8 <nrfx_gpiote_input_configure+0x20>
   3f8d2:	f7ff ff83 	bl	3f7dc <pin_in_use_by_te>
   3f8d6:	bb10      	cbnz	r0, 3f91e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f8d8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f8da:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f8de:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3f8e2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f8e6:	f10d 020f 	add.w	r2, sp, #15
   3f8ea:	460b      	mov	r3, r1
   3f8ec:	4620      	mov	r0, r4
   3f8ee:	f10d 010e 	add.w	r1, sp, #14
   3f8f2:	f008 fa94 	bl	47e1e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3f8f6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   3f8fa:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f8fe:	f043 0301 	orr.w	r3, r3, #1
   3f902:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   3f906:	b346      	cbz	r6, 3f95a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f908:	4b3d      	ldr	r3, [pc, #244]	; (3fa00 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3f90a:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3f90e:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f910:	f104 0708 	add.w	r7, r4, #8
   3f914:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   3f918:	0788      	lsls	r0, r1, #30
   3f91a:	d502      	bpl.n	3f922 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   3f91c:	b1aa      	cbz	r2, 3f94a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   3f91e:	4839      	ldr	r0, [pc, #228]	; (3fa04 <nrfx_gpiote_input_configure+0x14c>)
   3f920:	e01d      	b.n	3f95e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3f922:	f021 0120 	bic.w	r1, r1, #32
   3f926:	04c9      	lsls	r1, r1, #19
   3f928:	0cc9      	lsrs	r1, r1, #19
   3f92a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   3f92e:	b162      	cbz	r2, 3f94a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   3f930:	f1bc 0f03 	cmp.w	ip, #3
   3f934:	d8f3      	bhi.n	3f91e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3f936:	6872      	ldr	r2, [r6, #4]
   3f938:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3f93a:	f1bc 0f00 	cmp.w	ip, #0
   3f93e:	d111      	bne.n	3f964 <nrfx_gpiote_input_configure+0xac>
   3f940:	4a31      	ldr	r2, [pc, #196]	; (3fa08 <nrfx_gpiote_input_configure+0x150>)
   3f942:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   3f946:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3f94a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   3f94e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3f952:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   3f956:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   3f95a:	bb45      	cbnz	r5, 3f9ae <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   3f95c:	482b      	ldr	r0, [pc, #172]	; (3fa0c <nrfx_gpiote_input_configure+0x154>)
}
   3f95e:	b004      	add	sp, #16
   3f960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3f964:	00b2      	lsls	r2, r6, #2
   3f966:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3f96a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f96e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   3f972:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3f976:	f020 0003 	bic.w	r0, r0, #3
   3f97a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3f97e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3f982:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   3f986:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   3f98a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f98e:	0220      	lsls	r0, r4, #8
   3f990:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3f994:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   3f998:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   3f99c:	ea40 000e 	orr.w	r0, r0, lr
   3f9a0:	f041 0120 	orr.w	r1, r1, #32
   3f9a4:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   3f9a8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   3f9ac:	e7cd      	b.n	3f94a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3f9ae:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   3f9b2:	4620      	mov	r0, r4
   3f9b4:	f7ff ff3a 	bl	3f82c <release_handler>
    if (!handler)
   3f9b8:	2e00      	cmp	r6, #0
   3f9ba:	d0cf      	beq.n	3f95c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f9bc:	4d10      	ldr	r5, [pc, #64]	; (3fa00 <nrfx_gpiote_input_configure+0x148>)
   3f9be:	e9d5 2300 	ldrd	r2, r3, [r5]
   3f9c2:	4296      	cmp	r6, r2
   3f9c4:	d101      	bne.n	3f9ca <nrfx_gpiote_input_configure+0x112>
   3f9c6:	429f      	cmp	r7, r3
   3f9c8:	d018      	beq.n	3f9fc <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3f9ca:	4811      	ldr	r0, [pc, #68]	; (3fa10 <nrfx_gpiote_input_configure+0x158>)
   3f9cc:	f10d 010f 	add.w	r1, sp, #15
   3f9d0:	f7ff feb6 	bl	3f740 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3f9d4:	4b0d      	ldr	r3, [pc, #52]	; (3fa0c <nrfx_gpiote_input_configure+0x154>)
   3f9d6:	4298      	cmp	r0, r3
   3f9d8:	d1c1      	bne.n	3f95e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   3f9da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   3f9de:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   3f9e2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f9e6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   3f9e8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f9ea:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   3f9ee:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3f9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3f9f6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   3f9fa:	e7af      	b.n	3f95c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f9fc:	2200      	movs	r2, #0
   3f9fe:	e7ee      	b.n	3f9de <nrfx_gpiote_input_configure+0x126>
   3fa00:	200007d8 	.word	0x200007d8
   3fa04:	0bad0004 	.word	0x0bad0004
   3fa08:	40006000 	.word	0x40006000
   3fa0c:	0bad0000 	.word	0x0bad0000
   3fa10:	2000084c 	.word	0x2000084c

0003fa14 <nrfx_gpiote_output_configure>:
{
   3fa14:	b5f0      	push	{r4, r5, r6, r7, lr}
   3fa16:	4604      	mov	r4, r0
   3fa18:	b085      	sub	sp, #20
   3fa1a:	4615      	mov	r5, r2
    if (p_config)
   3fa1c:	b319      	cbz	r1, 3fa66 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fa1e:	4e33      	ldr	r6, [pc, #204]	; (3faec <nrfx_gpiote_output_configure+0xd8>)
   3fa20:	f100 0708 	add.w	r7, r0, #8
   3fa24:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3fa28:	0793      	lsls	r3, r2, #30
   3fa2a:	d403      	bmi.n	3fa34 <nrfx_gpiote_output_configure+0x20>
   3fa2c:	f7ff fed6 	bl	3f7dc <pin_in_use_by_te>
   3fa30:	2800      	cmp	r0, #0
   3fa32:	d158      	bne.n	3fae6 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3fa34:	f012 0f1c 	tst.w	r2, #28
   3fa38:	d002      	beq.n	3fa40 <nrfx_gpiote_output_configure+0x2c>
   3fa3a:	784b      	ldrb	r3, [r1, #1]
   3fa3c:	2b01      	cmp	r3, #1
   3fa3e:	d052      	beq.n	3fae6 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3fa40:	2301      	movs	r3, #1
   3fa42:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3fa46:	2300      	movs	r3, #0
   3fa48:	e9cd 1300 	strd	r1, r3, [sp]
   3fa4c:	1c4a      	adds	r2, r1, #1
   3fa4e:	1c8b      	adds	r3, r1, #2
   3fa50:	4620      	mov	r0, r4
   3fa52:	f10d 010f 	add.w	r1, sp, #15
   3fa56:	f008 f9e2 	bl	47e1e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3fa5a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   3fa5e:	f043 0303 	orr.w	r3, r3, #3
   3fa62:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   3fa66:	b915      	cbnz	r5, 3fa6e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   3fa68:	4821      	ldr	r0, [pc, #132]	; (3faf0 <nrfx_gpiote_output_configure+0xdc>)
}
   3fa6a:	b005      	add	sp, #20
   3fa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fa6e:	4e1f      	ldr	r6, [pc, #124]	; (3faec <nrfx_gpiote_output_configure+0xd8>)
   3fa70:	f104 0708 	add.w	r7, r4, #8
   3fa74:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   3fa78:	0783      	lsls	r3, r0, #30
   3fa7a:	d534      	bpl.n	3fae6 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   3fa7c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3fa80:	4661      	mov	r1, ip
   3fa82:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3fa84:	f020 0020 	bic.w	r0, r0, #32
   3fa88:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3fa8c:	04c0      	lsls	r0, r0, #19
   3fa8e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3fa92:	0cc0      	lsrs	r0, r0, #19
   3fa94:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3fa98:	2300      	movs	r3, #0
   3fa9a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3fa9e:	786a      	ldrb	r2, [r5, #1]
   3faa0:	2a00      	cmp	r2, #0
   3faa2:	d0e1      	beq.n	3fa68 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3faa4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   3faa8:	78ad      	ldrb	r5, [r5, #2]
   3faaa:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   3faae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3fab2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3fab6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3faba:	0223      	lsls	r3, r4, #8
   3fabc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3fac0:	0412      	lsls	r2, r2, #16
   3fac2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3fac6:	ea43 030e 	orr.w	r3, r3, lr
   3faca:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3facc:	052a      	lsls	r2, r5, #20
   3face:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3fad2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3fad6:	4313      	orrs	r3, r2
   3fad8:	f040 0020 	orr.w	r0, r0, #32
   3fadc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3fae0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3fae4:	e7c0      	b.n	3fa68 <nrfx_gpiote_output_configure+0x54>
{
   3fae6:	4803      	ldr	r0, [pc, #12]	; (3faf4 <nrfx_gpiote_output_configure+0xe0>)
   3fae8:	e7bf      	b.n	3fa6a <nrfx_gpiote_output_configure+0x56>
   3faea:	bf00      	nop
   3faec:	200007d8 	.word	0x200007d8
   3faf0:	0bad0000 	.word	0x0bad0000
   3faf4:	0bad0004 	.word	0x0bad0004

0003faf8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   3faf8:	4b01      	ldr	r3, [pc, #4]	; (3fb00 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3fafa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3fafe:	4770      	bx	lr
   3fb00:	200007d8 	.word	0x200007d8

0003fb04 <nrfx_gpiote_channel_get>:
{
   3fb04:	b508      	push	{r3, lr}
   3fb06:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3fb08:	f7ff fe68 	bl	3f7dc <pin_in_use_by_te>
   3fb0c:	b138      	cbz	r0, 3fb1e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fb0e:	4b05      	ldr	r3, [pc, #20]	; (3fb24 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3fb10:	4805      	ldr	r0, [pc, #20]	; (3fb28 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fb12:	3208      	adds	r2, #8
   3fb14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   3fb18:	0b5b      	lsrs	r3, r3, #13
   3fb1a:	700b      	strb	r3, [r1, #0]
}
   3fb1c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3fb1e:	4803      	ldr	r0, [pc, #12]	; (3fb2c <nrfx_gpiote_channel_get+0x28>)
   3fb20:	e7fc      	b.n	3fb1c <nrfx_gpiote_channel_get+0x18>
   3fb22:	bf00      	nop
   3fb24:	200007d8 	.word	0x200007d8
   3fb28:	0bad0000 	.word	0x0bad0000
   3fb2c:	0bad0004 	.word	0x0bad0004

0003fb30 <nrfx_gpiote_init>:
{
   3fb30:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3fb32:	4c0f      	ldr	r4, [pc, #60]	; (3fb70 <nrfx_gpiote_init+0x40>)
   3fb34:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   3fb38:	b9bd      	cbnz	r5, 3fb6a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   3fb3a:	2260      	movs	r2, #96	; 0x60
   3fb3c:	4629      	mov	r1, r5
   3fb3e:	f104 0010 	add.w	r0, r4, #16
   3fb42:	f005 fdf0 	bl	45726 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   3fb46:	2006      	movs	r0, #6
   3fb48:	f7f8 ffb2 	bl	38ab0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fb4c:	4b09      	ldr	r3, [pc, #36]	; (3fb74 <nrfx_gpiote_init+0x44>)
    return err_code;
   3fb4e:	480a      	ldr	r0, [pc, #40]	; (3fb78 <nrfx_gpiote_init+0x48>)
   3fb50:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   3fb54:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   3fb58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3fb5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3fb60:	2301      	movs	r3, #1
   3fb62:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   3fb66:	6763      	str	r3, [r4, #116]	; 0x74
}
   3fb68:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3fb6a:	4804      	ldr	r0, [pc, #16]	; (3fb7c <nrfx_gpiote_init+0x4c>)
   3fb6c:	e7fc      	b.n	3fb68 <nrfx_gpiote_init+0x38>
   3fb6e:	bf00      	nop
   3fb70:	200007d8 	.word	0x200007d8
   3fb74:	40006000 	.word	0x40006000
   3fb78:	0bad0000 	.word	0x0bad0000
   3fb7c:	0bad0005 	.word	0x0bad0005

0003fb80 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3fb80:	4b03      	ldr	r3, [pc, #12]	; (3fb90 <nrfx_gpiote_is_init+0x10>)
   3fb82:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   3fb86:	3800      	subs	r0, #0
   3fb88:	bf18      	it	ne
   3fb8a:	2001      	movne	r0, #1
   3fb8c:	4770      	bx	lr
   3fb8e:	bf00      	nop
   3fb90:	200007d8 	.word	0x200007d8

0003fb94 <nrfx_gpiote_channel_free>:
{
   3fb94:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   3fb96:	4801      	ldr	r0, [pc, #4]	; (3fb9c <nrfx_gpiote_channel_free+0x8>)
   3fb98:	f7ff bdf2 	b.w	3f780 <nrfx_flag32_free>
   3fb9c:	20000848 	.word	0x20000848

0003fba0 <nrfx_gpiote_channel_alloc>:
{
   3fba0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3fba2:	4801      	ldr	r0, [pc, #4]	; (3fba8 <nrfx_gpiote_channel_alloc+0x8>)
   3fba4:	f7ff bdcc 	b.w	3f740 <nrfx_flag32_alloc>
   3fba8:	20000848 	.word	0x20000848

0003fbac <nrfx_gpiote_trigger_enable>:
{
   3fbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fbae:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fbb0:	f7ff fe14 	bl	3f7dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fbb4:	f104 0208 	add.w	r2, r4, #8
   3fbb8:	4b1e      	ldr	r3, [pc, #120]	; (3fc34 <nrfx_gpiote_trigger_enable+0x88>)
   3fbba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fbbe:	b1e8      	cbz	r0, 3fbfc <nrfx_gpiote_trigger_enable+0x50>
   3fbc0:	f013 0502 	ands.w	r5, r3, #2
   3fbc4:	d11a      	bne.n	3fbfc <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fbc6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3fbc8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   3fbca:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   3fbce:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   3fbd2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3fbd6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fbda:	6005      	str	r5, [r0, #0]
   3fbdc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3fbde:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3fbe2:	f040 0001 	orr.w	r0, r0, #1
   3fbe6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   3fbea:	b129      	cbz	r1, 3fbf8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   3fbec:	2201      	movs	r2, #1
   3fbee:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   3fbf2:	4a11      	ldr	r2, [pc, #68]	; (3fc38 <nrfx_gpiote_trigger_enable+0x8c>)
   3fbf4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   3fbf8:	b003      	add	sp, #12
   3fbfa:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fbfc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3fc00:	2b04      	cmp	r3, #4
   3fc02:	d012      	beq.n	3fc2a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3fc04:	2b05      	cmp	r3, #5
   3fc06:	d012      	beq.n	3fc2e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fc08:	a801      	add	r0, sp, #4
   3fc0a:	9401      	str	r4, [sp, #4]
   3fc0c:	f7ff fdd8 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3fc10:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3fc12:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3fc16:	40d9      	lsrs	r1, r3
   3fc18:	f001 0101 	and.w	r1, r1, #1
   3fc1c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3fc1e:	4620      	mov	r0, r4
}
   3fc20:	b003      	add	sp, #12
   3fc22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3fc26:	f008 b943 	b.w	47eb0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   3fc2a:	2103      	movs	r1, #3
   3fc2c:	e7f7      	b.n	3fc1e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3fc2e:	2102      	movs	r1, #2
   3fc30:	e7f5      	b.n	3fc1e <nrfx_gpiote_trigger_enable+0x72>
   3fc32:	bf00      	nop
   3fc34:	200007d8 	.word	0x200007d8
   3fc38:	40006000 	.word	0x40006000

0003fc3c <nrfx_gpiote_trigger_disable>:
{
   3fc3c:	b508      	push	{r3, lr}
   3fc3e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fc40:	f7ff fdcc 	bl	3f7dc <pin_in_use_by_te>
   3fc44:	b1c0      	cbz	r0, 3fc78 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3fc46:	f102 0108 	add.w	r1, r2, #8
   3fc4a:	4b0e      	ldr	r3, [pc, #56]	; (3fc84 <nrfx_gpiote_trigger_disable+0x48>)
   3fc4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fc50:	0799      	lsls	r1, r3, #30
   3fc52:	d411      	bmi.n	3fc78 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fc54:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   3fc56:	2201      	movs	r2, #1
   3fc58:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   3fc5a:	009b      	lsls	r3, r3, #2
   3fc5c:	490a      	ldr	r1, [pc, #40]	; (3fc88 <nrfx_gpiote_trigger_disable+0x4c>)
   3fc5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fc62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fc66:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3fc6a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3fc6e:	f022 0203 	bic.w	r2, r2, #3
   3fc72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   3fc76:	bd08      	pop	{r3, pc}
   3fc78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fc7c:	2100      	movs	r1, #0
   3fc7e:	4610      	mov	r0, r2
   3fc80:	f008 b916 	b.w	47eb0 <nrf_gpio_cfg_sense_set>
   3fc84:	200007d8 	.word	0x200007d8
   3fc88:	40006000 	.word	0x40006000

0003fc8c <nrfx_gpiote_pin_uninit>:
{
   3fc8c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fc8e:	4b0e      	ldr	r3, [pc, #56]	; (3fcc8 <nrfx_gpiote_pin_uninit+0x3c>)
   3fc90:	f100 0208 	add.w	r2, r0, #8
{
   3fc94:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fc96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   3fc9a:	07db      	lsls	r3, r3, #31
   3fc9c:	d511      	bpl.n	3fcc2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   3fc9e:	f7ff ffcd 	bl	3fc3c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   3fca2:	4620      	mov	r0, r4
   3fca4:	f7ff fdec 	bl	3f880 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fca8:	a801      	add	r0, sp, #4
   3fcaa:	9401      	str	r4, [sp, #4]
   3fcac:	f7ff fd88 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3fcb0:	9b01      	ldr	r3, [sp, #4]
   3fcb2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fcb6:	2202      	movs	r2, #2
   3fcb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3fcbc:	4803      	ldr	r0, [pc, #12]	; (3fccc <nrfx_gpiote_pin_uninit+0x40>)
}
   3fcbe:	b002      	add	sp, #8
   3fcc0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3fcc2:	4803      	ldr	r0, [pc, #12]	; (3fcd0 <nrfx_gpiote_pin_uninit+0x44>)
   3fcc4:	e7fb      	b.n	3fcbe <nrfx_gpiote_pin_uninit+0x32>
   3fcc6:	bf00      	nop
   3fcc8:	200007d8 	.word	0x200007d8
   3fccc:	0bad0000 	.word	0x0bad0000
   3fcd0:	0bad0004 	.word	0x0bad0004

0003fcd4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fcd8:	4b68      	ldr	r3, [pc, #416]	; (3fe7c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   3fcda:	4869      	ldr	r0, [pc, #420]	; (3fe80 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fcdc:	4969      	ldr	r1, [pc, #420]	; (3fe84 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   3fcde:	2600      	movs	r6, #0
{
   3fce0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   3fce2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fce4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fce6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   3fce8:	b135      	cbz	r5, 3fcf8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   3fcea:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   3fcee:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fcf0:	bf1e      	ittt	ne
   3fcf2:	601c      	strne	r4, [r3, #0]
   3fcf4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   3fcf6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fcf8:	3304      	adds	r3, #4
   3fcfa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   3fcfc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fd00:	d1f1      	bne.n	3fce6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fd02:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3fe80 <nrfx_gpiote_irq_handler+0x1ac>
   3fd06:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   3fd0a:	2b00      	cmp	r3, #0
   3fd0c:	f000 8099 	beq.w	3fe42 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   3fd10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3fd14:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3fd18:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fd1a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fd1e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3fd22:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3fd24:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fd28:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   3fd2c:	f10d 0a10 	add.w	sl, sp, #16
   3fd30:	ea4f 1348 	mov.w	r3, r8, lsl #5
   3fd34:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   3fd36:	f04f 0b01 	mov.w	fp, #1
   3fd3a:	e049      	b.n	3fdd0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   3fd3c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fd3e:	4a52      	ldr	r2, [pc, #328]	; (3fe88 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3fd40:	fa94 f4a4 	rbit	r4, r4
   3fd44:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   3fd48:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3fd4a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fd4c:	f104 0308 	add.w	r3, r4, #8
   3fd50:	9403      	str	r4, [sp, #12]
   3fd52:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   3fd56:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   3fd5a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3fd5e:	fa0b f202 	lsl.w	r2, fp, r2
   3fd62:	ea23 0302 	bic.w	r3, r3, r2
   3fd66:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fd6a:	a803      	add	r0, sp, #12
   3fd6c:	f7ff fd28 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fd70:	9b03      	ldr	r3, [sp, #12]
   3fd72:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fd76:	08b9      	lsrs	r1, r7, #2
   3fd78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   3fd7c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   3fd80:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fd82:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   3fd84:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   3fd88:	d52c      	bpl.n	3fde4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   3fd8a:	4620      	mov	r0, r4
   3fd8c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fd8e:	b2dd      	uxtb	r5, r3
   3fd90:	f7ff fd2e 	bl	3f7f0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fd94:	a803      	add	r0, sp, #12
   3fd96:	9403      	str	r4, [sp, #12]
   3fd98:	f7ff fd12 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fd9c:	9b03      	ldr	r3, [sp, #12]
   3fd9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fda2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3fda6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   3fdaa:	429d      	cmp	r5, r3
   3fdac:	d107      	bne.n	3fdbe <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fdae:	2100      	movs	r1, #0
   3fdb0:	4620      	mov	r0, r4
   3fdb2:	f008 f87d 	bl	47eb0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3fdb6:	4629      	mov	r1, r5
   3fdb8:	4620      	mov	r0, r4
   3fdba:	f008 f879 	bl	47eb0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fdbe:	a803      	add	r0, sp, #12
   3fdc0:	9403      	str	r4, [sp, #12]
   3fdc2:	f7ff fcfd 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3fdc6:	9b03      	ldr	r3, [sp, #12]
   3fdc8:	fa0b f303 	lsl.w	r3, fp, r3
   3fdcc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3fdd0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   3fdd4:	2c00      	cmp	r4, #0
   3fdd6:	d1b1      	bne.n	3fd3c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fdd8:	f1b8 0f00 	cmp.w	r8, #0
   3fddc:	d11d      	bne.n	3fe1a <nrfx_gpiote_irq_handler+0x146>
   3fdde:	f04f 0801 	mov.w	r8, #1
   3fde2:	e7a5      	b.n	3fd30 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fde4:	2b02      	cmp	r3, #2
   3fde6:	d10c      	bne.n	3fe02 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fde8:	2103      	movs	r1, #3
   3fdea:	4620      	mov	r0, r4
   3fdec:	f008 f860 	bl	47eb0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3fdf0:	f005 0305 	and.w	r3, r5, #5
   3fdf4:	2b01      	cmp	r3, #1
   3fdf6:	d1e2      	bne.n	3fdbe <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   3fdf8:	4639      	mov	r1, r7
   3fdfa:	4620      	mov	r0, r4
   3fdfc:	f7ff fcf8 	bl	3f7f0 <call_handler>
   3fe00:	e7dd      	b.n	3fdbe <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fe02:	2102      	movs	r1, #2
   3fe04:	4620      	mov	r0, r4
   3fe06:	9301      	str	r3, [sp, #4]
   3fe08:	f008 f852 	bl	47eb0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3fe0c:	2d03      	cmp	r5, #3
   3fe0e:	d0f3      	beq.n	3fdf8 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fe10:	9b01      	ldr	r3, [sp, #4]
   3fe12:	2b03      	cmp	r3, #3
   3fe14:	d1d3      	bne.n	3fdbe <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fe16:	2d02      	cmp	r5, #2
   3fe18:	e7ed      	b.n	3fdf6 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   3fe1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fe1e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   3fe22:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   3fe26:	4919      	ldr	r1, [pc, #100]	; (3fe8c <nrfx_gpiote_irq_handler+0x1b8>)
   3fe28:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   3fe2c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fe2e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fe32:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   3fe36:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   3fe38:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   3fe3a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3fe3e:	f47f af73 	bne.w	3fd28 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3fe42:	2401      	movs	r4, #1
    while (mask)
   3fe44:	b916      	cbnz	r6, 3fe4c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   3fe46:	b007      	add	sp, #28
   3fe48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   3fe4c:	fa96 f3a6 	rbit	r3, r6
   3fe50:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3fe54:	fa04 f203 	lsl.w	r2, r4, r3
   3fe58:	009b      	lsls	r3, r3, #2
   3fe5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fe5e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fe62:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   3fe66:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   3fe6a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3fe6e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3fe72:	f3c1 4101 	ubfx	r1, r1, #16, #2
   3fe76:	f7ff fcbb 	bl	3f7f0 <call_handler>
   3fe7a:	e7e3      	b.n	3fe44 <nrfx_gpiote_irq_handler+0x170>
   3fe7c:	40006100 	.word	0x40006100
   3fe80:	40006000 	.word	0x40006000
   3fe84:	40006120 	.word	0x40006120
   3fe88:	200007d8 	.word	0x200007d8
   3fe8c:	50000300 	.word	0x50000300

0003fe90 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   3fe90:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   3fe92:	4b3b      	ldr	r3, [pc, #236]	; (3ff80 <twi_tx_start_transfer+0xf0>)
   3fe94:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3fe96:	2300      	movs	r3, #0
   3fe98:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   3fe9c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   3fea0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   3fea4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   3fea8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   3feac:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   3feb0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   3feb4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   3feb8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   3febc:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   3febe:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3fec2:	2301      	movs	r3, #1
   3fec4:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   3fec6:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   3feca:	429a      	cmp	r2, r3
   3fecc:	bf18      	it	ne
   3fece:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
   3fed0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   3fed2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   3fed4:	4293      	cmp	r3, r2
{
   3fed6:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   3fed8:	d20e      	bcs.n	3fef8 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   3feda:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
   3fedc:	5cd3      	ldrb	r3, [r2, r3]
   3fede:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
   3fee2:	680b      	ldr	r3, [r1, #0]
   3fee4:	b303      	cbz	r3, 3ff28 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   3fee6:	f240 2386 	movw	r3, #646	; 0x286
   3feea:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   3feec:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   3feee:	4825      	ldr	r0, [pc, #148]	; (3ff84 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
   3fef0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   3fef4:	b002      	add	sp, #8
   3fef6:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
   3fef8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   3fefc:	b113      	cbz	r3, 3ff04 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3fefe:	2301      	movs	r3, #1
   3ff00:	61c3      	str	r3, [r0, #28]
            return false;
   3ff02:	e7ee      	b.n	3fee2 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   3ff04:	6a0b      	ldr	r3, [r1, #32]
   3ff06:	f013 0f40 	tst.w	r3, #64	; 0x40
   3ff0a:	f04f 0301 	mov.w	r3, #1
   3ff0e:	bf16      	itet	ne
   3ff10:	61c3      	strne	r3, [r0, #28]
   3ff12:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   3ff14:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
   3ff18:	e7e3      	b.n	3fee2 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
   3ff1a:	4620      	mov	r0, r4
   3ff1c:	f007 ffd7 	bl	47ece <twi_transfer>
        while ((hw_timeout > 0) &&
   3ff20:	b128      	cbz	r0, 3ff2e <twi_tx_start_transfer+0x9e>
            hw_timeout--;
   3ff22:	9b01      	ldr	r3, [sp, #4]
   3ff24:	3b01      	subs	r3, #1
   3ff26:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   3ff28:	9b01      	ldr	r3, [sp, #4]
   3ff2a:	2b00      	cmp	r3, #0
   3ff2c:	dcf5      	bgt.n	3ff1a <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
   3ff2e:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   3ff32:	b95b      	cbnz	r3, 3ff4c <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   3ff34:	4813      	ldr	r0, [pc, #76]	; (3ff84 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
   3ff36:	9b01      	ldr	r3, [sp, #4]
   3ff38:	2b00      	cmp	r3, #0
   3ff3a:	dcdb      	bgt.n	3fef4 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   3ff3c:	2300      	movs	r3, #0
   3ff3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   3ff42:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   3ff44:	4810      	ldr	r0, [pc, #64]	; (3ff88 <twi_tx_start_transfer+0xf8>)
   3ff46:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   3ff4a:	e7d3      	b.n	3fef4 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   3ff4c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   3ff50:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   3ff54:	b18b      	cbz	r3, 3ff7a <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   3ff56:	4a0d      	ldr	r2, [pc, #52]	; (3ff8c <twi_tx_start_transfer+0xfc>)
   3ff58:	480b      	ldr	r0, [pc, #44]	; (3ff88 <twi_tx_start_transfer+0xf8>)
   3ff5a:	f013 0f01 	tst.w	r3, #1
   3ff5e:	bf18      	it	ne
   3ff60:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   3ff62:	f013 0f02 	tst.w	r3, #2
   3ff66:	f102 0201 	add.w	r2, r2, #1
   3ff6a:	bf18      	it	ne
   3ff6c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   3ff6e:	f013 0f04 	tst.w	r3, #4
   3ff72:	4b07      	ldr	r3, [pc, #28]	; (3ff90 <twi_tx_start_transfer+0x100>)
   3ff74:	bf18      	it	ne
   3ff76:	4618      	movne	r0, r3
   3ff78:	e7dd      	b.n	3ff36 <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
   3ff7a:	4803      	ldr	r0, [pc, #12]	; (3ff88 <twi_tx_start_transfer+0xf8>)
   3ff7c:	e7db      	b.n	3ff36 <twi_tx_start_transfer+0xa6>
   3ff7e:	bf00      	nop
   3ff80:	000186a0 	.word	0x000186a0
   3ff84:	0bad0000 	.word	0x0bad0000
   3ff88:	0bad0001 	.word	0x0bad0001
   3ff8c:	0bae0000 	.word	0x0bae0000
   3ff90:	0bae0002 	.word	0x0bae0002

0003ff94 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   3ff94:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   3ff96:	4b33      	ldr	r3, [pc, #204]	; (40064 <CONFIG_PM_SRAM_SIZE+0x64>)
   3ff98:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ff9a:	2300      	movs	r3, #0
   3ff9c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   3ffa0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   3ffa4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   3ffa8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   3ffac:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   3ffb0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   3ffb4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   3ffb8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   3ffbc:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   3ffbe:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   3ffc2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   3ffc4:	2b01      	cmp	r3, #1
{
   3ffc6:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   3ffc8:	d117      	bne.n	3fffa <twi_rx_start_transfer+0x66>
   3ffca:	6a0b      	ldr	r3, [r1, #32]
   3ffcc:	065b      	lsls	r3, r3, #25
   3ffce:	d414      	bmi.n	3fffa <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   3ffd0:	2302      	movs	r3, #2
   3ffd2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ffd6:	2301      	movs	r3, #1
   3ffd8:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   3ffda:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   3ffde:	2a02      	cmp	r2, #2
   3ffe0:	bf18      	it	ne
   3ffe2:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   3ffe4:	680b      	ldr	r3, [r1, #0]
   3ffe6:	b18b      	cbz	r3, 4000c <CONFIG_PM_SRAM_SIZE+0xc>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   3ffe8:	f240 2386 	movw	r3, #646	; 0x286
   3ffec:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   3ffee:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   3fff0:	481d      	ldr	r0, [pc, #116]	; (40068 <CONFIG_PM_SRAM_SIZE+0x68>)
    p_reg->INTENSET = mask;
   3fff2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   3fff6:	b002      	add	sp, #8
   3fff8:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
   3fffa:	2301      	movs	r3, #1
   3fffc:	e7e9      	b.n	3ffd2 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
   3fffe:	4620      	mov	r0, r4
   40000:	f007 ff65 	bl	47ece <twi_transfer>
        while ((hw_timeout > 0) &&
   40004:	b128      	cbz	r0, 40012 <CONFIG_PM_SRAM_SIZE+0x12>
               hw_timeout--;
   40006:	9b01      	ldr	r3, [sp, #4]
   40008:	3b01      	subs	r3, #1
   4000a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   4000c:	9b01      	ldr	r3, [sp, #4]
   4000e:	2b00      	cmp	r3, #0
   40010:	dcf5      	bgt.n	3fffe <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
   40012:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   40016:	b95b      	cbnz	r3, 40030 <CONFIG_PM_SRAM_SIZE+0x30>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   40018:	4813      	ldr	r0, [pc, #76]	; (40068 <CONFIG_PM_SRAM_SIZE+0x68>)
        if (hw_timeout <= 0)
   4001a:	9b01      	ldr	r3, [sp, #4]
   4001c:	2b00      	cmp	r3, #0
   4001e:	dcea      	bgt.n	3fff6 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   40020:	2300      	movs	r3, #0
   40022:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   40026:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   40028:	4810      	ldr	r0, [pc, #64]	; (4006c <CONFIG_PM_SRAM_SIZE+0x6c>)
   4002a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   4002e:	e7e2      	b.n	3fff6 <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
   40030:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   40034:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   40038:	b18b      	cbz	r3, 4005e <CONFIG_PM_SRAM_SIZE+0x5e>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   4003a:	4a0d      	ldr	r2, [pc, #52]	; (40070 <CONFIG_PM_SRAM_SIZE+0x70>)
   4003c:	480b      	ldr	r0, [pc, #44]	; (4006c <CONFIG_PM_SRAM_SIZE+0x6c>)
   4003e:	f013 0f01 	tst.w	r3, #1
   40042:	bf18      	it	ne
   40044:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   40046:	f013 0f02 	tst.w	r3, #2
   4004a:	f102 0201 	add.w	r2, r2, #1
   4004e:	bf18      	it	ne
   40050:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   40052:	f013 0f04 	tst.w	r3, #4
   40056:	4b07      	ldr	r3, [pc, #28]	; (40074 <CONFIG_PM_SRAM_SIZE+0x74>)
   40058:	bf18      	it	ne
   4005a:	4618      	movne	r0, r3
   4005c:	e7dd      	b.n	4001a <CONFIG_PM_SRAM_SIZE+0x1a>
                ret_code = NRFX_ERROR_INTERNAL;
   4005e:	4803      	ldr	r0, [pc, #12]	; (4006c <CONFIG_PM_SRAM_SIZE+0x6c>)
   40060:	e7db      	b.n	4001a <CONFIG_PM_SRAM_SIZE+0x1a>
   40062:	bf00      	nop
   40064:	000186a0 	.word	0x000186a0
   40068:	0bad0000 	.word	0x0bad0000
   4006c:	0bad0001 	.word	0x0bad0001
   40070:	0bae0000 	.word	0x0bae0000
   40074:	0bae0002 	.word	0x0bae0002

00040078 <nrfx_twi_init>:
{
   40078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   4007c:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   4007e:	4d2b      	ldr	r5, [pc, #172]	; (4012c <nrfx_twi_init+0xb4>)
   40080:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   40084:	fb0e fe07 	mul.w	lr, lr, r7
   40088:	eb05 040e 	add.w	r4, r5, lr
   4008c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   40090:	2e00      	cmp	r6, #0
   40092:	d149      	bne.n	40128 <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   40094:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   40098:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   4009c:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
   4009e:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   400a0:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   400a4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   400a8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   400ac:	7b4b      	ldrb	r3, [r1, #13]
   400ae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   400b2:	7b8b      	ldrb	r3, [r1, #14]
   400b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   400b8:	b9e3      	cbnz	r3, 400f4 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
   400ba:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
   400bc:	4b1c      	ldr	r3, [pc, #112]	; (40130 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
   400be:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   400c2:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   400c4:	2c01      	cmp	r4, #1
   400c6:	bf08      	it	eq
   400c8:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   400ca:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
   400ce:	bf18      	it	ne
   400d0:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   400d4:	f240 6e0c 	movw	lr, #1548	; 0x60c
   400d8:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   400dc:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   400de:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   400e2:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   400e4:	2c01      	cmp	r4, #1
   400e6:	bf18      	it	ne
   400e8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   400ec:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   400f0:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   400f4:	7bcb      	ldrb	r3, [r1, #15]
   400f6:	b92b      	cbnz	r3, 40104 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   400f8:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   400fc:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   40100:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   40104:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   40106:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   4010a:	b122      	cbz	r2, 40116 <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   4010c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   4010e:	f340 3007 	sbfx	r0, r0, #12, #8
   40112:	f7f8 fccd 	bl	38ab0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   40116:	233c      	movs	r3, #60	; 0x3c
   40118:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   4011c:	4805      	ldr	r0, [pc, #20]	; (40134 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   4011e:	2301      	movs	r3, #1
   40120:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   40124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   40128:	4803      	ldr	r0, [pc, #12]	; (40138 <nrfx_twi_init+0xc0>)
   4012a:	e7fb      	b.n	40124 <nrfx_twi_init+0xac>
   4012c:	20002e40 	.word	0x20002e40
   40130:	50000300 	.word	0x50000300
   40134:	0bad0000 	.word	0x0bad0000
   40138:	0bad0005 	.word	0x0bad0005

0004013c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   4013c:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4013e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   40140:	2105      	movs	r1, #5
   40142:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   40146:	4b04      	ldr	r3, [pc, #16]	; (40158 <nrfx_twi_enable+0x1c>)
   40148:	213c      	movs	r1, #60	; 0x3c
   4014a:	fb01 3302 	mla	r3, r1, r2, r3
   4014e:	2202      	movs	r2, #2
   40150:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   40154:	4770      	bx	lr
   40156:	bf00      	nop
   40158:	20002e40 	.word	0x20002e40

0004015c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   4015c:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   4015e:	4a0b      	ldr	r2, [pc, #44]	; (4018c <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   40160:	7901      	ldrb	r1, [r0, #4]
   40162:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   40166:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   4016a:	f022 0203 	bic.w	r2, r2, #3
   4016e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   40172:	2200      	movs	r2, #0
   40174:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   40178:	4b05      	ldr	r3, [pc, #20]	; (40190 <nrfx_twi_disable+0x34>)
   4017a:	203c      	movs	r0, #60	; 0x3c
   4017c:	fb00 3301 	mla	r3, r0, r1, r3
   40180:	2101      	movs	r1, #1
   40182:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
   40186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   4018a:	4770      	bx	lr
   4018c:	00044286 	.word	0x00044286
   40190:	20002e40 	.word	0x20002e40

00040194 <nrfx_twi_uninit>:
{
   40194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   40196:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   40198:	4d1e      	ldr	r5, [pc, #120]	; (40214 <nrfx_twi_uninit+0x80>)
   4019a:	233c      	movs	r3, #60	; 0x3c
   4019c:	4373      	muls	r3, r6
{
   4019e:	4604      	mov	r4, r0
    if (p_cb->handler)
   401a0:	58eb      	ldr	r3, [r5, r3]
   401a2:	b123      	cbz	r3, 401ae <nrfx_twi_uninit+0x1a>
   401a4:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twi));
   401a6:	f340 3007 	sbfx	r0, r0, #12, #8
   401aa:	f7f8 fc8f 	bl	38acc <arch_irq_disable>
    nrfx_twi_disable(p_instance);
   401ae:	4620      	mov	r0, r4
   401b0:	f7ff ffd4 	bl	4015c <nrfx_twi_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   401b4:	233c      	movs	r3, #60	; 0x3c
   401b6:	fb03 5306 	mla	r3, r3, r6, r5
   401ba:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   401be:	bb12      	cbnz	r2, 40206 <nrfx_twi_uninit+0x72>
   401c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   401c4:	b9fb      	cbnz	r3, 40206 <nrfx_twi_uninit+0x72>
        nrf_gpio_cfg_default(nrf_twi_scl_pin_get(p_instance->p_twi));
   401c6:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
   401c8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
        case 0: return NRF_P0;
   401cc:	4b12      	ldr	r3, [pc, #72]	; (40218 <nrfx_twi_uninit+0x84>)
    *p_pin = pin_number & 0x1F;
   401ce:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   401d2:	0952      	lsrs	r2, r2, #5
        case 0: return NRF_P0;
   401d4:	2a01      	cmp	r2, #1
   401d6:	bf08      	it	eq
   401d8:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
   401da:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 0: return NRF_P0;
   401de:	bf18      	it	ne
   401e0:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   401e4:	2002      	movs	r0, #2
   401e6:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
        nrf_gpio_cfg_default(nrf_twi_sda_pin_get(p_instance->p_twi));
   401ea:	6822      	ldr	r2, [r4, #0]
    return p_reg->PSEL.SDA;
   401ec:	f8d2 250c 	ldr.w	r2, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   401f0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   401f4:	0952      	lsrs	r2, r2, #5
        case 0: return NRF_P0;
   401f6:	2a01      	cmp	r2, #1
   401f8:	bf18      	it	ne
   401fa:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   401fe:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   40202:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   40206:	233c      	movs	r3, #60	; 0x3c
   40208:	fb03 5506 	mla	r5, r3, r6, r5
   4020c:	2300      	movs	r3, #0
   4020e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   40212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40214:	20002e40 	.word	0x20002e40
   40218:	50000300 	.word	0x50000300

0004021c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   4021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   40220:	4f31      	ldr	r7, [pc, #196]	; (402e8 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   40222:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   40224:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   40228:	233c      	movs	r3, #60	; 0x3c
   4022a:	fb03 7304 	mla	r3, r3, r4, r7
{
   4022e:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   40230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   40234:	2b01      	cmp	r3, #1
{
   40236:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   40238:	d104      	bne.n	40244 <nrfx_twi_xfer+0x28>
   4023a:	780b      	ldrb	r3, [r1, #0]
   4023c:	2b01      	cmp	r3, #1
   4023e:	d106      	bne.n	4024e <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   40240:	482a      	ldr	r0, [pc, #168]	; (402ec <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   40242:	e011      	b.n	40268 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   40244:	2b02      	cmp	r3, #2
   40246:	d102      	bne.n	4024e <nrfx_twi_xfer+0x32>
   40248:	780b      	ldrb	r3, [r1, #0]
   4024a:	2b01      	cmp	r3, #1
   4024c:	d1f8      	bne.n	40240 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   4024e:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   40250:	4b27      	ldr	r3, [pc, #156]	; (402f0 <nrfx_twi_xfer+0xd4>)
   40252:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   40256:	fb06 7604 	mla	r6, r6, r4, r7
   4025a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   4025e:	b12b      	cbz	r3, 4026c <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   40260:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   40262:	4824      	ldr	r0, [pc, #144]	; (402f4 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   40264:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   40268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   4026c:	f08c 0304 	eor.w	r3, ip, #4
   40270:	f3c3 0380 	ubfx	r3, r3, #2, #1
   40274:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   40278:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   4027c:	46a8      	mov	r8, r5
   4027e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   40282:	f106 0e0c 	add.w	lr, r6, #12
   40286:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   4028a:	f8d8 3000 	ldr.w	r3, [r8]
   4028e:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   40292:	686b      	ldr	r3, [r5, #4]
   40294:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   40296:	68eb      	ldr	r3, [r5, #12]
   40298:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   4029a:	786b      	ldrb	r3, [r5, #1]
   4029c:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   402a0:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   402a2:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   402a6:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   402a8:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   402ac:	d017      	beq.n	402de <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   402ae:	b99b      	cbnz	r3, 402d8 <nrfx_twi_xfer+0xbc>
   402b0:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   402b4:	233c      	movs	r3, #60	; 0x3c
   402b6:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   402ba:	4651      	mov	r1, sl
   402bc:	4648      	mov	r0, r9
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   402be:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   402c2:	f7ff fde5 	bl	3fe90 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   402c6:	233c      	movs	r3, #60	; 0x3c
   402c8:	435c      	muls	r4, r3
   402ca:	193a      	adds	r2, r7, r4
   402cc:	593b      	ldr	r3, [r7, r4]
   402ce:	2b00      	cmp	r3, #0
   402d0:	d1ca      	bne.n	40268 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   402d2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   402d6:	e7c7      	b.n	40268 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   402d8:	f04f 0c01 	mov.w	ip, #1
   402dc:	e7ea      	b.n	402b4 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   402de:	4651      	mov	r1, sl
   402e0:	4648      	mov	r0, r9
   402e2:	f7ff fe57 	bl	3ff94 <twi_rx_start_transfer>
   402e6:	e7ee      	b.n	402c6 <nrfx_twi_xfer+0xaa>
   402e8:	20002e40 	.word	0x20002e40
   402ec:	0bad0005 	.word	0x0bad0005
   402f0:	00044286 	.word	0x00044286
   402f4:	0bad000b 	.word	0x0bad000b

000402f8 <nrfx_twi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWI1_ENABLED)
void nrfx_twi_1_irq_handler(void)
{
   402f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   402fa:	4c33      	ldr	r4, [pc, #204]	; (403c8 <nrfx_twi_1_irq_handler+0xd0>)
{
   402fc:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   402fe:	4621      	mov	r1, r4
   40300:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   40304:	f007 fde3 	bl	47ece <twi_transfer>
   40308:	2800      	cmp	r0, #0
   4030a:	d15b      	bne.n	403c4 <nrfx_twi_1_irq_handler+0xcc>
    if (!p_cb->error &&
   4030c:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   40310:	bb07      	cbnz	r7, 40354 <nrfx_twi_1_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   40312:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
   40314:	1e93      	subs	r3, r2, #2
   40316:	2b01      	cmp	r3, #1
   40318:	d81c      	bhi.n	40354 <nrfx_twi_1_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   4031a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   4031c:	69a3      	ldr	r3, [r4, #24]
   4031e:	4298      	cmp	r0, r3
   40320:	d118      	bne.n	40354 <nrfx_twi_1_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   40322:	69e3      	ldr	r3, [r4, #28]
   40324:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   40326:	6963      	ldr	r3, [r4, #20]
   40328:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   4032a:	6a23      	ldr	r3, [r4, #32]
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   4032c:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   40330:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   40334:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   40336:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            (void)twi_tx_start_transfer(p_twi, p_cb);
   4033a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   4033e:	d104      	bne.n	4034a <nrfx_twi_1_irq_handler+0x52>
    twi_irq_handler(NRF_TWI1, &m_cb[NRFX_TWI1_INST_IDX]);
}
   40340:	b007      	add	sp, #28
   40342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   40346:	f7ff bda3 	b.w	3fe90 <twi_tx_start_transfer>
}
   4034a:	b007      	add	sp, #28
   4034c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   40350:	f7ff be20 	b.w	3ff94 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   40354:	4e1d      	ldr	r6, [pc, #116]	; (403cc <nrfx_twi_1_irq_handler+0xd4>)
   40356:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   40358:	ad01      	add	r5, sp, #4
   4035a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   4035c:	6833      	ldr	r3, [r6, #0]
   4035e:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   40360:	b34f      	cbz	r7, 403b6 <nrfx_twi_1_irq_handler+0xbe>
    uint32_t error_source = p_reg->ERRORSRC;
   40362:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   40366:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   4036a:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   4036e:	f013 0102 	ands.w	r1, r3, #2
   40372:	d006      	beq.n	40382 <nrfx_twi_1_irq_handler+0x8a>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   40374:	2301      	movs	r3, #1
   40376:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   4037a:	2300      	movs	r3, #0
   4037c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   40380:	e007      	b.n	40392 <nrfx_twi_1_irq_handler+0x9a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   40382:	f013 0204 	ands.w	r2, r3, #4
   40386:	d009      	beq.n	4039c <nrfx_twi_1_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   40388:	2302      	movs	r3, #2
   4038a:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   4038e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
   40392:	e9d4 3100 	ldrd	r3, r1, [r4]
   40396:	4668      	mov	r0, sp
   40398:	4798      	blx	r3
}
   4039a:	e013      	b.n	403c4 <nrfx_twi_1_irq_handler+0xcc>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   4039c:	f013 0301 	ands.w	r3, r3, #1
   403a0:	d005      	beq.n	403ae <nrfx_twi_1_irq_handler+0xb6>
                event.type = NRFX_TWI_EVT_OVERRUN;
   403a2:	2303      	movs	r3, #3
   403a4:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   403a8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   403ac:	e7f1      	b.n	40392 <nrfx_twi_1_irq_handler+0x9a>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   403ae:	2204      	movs	r2, #4
   403b0:	f88d 2000 	strb.w	r2, [sp]
   403b4:	e7e2      	b.n	4037c <nrfx_twi_1_irq_handler+0x84>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   403b6:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
   403b8:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   403bc:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
   403be:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   403c2:	d5e6      	bpl.n	40392 <nrfx_twi_1_irq_handler+0x9a>
}
   403c4:	b007      	add	sp, #28
   403c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   403c8:	20002e40 	.word	0x20002e40
   403cc:	20002e4c 	.word	0x20002e4c

000403d0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   403d0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   403d2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   403d6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   403d8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   403da:	6002      	str	r2, [r0, #0]
}
   403dc:	4802      	ldr	r0, [pc, #8]	; (403e8 <nrf_gpio_pin_port_decode+0x18>)
   403de:	bf18      	it	ne
   403e0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   403e4:	4770      	bx	lr
   403e6:	bf00      	nop
   403e8:	50000300 	.word	0x50000300

000403ec <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   403ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   403ee:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   403f0:	f007 fe05 	bl	47ffe <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   403f4:	4608      	mov	r0, r1
   403f6:	f007 fe02 	bl	47ffe <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   403fa:	a801      	add	r0, sp, #4
   403fc:	9601      	str	r6, [sp, #4]
   403fe:	f7ff ffe7 	bl	403d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   40402:	9b01      	ldr	r3, [sp, #4]
   40404:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   40408:	460c      	mov	r4, r1
   4040a:	f240 610d 	movw	r1, #1549	; 0x60d
   4040e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   40412:	a801      	add	r0, sp, #4
   40414:	9401      	str	r4, [sp, #4]
   40416:	f7ff ffdb 	bl	403d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   4041a:	9b01      	ldr	r3, [sp, #4]
   4041c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   40420:	2509      	movs	r5, #9
   40422:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   40426:	2004      	movs	r0, #4
   40428:	f007 fcf7 	bl	47e1a <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4042c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4042e:	a801      	add	r0, sp, #4
   40430:	9401      	str	r4, [sp, #4]
   40432:	f7ff ffcd 	bl	403d0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   40436:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   40438:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   4043c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   4043e:	07db      	lsls	r3, r3, #31
   40440:	d415      	bmi.n	4046e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   40442:	a801      	add	r0, sp, #4
   40444:	9601      	str	r6, [sp, #4]
   40446:	f7ff ffc3 	bl	403d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4044a:	9b01      	ldr	r3, [sp, #4]
   4044c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   40450:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   40454:	2004      	movs	r0, #4
   40456:	f007 fce0 	bl	47e1a <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   4045a:	4630      	mov	r0, r6
   4045c:	f007 fdcf 	bl	47ffe <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   40460:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   40462:	2004      	movs	r0, #4
   40464:	f007 fcd9 	bl	47e1a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   40468:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   4046c:	d1df      	bne.n	4042e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4046e:	a801      	add	r0, sp, #4
   40470:	9401      	str	r4, [sp, #4]
   40472:	f7ff ffad 	bl	403d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   40476:	9a01      	ldr	r2, [sp, #4]
   40478:	2301      	movs	r3, #1
   4047a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   4047c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   40480:	2004      	movs	r0, #4
   40482:	f007 fcca 	bl	47e1a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   40486:	4620      	mov	r0, r4
   40488:	f007 fdb9 	bl	47ffe <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   4048c:	2004      	movs	r0, #4
   4048e:	f007 fcc4 	bl	47e1a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   40492:	a801      	add	r0, sp, #4
   40494:	9401      	str	r4, [sp, #4]
   40496:	f7ff ff9b 	bl	403d0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   4049a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   4049c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   404a0:	4803      	ldr	r0, [pc, #12]	; (404b0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   404a2:	40d3      	lsrs	r3, r2
   404a4:	f003 0301 	and.w	r3, r3, #1
   404a8:	1ac0      	subs	r0, r0, r3
   404aa:	b003      	add	sp, #12
   404ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   404ae:	bf00      	nop
   404b0:	0bad0001 	.word	0x0bad0001

000404b4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   404b4:	4b14      	ldr	r3, [pc, #80]	; (40508 <z_sys_init_run_level+0x54>)
{
   404b6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   404b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   404bc:	3001      	adds	r0, #1
   404be:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   404c2:	42a6      	cmp	r6, r4
   404c4:	d800      	bhi.n	404c8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   404c6:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   404c8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   404cc:	b1cd      	cbz	r5, 40502 <z_sys_init_run_level+0x4e>
			int rc = entry->init_fn.dev(dev);
   404ce:	4628      	mov	r0, r5
   404d0:	4798      	blx	r3
			if (rc != 0) {
   404d2:	68eb      	ldr	r3, [r5, #12]
   404d4:	b940      	cbnz	r0, 404e8 <z_sys_init_run_level+0x34>
			dev->state->initialized = true;
   404d6:	785a      	ldrb	r2, [r3, #1]
   404d8:	f042 0201 	orr.w	r2, r2, #1
   404dc:	705a      	strb	r2, [r3, #1]
				(void)pm_device_runtime_auto_enable(dev);
   404de:	4628      	mov	r0, r5
   404e0:	f004 fe90 	bl	45204 <pm_device_runtime_auto_enable>
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   404e4:	3408      	adds	r4, #8
   404e6:	e7ec      	b.n	404c2 <z_sys_init_run_level+0xe>
				if (rc < 0) {
   404e8:	2800      	cmp	r0, #0
   404ea:	bfb8      	it	lt
   404ec:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   404ee:	28ff      	cmp	r0, #255	; 0xff
   404f0:	bfa8      	it	ge
   404f2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   404f4:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   404f6:	68ea      	ldr	r2, [r5, #12]
   404f8:	7853      	ldrb	r3, [r2, #1]
   404fa:	f043 0301 	orr.w	r3, r3, #1
   404fe:	7053      	strb	r3, [r2, #1]
			if (rc == 0) {
   40500:	e7f0      	b.n	404e4 <z_sys_init_run_level+0x30>
			(void)entry->init_fn.sys();
   40502:	4798      	blx	r3
   40504:	e7ee      	b.n	404e4 <z_sys_init_run_level+0x30>
   40506:	bf00      	nop
   40508:	000495dc 	.word	0x000495dc

0004050c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   4050c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   4050e:	4b0a      	ldr	r3, [pc, #40]	; (40538 <bg_thread_main+0x2c>)
   40510:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   40512:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   40514:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   40516:	f7ff ffcd 	bl	404b4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   4051a:	f001 fb1b 	bl	41b54 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   4051e:	2004      	movs	r0, #4
   40520:	f7ff ffc8 	bl	404b4 <z_sys_init_run_level>

	z_init_static_threads();
   40524:	f000 f974 	bl	40810 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   40528:	f7f7 fa30 	bl	3798c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   4052c:	4a03      	ldr	r2, [pc, #12]	; (4053c <bg_thread_main+0x30>)
   4052e:	7b13      	ldrb	r3, [r2, #12]
   40530:	f023 0301 	bic.w	r3, r3, #1
   40534:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   40536:	bd08      	pop	{r3, pc}
   40538:	20003a80 	.word	0x20003a80
   4053c:	20002508 	.word	0x20002508

00040540 <z_bss_zero>:
{
   40540:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   40542:	4803      	ldr	r0, [pc, #12]	; (40550 <z_bss_zero+0x10>)
   40544:	4a03      	ldr	r2, [pc, #12]	; (40554 <z_bss_zero+0x14>)
   40546:	2100      	movs	r1, #0
   40548:	1a12      	subs	r2, r2, r0
   4054a:	f007 fd8c 	bl	48066 <z_early_memset>
}
   4054e:	bd08      	pop	{r3, pc}
   40550:	20000b50 	.word	0x20000b50
   40554:	20003a84 	.word	0x20003a84

00040558 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   40558:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   4055a:	4e16      	ldr	r6, [pc, #88]	; (405b4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   4055c:	4d16      	ldr	r5, [pc, #88]	; (405b8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   4055e:	4917      	ldr	r1, [pc, #92]	; (405bc <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   40560:	2390      	movs	r3, #144	; 0x90
{
   40562:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   40564:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   40568:	2201      	movs	r2, #1
   4056a:	2300      	movs	r3, #0
   4056c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   40570:	220f      	movs	r2, #15
   40572:	e9cd 3202 	strd	r3, r2, [sp, #8]
   40576:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40578:	2314      	movs	r3, #20
   4057a:	fb03 5500 	mla	r5, r3, r0, r5
{
   4057e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   40580:	f44f 70c0 	mov.w	r0, #384	; 0x180
   40584:	fb00 1104 	mla	r1, r0, r4, r1
   40588:	4b0d      	ldr	r3, [pc, #52]	; (405c0 <z_init_cpu+0x68>)
   4058a:	9500      	str	r5, [sp, #0]
   4058c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   40590:	4630      	mov	r0, r6
   40592:	f000 f8d9 	bl	40748 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   40596:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   40598:	4a0a      	ldr	r2, [pc, #40]	; (405c4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   4059a:	60ee      	str	r6, [r5, #12]
   4059c:	f023 0304 	bic.w	r3, r3, #4
   405a0:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   405a2:	f44f 6304 	mov.w	r3, #2112	; 0x840
   405a6:	fb04 3303 	mla	r3, r4, r3, r3
   405aa:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   405ac:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   405ae:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   405b0:	b006      	add	sp, #24
   405b2:	bd70      	pop	{r4, r5, r6, pc}
   405b4:	20002478 	.word	0x20002478
   405b8:	20002e7c 	.word	0x20002e7c
   405bc:	20005b40 	.word	0x20005b40
   405c0:	000408c9 	.word	0x000408c9
   405c4:	20005300 	.word	0x20005300

000405c8 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   405c8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   405ca:	2000      	movs	r0, #0
{
   405cc:	b0aa      	sub	sp, #168	; 0xa8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   405ce:	f7ff ff71 	bl	404b4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   405d2:	4b2d      	ldr	r3, [pc, #180]	; (40688 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   405d4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   405d8:	4d2c      	ldr	r5, [pc, #176]	; (4068c <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   405da:	4e2d      	ldr	r6, [pc, #180]	; (40690 <z_cstart+0xc8>)
   405dc:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   405de:	4f2d      	ldr	r7, [pc, #180]	; (40694 <z_cstart+0xcc>)
   405e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   405e4:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   405e6:	23e0      	movs	r3, #224	; 0xe0
   405e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   405ec:	2400      	movs	r4, #0
   405ee:	2320      	movs	r3, #32
   405f0:	77eb      	strb	r3, [r5, #31]
   405f2:	762c      	strb	r4, [r5, #24]
   405f4:	766c      	strb	r4, [r5, #25]
   405f6:	76ac      	strb	r4, [r5, #26]
   405f8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   405fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   405fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   40602:	626b      	str	r3, [r5, #36]	; 0x24
   40604:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   40608:	f7f8 fcd6 	bl	38fb8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   4060c:	f7f8 fa30 	bl	38a70 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   40610:	f04f 33ff 	mov.w	r3, #4294967295
   40614:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   40616:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   40618:	f7f8 fe08 	bl	3922c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   4061c:	f7f8 fd6e 	bl	390fc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   40620:	f240 1301 	movw	r3, #257	; 0x101
   40624:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   40628:	ab06      	add	r3, sp, #24
   4062a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   4062c:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
	dummy_thread->resource_pool = NULL;
   40630:	9427      	str	r4, [sp, #156]	; 0x9c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   40632:	f007 fcf1 	bl	48018 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   40636:	2001      	movs	r0, #1
   40638:	f7ff ff3c 	bl	404b4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   4063c:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   4063e:	4d16      	ldr	r5, [pc, #88]	; (40698 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   40640:	f7ff ff38 	bl	404b4 <z_sys_init_run_level>
	z_sched_init();
   40644:	f000 fe9e 	bl	41384 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40648:	4b14      	ldr	r3, [pc, #80]	; (4069c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   4064a:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4064c:	9305      	str	r3, [sp, #20]
   4064e:	2301      	movs	r3, #1
   40650:	4913      	ldr	r1, [pc, #76]	; (406a0 <z_cstart+0xd8>)
   40652:	9400      	str	r4, [sp, #0]
   40654:	e9cd 4303 	strd	r4, r3, [sp, #12]
   40658:	f44f 6200 	mov.w	r2, #2048	; 0x800
   4065c:	463b      	mov	r3, r7
   4065e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   40662:	4628      	mov	r0, r5
   40664:	f000 f870 	bl	40748 <z_setup_new_thread>
   40668:	7b6a      	ldrb	r2, [r5, #13]
   4066a:	4606      	mov	r6, r0
   4066c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   40670:	4628      	mov	r0, r5
   40672:	736a      	strb	r2, [r5, #13]
   40674:	f007 ffd1 	bl	4861a <z_ready_thread>
	z_init_cpu(0);
   40678:	4620      	mov	r0, r4
   4067a:	f7ff ff6d 	bl	40558 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   4067e:	463a      	mov	r2, r7
   40680:	4631      	mov	r1, r6
   40682:	4628      	mov	r0, r5
   40684:	f7f8 fb16 	bl	38cb4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   40688:	20005b40 	.word	0x20005b40
   4068c:	e000ed00 	.word	0xe000ed00
   40690:	20002e7c 	.word	0x20002e7c
   40694:	0004050d 	.word	0x0004050d
   40698:	20002508 	.word	0x20002508
   4069c:	00049de0 	.word	0x00049de0
   406a0:	20005cc0 	.word	0x20005cc0

000406a4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   406a4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   406a6:	4c06      	ldr	r4, [pc, #24]	; (406c0 <statics_init+0x1c>)
   406a8:	4d06      	ldr	r5, [pc, #24]	; (406c4 <statics_init+0x20>)
   406aa:	42ac      	cmp	r4, r5
   406ac:	d301      	bcc.n	406b2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   406ae:	2000      	movs	r0, #0
   406b0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   406b2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   406b6:	4620      	mov	r0, r4
   406b8:	f007 fcd9 	bl	4806e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   406bc:	3414      	adds	r4, #20
   406be:	e7f4      	b.n	406aa <statics_init+0x6>
   406c0:	200009b0 	.word	0x200009b0
   406c4:	200009b0 	.word	0x200009b0

000406c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   406c8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   406ca:	4c06      	ldr	r4, [pc, #24]	; (406e4 <init_mem_slab_module+0x1c>)
   406cc:	4d06      	ldr	r5, [pc, #24]	; (406e8 <init_mem_slab_module+0x20>)
	int rc = 0;
   406ce:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   406d0:	42ac      	cmp	r4, r5
   406d2:	d300      	bcc.n	406d6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   406d4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   406d6:	4620      	mov	r0, r4
   406d8:	f007 fd3b 	bl	48152 <create_free_list>
		if (rc < 0) {
   406dc:	2800      	cmp	r0, #0
   406de:	dbf9      	blt.n	406d4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   406e0:	341c      	adds	r4, #28
   406e2:	e7f5      	b.n	406d0 <init_mem_slab_module+0x8>
   406e4:	2000095c 	.word	0x2000095c
   406e8:	200009b0 	.word	0x200009b0

000406ec <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   406ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   406ee:	460c      	mov	r4, r1
   406f0:	f04f 0540 	mov.w	r5, #64	; 0x40
   406f4:	f3ef 8111 	mrs	r1, BASEPRI
   406f8:	f385 8812 	msr	BASEPRI_MAX, r5
   406fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   40700:	6945      	ldr	r5, [r0, #20]
   40702:	b15d      	cbz	r5, 4071c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   40704:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   40706:	682b      	ldr	r3, [r5, #0]
   40708:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   4070a:	6983      	ldr	r3, [r0, #24]
   4070c:	3301      	adds	r3, #1
   4070e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   40710:	2000      	movs	r0, #0
	__asm__ volatile(
   40712:	f381 8811 	msr	BASEPRI, r1
   40716:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   4071a:	e011      	b.n	40740 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   4071c:	ea52 0603 	orrs.w	r6, r2, r3
   40720:	d103      	bne.n	4072a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   40722:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   40724:	f06f 000b 	mvn.w	r0, #11
   40728:	e7f3      	b.n	40712 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   4072a:	e9cd 2300 	strd	r2, r3, [sp]
   4072e:	4602      	mov	r2, r0
   40730:	3008      	adds	r0, #8
   40732:	f000 fd31 	bl	41198 <z_pend_curr>
		if (result == 0) {
   40736:	b918      	cbnz	r0, 40740 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   40738:	4b02      	ldr	r3, [pc, #8]	; (40744 <k_mem_slab_alloc+0x58>)
   4073a:	689b      	ldr	r3, [r3, #8]
   4073c:	695b      	ldr	r3, [r3, #20]
   4073e:	6023      	str	r3, [r4, #0]
}
   40740:	b002      	add	sp, #8
   40742:	bd70      	pop	{r4, r5, r6, pc}
   40744:	20002e7c 	.word	0x20002e7c

00040748 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   40748:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   4074c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   4074e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   40750:	2604      	movs	r6, #4
   40752:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   40754:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   40756:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   40758:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   4075c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4075e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   40760:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   40766:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   40768:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   4076c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   4076e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   40772:	e9c0 761e 	strd	r7, r6, [r0, #120]	; 0x78
	thread_base->pended_on = NULL;
   40776:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   40778:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   4077a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4077e:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40782:	9202      	str	r2, [sp, #8]
   40784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   40786:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   40788:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4078a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   4078c:	9200      	str	r2, [sp, #0]
   4078e:	4642      	mov	r2, r8
{
   40790:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40792:	f7f8 fa5d 	bl	38c50 <arch_new_thread>
	if (!_current) {
   40796:	4b07      	ldr	r3, [pc, #28]	; (407b4 <z_setup_new_thread+0x6c>)
	new_thread->init_data = NULL;
   40798:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   4079a:	689b      	ldr	r3, [r3, #8]
	new_thread->no_wake_on_timeout = false;
   4079c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
	if (!_current) {
   407a0:	b10b      	cbz	r3, 407a6 <z_setup_new_thread+0x5e>
	new_thread->resource_pool = _current->resource_pool;
   407a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	return stack_ptr;
   407a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
   407aa:	4640      	mov	r0, r8
   407ac:	b004      	add	sp, #16
   407ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   407b2:	bf00      	nop
   407b4:	20002e7c 	.word	0x20002e7c

000407b8 <z_impl_k_thread_create>:
{
   407b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   407ba:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   407bc:	2500      	movs	r5, #0
   407be:	9505      	str	r5, [sp, #20]
   407c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   407c2:	9504      	str	r5, [sp, #16]
   407c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   407c6:	9503      	str	r5, [sp, #12]
   407c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   407ca:	9502      	str	r5, [sp, #8]
{
   407cc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   407d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   407d2:	9501      	str	r5, [sp, #4]
   407d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   407d6:	9500      	str	r5, [sp, #0]
{
   407d8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   407da:	f7ff ffb5 	bl	40748 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   407de:	f1b6 3fff 	cmp.w	r6, #4294967295
   407e2:	bf08      	it	eq
   407e4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   407e8:	d005      	beq.n	407f6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   407ea:	ea56 0307 	orrs.w	r3, r6, r7
   407ee:	d105      	bne.n	407fc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   407f0:	4620      	mov	r0, r4
   407f2:	f000 fd47 	bl	41284 <z_sched_start>
}
   407f6:	4620      	mov	r0, r4
   407f8:	b007      	add	sp, #28
   407fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   407fc:	4903      	ldr	r1, [pc, #12]	; (4080c <z_impl_k_thread_create+0x54>)
   407fe:	463a      	mov	r2, r7
   40800:	4633      	mov	r3, r6
   40802:	f104 0018 	add.w	r0, r4, #24
   40806:	f000 ff39 	bl	4167c <z_add_timeout>
   4080a:	e7f4      	b.n	407f6 <z_impl_k_thread_create+0x3e>
   4080c:	000486af 	.word	0x000486af

00040810 <z_init_static_threads>:
{
   40810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40814:	4c29      	ldr	r4, [pc, #164]	; (408bc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   40816:	4d2a      	ldr	r5, [pc, #168]	; (408c0 <z_init_static_threads+0xb0>)
{
   40818:	b087      	sub	sp, #28
   4081a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   4081c:	42ae      	cmp	r6, r5
   4081e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   40822:	d30f      	bcc.n	40844 <z_init_static_threads+0x34>
	k_sched_lock();
   40824:	f000 fd7e 	bl	41324 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   40828:	4c24      	ldr	r4, [pc, #144]	; (408bc <z_init_static_threads+0xac>)
   4082a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 408c4 <z_init_static_threads+0xb4>
   4082e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   40832:	f240 37e7 	movw	r7, #999	; 0x3e7
   40836:	42ac      	cmp	r4, r5
   40838:	d320      	bcc.n	4087c <z_init_static_threads+0x6c>
}
   4083a:	b007      	add	sp, #28
   4083c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   40840:	f000 bd84 	b.w	4134c <k_sched_unlock>
		z_setup_new_thread(
   40844:	f854 3c04 	ldr.w	r3, [r4, #-4]
   40848:	9305      	str	r3, [sp, #20]
   4084a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   4084e:	9304      	str	r3, [sp, #16]
   40850:	f854 3c10 	ldr.w	r3, [r4, #-16]
   40854:	9303      	str	r3, [sp, #12]
   40856:	f854 3c14 	ldr.w	r3, [r4, #-20]
   4085a:	9302      	str	r3, [sp, #8]
   4085c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   40860:	9301      	str	r3, [sp, #4]
   40862:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   40866:	9300      	str	r3, [sp, #0]
   40868:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   4086c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   40870:	f7ff ff6a 	bl	40748 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   40874:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   40878:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   4087a:	e7ce      	b.n	4081a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   4087c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4087e:	1c5a      	adds	r2, r3, #1
   40880:	d00d      	beq.n	4089e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   40882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   40886:	2100      	movs	r1, #0
   40888:	4638      	mov	r0, r7
   4088a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4088e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   40892:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40896:	d104      	bne.n	408a2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   40898:	4640      	mov	r0, r8
   4089a:	f000 fcf3 	bl	41284 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   4089e:	342c      	adds	r4, #44	; 0x2c
   408a0:	e7c9      	b.n	40836 <z_init_static_threads+0x26>
   408a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   408a6:	2300      	movs	r3, #0
   408a8:	f7e6 fc7a 	bl	271a0 <__aeabi_uldivmod>
   408ac:	4602      	mov	r2, r0
   408ae:	460b      	mov	r3, r1
   408b0:	f108 0018 	add.w	r0, r8, #24
   408b4:	4649      	mov	r1, r9
   408b6:	f000 fee1 	bl	4167c <z_add_timeout>
   408ba:	e7f0      	b.n	4089e <z_init_static_threads+0x8e>
   408bc:	00048f58 	.word	0x00048f58
   408c0:	00048f58 	.word	0x00048f58
   408c4:	000486af 	.word	0x000486af

000408c8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   408c8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   408ca:	4c0b      	ldr	r4, [pc, #44]	; (408f8 <idle+0x30>)
	return !z_sys_post_kernel;
   408cc:	4d0b      	ldr	r5, [pc, #44]	; (408fc <idle+0x34>)
	__asm__ volatile(
   408ce:	f04f 0240 	mov.w	r2, #64	; 0x40
   408d2:	f3ef 8311 	mrs	r3, BASEPRI
   408d6:	f382 8812 	msr	BASEPRI_MAX, r2
   408da:	f3bf 8f6f 	isb	sy
   408de:	f007 ffb8 	bl	48852 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   408e2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   408e4:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   408e6:	b913      	cbnz	r3, 408ee <idle+0x26>
	arch_cpu_idle();
   408e8:	f7f8 f8c8 	bl	38a7c <arch_cpu_idle>
}
   408ec:	e7ef      	b.n	408ce <idle+0x6>
   408ee:	f7f7 fe0d 	bl	3850c <pm_system_suspend>
   408f2:	2800      	cmp	r0, #0
   408f4:	d1eb      	bne.n	408ce <idle+0x6>
   408f6:	e7f7      	b.n	408e8 <idle+0x20>
   408f8:	20002e7c 	.word	0x20002e7c
   408fc:	20003a80 	.word	0x20003a80

00040900 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   40900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40904:	4604      	mov	r4, r0
   40906:	4617      	mov	r7, r2
   40908:	461e      	mov	r6, r3
   4090a:	f04f 0340 	mov.w	r3, #64	; 0x40
   4090e:	f3ef 8811 	mrs	r8, BASEPRI
   40912:	f383 8812 	msr	BASEPRI_MAX, r3
   40916:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   4091a:	68c3      	ldr	r3, [r0, #12]
   4091c:	4a33      	ldr	r2, [pc, #204]	; (409ec <z_impl_k_mutex_lock+0xec>)
   4091e:	b17b      	cbz	r3, 40940 <z_impl_k_mutex_lock+0x40>
   40920:	6880      	ldr	r0, [r0, #8]
   40922:	6891      	ldr	r1, [r2, #8]
   40924:	4288      	cmp	r0, r1
   40926:	d019      	beq.n	4095c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   40928:	ea57 0306 	orrs.w	r3, r7, r6
   4092c:	d118      	bne.n	40960 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   4092e:	f388 8811 	msr	BASEPRI, r8
   40932:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   40936:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   4093a:	b002      	add	sp, #8
   4093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   40940:	6891      	ldr	r1, [r2, #8]
   40942:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   40946:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   40948:	3301      	adds	r3, #1
   4094a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   4094c:	6893      	ldr	r3, [r2, #8]
   4094e:	60a3      	str	r3, [r4, #8]
   40950:	f388 8811 	msr	BASEPRI, r8
   40954:	f3bf 8f6f 	isb	sy
		return 0;
   40958:	2000      	movs	r0, #0
   4095a:	e7ee      	b.n	4093a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   4095c:	6921      	ldr	r1, [r4, #16]
   4095e:	e7f2      	b.n	40946 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   40960:	f991 100e 	ldrsb.w	r1, [r1, #14]
   40964:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   40968:	4299      	cmp	r1, r3
   4096a:	bfa8      	it	ge
   4096c:	4619      	movge	r1, r3
   4096e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   40972:	4291      	cmp	r1, r2
   40974:	bfb8      	it	lt
   40976:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   40978:	428b      	cmp	r3, r1
   4097a:	dd2e      	ble.n	409da <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   4097c:	f007 fc49 	bl	48212 <adjust_owner_prio.isra.0>
   40980:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   40982:	e9cd 7600 	strd	r7, r6, [sp]
   40986:	481a      	ldr	r0, [pc, #104]	; (409f0 <z_impl_k_mutex_lock+0xf0>)
   40988:	4622      	mov	r2, r4
   4098a:	4641      	mov	r1, r8
   4098c:	f000 fc04 	bl	41198 <z_pend_curr>
	if (got_mutex == 0) {
   40990:	2800      	cmp	r0, #0
   40992:	d0e1      	beq.n	40958 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   40994:	f04f 0340 	mov.w	r3, #64	; 0x40
   40998:	f3ef 8611 	mrs	r6, BASEPRI
   4099c:	f383 8812 	msr	BASEPRI_MAX, r3
   409a0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   409a4:	68a0      	ldr	r0, [r4, #8]
   409a6:	b1d0      	cbz	r0, 409de <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   409a8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   409aa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   409ac:	429c      	cmp	r4, r3
   409ae:	d00a      	beq.n	409c6 <z_impl_k_mutex_lock+0xc6>
   409b0:	b14b      	cbz	r3, 409c6 <z_impl_k_mutex_lock+0xc6>
   409b2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   409b6:	4299      	cmp	r1, r3
   409b8:	bfa8      	it	ge
   409ba:	4619      	movge	r1, r3
   409bc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   409c0:	4299      	cmp	r1, r3
   409c2:	bfb8      	it	lt
   409c4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   409c6:	f007 fc24 	bl	48212 <adjust_owner_prio.isra.0>
   409ca:	b140      	cbz	r0, 409de <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   409cc:	4808      	ldr	r0, [pc, #32]	; (409f0 <z_impl_k_mutex_lock+0xf0>)
   409ce:	4631      	mov	r1, r6
   409d0:	f000 fc46 	bl	41260 <z_reschedule>
	return -EAGAIN;
   409d4:	f06f 000a 	mvn.w	r0, #10
   409d8:	e7af      	b.n	4093a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   409da:	2500      	movs	r5, #0
   409dc:	e7d1      	b.n	40982 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   409de:	2d00      	cmp	r5, #0
   409e0:	d1f4      	bne.n	409cc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   409e2:	f386 8811 	msr	BASEPRI, r6
   409e6:	f3bf 8f6f 	isb	sy
   409ea:	e7f3      	b.n	409d4 <z_impl_k_mutex_lock+0xd4>
   409ec:	20002e7c 	.word	0x20002e7c
   409f0:	20003a81 	.word	0x20003a81

000409f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   409f4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   409f6:	6883      	ldr	r3, [r0, #8]
{
   409f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   409fa:	b373      	cbz	r3, 40a5a <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   409fc:	4a1a      	ldr	r2, [pc, #104]	; (40a68 <z_impl_k_mutex_unlock+0x74>)
   409fe:	6892      	ldr	r2, [r2, #8]
   40a00:	4293      	cmp	r3, r2
   40a02:	d12d      	bne.n	40a60 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   40a04:	68c3      	ldr	r3, [r0, #12]
   40a06:	2b01      	cmp	r3, #1
   40a08:	d903      	bls.n	40a12 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   40a0a:	3b01      	subs	r3, #1
   40a0c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   40a0e:	2000      	movs	r0, #0
}
   40a10:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   40a12:	f04f 0340 	mov.w	r3, #64	; 0x40
   40a16:	f3ef 8511 	mrs	r5, BASEPRI
   40a1a:	f383 8812 	msr	BASEPRI_MAX, r3
   40a1e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   40a22:	6901      	ldr	r1, [r0, #16]
   40a24:	6880      	ldr	r0, [r0, #8]
   40a26:	f007 fbf4 	bl	48212 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   40a2a:	4620      	mov	r0, r4
   40a2c:	f007 fe5a 	bl	486e4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   40a30:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   40a32:	b160      	cbz	r0, 40a4e <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   40a34:	f990 200e 	ldrsb.w	r2, [r0, #14]
   40a38:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   40a3a:	2200      	movs	r2, #0
   40a3c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
		z_ready_thread(new_owner);
   40a40:	f007 fdeb 	bl	4861a <z_ready_thread>
		z_reschedule(&lock, key);
   40a44:	4809      	ldr	r0, [pc, #36]	; (40a6c <z_impl_k_mutex_unlock+0x78>)
   40a46:	4629      	mov	r1, r5
   40a48:	f000 fc0a 	bl	41260 <z_reschedule>
   40a4c:	e7df      	b.n	40a0e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   40a4e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   40a50:	f385 8811 	msr	BASEPRI, r5
   40a54:	f3bf 8f6f 	isb	sy
   40a58:	e7d9      	b.n	40a0e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   40a5a:	f06f 0015 	mvn.w	r0, #21
   40a5e:	e7d7      	b.n	40a10 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   40a60:	f04f 30ff 	mov.w	r0, #4294967295
   40a64:	e7d4      	b.n	40a10 <z_impl_k_mutex_unlock+0x1c>
   40a66:	bf00      	nop
   40a68:	20002e7c 	.word	0x20002e7c
   40a6c:	20003a81 	.word	0x20003a81

00040a70 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   40a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40a72:	4611      	mov	r1, r2
	__asm__ volatile(
   40a74:	f04f 0240 	mov.w	r2, #64	; 0x40
   40a78:	f3ef 8511 	mrs	r5, BASEPRI
   40a7c:	f382 8812 	msr	BASEPRI_MAX, r2
   40a80:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   40a84:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   40a86:	b19c      	cbz	r4, 40ab0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   40a88:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   40a8a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   40a8c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   40a90:	4294      	cmp	r4, r2
	list->head = node;
   40a92:	6003      	str	r3, [r0, #0]
	list->tail = node;
   40a94:	bf08      	it	eq
   40a96:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   40a98:	2101      	movs	r1, #1
   40a9a:	4620      	mov	r0, r4
   40a9c:	f007 fc2f 	bl	482fe <z_queue_node_peek>
   40aa0:	4604      	mov	r4, r0
	__asm__ volatile(
   40aa2:	f385 8811 	msr	BASEPRI, r5
   40aa6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   40aaa:	4620      	mov	r0, r4
   40aac:	b003      	add	sp, #12
   40aae:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   40ab0:	ea51 0203 	orrs.w	r2, r1, r3
   40ab4:	d0f5      	beq.n	40aa2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   40ab6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   40aba:	e9cd 1300 	strd	r1, r3, [sp]
   40abe:	4610      	mov	r0, r2
   40ac0:	4629      	mov	r1, r5
   40ac2:	f000 fb69 	bl	41198 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   40ac6:	2800      	cmp	r0, #0
   40ac8:	d1ef      	bne.n	40aaa <z_impl_k_queue_get+0x3a>
   40aca:	4b02      	ldr	r3, [pc, #8]	; (40ad4 <z_impl_k_queue_get+0x64>)
   40acc:	689b      	ldr	r3, [r3, #8]
   40ace:	695c      	ldr	r4, [r3, #20]
   40ad0:	e7eb      	b.n	40aaa <z_impl_k_queue_get+0x3a>
   40ad2:	bf00      	nop
   40ad4:	20002e7c 	.word	0x20002e7c

00040ad8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   40ad8:	b538      	push	{r3, r4, r5, lr}
   40ada:	4604      	mov	r4, r0
	__asm__ volatile(
   40adc:	f04f 0340 	mov.w	r3, #64	; 0x40
   40ae0:	f3ef 8511 	mrs	r5, BASEPRI
   40ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   40ae8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   40aec:	f007 fdfa 	bl	486e4 <z_unpend_first_thread>

	if (thread != NULL) {
   40af0:	b150      	cbz	r0, 40b08 <z_impl_k_sem_give+0x30>
   40af2:	2200      	movs	r2, #0
   40af4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   40af8:	f007 fd8f 	bl	4861a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   40afc:	4629      	mov	r1, r5
   40afe:	4808      	ldr	r0, [pc, #32]	; (40b20 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   40b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   40b04:	f000 bbac 	b.w	41260 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   40b08:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   40b0c:	429a      	cmp	r2, r3
   40b0e:	bf18      	it	ne
   40b10:	3301      	addne	r3, #1
   40b12:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   40b14:	2102      	movs	r1, #2
   40b16:	f104 0010 	add.w	r0, r4, #16
   40b1a:	f008 f833 	bl	48b84 <z_handle_obj_poll_events>
}
   40b1e:	e7ed      	b.n	40afc <z_impl_k_sem_give+0x24>
   40b20:	20003a81 	.word	0x20003a81

00040b24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   40b24:	b513      	push	{r0, r1, r4, lr}
   40b26:	f04f 0440 	mov.w	r4, #64	; 0x40
   40b2a:	f3ef 8111 	mrs	r1, BASEPRI
   40b2e:	f384 8812 	msr	BASEPRI_MAX, r4
   40b32:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   40b36:	6884      	ldr	r4, [r0, #8]
   40b38:	b144      	cbz	r4, 40b4c <z_impl_k_sem_take+0x28>
		sem->count--;
   40b3a:	3c01      	subs	r4, #1
   40b3c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   40b3e:	f381 8811 	msr	BASEPRI, r1
   40b42:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   40b46:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   40b48:	b002      	add	sp, #8
   40b4a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   40b4c:	ea52 0403 	orrs.w	r4, r2, r3
   40b50:	d106      	bne.n	40b60 <z_impl_k_sem_take+0x3c>
   40b52:	f381 8811 	msr	BASEPRI, r1
   40b56:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   40b5a:	f06f 000f 	mvn.w	r0, #15
   40b5e:	e7f3      	b.n	40b48 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   40b60:	e9cd 2300 	strd	r2, r3, [sp]
   40b64:	4602      	mov	r2, r0
   40b66:	4802      	ldr	r0, [pc, #8]	; (40b70 <z_impl_k_sem_take+0x4c>)
   40b68:	f000 fb16 	bl	41198 <z_pend_curr>
	return ret;
   40b6c:	e7ec      	b.n	40b48 <z_impl_k_sem_take+0x24>
   40b6e:	bf00      	nop
   40b70:	20003a81 	.word	0x20003a81

00040b74 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   40b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   40b76:	4b09      	ldr	r3, [pc, #36]	; (40b9c <k_sys_work_q_init+0x28>)
   40b78:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   40b7a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   40b7c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   40b7e:	9300      	str	r3, [sp, #0]
   40b80:	4907      	ldr	r1, [pc, #28]	; (40ba0 <k_sys_work_q_init+0x2c>)
   40b82:	4808      	ldr	r0, [pc, #32]	; (40ba4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   40b84:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   40b88:	f04f 33ff 	mov.w	r3, #4294967295
   40b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40b90:	f000 f924 	bl	40ddc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   40b94:	4620      	mov	r0, r4
   40b96:	b004      	add	sp, #16
   40b98:	bd10      	pop	{r4, pc}
   40b9a:	bf00      	nop
   40b9c:	00049de8 	.word	0x00049de8
   40ba0:	20006500 	.word	0x20006500
   40ba4:	20002598 	.word	0x20002598

00040ba8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   40ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   40bac:	4e4a      	ldr	r6, [pc, #296]	; (40cd8 <work_queue_main+0x130>)
   40bae:	b085      	sub	sp, #20
   40bb0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   40bb2:	f04f 38ff 	mov.w	r8, #4294967295
   40bb6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   40bba:	f04f 0340 	mov.w	r3, #64	; 0x40
   40bbe:	f3ef 8711 	mrs	r7, BASEPRI
   40bc2:	f383 8812 	msr	BASEPRI_MAX, r3
   40bc6:	f3bf 8f6f 	isb	sy
   40bca:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
Z_GENLIST_GET(slist, snode)
   40bce:	b98d      	cbnz	r5, 40bf4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   40bd0:	2102      	movs	r1, #2
   40bd2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   40bd6:	f007 fbd3 	bl	48380 <flag_test_and_clear>
   40bda:	2800      	cmp	r0, #0
   40bdc:	d143      	bne.n	40c66 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   40bde:	2300      	movs	r3, #0
   40be0:	e9cd 8900 	strd	r8, r9, [sp]
   40be4:	9302      	str	r3, [sp, #8]
   40be6:	f104 0298 	add.w	r2, r4, #152	; 0x98
   40bea:	4639      	mov	r1, r7
   40bec:	483b      	ldr	r0, [pc, #236]	; (40cdc <work_queue_main+0x134>)
   40bee:	f000 fcd3 	bl	41598 <z_sched_wait>
			continue;
   40bf2:	e7e2      	b.n	40bba <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   40bf4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
	return node->next;
   40bf8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   40bfa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   40bfe:	4295      	cmp	r5, r2
	list->tail = node;
   40c00:	bf08      	it	eq
   40c02:	f8c4 3094 	streq.w	r3, [r4, #148]	; 0x94
	*flagp |= BIT(bit);
   40c06:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   40c0a:	f043 0302 	orr.w	r3, r3, #2
   40c0e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	*flagp &= ~BIT(bit);
   40c12:	68eb      	ldr	r3, [r5, #12]
   40c14:	f023 0304 	bic.w	r3, r3, #4
   40c18:	f043 0301 	orr.w	r3, r3, #1
   40c1c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   40c1e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   40c20:	f387 8811 	msr	BASEPRI, r7
   40c24:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   40c28:	4628      	mov	r0, r5
   40c2a:	4798      	blx	r3
	__asm__ volatile(
   40c2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   40c30:	f3ef 8b11 	mrs	fp, BASEPRI
   40c34:	f383 8812 	msr	BASEPRI_MAX, r3
   40c38:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   40c3c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40c3e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   40c40:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40c44:	d419      	bmi.n	40c7a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   40c46:	60ea      	str	r2, [r5, #12]
   40c48:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   40c4c:	f023 0302 	bic.w	r3, r3, #2
   40c50:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	__asm__ volatile(
   40c54:	f38b 8811 	msr	BASEPRI, fp
   40c58:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   40c5c:	05db      	lsls	r3, r3, #23
   40c5e:	d4ac      	bmi.n	40bba <work_queue_main+0x12>
	z_impl_k_yield();
   40c60:	f000 fb98 	bl	41394 <z_impl_k_yield>
}
   40c64:	e7a9      	b.n	40bba <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   40c66:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   40c6a:	2200      	movs	r2, #0
   40c6c:	2101      	movs	r1, #1
   40c6e:	4628      	mov	r0, r5
   40c70:	f007 fd92 	bl	48798 <z_sched_wake>
   40c74:	2800      	cmp	r0, #0
   40c76:	d1f8      	bne.n	40c6a <work_queue_main+0xc2>
   40c78:	e7b1      	b.n	40bde <work_queue_main+0x36>
	return list->head;
   40c7a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   40c7c:	f023 0303 	bic.w	r3, r3, #3
   40c80:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   40c82:	2800      	cmp	r0, #0
   40c84:	d0e0      	beq.n	40c48 <work_queue_main+0xa0>
	return node->next;
   40c86:	2700      	movs	r7, #0
   40c88:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   40c8c:	463b      	mov	r3, r7
   40c8e:	2800      	cmp	r0, #0
   40c90:	d0da      	beq.n	40c48 <work_queue_main+0xa0>
		if (wc->work == work) {
   40c92:	6842      	ldr	r2, [r0, #4]
   40c94:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   40c96:	4601      	mov	r1, r0
		if (wc->work == work) {
   40c98:	d10c      	bne.n	40cb4 <work_queue_main+0x10c>
	return node->next;
   40c9a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   40c9c:	b99f      	cbnz	r7, 40cc6 <work_queue_main+0x11e>
   40c9e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   40ca0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   40ca2:	4282      	cmp	r2, r0
   40ca4:	d100      	bne.n	40ca8 <work_queue_main+0x100>
	list->tail = node;
   40ca6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   40ca8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   40cac:	f7ff ff14 	bl	40ad8 <z_impl_k_sem_give>
}
   40cb0:	4639      	mov	r1, r7
   40cb2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   40cb4:	f1ba 0f00 	cmp.w	sl, #0
   40cb8:	d00b      	beq.n	40cd2 <work_queue_main+0x12a>
	return node->next;
   40cba:	f8da 2000 	ldr.w	r2, [sl]
   40cbe:	4650      	mov	r0, sl
   40cc0:	460f      	mov	r7, r1
   40cc2:	4692      	mov	sl, r2
   40cc4:	e7e3      	b.n	40c8e <work_queue_main+0xe6>
	parent->next = child;
   40cc6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   40cc8:	6872      	ldr	r2, [r6, #4]
   40cca:	4282      	cmp	r2, r0
	list->tail = node;
   40ccc:	bf08      	it	eq
   40cce:	6077      	streq	r7, [r6, #4]
}
   40cd0:	e7ea      	b.n	40ca8 <work_queue_main+0x100>
   40cd2:	4652      	mov	r2, sl
   40cd4:	e7f3      	b.n	40cbe <work_queue_main+0x116>
   40cd6:	bf00      	nop
   40cd8:	20002ea0 	.word	0x20002ea0
   40cdc:	20003a81 	.word	0x20003a81

00040ce0 <cancel_sync_locked>:
{
   40ce0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   40ce2:	68c3      	ldr	r3, [r0, #12]
   40ce4:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   40ce8:	079b      	lsls	r3, r3, #30
{
   40cea:	4605      	mov	r5, r0
   40cec:	460c      	mov	r4, r1
	if (ret) {
   40cee:	d50d      	bpl.n	40d0c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   40cf0:	2201      	movs	r2, #1
   40cf2:	2100      	movs	r1, #0
   40cf4:	f104 0008 	add.w	r0, r4, #8
   40cf8:	f007 fb32 	bl	48360 <z_impl_k_sem_init>
	parent->next = child;
   40cfc:	2300      	movs	r3, #0
   40cfe:	6023      	str	r3, [r4, #0]
	return list->tail;
   40d00:	4b05      	ldr	r3, [pc, #20]	; (40d18 <cancel_sync_locked+0x38>)
	canceler->work = work;
   40d02:	6065      	str	r5, [r4, #4]
   40d04:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   40d06:	b91a      	cbnz	r2, 40d10 <cancel_sync_locked+0x30>
	list->head = node;
   40d08:	e9c3 4400 	strd	r4, r4, [r3]
}
   40d0c:	4630      	mov	r0, r6
   40d0e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   40d10:	6014      	str	r4, [r2, #0]
	list->tail = node;
   40d12:	605c      	str	r4, [r3, #4]
}
   40d14:	e7fa      	b.n	40d0c <cancel_sync_locked+0x2c>
   40d16:	bf00      	nop
   40d18:	20002ea0 	.word	0x20002ea0

00040d1c <submit_to_queue_locked>:
{
   40d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   40d1e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40d20:	079a      	lsls	r2, r3, #30
{
   40d22:	4604      	mov	r4, r0
   40d24:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40d26:	f3c3 0640 	ubfx	r6, r3, #1, #1
   40d2a:	d42c      	bmi.n	40d86 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   40d2c:	075b      	lsls	r3, r3, #29
   40d2e:	d41a      	bmi.n	40d66 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   40d30:	680b      	ldr	r3, [r1, #0]
   40d32:	b90b      	cbnz	r3, 40d38 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   40d34:	6883      	ldr	r3, [r0, #8]
   40d36:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   40d38:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   40d3a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   40d3c:	bf44      	itt	mi
   40d3e:	68a3      	ldrmi	r3, [r4, #8]
   40d40:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   40d42:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   40d44:	bf4c      	ite	mi
   40d46:	2602      	movmi	r6, #2
		ret = 1;
   40d48:	2601      	movpl	r6, #1
	if (queue == NULL) {
   40d4a:	2d00      	cmp	r5, #0
   40d4c:	d03a      	beq.n	40dc4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   40d4e:	4b1f      	ldr	r3, [pc, #124]	; (40dcc <submit_to_queue_locked+0xb0>)
   40d50:	689b      	ldr	r3, [r3, #8]
   40d52:	42ab      	cmp	r3, r5
   40d54:	d00a      	beq.n	40d6c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   40d56:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40d5a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   40d5c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40d60:	d414      	bmi.n	40d8c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   40d62:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   40d66:	2300      	movs	r3, #0
   40d68:	603b      	str	r3, [r7, #0]
	return ret;
   40d6a:	e025      	b.n	40db8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   40d6c:	f007 fa3f 	bl	481ee <k_is_in_isr>
   40d70:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   40d74:	2800      	cmp	r0, #0
   40d76:	d1f0      	bne.n	40d5a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40d78:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   40d7a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40d7e:	d5f0      	bpl.n	40d62 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   40d80:	b152      	cbz	r2, 40d98 <submit_to_queue_locked+0x7c>
   40d82:	075b      	lsls	r3, r3, #29
   40d84:	d408      	bmi.n	40d98 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   40d86:	f06f 060f 	mvn.w	r6, #15
   40d8a:	e7ec      	b.n	40d66 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   40d8c:	2a00      	cmp	r2, #0
   40d8e:	d1fa      	bne.n	40d86 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   40d90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   40d94:	2b00      	cmp	r3, #0
   40d96:	d1f6      	bne.n	40d86 <submit_to_queue_locked+0x6a>
	parent->next = child;
   40d98:	2300      	movs	r3, #0
   40d9a:	6023      	str	r3, [r4, #0]
	return list->tail;
   40d9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
Z_GENLIST_APPEND(slist, snode)
   40da0:	b963      	cbnz	r3, 40dbc <submit_to_queue_locked+0xa0>
	list->head = node;
   40da2:	e9c5 4424 	strd	r4, r4, [r5, #144]	; 0x90
		(void)notify_queue_locked(queue);
   40da6:	4628      	mov	r0, r5
   40da8:	f007 fb04 	bl	483b4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   40dac:	68e3      	ldr	r3, [r4, #12]
   40dae:	f043 0304 	orr.w	r3, r3, #4
   40db2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   40db4:	683b      	ldr	r3, [r7, #0]
   40db6:	60a3      	str	r3, [r4, #8]
}
   40db8:	4630      	mov	r0, r6
   40dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   40dbc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   40dbe:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
}
   40dc2:	e7f0      	b.n	40da6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   40dc4:	f06f 0615 	mvn.w	r6, #21
   40dc8:	e7cd      	b.n	40d66 <submit_to_queue_locked+0x4a>
   40dca:	bf00      	nop
   40dcc:	20002e7c 	.word	0x20002e7c

00040dd0 <k_work_submit>:
{
   40dd0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   40dd2:	4801      	ldr	r0, [pc, #4]	; (40dd8 <k_work_submit+0x8>)
   40dd4:	f007 bb74 	b.w	484c0 <k_work_submit_to_queue>
   40dd8:	20002598 	.word	0x20002598

00040ddc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   40ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   40dde:	b089      	sub	sp, #36	; 0x24
   40de0:	4604      	mov	r4, r0
	list->head = NULL;
   40de2:	2000      	movs	r0, #0
	list->tail = NULL;
   40de4:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   40de8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   40dea:	f104 0098 	add.w	r0, r4, #152	; 0x98
	list->tail = (sys_dnode_t *)list;
   40dee:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
   40df2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   40df6:	e9c4 0028 	strd	r0, r0, [r4, #160]	; 0xa0

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   40dfa:	b31d      	cbz	r5, 40e44 <k_work_queue_start+0x68>
   40dfc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   40dfe:	2800      	cmp	r0, #0
   40e00:	f240 1001 	movw	r0, #257	; 0x101
   40e04:	bf08      	it	eq
   40e06:	2001      	moveq	r0, #1
	*flagp = flags;
   40e08:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   40e0c:	2000      	movs	r0, #0
   40e0e:	f04f 36ff 	mov.w	r6, #4294967295
   40e12:	f04f 37ff 	mov.w	r7, #4294967295
   40e16:	e9cd 3003 	strd	r3, r0, [sp, #12]
   40e1a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   40e1e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   40e22:	4b09      	ldr	r3, [pc, #36]	; (40e48 <k_work_queue_start+0x6c>)
   40e24:	9400      	str	r4, [sp, #0]
   40e26:	4620      	mov	r0, r4
   40e28:	f7ff fcc6 	bl	407b8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   40e2c:	b125      	cbz	r5, 40e38 <k_work_queue_start+0x5c>
   40e2e:	6829      	ldr	r1, [r5, #0]
   40e30:	b111      	cbz	r1, 40e38 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   40e32:	4620      	mov	r0, r4
   40e34:	f007 f9e1 	bl	481fa <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   40e38:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   40e3a:	b009      	add	sp, #36	; 0x24
   40e3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   40e40:	f007 b9de 	b.w	48200 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   40e44:	2001      	movs	r0, #1
   40e46:	e7df      	b.n	40e08 <k_work_queue_start+0x2c>
   40e48:	00040ba9 	.word	0x00040ba9

00040e4c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   40e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40e4e:	9001      	str	r0, [sp, #4]
   40e50:	4608      	mov	r0, r1
	__asm__ volatile(
   40e52:	f04f 0140 	mov.w	r1, #64	; 0x40
   40e56:	f3ef 8411 	mrs	r4, BASEPRI
   40e5a:	f381 8812 	msr	BASEPRI_MAX, r1
   40e5e:	f3bf 8f6f 	isb	sy
	return *flagp;
   40e62:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   40e64:	f011 0f0e 	tst.w	r1, #14
   40e68:	d116      	bne.n	40e98 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40e6a:	ea53 0502 	orrs.w	r5, r3, r2
   40e6e:	d108      	bne.n	40e82 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   40e70:	a901      	add	r1, sp, #4
   40e72:	f7ff ff53 	bl	40d1c <submit_to_queue_locked>
	__asm__ volatile(
   40e76:	f384 8811 	msr	BASEPRI, r4
   40e7a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   40e7e:	b003      	add	sp, #12
   40e80:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   40e82:	f041 0108 	orr.w	r1, r1, #8
   40e86:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   40e88:	9901      	ldr	r1, [sp, #4]
   40e8a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40e8c:	3010      	adds	r0, #16
   40e8e:	4903      	ldr	r1, [pc, #12]	; (40e9c <k_work_schedule_for_queue+0x50>)
   40e90:	f000 fbf4 	bl	4167c <z_add_timeout>
	return ret;
   40e94:	2001      	movs	r0, #1
   40e96:	e7ee      	b.n	40e76 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   40e98:	2000      	movs	r0, #0
   40e9a:	e7ec      	b.n	40e76 <k_work_schedule_for_queue+0x2a>
   40e9c:	00048429 	.word	0x00048429

00040ea0 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   40ea0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   40ea2:	4801      	ldr	r0, [pc, #4]	; (40ea8 <k_work_schedule+0x8>)
   40ea4:	f7ff bfd2 	b.w	40e4c <k_work_schedule_for_queue>
   40ea8:	20002598 	.word	0x20002598

00040eac <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   40eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40eae:	460c      	mov	r4, r1
   40eb0:	9001      	str	r0, [sp, #4]
   40eb2:	4616      	mov	r6, r2
   40eb4:	461d      	mov	r5, r3
	__asm__ volatile(
   40eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   40eba:	f3ef 8711 	mrs	r7, BASEPRI
   40ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   40ec2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   40ec6:	4608      	mov	r0, r1
   40ec8:	f007 fa65 	bl	48396 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40ecc:	ea55 0306 	orrs.w	r3, r5, r6
   40ed0:	d109      	bne.n	40ee6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   40ed2:	a901      	add	r1, sp, #4
   40ed4:	4620      	mov	r0, r4
   40ed6:	f7ff ff21 	bl	40d1c <submit_to_queue_locked>
	__asm__ volatile(
   40eda:	f387 8811 	msr	BASEPRI, r7
   40ede:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   40ee2:	b003      	add	sp, #12
   40ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   40ee6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40ee8:	4906      	ldr	r1, [pc, #24]	; (40f04 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   40eea:	f043 0308 	orr.w	r3, r3, #8
   40eee:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   40ef0:	9b01      	ldr	r3, [sp, #4]
   40ef2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40ef4:	f104 0010 	add.w	r0, r4, #16
   40ef8:	4632      	mov	r2, r6
   40efa:	462b      	mov	r3, r5
   40efc:	f000 fbbe 	bl	4167c <z_add_timeout>
	return ret;
   40f00:	2001      	movs	r0, #1
   40f02:	e7ea      	b.n	40eda <k_work_reschedule_for_queue+0x2e>
   40f04:	00048429 	.word	0x00048429

00040f08 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   40f08:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   40f0a:	4801      	ldr	r0, [pc, #4]	; (40f10 <k_work_reschedule+0x8>)
   40f0c:	f7ff bfce 	b.w	40eac <k_work_reschedule_for_queue>
   40f10:	20002598 	.word	0x20002598

00040f14 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   40f14:	89c3      	ldrh	r3, [r0, #14]
   40f16:	2b7f      	cmp	r3, #127	; 0x7f
   40f18:	d812      	bhi.n	40f40 <sliceable+0x2c>
	int ret = slice_ticks;
   40f1a:	4b0a      	ldr	r3, [pc, #40]	; (40f44 <sliceable+0x30>)
   40f1c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   40f1e:	b163      	cbz	r3, 40f3a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   40f20:	4b09      	ldr	r3, [pc, #36]	; (40f48 <sliceable+0x34>)
   40f22:	f990 200e 	ldrsb.w	r2, [r0, #14]
   40f26:	681b      	ldr	r3, [r3, #0]
   40f28:	429a      	cmp	r2, r3
   40f2a:	db09      	blt.n	40f40 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   40f2c:	7b43      	ldrb	r3, [r0, #13]
   40f2e:	06db      	lsls	r3, r3, #27
   40f30:	d106      	bne.n	40f40 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   40f32:	4b06      	ldr	r3, [pc, #24]	; (40f4c <sliceable+0x38>)
   40f34:	1ac3      	subs	r3, r0, r3
   40f36:	bf18      	it	ne
   40f38:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   40f3a:	f003 0001 	and.w	r0, r3, #1
   40f3e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   40f40:	2300      	movs	r3, #0
   40f42:	e7fa      	b.n	40f3a <sliceable+0x26>
   40f44:	20002eb0 	.word	0x20002eb0
   40f48:	20002eac 	.word	0x20002eac
   40f4c:	20002478 	.word	0x20002478

00040f50 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   40f50:	4b04      	ldr	r3, [pc, #16]	; (40f64 <slice_timeout+0x14>)
   40f52:	1ac0      	subs	r0, r0, r3
   40f54:	4b04      	ldr	r3, [pc, #16]	; (40f68 <slice_timeout+0x18>)
   40f56:	10c0      	asrs	r0, r0, #3
   40f58:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   40f5a:	4b04      	ldr	r3, [pc, #16]	; (40f6c <slice_timeout+0x1c>)
   40f5c:	2201      	movs	r2, #1
   40f5e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   40f60:	4770      	bx	lr
   40f62:	bf00      	nop
   40f64:	20002648 	.word	0x20002648
   40f68:	aaaaaaab 	.word	0xaaaaaaab
   40f6c:	20003a81 	.word	0x20003a81

00040f70 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   40f70:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   40f72:	4b0e      	ldr	r3, [pc, #56]	; (40fac <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   40f74:	4c0e      	ldr	r4, [pc, #56]	; (40fb0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   40f76:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   40f78:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   40f7c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   40f80:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   40f82:	4620      	mov	r0, r4
   40f84:	f007 fc4f 	bl	48826 <z_abort_timeout>
	slice_expired[cpu] = false;
   40f88:	4b0a      	ldr	r3, [pc, #40]	; (40fb4 <z_reset_time_slice+0x44>)
   40f8a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   40f8c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   40f8e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   40f90:	f7ff ffc0 	bl	40f14 <sliceable>
   40f94:	b148      	cbz	r0, 40faa <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   40f96:	4b08      	ldr	r3, [pc, #32]	; (40fb8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   40f98:	4908      	ldr	r1, [pc, #32]	; (40fbc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   40f9a:	681a      	ldr	r2, [r3, #0]
   40f9c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   40f9e:	4620      	mov	r0, r4
   40fa0:	17d3      	asrs	r3, r2, #31
	}
}
   40fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   40fa6:	f000 bb69 	b.w	4167c <z_add_timeout>
}
   40faa:	bd70      	pop	{r4, r5, r6, pc}
   40fac:	20002e7c 	.word	0x20002e7c
   40fb0:	20002648 	.word	0x20002648
   40fb4:	20003a81 	.word	0x20003a81
   40fb8:	20002eb0 	.word	0x20002eb0
   40fbc:	00040f51 	.word	0x00040f51

00040fc0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   40fc0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   40fc2:	4d0d      	ldr	r5, [pc, #52]	; (40ff8 <update_cache+0x38>)
   40fc4:	462b      	mov	r3, r5
   40fc6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40fca:	429c      	cmp	r4, r3
   40fcc:	d000      	beq.n	40fd0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   40fce:	b904      	cbnz	r4, 40fd2 <update_cache+0x12>
   40fd0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   40fd2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   40fd4:	b938      	cbnz	r0, 40fe6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   40fd6:	7b5a      	ldrb	r2, [r3, #13]
   40fd8:	06d2      	lsls	r2, r2, #27
   40fda:	d104      	bne.n	40fe6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   40fdc:	69a2      	ldr	r2, [r4, #24]
   40fde:	b912      	cbnz	r2, 40fe6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   40fe0:	89da      	ldrh	r2, [r3, #14]
   40fe2:	2a7f      	cmp	r2, #127	; 0x7f
   40fe4:	d805      	bhi.n	40ff2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   40fe6:	429c      	cmp	r4, r3
   40fe8:	d002      	beq.n	40ff0 <update_cache+0x30>
			z_reset_time_slice(thread);
   40fea:	4620      	mov	r0, r4
   40fec:	f7ff ffc0 	bl	40f70 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   40ff0:	4623      	mov	r3, r4
   40ff2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   40ff4:	bd38      	pop	{r3, r4, r5, pc}
   40ff6:	bf00      	nop
   40ff8:	20002e7c 	.word	0x20002e7c

00040ffc <move_thread_to_end_of_prio_q>:
{
   40ffc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   40ffe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41002:	7b43      	ldrb	r3, [r0, #13]
   41004:	2a00      	cmp	r2, #0
{
   41006:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41008:	da04      	bge.n	41014 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   4100e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   41010:	f007 fac0 	bl	48594 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41014:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   41016:	4a15      	ldr	r2, [pc, #84]	; (4106c <move_thread_to_end_of_prio_q+0x70>)
   41018:	f063 037f 	orn	r3, r3, #127	; 0x7f
   4101c:	4610      	mov	r0, r2
   4101e:	734b      	strb	r3, [r1, #13]
   41020:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   41024:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41026:	4283      	cmp	r3, r0
   41028:	bf08      	it	eq
   4102a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4102c:	b923      	cbnz	r3, 41038 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   4102e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   41032:	6021      	str	r1, [r4, #0]
	list->tail = node;
   41034:	6211      	str	r1, [r2, #32]
}
   41036:	e00c      	b.n	41052 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   41038:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   4103c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41040:	42b5      	cmp	r5, r6
   41042:	d00e      	beq.n	41062 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41044:	42ae      	cmp	r6, r5
   41046:	dd0c      	ble.n	41062 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   41048:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   4104a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   4104e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   41050:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   41052:	6890      	ldr	r0, [r2, #8]
   41054:	1a43      	subs	r3, r0, r1
   41056:	4258      	negs	r0, r3
}
   41058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   4105c:	4158      	adcs	r0, r3
   4105e:	f7ff bfaf 	b.w	40fc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41062:	429c      	cmp	r4, r3
   41064:	d0e3      	beq.n	4102e <move_thread_to_end_of_prio_q+0x32>
   41066:	681b      	ldr	r3, [r3, #0]
   41068:	e7e0      	b.n	4102c <move_thread_to_end_of_prio_q+0x30>
   4106a:	bf00      	nop
   4106c:	20002e7c 	.word	0x20002e7c

00041070 <ready_thread>:
{
   41070:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   41072:	f990 300d 	ldrsb.w	r3, [r0, #13]
   41076:	7b42      	ldrb	r2, [r0, #13]
   41078:	2b00      	cmp	r3, #0
   4107a:	db29      	blt.n	410d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4107c:	06d3      	lsls	r3, r2, #27
   4107e:	d127      	bne.n	410d0 <ready_thread+0x60>
	return node->next != NULL;
   41080:	6983      	ldr	r3, [r0, #24]
   41082:	bb2b      	cbnz	r3, 410d0 <ready_thread+0x60>
	return list->head == list;
   41084:	4913      	ldr	r1, [pc, #76]	; (410d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   41086:	f062 027f 	orn	r2, r2, #127	; 0x7f
   4108a:	7342      	strb	r2, [r0, #13]
   4108c:	460a      	mov	r2, r1
   4108e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41092:	4294      	cmp	r4, r2
   41094:	bf18      	it	ne
   41096:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   41098:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4109a:	b923      	cbnz	r3, 410a6 <ready_thread+0x36>
	node->prev = tail;
   4109c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   410a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   410a2:	6208      	str	r0, [r1, #32]
}
   410a4:	e00c      	b.n	410c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   410a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   410aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   410ae:	42b5      	cmp	r5, r6
   410b0:	d00a      	beq.n	410c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   410b2:	42ae      	cmp	r6, r5
   410b4:	dd08      	ble.n	410c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   410b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   410b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   410bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   410be:	6058      	str	r0, [r3, #4]
}
   410c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   410c2:	2000      	movs	r0, #0
   410c4:	f7ff bf7c 	b.w	40fc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   410c8:	42a3      	cmp	r3, r4
   410ca:	d0e7      	beq.n	4109c <ready_thread+0x2c>
   410cc:	681b      	ldr	r3, [r3, #0]
   410ce:	e7e4      	b.n	4109a <ready_thread+0x2a>
}
   410d0:	bc70      	pop	{r4, r5, r6}
   410d2:	4770      	bx	lr
   410d4:	20002e7c 	.word	0x20002e7c

000410d8 <unready_thread>:
{
   410d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   410da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   410de:	7b43      	ldrb	r3, [r0, #13]
   410e0:	2a00      	cmp	r2, #0
{
   410e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   410e4:	da04      	bge.n	410f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   410e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   410ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   410ec:	f007 fa52 	bl	48594 <sys_dlist_remove>
	update_cache(thread == _current);
   410f0:	4b04      	ldr	r3, [pc, #16]	; (41104 <unready_thread+0x2c>)
   410f2:	6898      	ldr	r0, [r3, #8]
   410f4:	1a43      	subs	r3, r0, r1
   410f6:	4258      	negs	r0, r3
   410f8:	4158      	adcs	r0, r3
}
   410fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   410fe:	f7ff bf5f 	b.w	40fc0 <update_cache>
   41102:	bf00      	nop
   41104:	20002e7c 	.word	0x20002e7c

00041108 <pend_locked>:
{
   41108:	b570      	push	{r4, r5, r6, lr}
   4110a:	4615      	mov	r5, r2
   4110c:	461c      	mov	r4, r3
   4110e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   41110:	f007 fa5b 	bl	485ca <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41114:	f1b4 3fff 	cmp.w	r4, #4294967295
   41118:	bf08      	it	eq
   4111a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   4111e:	d008      	beq.n	41132 <pend_locked+0x2a>
   41120:	462a      	mov	r2, r5
   41122:	4623      	mov	r3, r4
   41124:	f106 0018 	add.w	r0, r6, #24
   41128:	4902      	ldr	r1, [pc, #8]	; (41134 <pend_locked+0x2c>)
}
   4112a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4112e:	f000 baa5 	b.w	4167c <z_add_timeout>
   41132:	bd70      	pop	{r4, r5, r6, pc}
   41134:	000486af 	.word	0x000486af

00041138 <z_time_slice>:
{
   41138:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4113a:	f04f 0340 	mov.w	r3, #64	; 0x40
   4113e:	f3ef 8511 	mrs	r5, BASEPRI
   41142:	f383 8812 	msr	BASEPRI_MAX, r3
   41146:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   4114a:	4b10      	ldr	r3, [pc, #64]	; (4118c <z_time_slice+0x54>)
	if (pending_current == curr) {
   4114c:	4a10      	ldr	r2, [pc, #64]	; (41190 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   4114e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   41150:	6810      	ldr	r0, [r2, #0]
   41152:	42a0      	cmp	r0, r4
   41154:	d106      	bne.n	41164 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   41156:	f7ff ff0b 	bl	40f70 <z_reset_time_slice>
	__asm__ volatile(
   4115a:	f385 8811 	msr	BASEPRI, r5
   4115e:	f3bf 8f6f 	isb	sy
}
   41162:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   41164:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   41166:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   41168:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   4116a:	4a0a      	ldr	r2, [pc, #40]	; (41194 <z_time_slice+0x5c>)
   4116c:	5cd3      	ldrb	r3, [r2, r3]
   4116e:	2b00      	cmp	r3, #0
   41170:	d0f3      	beq.n	4115a <z_time_slice+0x22>
   41172:	4620      	mov	r0, r4
   41174:	f7ff fece 	bl	40f14 <sliceable>
   41178:	2800      	cmp	r0, #0
   4117a:	d0ee      	beq.n	4115a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   4117c:	7b63      	ldrb	r3, [r4, #13]
   4117e:	06db      	lsls	r3, r3, #27
   41180:	d102      	bne.n	41188 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   41182:	4620      	mov	r0, r4
   41184:	f7ff ff3a 	bl	40ffc <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   41188:	4620      	mov	r0, r4
   4118a:	e7e4      	b.n	41156 <z_time_slice+0x1e>
   4118c:	20002e7c 	.word	0x20002e7c
   41190:	20002ea8 	.word	0x20002ea8
   41194:	20003a81 	.word	0x20003a81

00041198 <z_pend_curr>:
{
   41198:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   4119a:	480c      	ldr	r0, [pc, #48]	; (411cc <z_pend_curr+0x34>)
   4119c:	4d0c      	ldr	r5, [pc, #48]	; (411d0 <z_pend_curr+0x38>)
   4119e:	6886      	ldr	r6, [r0, #8]
   411a0:	602e      	str	r6, [r5, #0]
{
   411a2:	460c      	mov	r4, r1
   411a4:	4611      	mov	r1, r2
   411a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   411aa:	f04f 0640 	mov.w	r6, #64	; 0x40
   411ae:	f3ef 8511 	mrs	r5, BASEPRI
   411b2:	f386 8812 	msr	BASEPRI_MAX, r6
   411b6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   411ba:	6880      	ldr	r0, [r0, #8]
   411bc:	f7ff ffa4 	bl	41108 <pend_locked>
	ret = arch_swap(key);
   411c0:	4620      	mov	r0, r4
}
   411c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   411c6:	f7f7 bceb 	b.w	38ba0 <arch_swap>
   411ca:	bf00      	nop
   411cc:	20002e7c 	.word	0x20002e7c
   411d0:	20002ea8 	.word	0x20002ea8

000411d4 <z_set_prio>:
{
   411d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   411d6:	4604      	mov	r4, r0
   411d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   411dc:	f3ef 8611 	mrs	r6, BASEPRI
   411e0:	f383 8812 	msr	BASEPRI_MAX, r3
   411e4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   411e8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   411ea:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   411ec:	b249      	sxtb	r1, r1
   411ee:	d119      	bne.n	41224 <z_set_prio+0x50>
	return node->next != NULL;
   411f0:	6985      	ldr	r5, [r0, #24]
   411f2:	b9bd      	cbnz	r5, 41224 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   411f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   411f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   411fa:	f007 f9cb 	bl	48594 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   411fe:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   41200:	4a16      	ldr	r2, [pc, #88]	; (4125c <z_set_prio+0x88>)
				thread->base.prio = prio;
   41202:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   41204:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41208:	7343      	strb	r3, [r0, #13]
   4120a:	4613      	mov	r3, r2
   4120c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41210:	4298      	cmp	r0, r3
   41212:	bf18      	it	ne
   41214:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   41216:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41218:	b95d      	cbnz	r5, 41232 <z_set_prio+0x5e>
	node->prev = tail;
   4121a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   4121e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   41220:	6214      	str	r4, [r2, #32]
}
   41222:	e011      	b.n	41248 <z_set_prio+0x74>
			thread->base.prio = prio;
   41224:	73a1      	strb	r1, [r4, #14]
   41226:	2000      	movs	r0, #0
	__asm__ volatile(
   41228:	f386 8811 	msr	BASEPRI, r6
   4122c:	f3bf 8f6f 	isb	sy
}
   41230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   41232:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   41236:	42b9      	cmp	r1, r7
   41238:	d00b      	beq.n	41252 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4123a:	428f      	cmp	r7, r1
   4123c:	dd09      	ble.n	41252 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   4123e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   41240:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   41244:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   41246:	606c      	str	r4, [r5, #4]
			update_cache(1);
   41248:	2001      	movs	r0, #1
   4124a:	f7ff feb9 	bl	40fc0 <update_cache>
   4124e:	2001      	movs	r0, #1
   41250:	e7ea      	b.n	41228 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   41252:	42a8      	cmp	r0, r5
   41254:	d0e1      	beq.n	4121a <z_set_prio+0x46>
   41256:	682d      	ldr	r5, [r5, #0]
   41258:	e7de      	b.n	41218 <z_set_prio+0x44>
   4125a:	bf00      	nop
   4125c:	20002e7c 	.word	0x20002e7c

00041260 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41260:	b949      	cbnz	r1, 41276 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41262:	f3ef 8005 	mrs	r0, IPSR
   41266:	b930      	cbnz	r0, 41276 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   41268:	4b05      	ldr	r3, [pc, #20]	; (41280 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   4126a:	699a      	ldr	r2, [r3, #24]
   4126c:	689b      	ldr	r3, [r3, #8]
   4126e:	429a      	cmp	r2, r3
   41270:	d001      	beq.n	41276 <z_reschedule+0x16>
   41272:	f7f7 bc95 	b.w	38ba0 <arch_swap>
   41276:	f381 8811 	msr	BASEPRI, r1
   4127a:	f3bf 8f6f 	isb	sy
}
   4127e:	4770      	bx	lr
   41280:	20002e7c 	.word	0x20002e7c

00041284 <z_sched_start>:
{
   41284:	b510      	push	{r4, lr}
	__asm__ volatile(
   41286:	f04f 0240 	mov.w	r2, #64	; 0x40
   4128a:	f3ef 8411 	mrs	r4, BASEPRI
   4128e:	f382 8812 	msr	BASEPRI_MAX, r2
   41292:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   41296:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   41298:	0751      	lsls	r1, r2, #29
   4129a:	d404      	bmi.n	412a6 <z_sched_start+0x22>
	__asm__ volatile(
   4129c:	f384 8811 	msr	BASEPRI, r4
   412a0:	f3bf 8f6f 	isb	sy
}
   412a4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   412a6:	f022 0204 	bic.w	r2, r2, #4
   412aa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   412ac:	f7ff fee0 	bl	41070 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   412b0:	4621      	mov	r1, r4
   412b2:	4802      	ldr	r0, [pc, #8]	; (412bc <z_sched_start+0x38>)
}
   412b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   412b8:	f7ff bfd2 	b.w	41260 <z_reschedule>
   412bc:	20003a82 	.word	0x20003a82

000412c0 <z_impl_k_thread_suspend>:
{
   412c0:	b570      	push	{r4, r5, r6, lr}
   412c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   412c4:	3018      	adds	r0, #24
   412c6:	f007 faae 	bl	48826 <z_abort_timeout>
	__asm__ volatile(
   412ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   412ce:	f3ef 8611 	mrs	r6, BASEPRI
   412d2:	f383 8812 	msr	BASEPRI_MAX, r3
   412d6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   412da:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   412de:	7b63      	ldrb	r3, [r4, #13]
   412e0:	2a00      	cmp	r2, #0
   412e2:	da05      	bge.n	412f0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   412e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   412e8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   412ea:	4620      	mov	r0, r4
   412ec:	f007 f952 	bl	48594 <sys_dlist_remove>
		update_cache(thread == _current);
   412f0:	4d0b      	ldr	r5, [pc, #44]	; (41320 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   412f2:	7b63      	ldrb	r3, [r4, #13]
   412f4:	68a8      	ldr	r0, [r5, #8]
   412f6:	f043 0310 	orr.w	r3, r3, #16
   412fa:	7363      	strb	r3, [r4, #13]
   412fc:	1b03      	subs	r3, r0, r4
   412fe:	4258      	negs	r0, r3
   41300:	4158      	adcs	r0, r3
   41302:	f7ff fe5d 	bl	40fc0 <update_cache>
	__asm__ volatile(
   41306:	f386 8811 	msr	BASEPRI, r6
   4130a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   4130e:	68ab      	ldr	r3, [r5, #8]
   41310:	42a3      	cmp	r3, r4
   41312:	d103      	bne.n	4131c <z_impl_k_thread_suspend+0x5c>
}
   41314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   41318:	f007 ba24 	b.w	48764 <z_reschedule_unlocked>
}
   4131c:	bd70      	pop	{r4, r5, r6, pc}
   4131e:	bf00      	nop
   41320:	20002e7c 	.word	0x20002e7c

00041324 <k_sched_lock>:
	__asm__ volatile(
   41324:	f04f 0340 	mov.w	r3, #64	; 0x40
   41328:	f3ef 8111 	mrs	r1, BASEPRI
   4132c:	f383 8812 	msr	BASEPRI_MAX, r3
   41330:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   41334:	4b04      	ldr	r3, [pc, #16]	; (41348 <k_sched_lock+0x24>)
   41336:	689a      	ldr	r2, [r3, #8]
   41338:	7bd3      	ldrb	r3, [r2, #15]
   4133a:	3b01      	subs	r3, #1
   4133c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   4133e:	f381 8811 	msr	BASEPRI, r1
   41342:	f3bf 8f6f 	isb	sy
}
   41346:	4770      	bx	lr
   41348:	20002e7c 	.word	0x20002e7c

0004134c <k_sched_unlock>:
{
   4134c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4134e:	f04f 0340 	mov.w	r3, #64	; 0x40
   41352:	f3ef 8411 	mrs	r4, BASEPRI
   41356:	f383 8812 	msr	BASEPRI_MAX, r3
   4135a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4135e:	4b08      	ldr	r3, [pc, #32]	; (41380 <k_sched_unlock+0x34>)
   41360:	689a      	ldr	r2, [r3, #8]
   41362:	7bd3      	ldrb	r3, [r2, #15]
   41364:	3301      	adds	r3, #1
   41366:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   41368:	2000      	movs	r0, #0
   4136a:	f7ff fe29 	bl	40fc0 <update_cache>
	__asm__ volatile(
   4136e:	f384 8811 	msr	BASEPRI, r4
   41372:	f3bf 8f6f 	isb	sy
}
   41376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   4137a:	f007 b9f3 	b.w	48764 <z_reschedule_unlocked>
   4137e:	bf00      	nop
   41380:	20002e7c 	.word	0x20002e7c

00041384 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   41384:	4b02      	ldr	r3, [pc, #8]	; (41390 <z_sched_init+0xc>)
   41386:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   4138a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   4138e:	4770      	bx	lr
   41390:	20002e7c 	.word	0x20002e7c

00041394 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   41394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   41396:	f04f 0340 	mov.w	r3, #64	; 0x40
   4139a:	f3ef 8511 	mrs	r5, BASEPRI
   4139e:	f383 8812 	msr	BASEPRI_MAX, r3
   413a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   413a6:	4919      	ldr	r1, [pc, #100]	; (4140c <z_impl_k_yield+0x78>)
   413a8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   413aa:	7b43      	ldrb	r3, [r0, #13]
   413ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   413b0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   413b2:	f007 f8ef 	bl	48594 <sys_dlist_remove>
	}
	queue_thread(_current);
   413b6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   413b8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   413ba:	4608      	mov	r0, r1
   413bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   413c0:	735a      	strb	r2, [r3, #13]
   413c2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   413c6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   413c8:	4282      	cmp	r2, r0
   413ca:	bf08      	it	eq
   413cc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   413ce:	b922      	cbnz	r2, 413da <z_impl_k_yield+0x46>
	node->prev = tail;
   413d0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   413d4:	6023      	str	r3, [r4, #0]
	list->tail = node;
   413d6:	620b      	str	r3, [r1, #32]
}
   413d8:	e00c      	b.n	413f4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   413da:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   413de:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   413e2:	42be      	cmp	r6, r7
   413e4:	d00e      	beq.n	41404 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   413e6:	42b7      	cmp	r7, r6
   413e8:	dd0c      	ble.n	41404 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   413ea:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   413ec:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   413f0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   413f2:	6053      	str	r3, [r2, #4]
	update_cache(1);
   413f4:	2001      	movs	r0, #1
   413f6:	f7ff fde3 	bl	40fc0 <update_cache>
   413fa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   413fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41400:	f7f7 bbce 	b.w	38ba0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   41404:	42a2      	cmp	r2, r4
   41406:	d0e3      	beq.n	413d0 <z_impl_k_yield+0x3c>
   41408:	6812      	ldr	r2, [r2, #0]
   4140a:	e7e0      	b.n	413ce <z_impl_k_yield+0x3a>
   4140c:	20002e7c 	.word	0x20002e7c

00041410 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   41410:	ea50 0301 	orrs.w	r3, r0, r1
{
   41414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41418:	4605      	mov	r5, r0
   4141a:	460e      	mov	r6, r1
	if (ticks == 0) {
   4141c:	d103      	bne.n	41426 <z_tick_sleep+0x16>
	z_impl_k_yield();
   4141e:	f7ff ffb9 	bl	41394 <z_impl_k_yield>
		k_yield();
		return 0;
   41422:	2000      	movs	r0, #0
   41424:	e02c      	b.n	41480 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   41426:	1c83      	adds	r3, r0, #2
   41428:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   4142c:	db2a      	blt.n	41484 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   4142e:	f007 fa20 	bl	48872 <sys_clock_tick_get_32>
   41432:	182c      	adds	r4, r5, r0
   41434:	f04f 0340 	mov.w	r3, #64	; 0x40
   41438:	f3ef 8811 	mrs	r8, BASEPRI
   4143c:	f383 8812 	msr	BASEPRI_MAX, r3
   41440:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   41444:	4f11      	ldr	r7, [pc, #68]	; (4148c <z_tick_sleep+0x7c>)
   41446:	4b12      	ldr	r3, [pc, #72]	; (41490 <z_tick_sleep+0x80>)
   41448:	68b8      	ldr	r0, [r7, #8]
   4144a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   4144c:	f7ff fe44 	bl	410d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   41450:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   41452:	4910      	ldr	r1, [pc, #64]	; (41494 <z_tick_sleep+0x84>)
   41454:	462a      	mov	r2, r5
   41456:	4633      	mov	r3, r6
   41458:	3018      	adds	r0, #24
   4145a:	f000 f90f 	bl	4167c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   4145e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   41460:	7b53      	ldrb	r3, [r2, #13]
   41462:	f043 0310 	orr.w	r3, r3, #16
   41466:	7353      	strb	r3, [r2, #13]
   41468:	4640      	mov	r0, r8
   4146a:	f7f7 fb99 	bl	38ba0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   4146e:	f007 fa00 	bl	48872 <sys_clock_tick_get_32>
   41472:	1a20      	subs	r0, r4, r0
   41474:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   41478:	2801      	cmp	r0, #1
   4147a:	f173 0300 	sbcs.w	r3, r3, #0
   4147e:	dbd0      	blt.n	41422 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   41480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   41484:	f06f 0401 	mvn.w	r4, #1
   41488:	1a24      	subs	r4, r4, r0
   4148a:	e7d3      	b.n	41434 <z_tick_sleep+0x24>
   4148c:	20002e7c 	.word	0x20002e7c
   41490:	20002ea8 	.word	0x20002ea8
   41494:	000486af 	.word	0x000486af

00041498 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41498:	f1b1 3fff 	cmp.w	r1, #4294967295
   4149c:	bf08      	it	eq
   4149e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   414a2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   414a4:	d106      	bne.n	414b4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   414a6:	4b08      	ldr	r3, [pc, #32]	; (414c8 <z_impl_k_sleep+0x30>)
   414a8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   414aa:	f7ff ff09 	bl	412c0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   414ae:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   414b2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   414b4:	f7ff ffac 	bl	41410 <z_tick_sleep>
   414b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   414bc:	fb80 0303 	smull	r0, r3, r0, r3
   414c0:	0bc0      	lsrs	r0, r0, #15
   414c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   414c6:	e7f4      	b.n	414b2 <z_impl_k_sleep+0x1a>
   414c8:	20002e7c 	.word	0x20002e7c

000414cc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   414cc:	4b01      	ldr	r3, [pc, #4]	; (414d4 <z_impl_z_current_get+0x8>)
   414ce:	6898      	ldr	r0, [r3, #8]
   414d0:	4770      	bx	lr
   414d2:	bf00      	nop
   414d4:	20002e7c 	.word	0x20002e7c

000414d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   414d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   414dc:	4604      	mov	r4, r0
   414de:	f04f 0340 	mov.w	r3, #64	; 0x40
   414e2:	f3ef 8611 	mrs	r6, BASEPRI
   414e6:	f383 8812 	msr	BASEPRI_MAX, r3
   414ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   414ee:	7b03      	ldrb	r3, [r0, #12]
   414f0:	07d9      	lsls	r1, r3, #31
   414f2:	d50b      	bpl.n	4150c <z_thread_abort+0x34>
	__asm__ volatile(
   414f4:	f386 8811 	msr	BASEPRI, r6
   414f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   414fc:	4040      	eors	r0, r0
   414fe:	f380 8811 	msr	BASEPRI, r0
   41502:	f04f 0004 	mov.w	r0, #4
   41506:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   41508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   4150c:	7b43      	ldrb	r3, [r0, #13]
   4150e:	071a      	lsls	r2, r3, #28
   41510:	d504      	bpl.n	4151c <z_thread_abort+0x44>
   41512:	f386 8811 	msr	BASEPRI, r6
   41516:	f3bf 8f6f 	isb	sy
   4151a:	e7f5      	b.n	41508 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   4151c:	f023 0220 	bic.w	r2, r3, #32
   41520:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   41524:	09d2      	lsrs	r2, r2, #7
   41526:	d120      	bne.n	4156a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   41528:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   4152a:	68a3      	ldr	r3, [r4, #8]
   4152c:	b113      	cbz	r3, 41534 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   4152e:	4620      	mov	r0, r4
   41530:	f007 f838 	bl	485a4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   41534:	f104 0018 	add.w	r0, r4, #24
   41538:	f007 f975 	bl	48826 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   4153c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   41540:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   41544:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41546:	42bd      	cmp	r5, r7
   41548:	d000      	beq.n	4154c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4154a:	b9b5      	cbnz	r5, 4157a <z_thread_abort+0xa2>
		update_cache(1);
   4154c:	2001      	movs	r0, #1
   4154e:	f7ff fd37 	bl	40fc0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   41552:	4b10      	ldr	r3, [pc, #64]	; (41594 <z_thread_abort+0xbc>)
   41554:	689b      	ldr	r3, [r3, #8]
   41556:	42a3      	cmp	r3, r4
   41558:	d1db      	bne.n	41512 <z_thread_abort+0x3a>
   4155a:	f3ef 8305 	mrs	r3, IPSR
   4155e:	2b00      	cmp	r3, #0
   41560:	d1d7      	bne.n	41512 <z_thread_abort+0x3a>
   41562:	4630      	mov	r0, r6
   41564:	f7f7 fb1c 	bl	38ba0 <arch_swap>
	return ret;
   41568:	e7d3      	b.n	41512 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4156a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   4156e:	f043 0308 	orr.w	r3, r3, #8
   41572:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41574:	f007 f80e 	bl	48594 <sys_dlist_remove>
}
   41578:	e7d7      	b.n	4152a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   4157a:	4628      	mov	r0, r5
   4157c:	f007 f812 	bl	485a4 <unpend_thread_no_timeout>
   41580:	f105 0018 	add.w	r0, r5, #24
   41584:	f007 f94f 	bl	48826 <z_abort_timeout>
   41588:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
		ready_thread(thread);
   4158c:	4628      	mov	r0, r5
   4158e:	f7ff fd6f 	bl	41070 <ready_thread>
   41592:	e7d7      	b.n	41544 <z_thread_abort+0x6c>
   41594:	20002e7c 	.word	0x20002e7c

00041598 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   41598:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   4159a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   4159e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   415a0:	e9cd 6700 	strd	r6, r7, [sp]
   415a4:	f7ff fdf8 	bl	41198 <z_pend_curr>

	if (data != NULL) {
   415a8:	b11c      	cbz	r4, 415b2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   415aa:	4b03      	ldr	r3, [pc, #12]	; (415b8 <z_sched_wait+0x20>)
   415ac:	689b      	ldr	r3, [r3, #8]
   415ae:	695b      	ldr	r3, [r3, #20]
   415b0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   415b2:	b002      	add	sp, #8
   415b4:	bdd0      	pop	{r4, r6, r7, pc}
   415b6:	bf00      	nop
   415b8:	20002e7c 	.word	0x20002e7c

000415bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   415bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   415be:	4806      	ldr	r0, [pc, #24]	; (415d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   415c0:	4a06      	ldr	r2, [pc, #24]	; (415dc <z_data_copy+0x20>)
   415c2:	4907      	ldr	r1, [pc, #28]	; (415e0 <z_data_copy+0x24>)
   415c4:	1a12      	subs	r2, r2, r0
   415c6:	f006 fd50 	bl	4806a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   415ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   415ce:	4a05      	ldr	r2, [pc, #20]	; (415e4 <z_data_copy+0x28>)
   415d0:	4905      	ldr	r1, [pc, #20]	; (415e8 <z_data_copy+0x2c>)
   415d2:	4806      	ldr	r0, [pc, #24]	; (415ec <z_data_copy+0x30>)
   415d4:	f006 bd49 	b.w	4806a <z_early_memcpy>
   415d8:	20000000 	.word	0x20000000
   415dc:	20000b4c 	.word	0x20000b4c
   415e0:	00049e24 	.word	0x00049e24
   415e4:	00000000 	.word	0x00000000
   415e8:	00049e24 	.word	0x00049e24
   415ec:	20000000 	.word	0x20000000

000415f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   415f0:	4b03      	ldr	r3, [pc, #12]	; (41600 <elapsed+0x10>)
   415f2:	681b      	ldr	r3, [r3, #0]
   415f4:	b90b      	cbnz	r3, 415fa <elapsed+0xa>
   415f6:	f7fc bfcb 	b.w	3e590 <sys_clock_elapsed>
}
   415fa:	2000      	movs	r0, #0
   415fc:	4770      	bx	lr
   415fe:	bf00      	nop
   41600:	20002eb4 	.word	0x20002eb4

00041604 <next_timeout>:

static int32_t next_timeout(void)
{
   41604:	b510      	push	{r4, lr}
	return list->head == list;
   41606:	4b0e      	ldr	r3, [pc, #56]	; (41640 <next_timeout+0x3c>)
   41608:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4160a:	429c      	cmp	r4, r3
   4160c:	d104      	bne.n	41618 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   4160e:	f7ff ffef 	bl	415f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   41612:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   41616:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   41618:	f7ff ffea 	bl	415f0 <elapsed>
	if ((to == NULL) ||
   4161c:	2c00      	cmp	r4, #0
   4161e:	d0f8      	beq.n	41612 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   41620:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   41624:	1a1b      	subs	r3, r3, r0
   41626:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   4162a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   4162e:	f172 0100 	sbcs.w	r1, r2, #0
   41632:	daee      	bge.n	41612 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   41634:	2a00      	cmp	r2, #0
   41636:	bfac      	ite	ge
   41638:	4618      	movge	r0, r3
   4163a:	2000      	movlt	r0, #0
	return ret;
   4163c:	e7eb      	b.n	41616 <next_timeout+0x12>
   4163e:	bf00      	nop
   41640:	20000854 	.word	0x20000854

00041644 <remove_timeout>:
{
   41644:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   41646:	b170      	cbz	r0, 41666 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   41648:	4b0b      	ldr	r3, [pc, #44]	; (41678 <remove_timeout+0x34>)
   4164a:	685b      	ldr	r3, [r3, #4]
   4164c:	4298      	cmp	r0, r3
   4164e:	d00a      	beq.n	41666 <remove_timeout+0x22>
   41650:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   41652:	b143      	cbz	r3, 41666 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   41654:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   41658:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   4165c:	1912      	adds	r2, r2, r4
   4165e:	eb41 0105 	adc.w	r1, r1, r5
   41662:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   41666:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   4166a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4166c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4166e:	2300      	movs	r3, #0
	node->prev = NULL;
   41670:	e9c0 3300 	strd	r3, r3, [r0]
}
   41674:	bd30      	pop	{r4, r5, pc}
   41676:	bf00      	nop
   41678:	20000854 	.word	0x20000854

0004167c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4167c:	f1b3 3fff 	cmp.w	r3, #4294967295
   41680:	bf08      	it	eq
   41682:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   41686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41688:	4604      	mov	r4, r0
   4168a:	461d      	mov	r5, r3
   4168c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4168e:	d05c      	beq.n	4174a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   41690:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   41692:	f04f 0340 	mov.w	r3, #64	; 0x40
   41696:	f3ef 8711 	mrs	r7, BASEPRI
   4169a:	f383 8812 	msr	BASEPRI_MAX, r3
   4169e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   416a2:	3201      	adds	r2, #1
   416a4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   416a8:	da24      	bge.n	416f4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   416aa:	492d      	ldr	r1, [pc, #180]	; (41760 <z_add_timeout+0xe4>)
   416ac:	e9d1 2000 	ldrd	r2, r0, [r1]
   416b0:	f06f 0301 	mvn.w	r3, #1
   416b4:	1a9b      	subs	r3, r3, r2
   416b6:	f04f 32ff 	mov.w	r2, #4294967295
   416ba:	eb62 0000 	sbc.w	r0, r2, r0
   416be:	1b9e      	subs	r6, r3, r6
   416c0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   416c4:	2e01      	cmp	r6, #1
   416c6:	f170 0300 	sbcs.w	r3, r0, #0
   416ca:	da01      	bge.n	416d0 <z_add_timeout+0x54>
   416cc:	2601      	movs	r6, #1
   416ce:	2000      	movs	r0, #0
   416d0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   416d4:	4e23      	ldr	r6, [pc, #140]	; (41764 <z_add_timeout+0xe8>)
   416d6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   416da:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   416dc:	45b4      	cmp	ip, r6
   416de:	bf08      	it	eq
   416e0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   416e4:	f1bc 0f00 	cmp.w	ip, #0
   416e8:	d10d      	bne.n	41706 <z_add_timeout+0x8a>
	node->prev = tail;
   416ea:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   416ee:	602c      	str	r4, [r5, #0]
	list->tail = node;
   416f0:	6074      	str	r4, [r6, #4]
}
   416f2:	e01c      	b.n	4172e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   416f4:	f7ff ff7c 	bl	415f0 <elapsed>
   416f8:	3601      	adds	r6, #1
   416fa:	f145 0500 	adc.w	r5, r5, #0
   416fe:	1836      	adds	r6, r6, r0
   41700:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   41704:	e7e4      	b.n	416d0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   41706:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   4170a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   4170e:	4293      	cmp	r3, r2
   41710:	eb71 0e00 	sbcs.w	lr, r1, r0
   41714:	da1a      	bge.n	4174c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   41716:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   41718:	f8dc 3004 	ldr.w	r3, [ip, #4]
   4171c:	eb60 0001 	sbc.w	r0, r0, r1
   41720:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   41724:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   41728:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   4172a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   4172e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41730:	42b3      	cmp	r3, r6
   41732:	d006      	beq.n	41742 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   41734:	429c      	cmp	r4, r3
   41736:	d104      	bne.n	41742 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   41738:	f7ff ff64 	bl	41604 <next_timeout>
   4173c:	2100      	movs	r1, #0
   4173e:	f7fc fef5 	bl	3e52c <sys_clock_set_timeout>
	__asm__ volatile(
   41742:	f387 8811 	msr	BASEPRI, r7
   41746:	f3bf 8f6f 	isb	sy
		}
	}
}
   4174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   4174c:	1a9b      	subs	r3, r3, r2
   4174e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   41752:	45ac      	cmp	ip, r5
   41754:	e9c4 3104 	strd	r3, r1, [r4, #16]
   41758:	d0c7      	beq.n	416ea <z_add_timeout+0x6e>
   4175a:	f8dc c000 	ldr.w	ip, [ip]
   4175e:	e7c1      	b.n	416e4 <z_add_timeout+0x68>
   41760:	20002660 	.word	0x20002660
   41764:	20000854 	.word	0x20000854

00041768 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   41768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   4176c:	f04f 0340 	mov.w	r3, #64	; 0x40
   41770:	f3ef 8c11 	mrs	ip, BASEPRI
   41774:	f383 8812 	msr	BASEPRI_MAX, r3
   41778:	f3bf 8f6f 	isb	sy
	return list->head == list;
   4177c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 41830 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   41780:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 41834 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   41784:	4f2c      	ldr	r7, [pc, #176]	; (41838 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   41786:	f8c9 0000 	str.w	r0, [r9]
   4178a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   4178e:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41790:	4550      	cmp	r0, sl
   41792:	bf08      	it	eq
   41794:	2000      	moveq	r0, #0
   41796:	2500      	movs	r5, #0
		curr_tick += dt;
   41798:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   4179c:	f8d9 3000 	ldr.w	r3, [r9]
   417a0:	46e0      	mov	r8, ip
   417a2:	b380      	cbz	r0, 41806 <sys_clock_announce+0x9e>
   417a4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   417a8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   417ac:	42b3      	cmp	r3, r6
   417ae:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   417b2:	da05      	bge.n	417c0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   417b4:	1af6      	subs	r6, r6, r3
   417b6:	eb6c 040e 	sbc.w	r4, ip, lr
   417ba:	e9c0 6404 	strd	r6, r4, [r0, #16]
   417be:	e022      	b.n	41806 <sys_clock_announce+0x9e>
		curr_tick += dt;
   417c0:	18b2      	adds	r2, r6, r2
   417c2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   417c6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   417ca:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   417ce:	f7ff ff39 	bl	41644 <remove_timeout>
	__asm__ volatile(
   417d2:	f388 8811 	msr	BASEPRI, r8
   417d6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   417da:	6883      	ldr	r3, [r0, #8]
   417dc:	4798      	blx	r3
	__asm__ volatile(
   417de:	f04f 0340 	mov.w	r3, #64	; 0x40
   417e2:	f3ef 8811 	mrs	r8, BASEPRI
   417e6:	f383 8812 	msr	BASEPRI_MAX, r3
   417ea:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   417ee:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   417f2:	f8da 0000 	ldr.w	r0, [sl]
   417f6:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   417f8:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   417fa:	46c4      	mov	ip, r8
   417fc:	f8c9 3000 	str.w	r3, [r9]
   41800:	d1ca      	bne.n	41798 <sys_clock_announce+0x30>
		curr_tick += dt;
   41802:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   41806:	189a      	adds	r2, r3, r2
   41808:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   4180c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   4180e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   41812:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   41816:	f7ff fef5 	bl	41604 <next_timeout>
   4181a:	4621      	mov	r1, r4
   4181c:	f7fc fe86 	bl	3e52c <sys_clock_set_timeout>
	__asm__ volatile(
   41820:	f388 8811 	msr	BASEPRI, r8
   41824:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   41828:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   4182c:	f7ff bc84 	b.w	41138 <z_time_slice>
   41830:	20000854 	.word	0x20000854
   41834:	20002eb4 	.word	0x20002eb4
   41838:	20002660 	.word	0x20002660

0004183c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   4183c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4183e:	f04f 0340 	mov.w	r3, #64	; 0x40
   41842:	f3ef 8411 	mrs	r4, BASEPRI
   41846:	f383 8812 	msr	BASEPRI_MAX, r3
   4184a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   4184e:	f7ff fecf 	bl	415f0 <elapsed>
   41852:	4a06      	ldr	r2, [pc, #24]	; (4186c <sys_clock_tick_get+0x30>)
   41854:	4603      	mov	r3, r0
   41856:	e9d2 0100 	ldrd	r0, r1, [r2]
   4185a:	1818      	adds	r0, r3, r0
   4185c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   41860:	f384 8811 	msr	BASEPRI, r4
   41864:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   41868:	bd10      	pop	{r4, pc}
   4186a:	bf00      	nop
   4186c:	20002660 	.word	0x20002660

00041870 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   41870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41872:	4604      	mov	r4, r0
	__asm__ volatile(
   41874:	f04f 0340 	mov.w	r3, #64	; 0x40
   41878:	f3ef 8711 	mrs	r7, BASEPRI
   4187c:	f383 8812 	msr	BASEPRI_MAX, r3
   41880:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   41884:	6802      	ldr	r2, [r0, #0]
   41886:	b122      	cbz	r2, 41892 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   41888:	f387 8811 	msr	BASEPRI, r7
   4188c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   41890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   41892:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   41896:	1c58      	adds	r0, r3, #1
   41898:	f146 0100 	adc.w	r1, r6, #0
   4189c:	2802      	cmp	r0, #2
   4189e:	f171 0100 	sbcs.w	r1, r1, #0
   418a2:	d327      	bcc.n	418f4 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   418a4:	2b01      	cmp	r3, #1
   418a6:	f176 0100 	sbcs.w	r1, r6, #0
   418aa:	bfbc      	itt	lt
   418ac:	2301      	movlt	r3, #1
   418ae:	4616      	movlt	r6, r2
   418b0:	1e5d      	subs	r5, r3, #1
   418b2:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   418b6:	f006 ffe0 	bl	4887a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   418ba:	3001      	adds	r0, #1
   418bc:	f141 0100 	adc.w	r1, r1, #0
   418c0:	1940      	adds	r0, r0, r5
   418c2:	eb46 0101 	adc.w	r1, r6, r1
   418c6:	2801      	cmp	r0, #1
   418c8:	f171 0100 	sbcs.w	r1, r1, #0
   418cc:	db3b      	blt.n	41946 <z_timer_expiration_handler+0xd6>
   418ce:	f006 ffd4 	bl	4887a <z_impl_k_uptime_ticks>
   418d2:	3001      	adds	r0, #1
   418d4:	f141 0100 	adc.w	r1, r1, #0
   418d8:	f06f 0201 	mvn.w	r2, #1
   418dc:	1940      	adds	r0, r0, r5
   418de:	eb46 0301 	adc.w	r3, r6, r1
   418e2:	1a12      	subs	r2, r2, r0
   418e4:	f04f 31ff 	mov.w	r1, #4294967295
   418e8:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   418ec:	4918      	ldr	r1, [pc, #96]	; (41950 <z_timer_expiration_handler+0xe0>)
   418ee:	4620      	mov	r0, r4
   418f0:	f7ff fec4 	bl	4167c <z_add_timeout>
	timer->status += 1U;
   418f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   418f6:	3301      	adds	r3, #1
   418f8:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   418fa:	6a23      	ldr	r3, [r4, #32]
   418fc:	b173      	cbz	r3, 4191c <z_timer_expiration_handler+0xac>
   418fe:	f387 8811 	msr	BASEPRI, r7
   41902:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   41906:	6a23      	ldr	r3, [r4, #32]
   41908:	4620      	mov	r0, r4
   4190a:	4798      	blx	r3
	__asm__ volatile(
   4190c:	f04f 0340 	mov.w	r3, #64	; 0x40
   41910:	f3ef 8711 	mrs	r7, BASEPRI
   41914:	f383 8812 	msr	BASEPRI_MAX, r3
   41918:	f3bf 8f6f 	isb	sy
	return list->head == list;
   4191c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41920:	42a5      	cmp	r5, r4
   41922:	d0b1      	beq.n	41888 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   41924:	2d00      	cmp	r5, #0
   41926:	d0af      	beq.n	41888 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   41928:	4628      	mov	r0, r5
   4192a:	f006 fe86 	bl	4863a <z_unpend_thread_no_timeout>
   4192e:	2300      	movs	r3, #0
   41930:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	__asm__ volatile(
   41934:	f387 8811 	msr	BASEPRI, r7
   41938:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   4193c:	4628      	mov	r0, r5
}
   4193e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   41942:	f006 be6a 	b.w	4861a <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   41946:	f06f 0201 	mvn.w	r2, #1
   4194a:	f04f 33ff 	mov.w	r3, #4294967295
   4194e:	e7cd      	b.n	418ec <z_timer_expiration_handler+0x7c>
   41950:	00041871 	.word	0x00041871

00041954 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   41954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   41958:	f1b3 3fff 	cmp.w	r3, #4294967295
   4195c:	bf08      	it	eq
   4195e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   41962:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   41966:	4605      	mov	r5, r0
   41968:	461c      	mov	r4, r3
   4196a:	4691      	mov	r9, r2
   4196c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   4196e:	d01c      	beq.n	419aa <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   41970:	1c53      	adds	r3, r2, #1
   41972:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   41976:	db09      	blt.n	4198c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   41978:	2a01      	cmp	r2, #1
   4197a:	f174 0300 	sbcs.w	r3, r4, #0
   4197e:	bfbc      	itt	lt
   41980:	2201      	movlt	r2, #1
   41982:	2400      	movlt	r4, #0
   41984:	f112 39ff 	adds.w	r9, r2, #4294967295
   41988:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   4198c:	4628      	mov	r0, r5
   4198e:	f006 ff4a 	bl	48826 <z_abort_timeout>
	timer->period = period;
   41992:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   41996:	2300      	movs	r3, #0
   41998:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   4199a:	464a      	mov	r2, r9
   4199c:	4643      	mov	r3, r8
   4199e:	4628      	mov	r0, r5
   419a0:	4903      	ldr	r1, [pc, #12]	; (419b0 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   419a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   419a6:	f7ff be69 	b.w	4167c <z_add_timeout>
}
   419aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   419ae:	bf00      	nop
   419b0:	00041871 	.word	0x00041871

000419b4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   419b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   419b8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   419ba:	4b29      	ldr	r3, [pc, #164]	; (41a60 <z_impl_k_poll+0xac>)
   419bc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   419be:	2301      	movs	r3, #1
   419c0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   419c4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   419c8:	ea52 0305 	orrs.w	r3, r2, r5
{
   419cc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   419ce:	bf0c      	ite	eq
   419d0:	2301      	moveq	r3, #1
   419d2:	2300      	movne	r3, #0
   419d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   419d8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   419da:	f006 ffc4 	bl	48966 <register_events>
   419de:	4681      	mov	r9, r0
	__asm__ volatile(
   419e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   419e4:	f3ef 8a11 	mrs	sl, BASEPRI
   419e8:	f383 8812 	msr	BASEPRI_MAX, r3
   419ec:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   419f0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   419f4:	b964      	cbnz	r4, 41a10 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   419f6:	4601      	mov	r1, r0
   419f8:	4652      	mov	r2, sl
   419fa:	4640      	mov	r0, r8
   419fc:	f007 f884 	bl	48b08 <clear_event_registrations>
	__asm__ volatile(
   41a00:	f38a 8811 	msr	BASEPRI, sl
   41a04:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   41a08:	4620      	mov	r0, r4
   41a0a:	b002      	add	sp, #8
   41a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   41a10:	2300      	movs	r3, #0
   41a12:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41a16:	ea56 0305 	orrs.w	r3, r6, r5
   41a1a:	d106      	bne.n	41a2a <z_impl_k_poll+0x76>
   41a1c:	f38a 8811 	msr	BASEPRI, sl
   41a20:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   41a24:	f06f 040a 	mvn.w	r4, #10
   41a28:	e7ee      	b.n	41a08 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   41a2a:	e9cd 6500 	strd	r6, r5, [sp]
   41a2e:	4a0d      	ldr	r2, [pc, #52]	; (41a64 <z_impl_k_poll+0xb0>)
   41a30:	480d      	ldr	r0, [pc, #52]	; (41a68 <z_impl_k_poll+0xb4>)
   41a32:	4651      	mov	r1, sl
   41a34:	f7ff fbb0 	bl	41198 <z_pend_curr>
   41a38:	4604      	mov	r4, r0
	__asm__ volatile(
   41a3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   41a3e:	f3ef 8511 	mrs	r5, BASEPRI
   41a42:	f383 8812 	msr	BASEPRI_MAX, r3
   41a46:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   41a4a:	462a      	mov	r2, r5
   41a4c:	4649      	mov	r1, r9
   41a4e:	4640      	mov	r0, r8
   41a50:	f007 f85a 	bl	48b08 <clear_event_registrations>
	__asm__ volatile(
   41a54:	f385 8811 	msr	BASEPRI, r5
   41a58:	f3bf 8f6f 	isb	sy
	return swap_rc;
   41a5c:	e7d4      	b.n	41a08 <z_impl_k_poll+0x54>
   41a5e:	bf00      	nop
   41a60:	20002e7c 	.word	0x20002e7c
   41a64:	2000085c 	.word	0x2000085c
   41a68:	20003a82 	.word	0x20003a82

00041a6c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   41a6c:	b538      	push	{r3, r4, r5, lr}
   41a6e:	4603      	mov	r3, r0
	__asm__ volatile(
   41a70:	f04f 0240 	mov.w	r2, #64	; 0x40
   41a74:	f3ef 8511 	mrs	r5, BASEPRI
   41a78:	f382 8812 	msr	BASEPRI_MAX, r2
   41a7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   41a80:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   41a82:	2101      	movs	r1, #1
   41a84:	6081      	str	r1, [r0, #8]
	return list->head == list;
   41a86:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   41a88:	4283      	cmp	r3, r0
   41a8a:	d106      	bne.n	41a9a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   41a8c:	f385 8811 	msr	BASEPRI, r5
   41a90:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   41a94:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   41a96:	4620      	mov	r0, r4
   41a98:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   41a9a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   41a9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   41aa0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41aa2:	2300      	movs	r3, #0
	node->prev = NULL;
   41aa4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41aa8:	f006 ffd4 	bl	48a54 <signal_poll_event>
	z_reschedule(&lock, key);
   41aac:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41aae:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   41ab0:	4801      	ldr	r0, [pc, #4]	; (41ab8 <z_impl_k_poll_signal_raise+0x4c>)
   41ab2:	f7ff fbd5 	bl	41260 <z_reschedule>
	return rc;
   41ab6:	e7ee      	b.n	41a96 <z_impl_k_poll_signal_raise+0x2a>
   41ab8:	20003a82 	.word	0x20003a82

00041abc <k_event_post_internal>:
	return 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  uint32_t events_mask)
{
   41abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	struct event_walk_data data;

	data.head = NULL;
   41ac0:	2600      	movs	r6, #0
   41ac2:	9600      	str	r6, [sp, #0]
	key = k_spin_lock(&event->lock);
   41ac4:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   41ac8:	f04f 0440 	mov.w	r4, #64	; 0x40
   41acc:	f3ef 8811 	mrs	r8, BASEPRI
   41ad0:	f384 8812 	msr	BASEPRI_MAX, r4
   41ad4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					events_mask);

	events = (event->events & ~events_mask) |
   41ad8:	6885      	ldr	r5, [r0, #8]
   41ada:	4069      	eors	r1, r5
   41adc:	400a      	ands	r2, r1
   41ade:	4055      	eors	r5, r2
	 * 1. Walk the waitq and create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	z_sched_waitq_walk(&event->wait_q, event_walk_op, &data);
   41ae0:	490b      	ldr	r1, [pc, #44]	; (41b10 <k_event_post_internal+0x54>)
	event->events = events;
   41ae2:	6085      	str	r5, [r0, #8]
	z_sched_waitq_walk(&event->wait_q, event_walk_op, &data);
   41ae4:	466a      	mov	r2, sp
	data.events = events;
   41ae6:	9501      	str	r5, [sp, #4]
	z_sched_waitq_walk(&event->wait_q, event_walk_op, &data);
   41ae8:	f006 fe7a 	bl	487e0 <z_sched_waitq_walk>

	if (data.head != NULL) {
   41aec:	9c00      	ldr	r4, [sp, #0]
   41aee:	b144      	cbz	r4, 41b02 <k_event_post_internal+0x46>
   41af0:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
		thread = data.head;
		struct k_thread *next;
		do {
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
   41af4:	66a5      	str	r5, [r4, #104]	; 0x68
			next = thread->next_event_link;
   41af6:	4620      	mov	r0, r4
			z_sched_wake_thread(thread, false);
   41af8:	2100      	movs	r1, #0
			next = thread->next_event_link;
   41afa:	6e64      	ldr	r4, [r4, #100]	; 0x64
			z_sched_wake_thread(thread, false);
   41afc:	f006 fdaf 	bl	4865e <z_sched_wake_thread>
			thread = next;
		} while (thread != NULL);
   41b00:	e7f5      	b.n	41aee <k_event_post_internal+0x32>
	}

	z_reschedule(&event->lock, key);
   41b02:	4641      	mov	r1, r8
   41b04:	4638      	mov	r0, r7
   41b06:	f7ff fbab 	bl	41260 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       events_mask);
}
   41b0a:	b002      	add	sp, #8
   41b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41b10:	00048bb1 	.word	0x00048bb1

00041b14 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   41b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   41b16:	4606      	mov	r6, r0
   41b18:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   41b1a:	f006 fb68 	bl	481ee <k_is_in_isr>
   41b1e:	b980      	cbnz	r0, 41b42 <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   41b20:	4b0b      	ldr	r3, [pc, #44]	; (41b50 <z_thread_aligned_alloc+0x3c>)
   41b22:	689b      	ldr	r3, [r3, #8]
   41b24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
	}

	if (heap != NULL) {
   41b28:	b17c      	cbz	r4, 41b4a <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   41b2a:	1d2a      	adds	r2, r5, #4
   41b2c:	d209      	bcs.n	41b42 <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   41b2e:	2000      	movs	r0, #0
   41b30:	2100      	movs	r1, #0
   41b32:	e9cd 0100 	strd	r0, r1, [sp]
   41b36:	f046 0104 	orr.w	r1, r6, #4
   41b3a:	4620      	mov	r0, r4
   41b3c:	f006 fa9f 	bl	4807e <k_heap_aligned_alloc>
	if (mem == NULL) {
   41b40:	b908      	cbnz	r0, 41b46 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   41b42:	2400      	movs	r4, #0
	}

	return ret;
   41b44:	e001      	b.n	41b4a <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   41b46:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   41b48:	1d04      	adds	r4, r0, #4
}
   41b4a:	4620      	mov	r0, r4
   41b4c:	b002      	add	sp, #8
   41b4e:	bd70      	pop	{r4, r5, r6, pc}
   41b50:	20002e7c 	.word	0x20002e7c

00041b54 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   41b54:	4801      	ldr	r0, [pc, #4]	; (41b5c <boot_banner+0x8>)
   41b56:	f002 bfbb 	b.w	44ad0 <printk>
   41b5a:	bf00      	nop
   41b5c:	00049df1 	.word	0x00049df1

00041b60 <ocrypto_ecdh_p256_public_key>:
   41b60:	b530      	push	{r4, r5, lr}
   41b62:	b099      	sub	sp, #100	; 0x64
   41b64:	4605      	mov	r5, r0
   41b66:	4668      	mov	r0, sp
   41b68:	f000 f828 	bl	41bbc <ocrypto_sc_p256_from32bytes>
   41b6c:	4669      	mov	r1, sp
   41b6e:	4604      	mov	r4, r0
   41b70:	a808      	add	r0, sp, #32
   41b72:	f000 fa53 	bl	4201c <ocrypto_curve_p256_scalarmult_base>
   41b76:	a908      	add	r1, sp, #32
   41b78:	4304      	orrs	r4, r0
   41b7a:	4628      	mov	r0, r5
   41b7c:	f000 f98a 	bl	41e94 <ocrypto_curve_p256_to64bytes>
   41b80:	4620      	mov	r0, r4
   41b82:	b019      	add	sp, #100	; 0x64
   41b84:	bd30      	pop	{r4, r5, pc}
   41b86:	bf00      	nop

00041b88 <ocrypto_ecdh_p256_common_secret>:
   41b88:	b570      	push	{r4, r5, r6, lr}
   41b8a:	b098      	sub	sp, #96	; 0x60
   41b8c:	4605      	mov	r5, r0
   41b8e:	4668      	mov	r0, sp
   41b90:	4616      	mov	r6, r2
   41b92:	f000 f813 	bl	41bbc <ocrypto_sc_p256_from32bytes>
   41b96:	4631      	mov	r1, r6
   41b98:	4604      	mov	r4, r0
   41b9a:	a808      	add	r0, sp, #32
   41b9c:	f000 f946 	bl	41e2c <ocrypto_curve_p256_from64bytes>
   41ba0:	a908      	add	r1, sp, #32
   41ba2:	466a      	mov	r2, sp
   41ba4:	4304      	orrs	r4, r0
   41ba6:	4608      	mov	r0, r1
   41ba8:	f000 f982 	bl	41eb0 <ocrypto_curve_p256_scalarmult>
   41bac:	a908      	add	r1, sp, #32
   41bae:	4304      	orrs	r4, r0
   41bb0:	4628      	mov	r0, r5
   41bb2:	f000 f96d 	bl	41e90 <ocrypto_curve_p256_to32bytes>
   41bb6:	4620      	mov	r0, r4
   41bb8:	b018      	add	sp, #96	; 0x60
   41bba:	bd70      	pop	{r4, r5, r6, pc}

00041bbc <ocrypto_sc_p256_from32bytes>:
   41bbc:	b570      	push	{r4, r5, r6, lr}
   41bbe:	680b      	ldr	r3, [r1, #0]
   41bc0:	4e12      	ldr	r6, [pc, #72]	; (41c0c <ocrypto_sc_p256_from32bytes+0x50>)
   41bc2:	ba1b      	rev	r3, r3
   41bc4:	61c3      	str	r3, [r0, #28]
   41bc6:	684b      	ldr	r3, [r1, #4]
   41bc8:	ba1b      	rev	r3, r3
   41bca:	6183      	str	r3, [r0, #24]
   41bcc:	688b      	ldr	r3, [r1, #8]
   41bce:	ba1b      	rev	r3, r3
   41bd0:	6143      	str	r3, [r0, #20]
   41bd2:	68cb      	ldr	r3, [r1, #12]
   41bd4:	ba1b      	rev	r3, r3
   41bd6:	6103      	str	r3, [r0, #16]
   41bd8:	690b      	ldr	r3, [r1, #16]
   41bda:	ba1b      	rev	r3, r3
   41bdc:	60c3      	str	r3, [r0, #12]
   41bde:	694b      	ldr	r3, [r1, #20]
   41be0:	ba1b      	rev	r3, r3
   41be2:	6083      	str	r3, [r0, #8]
   41be4:	698b      	ldr	r3, [r1, #24]
   41be6:	ba1b      	rev	r3, r3
   41be8:	6043      	str	r3, [r0, #4]
   41bea:	69cb      	ldr	r3, [r1, #28]
   41bec:	ba1b      	rev	r3, r3
   41bee:	4632      	mov	r2, r6
   41bf0:	6003      	str	r3, [r0, #0]
   41bf2:	4601      	mov	r1, r0
   41bf4:	4604      	mov	r4, r0
   41bf6:	f7e5 fb0d 	bl	27214 <ocrypto_bigint_sub256>
   41bfa:	4631      	mov	r1, r6
   41bfc:	4605      	mov	r5, r0
   41bfe:	4602      	mov	r2, r0
   41c00:	4620      	mov	r0, r4
   41c02:	f7e5 fb27 	bl	27254 <ocrypto_bigint_cadd256>
   41c06:	1e68      	subs	r0, r5, #1
   41c08:	bd70      	pop	{r4, r5, r6, pc}
   41c0a:	bf00      	nop
   41c0c:	000495f4 	.word	0x000495f4

00041c10 <p256_zdblu>:
   41c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41c14:	b088      	sub	sp, #32
   41c16:	460c      	mov	r4, r1
   41c18:	4606      	mov	r6, r0
   41c1a:	f102 0120 	add.w	r1, r2, #32
   41c1e:	4668      	mov	r0, sp
   41c20:	f106 0720 	add.w	r7, r6, #32
   41c24:	4690      	mov	r8, r2
   41c26:	f7e5 fdef 	bl	27808 <ocrypto_mod_p256_sqr>
   41c2a:	466a      	mov	r2, sp
   41c2c:	4669      	mov	r1, sp
   41c2e:	4668      	mov	r0, sp
   41c30:	f7e5 fd0c 	bl	2764c <ocrypto_mod_p256_add>
   41c34:	4669      	mov	r1, sp
   41c36:	4638      	mov	r0, r7
   41c38:	f7e5 fde6 	bl	27808 <ocrypto_mod_p256_sqr>
   41c3c:	463a      	mov	r2, r7
   41c3e:	4639      	mov	r1, r7
   41c40:	4638      	mov	r0, r7
   41c42:	f104 0520 	add.w	r5, r4, #32
   41c46:	f7e5 fd01 	bl	2764c <ocrypto_mod_p256_add>
   41c4a:	466a      	mov	r2, sp
   41c4c:	4669      	mov	r1, sp
   41c4e:	4668      	mov	r0, sp
   41c50:	f7e5 fcfc 	bl	2764c <ocrypto_mod_p256_add>
   41c54:	4641      	mov	r1, r8
   41c56:	4628      	mov	r0, r5
   41c58:	f7e5 fdd6 	bl	27808 <ocrypto_mod_p256_sqr>
   41c5c:	466a      	mov	r2, sp
   41c5e:	4641      	mov	r1, r8
   41c60:	4630      	mov	r0, r6
   41c62:	f7e5 fdb9 	bl	277d8 <ocrypto_mod_p256_mul>
   41c66:	462a      	mov	r2, r5
   41c68:	4629      	mov	r1, r5
   41c6a:	4668      	mov	r0, sp
   41c6c:	f7e5 fcee 	bl	2764c <ocrypto_mod_p256_add>
   41c70:	462a      	mov	r2, r5
   41c72:	4669      	mov	r1, sp
   41c74:	4668      	mov	r0, sp
   41c76:	f7e5 fce9 	bl	2764c <ocrypto_mod_p256_add>
   41c7a:	4a12      	ldr	r2, [pc, #72]	; (41cc4 <p256_zdblu+0xb4>)
   41c7c:	4669      	mov	r1, sp
   41c7e:	4668      	mov	r0, sp
   41c80:	f7e5 fce4 	bl	2764c <ocrypto_mod_p256_add>
   41c84:	4669      	mov	r1, sp
   41c86:	4620      	mov	r0, r4
   41c88:	f7e5 fdbe 	bl	27808 <ocrypto_mod_p256_sqr>
   41c8c:	4632      	mov	r2, r6
   41c8e:	4621      	mov	r1, r4
   41c90:	4620      	mov	r0, r4
   41c92:	f7e5 fd19 	bl	276c8 <ocrypto_mod_p256_sub>
   41c96:	4632      	mov	r2, r6
   41c98:	4621      	mov	r1, r4
   41c9a:	4620      	mov	r0, r4
   41c9c:	f7e5 fd14 	bl	276c8 <ocrypto_mod_p256_sub>
   41ca0:	4622      	mov	r2, r4
   41ca2:	4631      	mov	r1, r6
   41ca4:	4628      	mov	r0, r5
   41ca6:	f7e5 fd0f 	bl	276c8 <ocrypto_mod_p256_sub>
   41caa:	466a      	mov	r2, sp
   41cac:	4629      	mov	r1, r5
   41cae:	4628      	mov	r0, r5
   41cb0:	f7e5 fd92 	bl	277d8 <ocrypto_mod_p256_mul>
   41cb4:	463a      	mov	r2, r7
   41cb6:	4629      	mov	r1, r5
   41cb8:	4628      	mov	r0, r5
   41cba:	f7e5 fd05 	bl	276c8 <ocrypto_mod_p256_sub>
   41cbe:	b008      	add	sp, #32
   41cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41cc4:	000496d4 	.word	0x000496d4

00041cc8 <p256_zaddc>:
   41cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   41cca:	b099      	sub	sp, #100	; 0x64
   41ccc:	4604      	mov	r4, r0
   41cce:	460d      	mov	r5, r1
   41cd0:	460a      	mov	r2, r1
   41cd2:	4601      	mov	r1, r0
   41cd4:	4668      	mov	r0, sp
   41cd6:	f7e5 fcf7 	bl	276c8 <ocrypto_mod_p256_sub>
   41cda:	4669      	mov	r1, sp
   41cdc:	4668      	mov	r0, sp
   41cde:	f7e5 fd93 	bl	27808 <ocrypto_mod_p256_sqr>
   41ce2:	466a      	mov	r2, sp
   41ce4:	4621      	mov	r1, r4
   41ce6:	a808      	add	r0, sp, #32
   41ce8:	f105 0620 	add.w	r6, r5, #32
   41cec:	f104 0720 	add.w	r7, r4, #32
   41cf0:	f7e5 fd72 	bl	277d8 <ocrypto_mod_p256_mul>
   41cf4:	466a      	mov	r2, sp
   41cf6:	4629      	mov	r1, r5
   41cf8:	4668      	mov	r0, sp
   41cfa:	f7e5 fd6d 	bl	277d8 <ocrypto_mod_p256_mul>
   41cfe:	4632      	mov	r2, r6
   41d00:	4639      	mov	r1, r7
   41d02:	a810      	add	r0, sp, #64	; 0x40
   41d04:	f7e5 fca2 	bl	2764c <ocrypto_mod_p256_add>
   41d08:	4632      	mov	r2, r6
   41d0a:	4639      	mov	r1, r7
   41d0c:	4630      	mov	r0, r6
   41d0e:	f7e5 fcdb 	bl	276c8 <ocrypto_mod_p256_sub>
   41d12:	4631      	mov	r1, r6
   41d14:	4628      	mov	r0, r5
   41d16:	f7e5 fd77 	bl	27808 <ocrypto_mod_p256_sqr>
   41d1a:	466a      	mov	r2, sp
   41d1c:	a908      	add	r1, sp, #32
   41d1e:	4620      	mov	r0, r4
   41d20:	f7e5 fc94 	bl	2764c <ocrypto_mod_p256_add>
   41d24:	4622      	mov	r2, r4
   41d26:	4629      	mov	r1, r5
   41d28:	4628      	mov	r0, r5
   41d2a:	f7e5 fccd 	bl	276c8 <ocrypto_mod_p256_sub>
   41d2e:	466a      	mov	r2, sp
   41d30:	a908      	add	r1, sp, #32
   41d32:	4668      	mov	r0, sp
   41d34:	f7e5 fcc8 	bl	276c8 <ocrypto_mod_p256_sub>
   41d38:	466a      	mov	r2, sp
   41d3a:	4639      	mov	r1, r7
   41d3c:	4638      	mov	r0, r7
   41d3e:	f7e5 fd4b 	bl	277d8 <ocrypto_mod_p256_mul>
   41d42:	462a      	mov	r2, r5
   41d44:	a908      	add	r1, sp, #32
   41d46:	4668      	mov	r0, sp
   41d48:	f7e5 fcbe 	bl	276c8 <ocrypto_mod_p256_sub>
   41d4c:	466a      	mov	r2, sp
   41d4e:	4631      	mov	r1, r6
   41d50:	4630      	mov	r0, r6
   41d52:	f7e5 fd41 	bl	277d8 <ocrypto_mod_p256_mul>
   41d56:	463a      	mov	r2, r7
   41d58:	4631      	mov	r1, r6
   41d5a:	4630      	mov	r0, r6
   41d5c:	f7e5 fcb4 	bl	276c8 <ocrypto_mod_p256_sub>
   41d60:	a910      	add	r1, sp, #64	; 0x40
   41d62:	4668      	mov	r0, sp
   41d64:	f7e5 fd50 	bl	27808 <ocrypto_mod_p256_sqr>
   41d68:	4622      	mov	r2, r4
   41d6a:	4669      	mov	r1, sp
   41d6c:	4620      	mov	r0, r4
   41d6e:	f7e5 fcab 	bl	276c8 <ocrypto_mod_p256_sub>
   41d72:	a908      	add	r1, sp, #32
   41d74:	4622      	mov	r2, r4
   41d76:	4608      	mov	r0, r1
   41d78:	f7e5 fca6 	bl	276c8 <ocrypto_mod_p256_sub>
   41d7c:	a910      	add	r1, sp, #64	; 0x40
   41d7e:	aa08      	add	r2, sp, #32
   41d80:	4608      	mov	r0, r1
   41d82:	f7e5 fd29 	bl	277d8 <ocrypto_mod_p256_mul>
   41d86:	463a      	mov	r2, r7
   41d88:	a910      	add	r1, sp, #64	; 0x40
   41d8a:	4638      	mov	r0, r7
   41d8c:	f7e5 fc9c 	bl	276c8 <ocrypto_mod_p256_sub>
   41d90:	b019      	add	sp, #100	; 0x64
   41d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00041d94 <p256_zaddu>:
   41d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41d98:	b088      	sub	sp, #32
   41d9a:	460c      	mov	r4, r1
   41d9c:	4605      	mov	r5, r0
   41d9e:	4690      	mov	r8, r2
   41da0:	460a      	mov	r2, r1
   41da2:	4601      	mov	r1, r0
   41da4:	4668      	mov	r0, sp
   41da6:	f7e5 fc8f 	bl	276c8 <ocrypto_mod_p256_sub>
   41daa:	4669      	mov	r1, sp
   41dac:	4668      	mov	r0, sp
   41dae:	f7e5 fd2b 	bl	27808 <ocrypto_mod_p256_sqr>
   41db2:	466a      	mov	r2, sp
   41db4:	4629      	mov	r1, r5
   41db6:	4628      	mov	r0, r5
   41db8:	f104 0620 	add.w	r6, r4, #32
   41dbc:	f7e5 fd0c 	bl	277d8 <ocrypto_mod_p256_mul>
   41dc0:	f105 0720 	add.w	r7, r5, #32
   41dc4:	466a      	mov	r2, sp
   41dc6:	4621      	mov	r1, r4
   41dc8:	4668      	mov	r0, sp
   41dca:	f7e5 fd05 	bl	277d8 <ocrypto_mod_p256_mul>
   41dce:	4632      	mov	r2, r6
   41dd0:	4639      	mov	r1, r7
   41dd2:	4630      	mov	r0, r6
   41dd4:	f7e5 fc78 	bl	276c8 <ocrypto_mod_p256_sub>
   41dd8:	4631      	mov	r1, r6
   41dda:	4620      	mov	r0, r4
   41ddc:	f7e5 fd14 	bl	27808 <ocrypto_mod_p256_sqr>
   41de0:	462a      	mov	r2, r5
   41de2:	4621      	mov	r1, r4
   41de4:	4620      	mov	r0, r4
   41de6:	f7e5 fc6f 	bl	276c8 <ocrypto_mod_p256_sub>
   41dea:	466a      	mov	r2, sp
   41dec:	4621      	mov	r1, r4
   41dee:	4620      	mov	r0, r4
   41df0:	f7e5 fc6a 	bl	276c8 <ocrypto_mod_p256_sub>
   41df4:	466a      	mov	r2, sp
   41df6:	4629      	mov	r1, r5
   41df8:	4640      	mov	r0, r8
   41dfa:	f7e5 fc65 	bl	276c8 <ocrypto_mod_p256_sub>
   41dfe:	4642      	mov	r2, r8
   41e00:	4639      	mov	r1, r7
   41e02:	4638      	mov	r0, r7
   41e04:	f7e5 fce8 	bl	277d8 <ocrypto_mod_p256_mul>
   41e08:	4622      	mov	r2, r4
   41e0a:	4629      	mov	r1, r5
   41e0c:	4668      	mov	r0, sp
   41e0e:	f7e5 fc5b 	bl	276c8 <ocrypto_mod_p256_sub>
   41e12:	466a      	mov	r2, sp
   41e14:	4631      	mov	r1, r6
   41e16:	4630      	mov	r0, r6
   41e18:	f7e5 fcde 	bl	277d8 <ocrypto_mod_p256_mul>
   41e1c:	463a      	mov	r2, r7
   41e1e:	4631      	mov	r1, r6
   41e20:	4630      	mov	r0, r6
   41e22:	f7e5 fc51 	bl	276c8 <ocrypto_mod_p256_sub>
   41e26:	b008      	add	sp, #32
   41e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041e2c <ocrypto_curve_p256_from64bytes>:
   41e2c:	b570      	push	{r4, r5, r6, lr}
   41e2e:	f100 0620 	add.w	r6, r0, #32
   41e32:	b090      	sub	sp, #64	; 0x40
   41e34:	460d      	mov	r5, r1
   41e36:	4604      	mov	r4, r0
   41e38:	f000 f914 	bl	42064 <ocrypto_mod_p256_from_bytes>
   41e3c:	f105 0120 	add.w	r1, r5, #32
   41e40:	4630      	mov	r0, r6
   41e42:	f000 f90f 	bl	42064 <ocrypto_mod_p256_from_bytes>
   41e46:	4621      	mov	r1, r4
   41e48:	a808      	add	r0, sp, #32
   41e4a:	f7e5 fcdd 	bl	27808 <ocrypto_mod_p256_sqr>
   41e4e:	a908      	add	r1, sp, #32
   41e50:	4608      	mov	r0, r1
   41e52:	4a0d      	ldr	r2, [pc, #52]	; (41e88 <ocrypto_curve_p256_from64bytes+0x5c>)
   41e54:	f7e5 fbfa 	bl	2764c <ocrypto_mod_p256_add>
   41e58:	a908      	add	r1, sp, #32
   41e5a:	4622      	mov	r2, r4
   41e5c:	4608      	mov	r0, r1
   41e5e:	f7e5 fcbb 	bl	277d8 <ocrypto_mod_p256_mul>
   41e62:	a908      	add	r1, sp, #32
   41e64:	4a09      	ldr	r2, [pc, #36]	; (41e8c <ocrypto_curve_p256_from64bytes+0x60>)
   41e66:	4608      	mov	r0, r1
   41e68:	f7e5 fbf0 	bl	2764c <ocrypto_mod_p256_add>
   41e6c:	4631      	mov	r1, r6
   41e6e:	4668      	mov	r0, sp
   41e70:	f7e5 fcca 	bl	27808 <ocrypto_mod_p256_sqr>
   41e74:	2220      	movs	r2, #32
   41e76:	4669      	mov	r1, sp
   41e78:	eb0d 0002 	add.w	r0, sp, r2
   41e7c:	f7e5 fbb8 	bl	275f0 <ocrypto_constant_time_equal>
   41e80:	3801      	subs	r0, #1
   41e82:	b010      	add	sp, #64	; 0x40
   41e84:	bd70      	pop	{r4, r5, r6, pc}
   41e86:	bf00      	nop
   41e88:	000496d4 	.word	0x000496d4
   41e8c:	000496b4 	.word	0x000496b4

00041e90 <ocrypto_curve_p256_to32bytes>:
   41e90:	f000 b902 	b.w	42098 <ocrypto_mod_p256_to_bytes>

00041e94 <ocrypto_curve_p256_to64bytes>:
   41e94:	b538      	push	{r3, r4, r5, lr}
   41e96:	4604      	mov	r4, r0
   41e98:	460d      	mov	r5, r1
   41e9a:	f000 f8fd 	bl	42098 <ocrypto_mod_p256_to_bytes>
   41e9e:	f105 0120 	add.w	r1, r5, #32
   41ea2:	f104 0020 	add.w	r0, r4, #32
   41ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41eaa:	f000 b8f5 	b.w	42098 <ocrypto_mod_p256_to_bytes>
   41eae:	bf00      	nop

00041eb0 <ocrypto_curve_p256_scalarmult>:
   41eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41eb4:	4613      	mov	r3, r2
   41eb6:	b0b8      	sub	sp, #224	; 0xe0
   41eb8:	4a54      	ldr	r2, [pc, #336]	; (4200c <ocrypto_curve_p256_scalarmult+0x15c>)
   41eba:	4689      	mov	r9, r1
   41ebc:	4680      	mov	r8, r0
   41ebe:	4619      	mov	r1, r3
   41ec0:	a810      	add	r0, sp, #64	; 0x40
   41ec2:	f7e5 f9a7 	bl	27214 <ocrypto_bigint_sub256>
   41ec6:	4952      	ldr	r1, [pc, #328]	; (42010 <ocrypto_curve_p256_scalarmult+0x160>)
   41ec8:	4602      	mov	r2, r0
   41eca:	a810      	add	r0, sp, #64	; 0x40
   41ecc:	f7e5 f9c2 	bl	27254 <ocrypto_bigint_cadd256>
   41ed0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   41ed2:	494e      	ldr	r1, [pc, #312]	; (4200c <ocrypto_curve_p256_scalarmult+0x15c>)
   41ed4:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   41ed8:	4607      	mov	r7, r0
   41eda:	f1c6 0201 	rsb	r2, r6, #1
   41ede:	a810      	add	r0, sp, #64	; 0x40
   41ee0:	f7e5 f9b8 	bl	27254 <ocrypto_bigint_cadd256>
   41ee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   41ee6:	464a      	mov	r2, r9
   41ee8:	ea6f 0a03 	mvn.w	sl, r3
   41eec:	a928      	add	r1, sp, #160	; 0xa0
   41eee:	a818      	add	r0, sp, #96	; 0x60
   41ef0:	f7ff fe8e 	bl	41c10 <p256_zdblu>
   41ef4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   41ef8:	a920      	add	r1, sp, #128	; 0x80
   41efa:	f1ca 0201 	rsb	r2, sl, #1
   41efe:	4608      	mov	r0, r1
   41f00:	f000 f892 	bl	42028 <ocrypto_mod_p256_cneg>
   41f04:	f1c7 0701 	rsb	r7, r7, #1
   41f08:	24fe      	movs	r4, #254	; 0xfe
   41f0a:	466a      	mov	r2, sp
   41f0c:	a918      	add	r1, sp, #96	; 0x60
   41f0e:	a828      	add	r0, sp, #160	; 0xa0
   41f10:	f7ff ff40 	bl	41d94 <p256_zaddu>
   41f14:	1163      	asrs	r3, r4, #5
   41f16:	aa38      	add	r2, sp, #224	; 0xe0
   41f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   41f1c:	f004 021f 	and.w	r2, r4, #31
   41f20:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   41f24:	40d3      	lsrs	r3, r2
   41f26:	4655      	mov	r5, sl
   41f28:	f003 0a01 	and.w	sl, r3, #1
   41f2c:	ea8a 0505 	eor.w	r5, sl, r5
   41f30:	462a      	mov	r2, r5
   41f32:	a928      	add	r1, sp, #160	; 0xa0
   41f34:	a818      	add	r0, sp, #96	; 0x60
   41f36:	f7e5 f9e9 	bl	2730c <ocrypto_bigint_cswap256>
   41f3a:	462a      	mov	r2, r5
   41f3c:	a930      	add	r1, sp, #192	; 0xc0
   41f3e:	a820      	add	r0, sp, #128	; 0x80
   41f40:	f7e5 f9e4 	bl	2730c <ocrypto_bigint_cswap256>
   41f44:	3c01      	subs	r4, #1
   41f46:	a928      	add	r1, sp, #160	; 0xa0
   41f48:	a818      	add	r0, sp, #96	; 0x60
   41f4a:	f7ff febd 	bl	41cc8 <p256_zaddc>
   41f4e:	1c63      	adds	r3, r4, #1
   41f50:	d1db      	bne.n	41f0a <ocrypto_curve_p256_scalarmult+0x5a>
   41f52:	f1ca 0201 	rsb	r2, sl, #1
   41f56:	a920      	add	r1, sp, #128	; 0x80
   41f58:	a808      	add	r0, sp, #32
   41f5a:	f000 f865 	bl	42028 <ocrypto_mod_p256_cneg>
   41f5e:	ea86 060a 	eor.w	r6, r6, sl
   41f62:	466a      	mov	r2, sp
   41f64:	a918      	add	r1, sp, #96	; 0x60
   41f66:	a828      	add	r0, sp, #160	; 0xa0
   41f68:	f7ff ff14 	bl	41d94 <p256_zaddu>
   41f6c:	a928      	add	r1, sp, #160	; 0xa0
   41f6e:	4632      	mov	r2, r6
   41f70:	a818      	add	r0, sp, #96	; 0x60
   41f72:	f7e5 f9cb 	bl	2730c <ocrypto_bigint_cswap256>
   41f76:	4632      	mov	r2, r6
   41f78:	a930      	add	r1, sp, #192	; 0xc0
   41f7a:	a820      	add	r0, sp, #128	; 0x80
   41f7c:	f7e5 f9c6 	bl	2730c <ocrypto_bigint_cswap256>
   41f80:	a908      	add	r1, sp, #32
   41f82:	466a      	mov	r2, sp
   41f84:	4608      	mov	r0, r1
   41f86:	f7e5 fc27 	bl	277d8 <ocrypto_mod_p256_mul>
   41f8a:	a908      	add	r1, sp, #32
   41f8c:	4608      	mov	r0, r1
   41f8e:	f000 f89d 	bl	420cc <ocrypto_mod_p256_inv>
   41f92:	a908      	add	r1, sp, #32
   41f94:	f108 0420 	add.w	r4, r8, #32
   41f98:	f109 0220 	add.w	r2, r9, #32
   41f9c:	4608      	mov	r0, r1
   41f9e:	f7e5 fc1b 	bl	277d8 <ocrypto_mod_p256_mul>
   41fa2:	a920      	add	r1, sp, #128	; 0x80
   41fa4:	aa08      	add	r2, sp, #32
   41fa6:	4620      	mov	r0, r4
   41fa8:	f7e5 fc16 	bl	277d8 <ocrypto_mod_p256_mul>
   41fac:	aa08      	add	r2, sp, #32
   41fae:	a918      	add	r1, sp, #96	; 0x60
   41fb0:	4668      	mov	r0, sp
   41fb2:	f7e5 fc11 	bl	277d8 <ocrypto_mod_p256_mul>
   41fb6:	4669      	mov	r1, sp
   41fb8:	4668      	mov	r0, sp
   41fba:	f7e5 fc25 	bl	27808 <ocrypto_mod_p256_sqr>
   41fbe:	aa18      	add	r2, sp, #96	; 0x60
   41fc0:	4669      	mov	r1, sp
   41fc2:	a808      	add	r0, sp, #32
   41fc4:	f7e5 fc08 	bl	277d8 <ocrypto_mod_p256_mul>
   41fc8:	4621      	mov	r1, r4
   41fca:	4668      	mov	r0, sp
   41fcc:	f7e5 fc1c 	bl	27808 <ocrypto_mod_p256_sqr>
   41fd0:	aa08      	add	r2, sp, #32
   41fd2:	4669      	mov	r1, sp
   41fd4:	4610      	mov	r0, r2
   41fd6:	f7e5 fb77 	bl	276c8 <ocrypto_mod_p256_sub>
   41fda:	4a0e      	ldr	r2, [pc, #56]	; (42014 <ocrypto_curve_p256_scalarmult+0x164>)
   41fdc:	a908      	add	r1, sp, #32
   41fde:	4668      	mov	r0, sp
   41fe0:	f7e5 fb72 	bl	276c8 <ocrypto_mod_p256_sub>
   41fe4:	4620      	mov	r0, r4
   41fe6:	2120      	movs	r1, #32
   41fe8:	f7e5 fb16 	bl	27618 <ocrypto_constant_time_is_zero>
   41fec:	a908      	add	r1, sp, #32
   41fee:	4602      	mov	r2, r0
   41ff0:	4244      	negs	r4, r0
   41ff2:	4668      	mov	r0, sp
   41ff4:	f7e5 f98a 	bl	2730c <ocrypto_bigint_cswap256>
   41ff8:	4640      	mov	r0, r8
   41ffa:	4a07      	ldr	r2, [pc, #28]	; (42018 <ocrypto_curve_p256_scalarmult+0x168>)
   41ffc:	4669      	mov	r1, sp
   41ffe:	f7e5 fbeb 	bl	277d8 <ocrypto_mod_p256_mul>
   42002:	433c      	orrs	r4, r7
   42004:	4620      	mov	r0, r4
   42006:	b038      	add	sp, #224	; 0xe0
   42008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4200c:	00049634 	.word	0x00049634
   42010:	00049654 	.word	0x00049654
   42014:	000496b4 	.word	0x000496b4
   42018:	00049614 	.word	0x00049614

0004201c <ocrypto_curve_p256_scalarmult_base>:
   4201c:	460a      	mov	r2, r1
   4201e:	4901      	ldr	r1, [pc, #4]	; (42024 <ocrypto_curve_p256_scalarmult_base+0x8>)
   42020:	f7ff bf46 	b.w	41eb0 <ocrypto_curve_p256_scalarmult>
   42024:	00049674 	.word	0x00049674

00042028 <ocrypto_mod_p256_cneg>:
   42028:	b570      	push	{r4, r5, r6, lr}
   4202a:	b088      	sub	sp, #32
   4202c:	4604      	mov	r4, r0
   4202e:	460d      	mov	r5, r1
   42030:	4616      	mov	r6, r2
   42032:	2100      	movs	r1, #0
   42034:	2220      	movs	r2, #32
   42036:	4668      	mov	r0, sp
   42038:	f003 fb75 	bl	45726 <memset>
   4203c:	2300      	movs	r3, #0
   4203e:	4629      	mov	r1, r5
   42040:	2220      	movs	r2, #32
   42042:	4620      	mov	r0, r4
   42044:	9300      	str	r3, [sp, #0]
   42046:	f003 fb63 	bl	45710 <memcpy>
   4204a:	462a      	mov	r2, r5
   4204c:	4669      	mov	r1, sp
   4204e:	4668      	mov	r0, sp
   42050:	f7e5 fb3a 	bl	276c8 <ocrypto_mod_p256_sub>
   42054:	4632      	mov	r2, r6
   42056:	4669      	mov	r1, sp
   42058:	4620      	mov	r0, r4
   4205a:	f7e5 f957 	bl	2730c <ocrypto_bigint_cswap256>
   4205e:	b008      	add	sp, #32
   42060:	bd70      	pop	{r4, r5, r6, pc}
   42062:	bf00      	nop

00042064 <ocrypto_mod_p256_from_bytes>:
   42064:	680b      	ldr	r3, [r1, #0]
   42066:	ba1b      	rev	r3, r3
   42068:	61c3      	str	r3, [r0, #28]
   4206a:	684b      	ldr	r3, [r1, #4]
   4206c:	ba1b      	rev	r3, r3
   4206e:	6183      	str	r3, [r0, #24]
   42070:	688b      	ldr	r3, [r1, #8]
   42072:	ba1b      	rev	r3, r3
   42074:	6143      	str	r3, [r0, #20]
   42076:	68cb      	ldr	r3, [r1, #12]
   42078:	ba1b      	rev	r3, r3
   4207a:	6103      	str	r3, [r0, #16]
   4207c:	690b      	ldr	r3, [r1, #16]
   4207e:	ba1b      	rev	r3, r3
   42080:	60c3      	str	r3, [r0, #12]
   42082:	694b      	ldr	r3, [r1, #20]
   42084:	ba1b      	rev	r3, r3
   42086:	6083      	str	r3, [r0, #8]
   42088:	698b      	ldr	r3, [r1, #24]
   4208a:	ba1b      	rev	r3, r3
   4208c:	6043      	str	r3, [r0, #4]
   4208e:	69cb      	ldr	r3, [r1, #28]
   42090:	ba1b      	rev	r3, r3
   42092:	6003      	str	r3, [r0, #0]
   42094:	4770      	bx	lr
   42096:	bf00      	nop

00042098 <ocrypto_mod_p256_to_bytes>:
   42098:	69cb      	ldr	r3, [r1, #28]
   4209a:	ba1b      	rev	r3, r3
   4209c:	6003      	str	r3, [r0, #0]
   4209e:	698b      	ldr	r3, [r1, #24]
   420a0:	ba1b      	rev	r3, r3
   420a2:	6043      	str	r3, [r0, #4]
   420a4:	694b      	ldr	r3, [r1, #20]
   420a6:	ba1b      	rev	r3, r3
   420a8:	6083      	str	r3, [r0, #8]
   420aa:	690b      	ldr	r3, [r1, #16]
   420ac:	ba1b      	rev	r3, r3
   420ae:	60c3      	str	r3, [r0, #12]
   420b0:	68cb      	ldr	r3, [r1, #12]
   420b2:	ba1b      	rev	r3, r3
   420b4:	6103      	str	r3, [r0, #16]
   420b6:	688b      	ldr	r3, [r1, #8]
   420b8:	ba1b      	rev	r3, r3
   420ba:	6143      	str	r3, [r0, #20]
   420bc:	684b      	ldr	r3, [r1, #4]
   420be:	ba1b      	rev	r3, r3
   420c0:	6183      	str	r3, [r0, #24]
   420c2:	680b      	ldr	r3, [r1, #0]
   420c4:	ba1b      	rev	r3, r3
   420c6:	61c3      	str	r3, [r0, #28]
   420c8:	4770      	bx	lr
   420ca:	bf00      	nop

000420cc <ocrypto_mod_p256_inv>:
   420cc:	b570      	push	{r4, r5, r6, lr}
   420ce:	b098      	sub	sp, #96	; 0x60
   420d0:	460d      	mov	r5, r1
   420d2:	4606      	mov	r6, r0
   420d4:	a810      	add	r0, sp, #64	; 0x40
   420d6:	f7e5 fb97 	bl	27808 <ocrypto_mod_p256_sqr>
   420da:	462a      	mov	r2, r5
   420dc:	a910      	add	r1, sp, #64	; 0x40
   420de:	4668      	mov	r0, sp
   420e0:	f7e5 fb7a 	bl	277d8 <ocrypto_mod_p256_mul>
   420e4:	4669      	mov	r1, sp
   420e6:	a810      	add	r0, sp, #64	; 0x40
   420e8:	f7e5 fb8e 	bl	27808 <ocrypto_mod_p256_sqr>
   420ec:	a910      	add	r1, sp, #64	; 0x40
   420ee:	4608      	mov	r0, r1
   420f0:	f7e5 fb8a 	bl	27808 <ocrypto_mod_p256_sqr>
   420f4:	466a      	mov	r2, sp
   420f6:	a910      	add	r1, sp, #64	; 0x40
   420f8:	a808      	add	r0, sp, #32
   420fa:	f7e5 fb6d 	bl	277d8 <ocrypto_mod_p256_mul>
   420fe:	a908      	add	r1, sp, #32
   42100:	a810      	add	r0, sp, #64	; 0x40
   42102:	f7e5 fb81 	bl	27808 <ocrypto_mod_p256_sqr>
   42106:	a910      	add	r1, sp, #64	; 0x40
   42108:	4608      	mov	r0, r1
   4210a:	f7e5 fb7d 	bl	27808 <ocrypto_mod_p256_sqr>
   4210e:	a910      	add	r1, sp, #64	; 0x40
   42110:	4608      	mov	r0, r1
   42112:	f7e5 fb79 	bl	27808 <ocrypto_mod_p256_sqr>
   42116:	a910      	add	r1, sp, #64	; 0x40
   42118:	4608      	mov	r0, r1
   4211a:	f7e5 fb75 	bl	27808 <ocrypto_mod_p256_sqr>
   4211e:	a910      	add	r1, sp, #64	; 0x40
   42120:	aa08      	add	r2, sp, #32
   42122:	4608      	mov	r0, r1
   42124:	f7e5 fb58 	bl	277d8 <ocrypto_mod_p256_mul>
   42128:	a910      	add	r1, sp, #64	; 0x40
   4212a:	4608      	mov	r0, r1
   4212c:	f7e5 fb6c 	bl	27808 <ocrypto_mod_p256_sqr>
   42130:	a910      	add	r1, sp, #64	; 0x40
   42132:	4608      	mov	r0, r1
   42134:	f7e5 fb68 	bl	27808 <ocrypto_mod_p256_sqr>
   42138:	a910      	add	r1, sp, #64	; 0x40
   4213a:	466a      	mov	r2, sp
   4213c:	a808      	add	r0, sp, #32
   4213e:	f7e5 fb4b 	bl	277d8 <ocrypto_mod_p256_mul>
   42142:	2405      	movs	r4, #5
   42144:	a908      	add	r1, sp, #32
   42146:	a810      	add	r0, sp, #64	; 0x40
   42148:	f7e5 fb5e 	bl	27808 <ocrypto_mod_p256_sqr>
   4214c:	a910      	add	r1, sp, #64	; 0x40
   4214e:	4608      	mov	r0, r1
   42150:	f7e5 fb5a 	bl	27808 <ocrypto_mod_p256_sqr>
   42154:	3c01      	subs	r4, #1
   42156:	a910      	add	r1, sp, #64	; 0x40
   42158:	d1f5      	bne.n	42146 <ocrypto_mod_p256_inv+0x7a>
   4215a:	aa08      	add	r2, sp, #32
   4215c:	4608      	mov	r0, r1
   4215e:	f7e5 fb3b 	bl	277d8 <ocrypto_mod_p256_mul>
   42162:	2405      	movs	r4, #5
   42164:	a910      	add	r1, sp, #64	; 0x40
   42166:	4608      	mov	r0, r1
   42168:	f7e5 fb4e 	bl	27808 <ocrypto_mod_p256_sqr>
   4216c:	a910      	add	r1, sp, #64	; 0x40
   4216e:	4608      	mov	r0, r1
   42170:	f7e5 fb4a 	bl	27808 <ocrypto_mod_p256_sqr>
   42174:	3c01      	subs	r4, #1
   42176:	d1f5      	bne.n	42164 <ocrypto_mod_p256_inv+0x98>
   42178:	a910      	add	r1, sp, #64	; 0x40
   4217a:	aa08      	add	r2, sp, #32
   4217c:	4608      	mov	r0, r1
   4217e:	f7e5 fb2b 	bl	277d8 <ocrypto_mod_p256_mul>
   42182:	a910      	add	r1, sp, #64	; 0x40
   42184:	a808      	add	r0, sp, #32
   42186:	f7e5 fb3f 	bl	27808 <ocrypto_mod_p256_sqr>
   4218a:	a908      	add	r1, sp, #32
   4218c:	4608      	mov	r0, r1
   4218e:	f7e5 fb3b 	bl	27808 <ocrypto_mod_p256_sqr>
   42192:	a908      	add	r1, sp, #32
   42194:	466a      	mov	r2, sp
   42196:	4668      	mov	r0, sp
   42198:	f7e5 fb1e 	bl	277d8 <ocrypto_mod_p256_mul>
   4219c:	2410      	movs	r4, #16
   4219e:	4669      	mov	r1, sp
   421a0:	a810      	add	r0, sp, #64	; 0x40
   421a2:	f7e5 fb31 	bl	27808 <ocrypto_mod_p256_sqr>
   421a6:	a910      	add	r1, sp, #64	; 0x40
   421a8:	4608      	mov	r0, r1
   421aa:	f7e5 fb2d 	bl	27808 <ocrypto_mod_p256_sqr>
   421ae:	3c01      	subs	r4, #1
   421b0:	a910      	add	r1, sp, #64	; 0x40
   421b2:	d1f5      	bne.n	421a0 <ocrypto_mod_p256_inv+0xd4>
   421b4:	462a      	mov	r2, r5
   421b6:	4608      	mov	r0, r1
   421b8:	f7e5 fb0e 	bl	277d8 <ocrypto_mod_p256_mul>
   421bc:	2440      	movs	r4, #64	; 0x40
   421be:	a910      	add	r1, sp, #64	; 0x40
   421c0:	4608      	mov	r0, r1
   421c2:	f7e5 fb21 	bl	27808 <ocrypto_mod_p256_sqr>
   421c6:	a910      	add	r1, sp, #64	; 0x40
   421c8:	4608      	mov	r0, r1
   421ca:	f7e5 fb1d 	bl	27808 <ocrypto_mod_p256_sqr>
   421ce:	3c01      	subs	r4, #1
   421d0:	d1f5      	bne.n	421be <ocrypto_mod_p256_inv+0xf2>
   421d2:	a910      	add	r1, sp, #64	; 0x40
   421d4:	466a      	mov	r2, sp
   421d6:	4608      	mov	r0, r1
   421d8:	f7e5 fafe 	bl	277d8 <ocrypto_mod_p256_mul>
   421dc:	2410      	movs	r4, #16
   421de:	a910      	add	r1, sp, #64	; 0x40
   421e0:	4608      	mov	r0, r1
   421e2:	f7e5 fb11 	bl	27808 <ocrypto_mod_p256_sqr>
   421e6:	a910      	add	r1, sp, #64	; 0x40
   421e8:	4608      	mov	r0, r1
   421ea:	f7e5 fb0d 	bl	27808 <ocrypto_mod_p256_sqr>
   421ee:	3c01      	subs	r4, #1
   421f0:	d1f5      	bne.n	421de <ocrypto_mod_p256_inv+0x112>
   421f2:	a910      	add	r1, sp, #64	; 0x40
   421f4:	466a      	mov	r2, sp
   421f6:	4608      	mov	r0, r1
   421f8:	f7e5 faee 	bl	277d8 <ocrypto_mod_p256_mul>
   421fc:	2410      	movs	r4, #16
   421fe:	a910      	add	r1, sp, #64	; 0x40
   42200:	4608      	mov	r0, r1
   42202:	f7e5 fb01 	bl	27808 <ocrypto_mod_p256_sqr>
   42206:	a910      	add	r1, sp, #64	; 0x40
   42208:	4608      	mov	r0, r1
   4220a:	f7e5 fafd 	bl	27808 <ocrypto_mod_p256_sqr>
   4220e:	3c01      	subs	r4, #1
   42210:	d1f5      	bne.n	421fe <ocrypto_mod_p256_inv+0x132>
   42212:	a910      	add	r1, sp, #64	; 0x40
   42214:	aa08      	add	r2, sp, #32
   42216:	4608      	mov	r0, r1
   42218:	f7e5 fade 	bl	277d8 <ocrypto_mod_p256_mul>
   4221c:	462a      	mov	r2, r5
   4221e:	a910      	add	r1, sp, #64	; 0x40
   42220:	4630      	mov	r0, r6
   42222:	f7e5 fad9 	bl	277d8 <ocrypto_mod_p256_mul>
   42226:	b018      	add	sp, #96	; 0x60
   42228:	bd70      	pop	{r4, r5, r6, pc}
   4222a:	bf00      	nop

0004222c <nrf_cc3xx_platform_init>:
   4222c:	b510      	push	{r4, lr}
   4222e:	4c0c      	ldr	r4, [pc, #48]	; (42260 <nrf_cc3xx_platform_init+0x34>)
   42230:	6823      	ldr	r3, [r4, #0]
   42232:	b113      	cbz	r3, 4223a <nrf_cc3xx_platform_init+0xe>
   42234:	4b0b      	ldr	r3, [pc, #44]	; (42264 <nrf_cc3xx_platform_init+0x38>)
   42236:	681b      	ldr	r3, [r3, #0]
   42238:	b92b      	cbnz	r3, 42246 <nrf_cc3xx_platform_init+0x1a>
   4223a:	f000 fe29 	bl	42e90 <CC_LibInit>
   4223e:	b930      	cbnz	r0, 4224e <nrf_cc3xx_platform_init+0x22>
   42240:	4b08      	ldr	r3, [pc, #32]	; (42264 <nrf_cc3xx_platform_init+0x38>)
   42242:	2201      	movs	r2, #1
   42244:	601a      	str	r2, [r3, #0]
   42246:	2301      	movs	r3, #1
   42248:	6023      	str	r3, [r4, #0]
   4224a:	2000      	movs	r0, #0
   4224c:	bd10      	pop	{r4, pc}
   4224e:	3801      	subs	r0, #1
   42250:	2806      	cmp	r0, #6
   42252:	d901      	bls.n	42258 <nrf_cc3xx_platform_init+0x2c>
   42254:	4804      	ldr	r0, [pc, #16]	; (42268 <nrf_cc3xx_platform_init+0x3c>)
   42256:	bd10      	pop	{r4, pc}
   42258:	4b04      	ldr	r3, [pc, #16]	; (4226c <nrf_cc3xx_platform_init+0x40>)
   4225a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4225e:	bd10      	pop	{r4, pc}
   42260:	20002ebc 	.word	0x20002ebc
   42264:	20002eb8 	.word	0x20002eb8
   42268:	ffff8ffe 	.word	0xffff8ffe
   4226c:	000496f4 	.word	0x000496f4

00042270 <nrf_cc3xx_platform_abort>:
   42270:	f3bf 8f4f 	dsb	sy
   42274:	4905      	ldr	r1, [pc, #20]	; (4228c <nrf_cc3xx_platform_abort+0x1c>)
   42276:	4b06      	ldr	r3, [pc, #24]	; (42290 <nrf_cc3xx_platform_abort+0x20>)
   42278:	68ca      	ldr	r2, [r1, #12]
   4227a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   4227e:	4313      	orrs	r3, r2
   42280:	60cb      	str	r3, [r1, #12]
   42282:	f3bf 8f4f 	dsb	sy
   42286:	bf00      	nop
   42288:	e7fd      	b.n	42286 <nrf_cc3xx_platform_abort+0x16>
   4228a:	bf00      	nop
   4228c:	e000ed00 	.word	0xe000ed00
   42290:	05fa0004 	.word	0x05fa0004

00042294 <CC_PalAbort>:
   42294:	b410      	push	{r4}
   42296:	4b09      	ldr	r3, [pc, #36]	; (422bc <CC_PalAbort+0x28>)
   42298:	4909      	ldr	r1, [pc, #36]	; (422c0 <CC_PalAbort+0x2c>)
   4229a:	4c0a      	ldr	r4, [pc, #40]	; (422c4 <CC_PalAbort+0x30>)
   4229c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   422a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   422a4:	6849      	ldr	r1, [r1, #4]
   422a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   422aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   422ae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   422b2:	2300      	movs	r3, #0
   422b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   422b8:	bc10      	pop	{r4}
   422ba:	4708      	bx	r1
   422bc:	5002b000 	.word	0x5002b000
   422c0:	20000864 	.word	0x20000864
   422c4:	5002a000 	.word	0x5002a000

000422c8 <nrf_cc3xx_platform_set_abort>:
   422c8:	e9d0 1200 	ldrd	r1, r2, [r0]
   422cc:	4b01      	ldr	r3, [pc, #4]	; (422d4 <nrf_cc3xx_platform_set_abort+0xc>)
   422ce:	e9c3 1200 	strd	r1, r2, [r3]
   422d2:	4770      	bx	lr
   422d4:	20000864 	.word	0x20000864

000422d8 <nrf_cc3xx_platform_ctr_drbg_init>:
   422d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   422dc:	4b13      	ldr	r3, [pc, #76]	; (4232c <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   422de:	4e14      	ldr	r6, [pc, #80]	; (42330 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   422e0:	2800      	cmp	r0, #0
   422e2:	bf14      	ite	ne
   422e4:	4604      	movne	r4, r0
   422e6:	461c      	moveq	r4, r3
   422e8:	b083      	sub	sp, #12
   422ea:	6823      	ldr	r3, [r4, #0]
   422ec:	42b3      	cmp	r3, r6
   422ee:	d019      	beq.n	42324 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   422f0:	460d      	mov	r5, r1
   422f2:	4620      	mov	r0, r4
   422f4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   422f8:	f104 0904 	add.w	r9, r4, #4
   422fc:	4617      	mov	r7, r2
   422fe:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   42302:	f000 f8e9 	bl	424d8 <mbedtls_platform_zeroize>
   42306:	4648      	mov	r0, r9
   42308:	f000 fcac 	bl	42c64 <cc_mbedtls_entropy_init>
   4230c:	4640      	mov	r0, r8
   4230e:	f000 fadb 	bl	428c8 <cc_mbedtls_ctr_drbg_init>
   42312:	4908      	ldr	r1, [pc, #32]	; (42334 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   42314:	9700      	str	r7, [sp, #0]
   42316:	462b      	mov	r3, r5
   42318:	464a      	mov	r2, r9
   4231a:	4640      	mov	r0, r8
   4231c:	f000 faea 	bl	428f4 <cc_mbedtls_ctr_drbg_seed>
   42320:	b908      	cbnz	r0, 42326 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   42322:	6026      	str	r6, [r4, #0]
   42324:	2000      	movs	r0, #0
   42326:	b003      	add	sp, #12
   42328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4232c:	20002ec0 	.word	0x20002ec0
   42330:	5ac9bca5 	.word	0x5ac9bca5
   42334:	00042ced 	.word	0x00042ced

00042338 <nrf_cc3xx_platform_ctr_drbg_get>:
   42338:	b570      	push	{r4, r5, r6, lr}
   4233a:	461d      	mov	r5, r3
   4233c:	4b0c      	ldr	r3, [pc, #48]	; (42370 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   4233e:	2800      	cmp	r0, #0
   42340:	bf18      	it	ne
   42342:	4603      	movne	r3, r0
   42344:	480b      	ldr	r0, [pc, #44]	; (42374 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   42346:	681e      	ldr	r6, [r3, #0]
   42348:	4286      	cmp	r6, r0
   4234a:	b082      	sub	sp, #8
   4234c:	d10d      	bne.n	4236a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   4234e:	2600      	movs	r6, #0
   42350:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   42354:	9600      	str	r6, [sp, #0]
   42356:	4633      	mov	r3, r6
   42358:	4614      	mov	r4, r2
   4235a:	f000 fb17 	bl	4298c <cc_mbedtls_ctr_drbg_random_with_add>
   4235e:	2800      	cmp	r0, #0
   42360:	bf18      	it	ne
   42362:	4634      	movne	r4, r6
   42364:	602c      	str	r4, [r5, #0]
   42366:	b002      	add	sp, #8
   42368:	bd70      	pop	{r4, r5, r6, pc}
   4236a:	4803      	ldr	r0, [pc, #12]	; (42378 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   4236c:	e7fb      	b.n	42366 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   4236e:	bf00      	nop
   42370:	20002ec0 	.word	0x20002ec0
   42374:	5ac9bca5 	.word	0x5ac9bca5
   42378:	ffff8fe8 	.word	0xffff8fe8

0004237c <mutex_free>:
   4237c:	b510      	push	{r4, lr}
   4237e:	4604      	mov	r4, r0
   42380:	b150      	cbz	r0, 42398 <mutex_free+0x1c>
   42382:	6863      	ldr	r3, [r4, #4]
   42384:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   42388:	d005      	beq.n	42396 <mutex_free+0x1a>
   4238a:	4a06      	ldr	r2, [pc, #24]	; (423a4 <mutex_free+0x28>)
   4238c:	4293      	cmp	r3, r2
   4238e:	d002      	beq.n	42396 <mutex_free+0x1a>
   42390:	2300      	movs	r3, #0
   42392:	6023      	str	r3, [r4, #0]
   42394:	6062      	str	r2, [r4, #4]
   42396:	bd10      	pop	{r4, pc}
   42398:	4b03      	ldr	r3, [pc, #12]	; (423a8 <mutex_free+0x2c>)
   4239a:	4804      	ldr	r0, [pc, #16]	; (423ac <mutex_free+0x30>)
   4239c:	685b      	ldr	r3, [r3, #4]
   4239e:	4798      	blx	r3
   423a0:	e7ef      	b.n	42382 <mutex_free+0x6>
   423a2:	bf00      	nop
   423a4:	a95c5f2c 	.word	0xa95c5f2c
   423a8:	20000864 	.word	0x20000864
   423ac:	00049710 	.word	0x00049710

000423b0 <mutex_lock>:
   423b0:	b1c8      	cbz	r0, 423e6 <mutex_lock+0x36>
   423b2:	6843      	ldr	r3, [r0, #4]
   423b4:	4a0d      	ldr	r2, [pc, #52]	; (423ec <mutex_lock+0x3c>)
   423b6:	4293      	cmp	r3, r2
   423b8:	d013      	beq.n	423e2 <mutex_lock+0x32>
   423ba:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   423be:	d00e      	beq.n	423de <mutex_lock+0x2e>
   423c0:	2301      	movs	r3, #1
   423c2:	e850 2f00 	ldrex	r2, [r0]
   423c6:	4619      	mov	r1, r3
   423c8:	e840 1c00 	strex	ip, r1, [r0]
   423cc:	f09c 0f00 	teq	ip, #0
   423d0:	d1f7      	bne.n	423c2 <mutex_lock+0x12>
   423d2:	2a01      	cmp	r2, #1
   423d4:	d0f5      	beq.n	423c2 <mutex_lock+0x12>
   423d6:	f3bf 8f5f 	dmb	sy
   423da:	2000      	movs	r0, #0
   423dc:	4770      	bx	lr
   423de:	4804      	ldr	r0, [pc, #16]	; (423f0 <mutex_lock+0x40>)
   423e0:	4770      	bx	lr
   423e2:	4804      	ldr	r0, [pc, #16]	; (423f4 <mutex_lock+0x44>)
   423e4:	4770      	bx	lr
   423e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   423ea:	4770      	bx	lr
   423ec:	a95c5f2c 	.word	0xa95c5f2c
   423f0:	ffff8fe9 	.word	0xffff8fe9
   423f4:	ffff8fea 	.word	0xffff8fea

000423f8 <mutex_unlock>:
   423f8:	b180      	cbz	r0, 4241c <mutex_unlock+0x24>
   423fa:	6843      	ldr	r3, [r0, #4]
   423fc:	4a09      	ldr	r2, [pc, #36]	; (42424 <mutex_unlock+0x2c>)
   423fe:	4293      	cmp	r3, r2
   42400:	d00a      	beq.n	42418 <mutex_unlock+0x20>
   42402:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   42406:	d005      	beq.n	42414 <mutex_unlock+0x1c>
   42408:	f3bf 8f5f 	dmb	sy
   4240c:	2300      	movs	r3, #0
   4240e:	6003      	str	r3, [r0, #0]
   42410:	4618      	mov	r0, r3
   42412:	4770      	bx	lr
   42414:	4804      	ldr	r0, [pc, #16]	; (42428 <mutex_unlock+0x30>)
   42416:	4770      	bx	lr
   42418:	4804      	ldr	r0, [pc, #16]	; (4242c <mutex_unlock+0x34>)
   4241a:	4770      	bx	lr
   4241c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   42420:	4770      	bx	lr
   42422:	bf00      	nop
   42424:	a95c5f2c 	.word	0xa95c5f2c
   42428:	ffff8fe9 	.word	0xffff8fe9
   4242c:	ffff8fea 	.word	0xffff8fea

00042430 <mutex_init>:
   42430:	b510      	push	{r4, lr}
   42432:	4604      	mov	r4, r0
   42434:	b120      	cbz	r0, 42440 <mutex_init+0x10>
   42436:	4b04      	ldr	r3, [pc, #16]	; (42448 <mutex_init+0x18>)
   42438:	6063      	str	r3, [r4, #4]
   4243a:	2200      	movs	r2, #0
   4243c:	6022      	str	r2, [r4, #0]
   4243e:	bd10      	pop	{r4, pc}
   42440:	4802      	ldr	r0, [pc, #8]	; (4244c <mutex_init+0x1c>)
   42442:	f7ff ff27 	bl	42294 <CC_PalAbort>
   42446:	e7f6      	b.n	42436 <mutex_init+0x6>
   42448:	3a00003a 	.word	0x3a00003a
   4244c:	00049738 	.word	0x00049738

00042450 <nrf_cc3xx_platform_set_mutexes>:
   42450:	b570      	push	{r4, r5, r6, lr}
   42452:	e9d0 2300 	ldrd	r2, r3, [r0]
   42456:	4c17      	ldr	r4, [pc, #92]	; (424b4 <nrf_cc3xx_platform_set_mutexes+0x64>)
   42458:	4d17      	ldr	r5, [pc, #92]	; (424b8 <nrf_cc3xx_platform_set_mutexes+0x68>)
   4245a:	6063      	str	r3, [r4, #4]
   4245c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   42460:	e9c4 3002 	strd	r3, r0, [r4, #8]
   42464:	6022      	str	r2, [r4, #0]
   42466:	6848      	ldr	r0, [r1, #4]
   42468:	f8d1 c000 	ldr.w	ip, [r1]
   4246c:	4b13      	ldr	r3, [pc, #76]	; (424bc <nrf_cc3xx_platform_set_mutexes+0x6c>)
   4246e:	e9c3 c000 	strd	ip, r0, [r3]
   42472:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   42476:	f8d1 c008 	ldr.w	ip, [r1, #8]
   4247a:	f8c3 c008 	str.w	ip, [r3, #8]
   4247e:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   42482:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   42486:	6909      	ldr	r1, [r1, #16]
   42488:	f8c3 c00c 	str.w	ip, [r3, #12]
   4248c:	6119      	str	r1, [r3, #16]
   4248e:	d010      	beq.n	424b2 <nrf_cc3xx_platform_set_mutexes+0x62>
   42490:	490b      	ldr	r1, [pc, #44]	; (424c0 <nrf_cc3xx_platform_set_mutexes+0x70>)
   42492:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   42496:	2300      	movs	r3, #0
   42498:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   4249c:	f505 708a 	add.w	r0, r5, #276	; 0x114
   424a0:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   424a4:	4790      	blx	r2
   424a6:	6823      	ldr	r3, [r4, #0]
   424a8:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   424ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   424b0:	4718      	bx	r3
   424b2:	bd70      	pop	{r4, r5, r6, pc}
   424b4:	20000880 	.word	0x20000880
   424b8:	20002ec0 	.word	0x20002ec0
   424bc:	2000086c 	.word	0x2000086c
   424c0:	a95c5f2c 	.word	0xa95c5f2c

000424c4 <mbedtls_zeroize_internal>:
   424c4:	b138      	cbz	r0, 424d6 <mbedtls_zeroize_internal+0x12>
   424c6:	b131      	cbz	r1, 424d6 <mbedtls_zeroize_internal+0x12>
   424c8:	4401      	add	r1, r0
   424ca:	2200      	movs	r2, #0
   424cc:	4603      	mov	r3, r0
   424ce:	3001      	adds	r0, #1
   424d0:	4281      	cmp	r1, r0
   424d2:	701a      	strb	r2, [r3, #0]
   424d4:	d1fa      	bne.n	424cc <mbedtls_zeroize_internal+0x8>
   424d6:	4770      	bx	lr

000424d8 <mbedtls_platform_zeroize>:
   424d8:	b138      	cbz	r0, 424ea <mbedtls_platform_zeroize+0x12>
   424da:	b131      	cbz	r1, 424ea <mbedtls_platform_zeroize+0x12>
   424dc:	4401      	add	r1, r0
   424de:	2200      	movs	r2, #0
   424e0:	4603      	mov	r3, r0
   424e2:	3001      	adds	r0, #1
   424e4:	4288      	cmp	r0, r1
   424e6:	701a      	strb	r2, [r3, #0]
   424e8:	d1fa      	bne.n	424e0 <mbedtls_platform_zeroize+0x8>
   424ea:	4770      	bx	lr

000424ec <block_cipher_df>:
   424ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   424f0:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   424f4:	b0b5      	sub	sp, #212	; 0xd4
   424f6:	f200 80d7 	bhi.w	426a8 <block_cipher_df+0x1bc>
   424fa:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 426b0 <block_cipher_df+0x1c4>
   424fe:	4614      	mov	r4, r2
   42500:	460d      	mov	r5, r1
   42502:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   42506:	2100      	movs	r1, #0
   42508:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   4250c:	4607      	mov	r7, r0
   4250e:	4648      	mov	r0, r9
   42510:	f003 f909 	bl	45726 <memset>
   42514:	4640      	mov	r0, r8
   42516:	f001 f951 	bl	437bc <cc_mbedtls_aes_init>
   4251a:	2300      	movs	r3, #0
   4251c:	f8a9 3010 	strh.w	r3, [r9, #16]
   42520:	ba63      	rev16	r3, r4
   42522:	f109 0618 	add.w	r6, r9, #24
   42526:	f8a9 3012 	strh.w	r3, [r9, #18]
   4252a:	2320      	movs	r3, #32
   4252c:	4629      	mov	r1, r5
   4252e:	4622      	mov	r2, r4
   42530:	f889 3017 	strb.w	r3, [r9, #23]
   42534:	4630      	mov	r0, r6
   42536:	f003 f8eb 	bl	45710 <memcpy>
   4253a:	4b5e      	ldr	r3, [pc, #376]	; (426b4 <block_cipher_df+0x1c8>)
   4253c:	9307      	str	r3, [sp, #28]
   4253e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   42542:	2280      	movs	r2, #128	; 0x80
   42544:	9308      	str	r3, [sp, #32]
   42546:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   4254a:	9309      	str	r3, [sp, #36]	; 0x24
   4254c:	5532      	strb	r2, [r6, r4]
   4254e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   42552:	a907      	add	r1, sp, #28
   42554:	4640      	mov	r0, r8
   42556:	930a      	str	r3, [sp, #40]	; 0x28
   42558:	f001 f946 	bl	437e8 <cc_mbedtls_aes_setkey_enc>
   4255c:	4682      	mov	sl, r0
   4255e:	2800      	cmp	r0, #0
   42560:	d17f      	bne.n	42662 <block_cipher_df+0x176>
   42562:	f104 0319 	add.w	r3, r4, #25
   42566:	ae0b      	add	r6, sp, #44	; 0x2c
   42568:	ac0f      	add	r4, sp, #60	; 0x3c
   4256a:	9302      	str	r3, [sp, #8]
   4256c:	9703      	str	r7, [sp, #12]
   4256e:	9601      	str	r6, [sp, #4]
   42570:	9404      	str	r4, [sp, #16]
   42572:	9801      	ldr	r0, [sp, #4]
   42574:	f8df b140 	ldr.w	fp, [pc, #320]	; 426b8 <block_cipher_df+0x1cc>
   42578:	2210      	movs	r2, #16
   4257a:	2100      	movs	r1, #0
   4257c:	f003 f8d3 	bl	45726 <memset>
   42580:	f8dd a008 	ldr.w	sl, [sp, #8]
   42584:	9405      	str	r4, [sp, #20]
   42586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   42588:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   4258c:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   42590:	990b      	ldr	r1, [sp, #44]	; 0x2c
   42592:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   42596:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   4259a:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   4259e:	405c      	eors	r4, r3
   425a0:	9b01      	ldr	r3, [sp, #4]
   425a2:	407e      	eors	r6, r7
   425a4:	4055      	eors	r5, r2
   425a6:	ea81 0700 	eor.w	r7, r1, r0
   425aa:	461a      	mov	r2, r3
   425ac:	2101      	movs	r1, #1
   425ae:	4640      	mov	r0, r8
   425b0:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   425b4:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   425b8:	f001 f930 	bl	4381c <cc_mbedtls_aes_crypt_ecb>
   425bc:	f1ba 0f10 	cmp.w	sl, #16
   425c0:	bf94      	ite	ls
   425c2:	ebaa 0a0a 	subls.w	sl, sl, sl
   425c6:	f1aa 0a10 	subhi.w	sl, sl, #16
   425ca:	f10b 0b10 	add.w	fp, fp, #16
   425ce:	2800      	cmp	r0, #0
   425d0:	d165      	bne.n	4269e <block_cipher_df+0x1b2>
   425d2:	f1ba 0f00 	cmp.w	sl, #0
   425d6:	d1d6      	bne.n	42586 <block_cipher_df+0x9a>
   425d8:	9c05      	ldr	r4, [sp, #20]
   425da:	9901      	ldr	r1, [sp, #4]
   425dc:	4620      	mov	r0, r4
   425de:	2210      	movs	r2, #16
   425e0:	f003 f896 	bl	45710 <memcpy>
   425e4:	f899 3003 	ldrb.w	r3, [r9, #3]
   425e8:	3410      	adds	r4, #16
   425ea:	3301      	adds	r3, #1
   425ec:	45a0      	cmp	r8, r4
   425ee:	f889 3003 	strb.w	r3, [r9, #3]
   425f2:	d1be      	bne.n	42572 <block_cipher_df+0x86>
   425f4:	9c04      	ldr	r4, [sp, #16]
   425f6:	9f03      	ldr	r7, [sp, #12]
   425f8:	9e01      	ldr	r6, [sp, #4]
   425fa:	2280      	movs	r2, #128	; 0x80
   425fc:	4621      	mov	r1, r4
   425fe:	4640      	mov	r0, r8
   42600:	f001 f8f2 	bl	437e8 <cc_mbedtls_aes_setkey_enc>
   42604:	4682      	mov	sl, r0
   42606:	bb70      	cbnz	r0, 42666 <block_cipher_df+0x17a>
   42608:	f107 0920 	add.w	r9, r7, #32
   4260c:	463d      	mov	r5, r7
   4260e:	ab13      	add	r3, sp, #76	; 0x4c
   42610:	461a      	mov	r2, r3
   42612:	2101      	movs	r1, #1
   42614:	4640      	mov	r0, r8
   42616:	f001 f901 	bl	4381c <cc_mbedtls_aes_crypt_ecb>
   4261a:	2210      	movs	r2, #16
   4261c:	4682      	mov	sl, r0
   4261e:	a913      	add	r1, sp, #76	; 0x4c
   42620:	4628      	mov	r0, r5
   42622:	4415      	add	r5, r2
   42624:	f1ba 0f00 	cmp.w	sl, #0
   42628:	d11d      	bne.n	42666 <block_cipher_df+0x17a>
   4262a:	f003 f871 	bl	45710 <memcpy>
   4262e:	454d      	cmp	r5, r9
   42630:	d1ed      	bne.n	4260e <block_cipher_df+0x122>
   42632:	4640      	mov	r0, r8
   42634:	f001 f8d2 	bl	437dc <cc_mbedtls_aes_free>
   42638:	481d      	ldr	r0, [pc, #116]	; (426b0 <block_cipher_df+0x1c4>)
   4263a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   4263e:	f7ff ff4b 	bl	424d8 <mbedtls_platform_zeroize>
   42642:	4620      	mov	r0, r4
   42644:	2120      	movs	r1, #32
   42646:	f7ff ff47 	bl	424d8 <mbedtls_platform_zeroize>
   4264a:	a807      	add	r0, sp, #28
   4264c:	2110      	movs	r1, #16
   4264e:	f7ff ff43 	bl	424d8 <mbedtls_platform_zeroize>
   42652:	4630      	mov	r0, r6
   42654:	2110      	movs	r1, #16
   42656:	f7ff ff3f 	bl	424d8 <mbedtls_platform_zeroize>
   4265a:	4650      	mov	r0, sl
   4265c:	b035      	add	sp, #212	; 0xd4
   4265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42662:	ac0f      	add	r4, sp, #60	; 0x3c
   42664:	ae0b      	add	r6, sp, #44	; 0x2c
   42666:	4640      	mov	r0, r8
   42668:	f001 f8b8 	bl	437dc <cc_mbedtls_aes_free>
   4266c:	4810      	ldr	r0, [pc, #64]	; (426b0 <block_cipher_df+0x1c4>)
   4266e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   42672:	f7ff ff31 	bl	424d8 <mbedtls_platform_zeroize>
   42676:	4620      	mov	r0, r4
   42678:	2120      	movs	r1, #32
   4267a:	f7ff ff2d 	bl	424d8 <mbedtls_platform_zeroize>
   4267e:	a807      	add	r0, sp, #28
   42680:	2110      	movs	r1, #16
   42682:	f7ff ff29 	bl	424d8 <mbedtls_platform_zeroize>
   42686:	2110      	movs	r1, #16
   42688:	4630      	mov	r0, r6
   4268a:	f7ff ff25 	bl	424d8 <mbedtls_platform_zeroize>
   4268e:	2120      	movs	r1, #32
   42690:	4638      	mov	r0, r7
   42692:	f7ff ff21 	bl	424d8 <mbedtls_platform_zeroize>
   42696:	4650      	mov	r0, sl
   42698:	b035      	add	sp, #212	; 0xd4
   4269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4269e:	9f03      	ldr	r7, [sp, #12]
   426a0:	9e01      	ldr	r6, [sp, #4]
   426a2:	9c04      	ldr	r4, [sp, #16]
   426a4:	4682      	mov	sl, r0
   426a6:	e7de      	b.n	42666 <block_cipher_df+0x17a>
   426a8:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   426ac:	e7f3      	b.n	42696 <block_cipher_df+0x1aa>
   426ae:	bf00      	nop
   426b0:	20003090 	.word	0x20003090
   426b4:	03020100 	.word	0x03020100
   426b8:	200030a0 	.word	0x200030a0

000426bc <ctr_drbg_update_internal>:
   426bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   426c0:	b088      	sub	sp, #32
   426c2:	4604      	mov	r4, r0
   426c4:	460d      	mov	r5, r1
   426c6:	2220      	movs	r2, #32
   426c8:	2100      	movs	r1, #0
   426ca:	4668      	mov	r0, sp
   426cc:	f003 f82b 	bl	45726 <memset>
   426d0:	f104 0620 	add.w	r6, r4, #32
   426d4:	466f      	mov	r7, sp
   426d6:	7be2      	ldrb	r2, [r4, #15]
   426d8:	3201      	adds	r2, #1
   426da:	b2d2      	uxtb	r2, r2
   426dc:	73e2      	strb	r2, [r4, #15]
   426de:	2a00      	cmp	r2, #0
   426e0:	d14d      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   426e2:	7ba2      	ldrb	r2, [r4, #14]
   426e4:	3201      	adds	r2, #1
   426e6:	b2d2      	uxtb	r2, r2
   426e8:	73a2      	strb	r2, [r4, #14]
   426ea:	2a00      	cmp	r2, #0
   426ec:	d147      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   426ee:	7b63      	ldrb	r3, [r4, #13]
   426f0:	3301      	adds	r3, #1
   426f2:	b2db      	uxtb	r3, r3
   426f4:	7363      	strb	r3, [r4, #13]
   426f6:	2b00      	cmp	r3, #0
   426f8:	d141      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   426fa:	7b23      	ldrb	r3, [r4, #12]
   426fc:	3301      	adds	r3, #1
   426fe:	b2db      	uxtb	r3, r3
   42700:	7323      	strb	r3, [r4, #12]
   42702:	2b00      	cmp	r3, #0
   42704:	d13b      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   42706:	7ae3      	ldrb	r3, [r4, #11]
   42708:	3301      	adds	r3, #1
   4270a:	b2db      	uxtb	r3, r3
   4270c:	72e3      	strb	r3, [r4, #11]
   4270e:	2b00      	cmp	r3, #0
   42710:	d135      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   42712:	7aa3      	ldrb	r3, [r4, #10]
   42714:	3301      	adds	r3, #1
   42716:	b2db      	uxtb	r3, r3
   42718:	72a3      	strb	r3, [r4, #10]
   4271a:	2b00      	cmp	r3, #0
   4271c:	d12f      	bne.n	4277e <ctr_drbg_update_internal+0xc2>
   4271e:	7a63      	ldrb	r3, [r4, #9]
   42720:	3301      	adds	r3, #1
   42722:	b2db      	uxtb	r3, r3
   42724:	7263      	strb	r3, [r4, #9]
   42726:	bb53      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42728:	7a23      	ldrb	r3, [r4, #8]
   4272a:	3301      	adds	r3, #1
   4272c:	b2db      	uxtb	r3, r3
   4272e:	7223      	strb	r3, [r4, #8]
   42730:	bb2b      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42732:	79e3      	ldrb	r3, [r4, #7]
   42734:	3301      	adds	r3, #1
   42736:	b2db      	uxtb	r3, r3
   42738:	71e3      	strb	r3, [r4, #7]
   4273a:	bb03      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   4273c:	79a3      	ldrb	r3, [r4, #6]
   4273e:	3301      	adds	r3, #1
   42740:	b2db      	uxtb	r3, r3
   42742:	71a3      	strb	r3, [r4, #6]
   42744:	b9db      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42746:	7963      	ldrb	r3, [r4, #5]
   42748:	3301      	adds	r3, #1
   4274a:	b2db      	uxtb	r3, r3
   4274c:	7163      	strb	r3, [r4, #5]
   4274e:	b9b3      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42750:	7923      	ldrb	r3, [r4, #4]
   42752:	3301      	adds	r3, #1
   42754:	b2db      	uxtb	r3, r3
   42756:	7123      	strb	r3, [r4, #4]
   42758:	b98b      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   4275a:	78e3      	ldrb	r3, [r4, #3]
   4275c:	3301      	adds	r3, #1
   4275e:	b2db      	uxtb	r3, r3
   42760:	70e3      	strb	r3, [r4, #3]
   42762:	b963      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42764:	78a3      	ldrb	r3, [r4, #2]
   42766:	3301      	adds	r3, #1
   42768:	b2db      	uxtb	r3, r3
   4276a:	70a3      	strb	r3, [r4, #2]
   4276c:	b93b      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   4276e:	7863      	ldrb	r3, [r4, #1]
   42770:	3301      	adds	r3, #1
   42772:	b2db      	uxtb	r3, r3
   42774:	7063      	strb	r3, [r4, #1]
   42776:	b913      	cbnz	r3, 4277e <ctr_drbg_update_internal+0xc2>
   42778:	7823      	ldrb	r3, [r4, #0]
   4277a:	3301      	adds	r3, #1
   4277c:	7023      	strb	r3, [r4, #0]
   4277e:	463b      	mov	r3, r7
   42780:	4622      	mov	r2, r4
   42782:	2101      	movs	r1, #1
   42784:	4630      	mov	r0, r6
   42786:	f001 f849 	bl	4381c <cc_mbedtls_aes_crypt_ecb>
   4278a:	4680      	mov	r8, r0
   4278c:	bb50      	cbnz	r0, 427e4 <ctr_drbg_update_internal+0x128>
   4278e:	3710      	adds	r7, #16
   42790:	ab08      	add	r3, sp, #32
   42792:	429f      	cmp	r7, r3
   42794:	d19f      	bne.n	426d6 <ctr_drbg_update_internal+0x1a>
   42796:	9a02      	ldr	r2, [sp, #8]
   42798:	68ab      	ldr	r3, [r5, #8]
   4279a:	9f03      	ldr	r7, [sp, #12]
   4279c:	9907      	ldr	r1, [sp, #28]
   4279e:	4053      	eors	r3, r2
   427a0:	9302      	str	r3, [sp, #8]
   427a2:	4630      	mov	r0, r6
   427a4:	68ee      	ldr	r6, [r5, #12]
   427a6:	9b00      	ldr	r3, [sp, #0]
   427a8:	407e      	eors	r6, r7
   427aa:	9603      	str	r6, [sp, #12]
   427ac:	9f04      	ldr	r7, [sp, #16]
   427ae:	692e      	ldr	r6, [r5, #16]
   427b0:	407e      	eors	r6, r7
   427b2:	9604      	str	r6, [sp, #16]
   427b4:	696e      	ldr	r6, [r5, #20]
   427b6:	9f05      	ldr	r7, [sp, #20]
   427b8:	407e      	eors	r6, r7
   427ba:	9605      	str	r6, [sp, #20]
   427bc:	9f06      	ldr	r7, [sp, #24]
   427be:	69ae      	ldr	r6, [r5, #24]
   427c0:	407e      	eors	r6, r7
   427c2:	9606      	str	r6, [sp, #24]
   427c4:	69ee      	ldr	r6, [r5, #28]
   427c6:	4071      	eors	r1, r6
   427c8:	9107      	str	r1, [sp, #28]
   427ca:	6829      	ldr	r1, [r5, #0]
   427cc:	404b      	eors	r3, r1
   427ce:	9300      	str	r3, [sp, #0]
   427d0:	9901      	ldr	r1, [sp, #4]
   427d2:	686b      	ldr	r3, [r5, #4]
   427d4:	2280      	movs	r2, #128	; 0x80
   427d6:	404b      	eors	r3, r1
   427d8:	4669      	mov	r1, sp
   427da:	9301      	str	r3, [sp, #4]
   427dc:	f001 f804 	bl	437e8 <cc_mbedtls_aes_setkey_enc>
   427e0:	4680      	mov	r8, r0
   427e2:	b138      	cbz	r0, 427f4 <ctr_drbg_update_internal+0x138>
   427e4:	4668      	mov	r0, sp
   427e6:	2120      	movs	r1, #32
   427e8:	f7ff fe76 	bl	424d8 <mbedtls_platform_zeroize>
   427ec:	4640      	mov	r0, r8
   427ee:	b008      	add	sp, #32
   427f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   427f4:	2210      	movs	r2, #16
   427f6:	eb0d 0102 	add.w	r1, sp, r2
   427fa:	4620      	mov	r0, r4
   427fc:	f002 ff88 	bl	45710 <memcpy>
   42800:	e7f0      	b.n	427e4 <ctr_drbg_update_internal+0x128>
   42802:	bf00      	nop

00042804 <mbedtls_ctr_drbg_reseed_internal>:
   42804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42808:	4604      	mov	r4, r0
   4280a:	6980      	ldr	r0, [r0, #24]
   4280c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   42810:	d852      	bhi.n	428b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   42812:	461d      	mov	r5, r3
   42814:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   42818:	42ab      	cmp	r3, r5
   4281a:	d34d      	bcc.n	428b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   4281c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   42820:	1a1b      	subs	r3, r3, r0
   42822:	4293      	cmp	r3, r2
   42824:	4616      	mov	r6, r2
   42826:	d347      	bcc.n	428b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   42828:	f8df 9098 	ldr.w	r9, [pc, #152]	; 428c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   4282c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   42830:	460f      	mov	r7, r1
   42832:	4648      	mov	r0, r9
   42834:	2100      	movs	r1, #0
   42836:	f002 ff76 	bl	45726 <memset>
   4283a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   4283e:	69a2      	ldr	r2, [r4, #24]
   42840:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   42844:	4649      	mov	r1, r9
   42846:	4798      	blx	r3
   42848:	2800      	cmp	r0, #0
   4284a:	d138      	bne.n	428be <mbedtls_ctr_drbg_reseed_internal+0xba>
   4284c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   42850:	b13d      	cbz	r5, 42862 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   42852:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   42856:	462a      	mov	r2, r5
   42858:	eb09 0108 	add.w	r1, r9, r8
   4285c:	4798      	blx	r3
   4285e:	bb70      	cbnz	r0, 428be <mbedtls_ctr_drbg_reseed_internal+0xba>
   42860:	44a8      	add	r8, r5
   42862:	b107      	cbz	r7, 42866 <mbedtls_ctr_drbg_reseed_internal+0x62>
   42864:	b9c6      	cbnz	r6, 42898 <mbedtls_ctr_drbg_reseed_internal+0x94>
   42866:	4917      	ldr	r1, [pc, #92]	; (428c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   42868:	4642      	mov	r2, r8
   4286a:	4608      	mov	r0, r1
   4286c:	f7ff fe3e 	bl	424ec <block_cipher_df>
   42870:	4605      	mov	r5, r0
   42872:	b138      	cbz	r0, 42884 <mbedtls_ctr_drbg_reseed_internal+0x80>
   42874:	4813      	ldr	r0, [pc, #76]	; (428c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   42876:	f44f 71c0 	mov.w	r1, #384	; 0x180
   4287a:	f7ff fe2d 	bl	424d8 <mbedtls_platform_zeroize>
   4287e:	4628      	mov	r0, r5
   42880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   42884:	490f      	ldr	r1, [pc, #60]	; (428c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   42886:	4620      	mov	r0, r4
   42888:	f7ff ff18 	bl	426bc <ctr_drbg_update_internal>
   4288c:	4605      	mov	r5, r0
   4288e:	2800      	cmp	r0, #0
   42890:	d1f0      	bne.n	42874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   42892:	2301      	movs	r3, #1
   42894:	6123      	str	r3, [r4, #16]
   42896:	e7ed      	b.n	42874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   42898:	eb09 0008 	add.w	r0, r9, r8
   4289c:	4639      	mov	r1, r7
   4289e:	4632      	mov	r2, r6
   428a0:	f002 ff36 	bl	45710 <memcpy>
   428a4:	4907      	ldr	r1, [pc, #28]	; (428c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   428a6:	44b0      	add	r8, r6
   428a8:	4642      	mov	r2, r8
   428aa:	4608      	mov	r0, r1
   428ac:	f7ff fe1e 	bl	424ec <block_cipher_df>
   428b0:	4605      	mov	r5, r0
   428b2:	2800      	cmp	r0, #0
   428b4:	d1de      	bne.n	42874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   428b6:	e7e5      	b.n	42884 <mbedtls_ctr_drbg_reseed_internal+0x80>
   428b8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   428bc:	e7df      	b.n	4287e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   428be:	f06f 0533 	mvn.w	r5, #51	; 0x33
   428c2:	e7dc      	b.n	4287e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   428c4:	20003230 	.word	0x20003230

000428c8 <cc_mbedtls_ctr_drbg_init>:
   428c8:	b510      	push	{r4, lr}
   428ca:	22a4      	movs	r2, #164	; 0xa4
   428cc:	4604      	mov	r4, r0
   428ce:	2100      	movs	r1, #0
   428d0:	f002 ff29 	bl	45726 <memset>
   428d4:	4b06      	ldr	r3, [pc, #24]	; (428f0 <cc_mbedtls_ctr_drbg_init+0x28>)
   428d6:	f04f 31ff 	mov.w	r1, #4294967295
   428da:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   428de:	6121      	str	r1, [r4, #16]
   428e0:	61e2      	str	r2, [r4, #28]
   428e2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   428e6:	681b      	ldr	r3, [r3, #0]
   428e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   428ec:	4718      	bx	r3
   428ee:	bf00      	nop
   428f0:	200008d0 	.word	0x200008d0

000428f4 <cc_mbedtls_ctr_drbg_seed>:
   428f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   428f8:	b085      	sub	sp, #20
   428fa:	4605      	mov	r5, r0
   428fc:	460f      	mov	r7, r1
   428fe:	4616      	mov	r6, r2
   42900:	2100      	movs	r1, #0
   42902:	2210      	movs	r2, #16
   42904:	4668      	mov	r0, sp
   42906:	4699      	mov	r9, r3
   42908:	f002 ff0d 	bl	45726 <memset>
   4290c:	4b1d      	ldr	r3, [pc, #116]	; (42984 <cc_mbedtls_ctr_drbg_seed+0x90>)
   4290e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   42912:	681b      	ldr	r3, [r3, #0]
   42914:	4640      	mov	r0, r8
   42916:	4798      	blx	r3
   42918:	b120      	cbz	r0, 42924 <cc_mbedtls_ctr_drbg_seed+0x30>
   4291a:	4604      	mov	r4, r0
   4291c:	4620      	mov	r0, r4
   4291e:	b005      	add	sp, #20
   42920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42924:	f105 0420 	add.w	r4, r5, #32
   42928:	4620      	mov	r0, r4
   4292a:	f000 ff47 	bl	437bc <cc_mbedtls_aes_init>
   4292e:	69aa      	ldr	r2, [r5, #24]
   42930:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   42934:	692e      	ldr	r6, [r5, #16]
   42936:	b9e2      	cbnz	r2, 42972 <cc_mbedtls_ctr_drbg_seed+0x7e>
   42938:	2220      	movs	r2, #32
   4293a:	2e00      	cmp	r6, #0
   4293c:	61aa      	str	r2, [r5, #24]
   4293e:	db1f      	blt.n	42980 <cc_mbedtls_ctr_drbg_seed+0x8c>
   42940:	4620      	mov	r0, r4
   42942:	4669      	mov	r1, sp
   42944:	2280      	movs	r2, #128	; 0x80
   42946:	f000 ff4f 	bl	437e8 <cc_mbedtls_aes_setkey_enc>
   4294a:	4604      	mov	r4, r0
   4294c:	b930      	cbnz	r0, 4295c <cc_mbedtls_ctr_drbg_seed+0x68>
   4294e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   42950:	4633      	mov	r3, r6
   42952:	4649      	mov	r1, r9
   42954:	4628      	mov	r0, r5
   42956:	f7ff ff55 	bl	42804 <mbedtls_ctr_drbg_reseed_internal>
   4295a:	4604      	mov	r4, r0
   4295c:	4b0a      	ldr	r3, [pc, #40]	; (42988 <cc_mbedtls_ctr_drbg_seed+0x94>)
   4295e:	4640      	mov	r0, r8
   42960:	681b      	ldr	r3, [r3, #0]
   42962:	4798      	blx	r3
   42964:	2800      	cmp	r0, #0
   42966:	bf18      	it	ne
   42968:	4604      	movne	r4, r0
   4296a:	4620      	mov	r0, r4
   4296c:	b005      	add	sp, #20
   4296e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42972:	2e00      	cmp	r6, #0
   42974:	dae4      	bge.n	42940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   42976:	2a17      	cmp	r2, #23
   42978:	d802      	bhi.n	42980 <cc_mbedtls_ctr_drbg_seed+0x8c>
   4297a:	3201      	adds	r2, #1
   4297c:	0856      	lsrs	r6, r2, #1
   4297e:	e7df      	b.n	42940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   42980:	2600      	movs	r6, #0
   42982:	e7dd      	b.n	42940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   42984:	200008cc 	.word	0x200008cc
   42988:	200008c8 	.word	0x200008c8

0004298c <cc_mbedtls_ctr_drbg_random_with_add>:
   4298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42990:	b08d      	sub	sp, #52	; 0x34
   42992:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   42996:	9f16      	ldr	r7, [sp, #88]	; 0x58
   42998:	f200 80e3 	bhi.w	42b62 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   4299c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   429a0:	f200 80dc 	bhi.w	42b5c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   429a4:	4604      	mov	r4, r0
   429a6:	4615      	mov	r5, r2
   429a8:	460e      	mov	r6, r1
   429aa:	2220      	movs	r2, #32
   429ac:	2100      	movs	r1, #0
   429ae:	a804      	add	r0, sp, #16
   429b0:	4698      	mov	r8, r3
   429b2:	f002 feb8 	bl	45726 <memset>
   429b6:	4b6c      	ldr	r3, [pc, #432]	; (42b68 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   429b8:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   429bc:	681b      	ldr	r3, [r3, #0]
   429be:	4648      	mov	r0, r9
   429c0:	4798      	blx	r3
   429c2:	4683      	mov	fp, r0
   429c4:	2800      	cmp	r0, #0
   429c6:	f040 8092 	bne.w	42aee <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   429ca:	6922      	ldr	r2, [r4, #16]
   429cc:	69e3      	ldr	r3, [r4, #28]
   429ce:	429a      	cmp	r2, r3
   429d0:	f300 8091 	bgt.w	42af6 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   429d4:	6963      	ldr	r3, [r4, #20]
   429d6:	2b00      	cmp	r3, #0
   429d8:	f040 808d 	bne.w	42af6 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   429dc:	2f00      	cmp	r7, #0
   429de:	f040 80a9 	bne.w	42b34 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   429e2:	f8df a188 	ldr.w	sl, [pc, #392]	; 42b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   429e6:	466f      	mov	r7, sp
   429e8:	2d00      	cmp	r5, #0
   429ea:	f000 8098 	beq.w	42b1e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   429ee:	f104 0820 	add.w	r8, r4, #32
   429f2:	466f      	mov	r7, sp
   429f4:	e00e      	b.n	42a14 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   429f6:	2d10      	cmp	r5, #16
   429f8:	46ab      	mov	fp, r5
   429fa:	bf28      	it	cs
   429fc:	f04f 0b10 	movcs.w	fp, #16
   42a00:	4630      	mov	r0, r6
   42a02:	465a      	mov	r2, fp
   42a04:	4639      	mov	r1, r7
   42a06:	f002 fe83 	bl	45710 <memcpy>
   42a0a:	ebb5 050b 	subs.w	r5, r5, fp
   42a0e:	445e      	add	r6, fp
   42a10:	f000 8085 	beq.w	42b1e <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   42a14:	7be3      	ldrb	r3, [r4, #15]
   42a16:	3301      	adds	r3, #1
   42a18:	b2db      	uxtb	r3, r3
   42a1a:	73e3      	strb	r3, [r4, #15]
   42a1c:	2b00      	cmp	r3, #0
   42a1e:	d14d      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a20:	7ba3      	ldrb	r3, [r4, #14]
   42a22:	3301      	adds	r3, #1
   42a24:	b2db      	uxtb	r3, r3
   42a26:	73a3      	strb	r3, [r4, #14]
   42a28:	2b00      	cmp	r3, #0
   42a2a:	d147      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a2c:	7b63      	ldrb	r3, [r4, #13]
   42a2e:	3301      	adds	r3, #1
   42a30:	b2db      	uxtb	r3, r3
   42a32:	7363      	strb	r3, [r4, #13]
   42a34:	2b00      	cmp	r3, #0
   42a36:	d141      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a38:	7b23      	ldrb	r3, [r4, #12]
   42a3a:	3301      	adds	r3, #1
   42a3c:	b2db      	uxtb	r3, r3
   42a3e:	7323      	strb	r3, [r4, #12]
   42a40:	2b00      	cmp	r3, #0
   42a42:	d13b      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a44:	7ae3      	ldrb	r3, [r4, #11]
   42a46:	3301      	adds	r3, #1
   42a48:	b2db      	uxtb	r3, r3
   42a4a:	72e3      	strb	r3, [r4, #11]
   42a4c:	2b00      	cmp	r3, #0
   42a4e:	d135      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a50:	7aa3      	ldrb	r3, [r4, #10]
   42a52:	3301      	adds	r3, #1
   42a54:	b2db      	uxtb	r3, r3
   42a56:	72a3      	strb	r3, [r4, #10]
   42a58:	2b00      	cmp	r3, #0
   42a5a:	d12f      	bne.n	42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a5c:	7a63      	ldrb	r3, [r4, #9]
   42a5e:	3301      	adds	r3, #1
   42a60:	b2db      	uxtb	r3, r3
   42a62:	7263      	strb	r3, [r4, #9]
   42a64:	bb53      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a66:	7a23      	ldrb	r3, [r4, #8]
   42a68:	3301      	adds	r3, #1
   42a6a:	b2db      	uxtb	r3, r3
   42a6c:	7223      	strb	r3, [r4, #8]
   42a6e:	bb2b      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a70:	79e3      	ldrb	r3, [r4, #7]
   42a72:	3301      	adds	r3, #1
   42a74:	b2db      	uxtb	r3, r3
   42a76:	71e3      	strb	r3, [r4, #7]
   42a78:	bb03      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a7a:	79a3      	ldrb	r3, [r4, #6]
   42a7c:	3301      	adds	r3, #1
   42a7e:	b2db      	uxtb	r3, r3
   42a80:	71a3      	strb	r3, [r4, #6]
   42a82:	b9db      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a84:	7963      	ldrb	r3, [r4, #5]
   42a86:	3301      	adds	r3, #1
   42a88:	b2db      	uxtb	r3, r3
   42a8a:	7163      	strb	r3, [r4, #5]
   42a8c:	b9b3      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a8e:	7923      	ldrb	r3, [r4, #4]
   42a90:	3301      	adds	r3, #1
   42a92:	b2db      	uxtb	r3, r3
   42a94:	7123      	strb	r3, [r4, #4]
   42a96:	b98b      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42a98:	78e3      	ldrb	r3, [r4, #3]
   42a9a:	3301      	adds	r3, #1
   42a9c:	b2db      	uxtb	r3, r3
   42a9e:	70e3      	strb	r3, [r4, #3]
   42aa0:	b963      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42aa2:	78a3      	ldrb	r3, [r4, #2]
   42aa4:	3301      	adds	r3, #1
   42aa6:	b2db      	uxtb	r3, r3
   42aa8:	70a3      	strb	r3, [r4, #2]
   42aaa:	b93b      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42aac:	7863      	ldrb	r3, [r4, #1]
   42aae:	3301      	adds	r3, #1
   42ab0:	b2db      	uxtb	r3, r3
   42ab2:	7063      	strb	r3, [r4, #1]
   42ab4:	b913      	cbnz	r3, 42abc <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   42ab6:	7823      	ldrb	r3, [r4, #0]
   42ab8:	3301      	adds	r3, #1
   42aba:	7023      	strb	r3, [r4, #0]
   42abc:	463b      	mov	r3, r7
   42abe:	4622      	mov	r2, r4
   42ac0:	2101      	movs	r1, #1
   42ac2:	4640      	mov	r0, r8
   42ac4:	f000 feaa 	bl	4381c <cc_mbedtls_aes_crypt_ecb>
   42ac8:	4683      	mov	fp, r0
   42aca:	2800      	cmp	r0, #0
   42acc:	d093      	beq.n	429f6 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   42ace:	f8da 3000 	ldr.w	r3, [sl]
   42ad2:	4648      	mov	r0, r9
   42ad4:	4798      	blx	r3
   42ad6:	2120      	movs	r1, #32
   42ad8:	4603      	mov	r3, r0
   42ada:	a804      	add	r0, sp, #16
   42adc:	2b00      	cmp	r3, #0
   42ade:	bf18      	it	ne
   42ae0:	469b      	movne	fp, r3
   42ae2:	f7ff fcf9 	bl	424d8 <mbedtls_platform_zeroize>
   42ae6:	2110      	movs	r1, #16
   42ae8:	4638      	mov	r0, r7
   42aea:	f7ff fcf5 	bl	424d8 <mbedtls_platform_zeroize>
   42aee:	4658      	mov	r0, fp
   42af0:	b00d      	add	sp, #52	; 0x34
   42af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42af6:	463a      	mov	r2, r7
   42af8:	4641      	mov	r1, r8
   42afa:	2300      	movs	r3, #0
   42afc:	4620      	mov	r0, r4
   42afe:	f7ff fe81 	bl	42804 <mbedtls_ctr_drbg_reseed_internal>
   42b02:	f8df a068 	ldr.w	sl, [pc, #104]	; 42b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   42b06:	2800      	cmp	r0, #0
   42b08:	f43f af6d 	beq.w	429e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   42b0c:	f8da 3000 	ldr.w	r3, [sl]
   42b10:	4648      	mov	r0, r9
   42b12:	4798      	blx	r3
   42b14:	4683      	mov	fp, r0
   42b16:	2800      	cmp	r0, #0
   42b18:	f43f af65 	beq.w	429e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   42b1c:	e7e7      	b.n	42aee <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   42b1e:	a904      	add	r1, sp, #16
   42b20:	4620      	mov	r0, r4
   42b22:	f7ff fdcb 	bl	426bc <ctr_drbg_update_internal>
   42b26:	4683      	mov	fp, r0
   42b28:	2800      	cmp	r0, #0
   42b2a:	d1d0      	bne.n	42ace <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   42b2c:	6923      	ldr	r3, [r4, #16]
   42b2e:	3301      	adds	r3, #1
   42b30:	6123      	str	r3, [r4, #16]
   42b32:	e7cc      	b.n	42ace <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   42b34:	463a      	mov	r2, r7
   42b36:	4641      	mov	r1, r8
   42b38:	a804      	add	r0, sp, #16
   42b3a:	f7ff fcd7 	bl	424ec <block_cipher_df>
   42b3e:	4683      	mov	fp, r0
   42b40:	b118      	cbz	r0, 42b4a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   42b42:	f8df a028 	ldr.w	sl, [pc, #40]	; 42b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   42b46:	466f      	mov	r7, sp
   42b48:	e7c1      	b.n	42ace <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   42b4a:	a904      	add	r1, sp, #16
   42b4c:	4620      	mov	r0, r4
   42b4e:	f7ff fdb5 	bl	426bc <ctr_drbg_update_internal>
   42b52:	4683      	mov	fp, r0
   42b54:	2800      	cmp	r0, #0
   42b56:	f43f af44 	beq.w	429e2 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   42b5a:	e7f2      	b.n	42b42 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   42b5c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   42b60:	e7c5      	b.n	42aee <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   42b62:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   42b66:	e7c2      	b.n	42aee <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   42b68:	200008cc 	.word	0x200008cc
   42b6c:	200008c8 	.word	0x200008c8

00042b70 <entropy_update>:
   42b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42b74:	2b20      	cmp	r3, #32
   42b76:	b08b      	sub	sp, #44	; 0x2c
   42b78:	461d      	mov	r5, r3
   42b7a:	4606      	mov	r6, r0
   42b7c:	4688      	mov	r8, r1
   42b7e:	4691      	mov	r9, r2
   42b80:	d826      	bhi.n	42bd0 <entropy_update+0x60>
   42b82:	b2db      	uxtb	r3, r3
   42b84:	af02      	add	r7, sp, #8
   42b86:	f88d 8004 	strb.w	r8, [sp, #4]
   42b8a:	46b0      	mov	r8, r6
   42b8c:	f88d 3005 	strb.w	r3, [sp, #5]
   42b90:	f858 1b04 	ldr.w	r1, [r8], #4
   42b94:	b921      	cbnz	r1, 42ba0 <entropy_update+0x30>
   42b96:	4640      	mov	r0, r8
   42b98:	f000 fe84 	bl	438a4 <cc_mbedtls_sha256_starts>
   42b9c:	4604      	mov	r4, r0
   42b9e:	b940      	cbnz	r0, 42bb2 <entropy_update+0x42>
   42ba0:	2301      	movs	r3, #1
   42ba2:	6033      	str	r3, [r6, #0]
   42ba4:	2202      	movs	r2, #2
   42ba6:	a901      	add	r1, sp, #4
   42ba8:	4640      	mov	r0, r8
   42baa:	f000 fe8f 	bl	438cc <cc_mbedtls_sha256_update>
   42bae:	4604      	mov	r4, r0
   42bb0:	b138      	cbz	r0, 42bc2 <entropy_update+0x52>
   42bb2:	4638      	mov	r0, r7
   42bb4:	2120      	movs	r1, #32
   42bb6:	f7ff fc8f 	bl	424d8 <mbedtls_platform_zeroize>
   42bba:	4620      	mov	r0, r4
   42bbc:	b00b      	add	sp, #44	; 0x2c
   42bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42bc2:	462a      	mov	r2, r5
   42bc4:	4649      	mov	r1, r9
   42bc6:	4640      	mov	r0, r8
   42bc8:	f000 fe80 	bl	438cc <cc_mbedtls_sha256_update>
   42bcc:	4604      	mov	r4, r0
   42bce:	e7f0      	b.n	42bb2 <entropy_update+0x42>
   42bd0:	af02      	add	r7, sp, #8
   42bd2:	4619      	mov	r1, r3
   42bd4:	4610      	mov	r0, r2
   42bd6:	2300      	movs	r3, #0
   42bd8:	463a      	mov	r2, r7
   42bda:	f000 fffd 	bl	43bd8 <cc_mbedtls_sha256>
   42bde:	4604      	mov	r4, r0
   42be0:	2800      	cmp	r0, #0
   42be2:	d1e6      	bne.n	42bb2 <entropy_update+0x42>
   42be4:	2320      	movs	r3, #32
   42be6:	46b9      	mov	r9, r7
   42be8:	461d      	mov	r5, r3
   42bea:	e7cc      	b.n	42b86 <entropy_update+0x16>

00042bec <entropy_gather_internal.part.0>:
   42bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   42bee:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   42bf2:	b0a7      	sub	sp, #156	; 0x9c
   42bf4:	2b00      	cmp	r3, #0
   42bf6:	bfd8      	it	le
   42bf8:	ae02      	addle	r6, sp, #8
   42bfa:	dd2c      	ble.n	42c56 <entropy_gather_internal.part.0+0x6a>
   42bfc:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   42c00:	4605      	mov	r5, r0
   42c02:	2300      	movs	r3, #0
   42c04:	ae02      	add	r6, sp, #8
   42c06:	9301      	str	r3, [sp, #4]
   42c08:	f1a4 0701 	sub.w	r7, r4, #1
   42c0c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   42c10:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   42c14:	ab01      	add	r3, sp, #4
   42c16:	2290      	movs	r2, #144	; 0x90
   42c18:	4631      	mov	r1, r6
   42c1a:	47a0      	blx	r4
   42c1c:	fab7 f787 	clz	r7, r7
   42c20:	097f      	lsrs	r7, r7, #5
   42c22:	4604      	mov	r4, r0
   42c24:	b910      	cbnz	r0, 42c2c <entropy_gather_internal.part.0+0x40>
   42c26:	9b01      	ldr	r3, [sp, #4]
   42c28:	b93b      	cbnz	r3, 42c3a <entropy_gather_internal.part.0+0x4e>
   42c2a:	b1a7      	cbz	r7, 42c56 <entropy_gather_internal.part.0+0x6a>
   42c2c:	4630      	mov	r0, r6
   42c2e:	2190      	movs	r1, #144	; 0x90
   42c30:	f7ff fc52 	bl	424d8 <mbedtls_platform_zeroize>
   42c34:	4620      	mov	r0, r4
   42c36:	b027      	add	sp, #156	; 0x9c
   42c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42c3a:	4601      	mov	r1, r0
   42c3c:	4632      	mov	r2, r6
   42c3e:	4628      	mov	r0, r5
   42c40:	f7ff ff96 	bl	42b70 <entropy_update>
   42c44:	b950      	cbnz	r0, 42c5c <entropy_gather_internal.part.0+0x70>
   42c46:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   42c4a:	9a01      	ldr	r2, [sp, #4]
   42c4c:	4413      	add	r3, r2
   42c4e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   42c52:	2f00      	cmp	r7, #0
   42c54:	d1ea      	bne.n	42c2c <entropy_gather_internal.part.0+0x40>
   42c56:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   42c5a:	e7e7      	b.n	42c2c <entropy_gather_internal.part.0+0x40>
   42c5c:	4604      	mov	r4, r0
   42c5e:	4620      	mov	r0, r4
   42c60:	b027      	add	sp, #156	; 0x9c
   42c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00042c64 <cc_mbedtls_entropy_init>:
   42c64:	b570      	push	{r4, r5, r6, lr}
   42c66:	2500      	movs	r5, #0
   42c68:	4604      	mov	r4, r0
   42c6a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   42c6e:	2214      	movs	r2, #20
   42c70:	4629      	mov	r1, r5
   42c72:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   42c76:	30fc      	adds	r0, #252	; 0xfc
   42c78:	f002 fd55 	bl	45726 <memset>
   42c7c:	2208      	movs	r2, #8
   42c7e:	4629      	mov	r1, r5
   42c80:	4630      	mov	r0, r6
   42c82:	f002 fd50 	bl	45726 <memset>
   42c86:	4b15      	ldr	r3, [pc, #84]	; (42cdc <cc_mbedtls_entropy_init+0x78>)
   42c88:	4630      	mov	r0, r6
   42c8a:	681b      	ldr	r3, [r3, #0]
   42c8c:	4798      	blx	r3
   42c8e:	4620      	mov	r0, r4
   42c90:	f840 5b04 	str.w	r5, [r0], #4
   42c94:	f000 fdec 	bl	43870 <cc_mbedtls_sha256_init>
   42c98:	4b11      	ldr	r3, [pc, #68]	; (42ce0 <cc_mbedtls_entropy_init+0x7c>)
   42c9a:	4630      	mov	r0, r6
   42c9c:	681b      	ldr	r3, [r3, #0]
   42c9e:	4798      	blx	r3
   42ca0:	b9d8      	cbnz	r0, 42cda <cc_mbedtls_entropy_init+0x76>
   42ca2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   42ca6:	42ab      	cmp	r3, r5
   42ca8:	dc11      	bgt.n	42cce <cc_mbedtls_entropy_init+0x6a>
   42caa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   42cae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   42cb2:	2120      	movs	r1, #32
   42cb4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   42cb8:	2101      	movs	r1, #1
   42cba:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   42cbe:	3301      	adds	r3, #1
   42cc0:	4908      	ldr	r1, [pc, #32]	; (42ce4 <cc_mbedtls_entropy_init+0x80>)
   42cc2:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   42cc6:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   42cca:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   42cce:	4b06      	ldr	r3, [pc, #24]	; (42ce8 <cc_mbedtls_entropy_init+0x84>)
   42cd0:	4630      	mov	r0, r6
   42cd2:	681b      	ldr	r3, [r3, #0]
   42cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   42cd8:	4718      	bx	r3
   42cda:	bd70      	pop	{r4, r5, r6, pc}
   42cdc:	200008d0 	.word	0x200008d0
   42ce0:	200008cc 	.word	0x200008cc
   42ce4:	000436c1 	.word	0x000436c1
   42ce8:	200008c8 	.word	0x200008c8

00042cec <cc_mbedtls_entropy_func>:
   42cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42cf0:	2a20      	cmp	r2, #32
   42cf2:	b088      	sub	sp, #32
   42cf4:	d879      	bhi.n	42dea <cc_mbedtls_entropy_func+0xfe>
   42cf6:	4b3e      	ldr	r3, [pc, #248]	; (42df0 <cc_mbedtls_entropy_func+0x104>)
   42cf8:	f500 7988 	add.w	r9, r0, #272	; 0x110
   42cfc:	681b      	ldr	r3, [r3, #0]
   42cfe:	4604      	mov	r4, r0
   42d00:	4648      	mov	r0, r9
   42d02:	4617      	mov	r7, r2
   42d04:	4688      	mov	r8, r1
   42d06:	4798      	blx	r3
   42d08:	4605      	mov	r5, r0
   42d0a:	b9f8      	cbnz	r0, 42d4c <cc_mbedtls_entropy_func+0x60>
   42d0c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   42d10:	f240 1601 	movw	r6, #257	; 0x101
   42d14:	2b00      	cmp	r3, #0
   42d16:	d064      	beq.n	42de2 <cc_mbedtls_entropy_func+0xf6>
   42d18:	4620      	mov	r0, r4
   42d1a:	f7ff ff67 	bl	42bec <entropy_gather_internal.part.0>
   42d1e:	4605      	mov	r5, r0
   42d20:	b938      	cbnz	r0, 42d32 <cc_mbedtls_entropy_func+0x46>
   42d22:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   42d26:	2b00      	cmp	r3, #0
   42d28:	dc14      	bgt.n	42d54 <cc_mbedtls_entropy_func+0x68>
   42d2a:	3e01      	subs	r6, #1
   42d2c:	d1f2      	bne.n	42d14 <cc_mbedtls_entropy_func+0x28>
   42d2e:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   42d32:	466e      	mov	r6, sp
   42d34:	2120      	movs	r1, #32
   42d36:	4630      	mov	r0, r6
   42d38:	f7ff fbce 	bl	424d8 <mbedtls_platform_zeroize>
   42d3c:	4b2d      	ldr	r3, [pc, #180]	; (42df4 <cc_mbedtls_entropy_func+0x108>)
   42d3e:	4648      	mov	r0, r9
   42d40:	681b      	ldr	r3, [r3, #0]
   42d42:	4798      	blx	r3
   42d44:	2800      	cmp	r0, #0
   42d46:	bf18      	it	ne
   42d48:	f06f 051d 	mvnne.w	r5, #29
   42d4c:	4628      	mov	r0, r5
   42d4e:	b008      	add	sp, #32
   42d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42d54:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   42d58:	4293      	cmp	r3, r2
   42d5a:	d303      	bcc.n	42d64 <cc_mbedtls_entropy_func+0x78>
   42d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   42d60:	2a01      	cmp	r2, #1
   42d62:	d002      	beq.n	42d6a <cc_mbedtls_entropy_func+0x7e>
   42d64:	3e01      	subs	r6, #1
   42d66:	d1d7      	bne.n	42d18 <cc_mbedtls_entropy_func+0x2c>
   42d68:	e7e1      	b.n	42d2e <cc_mbedtls_entropy_func+0x42>
   42d6a:	2b1f      	cmp	r3, #31
   42d6c:	d9fa      	bls.n	42d64 <cc_mbedtls_entropy_func+0x78>
   42d6e:	466e      	mov	r6, sp
   42d70:	4601      	mov	r1, r0
   42d72:	2220      	movs	r2, #32
   42d74:	4630      	mov	r0, r6
   42d76:	f104 0a04 	add.w	sl, r4, #4
   42d7a:	f002 fcd4 	bl	45726 <memset>
   42d7e:	4631      	mov	r1, r6
   42d80:	4650      	mov	r0, sl
   42d82:	f000 fdcd 	bl	43920 <cc_mbedtls_sha256_finish>
   42d86:	4605      	mov	r5, r0
   42d88:	2800      	cmp	r0, #0
   42d8a:	d1d3      	bne.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42d8c:	4650      	mov	r0, sl
   42d8e:	f000 fd83 	bl	43898 <cc_mbedtls_sha256_free>
   42d92:	4650      	mov	r0, sl
   42d94:	f000 fd6c 	bl	43870 <cc_mbedtls_sha256_init>
   42d98:	4629      	mov	r1, r5
   42d9a:	4650      	mov	r0, sl
   42d9c:	f000 fd82 	bl	438a4 <cc_mbedtls_sha256_starts>
   42da0:	4605      	mov	r5, r0
   42da2:	2800      	cmp	r0, #0
   42da4:	d1c6      	bne.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42da6:	4650      	mov	r0, sl
   42da8:	2220      	movs	r2, #32
   42daa:	4631      	mov	r1, r6
   42dac:	f000 fd8e 	bl	438cc <cc_mbedtls_sha256_update>
   42db0:	4605      	mov	r5, r0
   42db2:	2800      	cmp	r0, #0
   42db4:	d1be      	bne.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42db6:	4603      	mov	r3, r0
   42db8:	4632      	mov	r2, r6
   42dba:	2120      	movs	r1, #32
   42dbc:	4630      	mov	r0, r6
   42dbe:	f000 ff0b 	bl	43bd8 <cc_mbedtls_sha256>
   42dc2:	4605      	mov	r5, r0
   42dc4:	2800      	cmp	r0, #0
   42dc6:	d1b5      	bne.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42dc8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   42dcc:	2b00      	cmp	r3, #0
   42dce:	bfc4      	itt	gt
   42dd0:	2300      	movgt	r3, #0
   42dd2:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   42dd6:	463a      	mov	r2, r7
   42dd8:	4640      	mov	r0, r8
   42dda:	4631      	mov	r1, r6
   42ddc:	f002 fc98 	bl	45710 <memcpy>
   42de0:	e7a8      	b.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42de2:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   42de6:	466e      	mov	r6, sp
   42de8:	e7a4      	b.n	42d34 <cc_mbedtls_entropy_func+0x48>
   42dea:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   42dee:	e7ad      	b.n	42d4c <cc_mbedtls_entropy_func+0x60>
   42df0:	200008cc 	.word	0x200008cc
   42df4:	200008c8 	.word	0x200008c8

00042df8 <RndStartupTest.constprop.0>:
   42df8:	b530      	push	{r4, r5, lr}
   42dfa:	b08d      	sub	sp, #52	; 0x34
   42dfc:	2100      	movs	r1, #0
   42dfe:	2228      	movs	r2, #40	; 0x28
   42e00:	a802      	add	r0, sp, #8
   42e02:	9101      	str	r1, [sp, #4]
   42e04:	f002 fc8f 	bl	45726 <memset>
   42e08:	a802      	add	r0, sp, #8
   42e0a:	f000 ff0d 	bl	43c28 <RNG_PLAT_SetUserRngParameters>
   42e0e:	4604      	mov	r4, r0
   42e10:	b110      	cbz	r0, 42e18 <RndStartupTest.constprop.0+0x20>
   42e12:	4620      	mov	r0, r4
   42e14:	b00d      	add	sp, #52	; 0x34
   42e16:	bd30      	pop	{r4, r5, pc}
   42e18:	4d17      	ldr	r5, [pc, #92]	; (42e78 <RndStartupTest.constprop.0+0x80>)
   42e1a:	f04f 31ff 	mov.w	r1, #4294967295
   42e1e:	6828      	ldr	r0, [r5, #0]
   42e20:	f000 f944 	bl	430ac <CC_PalMutexLock>
   42e24:	4604      	mov	r4, r0
   42e26:	b120      	cbz	r0, 42e32 <RndStartupTest.constprop.0+0x3a>
   42e28:	4814      	ldr	r0, [pc, #80]	; (42e7c <RndStartupTest.constprop.0+0x84>)
   42e2a:	f7ff fa33 	bl	42294 <CC_PalAbort>
   42e2e:	2c01      	cmp	r4, #1
   42e30:	d018      	beq.n	42e64 <RndStartupTest.constprop.0+0x6c>
   42e32:	2000      	movs	r0, #0
   42e34:	f000 f96a 	bl	4310c <CC_PalPowerSaveModeSelect>
   42e38:	b9d0      	cbnz	r0, 42e70 <RndStartupTest.constprop.0+0x78>
   42e3a:	4a11      	ldr	r2, [pc, #68]	; (42e80 <RndStartupTest.constprop.0+0x88>)
   42e3c:	a902      	add	r1, sp, #8
   42e3e:	a801      	add	r0, sp, #4
   42e40:	f000 fc30 	bl	436a4 <LLF_RND_RunTrngStartupTest>
   42e44:	4604      	mov	r4, r0
   42e46:	2001      	movs	r0, #1
   42e48:	f000 f960 	bl	4310c <CC_PalPowerSaveModeSelect>
   42e4c:	b960      	cbnz	r0, 42e68 <RndStartupTest.constprop.0+0x70>
   42e4e:	6828      	ldr	r0, [r5, #0]
   42e50:	f000 f934 	bl	430bc <CC_PalMutexUnlock>
   42e54:	2800      	cmp	r0, #0
   42e56:	d0dc      	beq.n	42e12 <RndStartupTest.constprop.0+0x1a>
   42e58:	480a      	ldr	r0, [pc, #40]	; (42e84 <RndStartupTest.constprop.0+0x8c>)
   42e5a:	f7ff fa1b 	bl	42294 <CC_PalAbort>
   42e5e:	4620      	mov	r0, r4
   42e60:	b00d      	add	sp, #52	; 0x34
   42e62:	bd30      	pop	{r4, r5, pc}
   42e64:	2405      	movs	r4, #5
   42e66:	e7f2      	b.n	42e4e <RndStartupTest.constprop.0+0x56>
   42e68:	4807      	ldr	r0, [pc, #28]	; (42e88 <RndStartupTest.constprop.0+0x90>)
   42e6a:	f7ff fa13 	bl	42294 <CC_PalAbort>
   42e6e:	e7ee      	b.n	42e4e <RndStartupTest.constprop.0+0x56>
   42e70:	4806      	ldr	r0, [pc, #24]	; (42e8c <RndStartupTest.constprop.0+0x94>)
   42e72:	f7ff fa0f 	bl	42294 <CC_PalAbort>
   42e76:	e7e0      	b.n	42e3a <RndStartupTest.constprop.0+0x42>
   42e78:	200008b4 	.word	0x200008b4
   42e7c:	0004975c 	.word	0x0004975c
   42e80:	200033b0 	.word	0x200033b0
   42e84:	000497b4 	.word	0x000497b4
   42e88:	00049794 	.word	0x00049794
   42e8c:	00049774 	.word	0x00049774

00042e90 <CC_LibInit>:
   42e90:	b530      	push	{r4, r5, lr}
   42e92:	b083      	sub	sp, #12
   42e94:	f000 f85c 	bl	42f50 <CC_HalInit>
   42e98:	b128      	cbz	r0, 42ea6 <CC_LibInit+0x16>
   42e9a:	f000 f8ab 	bl	42ff4 <CC_PalTerminate>
   42e9e:	2403      	movs	r4, #3
   42ea0:	4620      	mov	r0, r4
   42ea2:	b003      	add	sp, #12
   42ea4:	bd30      	pop	{r4, r5, pc}
   42ea6:	f000 f877 	bl	42f98 <CC_PalInit>
   42eaa:	b9d8      	cbnz	r0, 42ee4 <CC_LibInit+0x54>
   42eac:	f000 f92e 	bl	4310c <CC_PalPowerSaveModeSelect>
   42eb0:	b9e0      	cbnz	r0, 42eec <CC_LibInit+0x5c>
   42eb2:	4c22      	ldr	r4, [pc, #136]	; (42f3c <CC_LibInit+0xac>)
   42eb4:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   42eb8:	0e1b      	lsrs	r3, r3, #24
   42eba:	2bf0      	cmp	r3, #240	; 0xf0
   42ebc:	d10a      	bne.n	42ed4 <CC_LibInit+0x44>
   42ebe:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   42ec2:	4b1f      	ldr	r3, [pc, #124]	; (42f40 <CC_LibInit+0xb0>)
   42ec4:	429a      	cmp	r2, r3
   42ec6:	d031      	beq.n	42f2c <CC_LibInit+0x9c>
   42ec8:	f000 f844 	bl	42f54 <CC_HalTerminate>
   42ecc:	2407      	movs	r4, #7
   42ece:	f000 f891 	bl	42ff4 <CC_PalTerminate>
   42ed2:	e7e5      	b.n	42ea0 <CC_LibInit+0x10>
   42ed4:	f000 f83e 	bl	42f54 <CC_HalTerminate>
   42ed8:	f000 f88c 	bl	42ff4 <CC_PalTerminate>
   42edc:	2406      	movs	r4, #6
   42ede:	4620      	mov	r0, r4
   42ee0:	b003      	add	sp, #12
   42ee2:	bd30      	pop	{r4, r5, pc}
   42ee4:	2404      	movs	r4, #4
   42ee6:	4620      	mov	r0, r4
   42ee8:	b003      	add	sp, #12
   42eea:	bd30      	pop	{r4, r5, pc}
   42eec:	f000 f832 	bl	42f54 <CC_HalTerminate>
   42ef0:	f000 f880 	bl	42ff4 <CC_PalTerminate>
   42ef4:	f7ff ff80 	bl	42df8 <RndStartupTest.constprop.0>
   42ef8:	4604      	mov	r4, r0
   42efa:	b998      	cbnz	r0, 42f24 <CC_LibInit+0x94>
   42efc:	4d11      	ldr	r5, [pc, #68]	; (42f44 <CC_LibInit+0xb4>)
   42efe:	682b      	ldr	r3, [r5, #0]
   42f00:	2b00      	cmp	r3, #0
   42f02:	d1cd      	bne.n	42ea0 <CC_LibInit+0x10>
   42f04:	4602      	mov	r2, r0
   42f06:	4601      	mov	r1, r0
   42f08:	f7ff f9e6 	bl	422d8 <nrf_cc3xx_platform_ctr_drbg_init>
   42f0c:	b950      	cbnz	r0, 42f24 <CC_LibInit+0x94>
   42f0e:	490e      	ldr	r1, [pc, #56]	; (42f48 <CC_LibInit+0xb8>)
   42f10:	ab01      	add	r3, sp, #4
   42f12:	2268      	movs	r2, #104	; 0x68
   42f14:	f7ff fa10 	bl	42338 <nrf_cc3xx_platform_ctr_drbg_get>
   42f18:	b920      	cbnz	r0, 42f24 <CC_LibInit+0x94>
   42f1a:	4b0c      	ldr	r3, [pc, #48]	; (42f4c <CC_LibInit+0xbc>)
   42f1c:	602b      	str	r3, [r5, #0]
   42f1e:	4620      	mov	r0, r4
   42f20:	b003      	add	sp, #12
   42f22:	bd30      	pop	{r4, r5, pc}
   42f24:	2405      	movs	r4, #5
   42f26:	4620      	mov	r0, r4
   42f28:	b003      	add	sp, #12
   42f2a:	bd30      	pop	{r4, r5, pc}
   42f2c:	2001      	movs	r0, #1
   42f2e:	f000 f8ed 	bl	4310c <CC_PalPowerSaveModeSelect>
   42f32:	2800      	cmp	r0, #0
   42f34:	d1da      	bne.n	42eec <CC_LibInit+0x5c>
   42f36:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   42f3a:	e7db      	b.n	42ef4 <CC_LibInit+0x64>
   42f3c:	5002b000 	.word	0x5002b000
   42f40:	20e00000 	.word	0x20e00000
   42f44:	200035d0 	.word	0x200035d0
   42f48:	200035d4 	.word	0x200035d4
   42f4c:	5a5aea5a 	.word	0x5a5aea5a

00042f50 <CC_HalInit>:
   42f50:	2000      	movs	r0, #0
   42f52:	4770      	bx	lr

00042f54 <CC_HalTerminate>:
   42f54:	2000      	movs	r0, #0
   42f56:	4770      	bx	lr

00042f58 <CC_HalClearInterruptBit>:
   42f58:	0543      	lsls	r3, r0, #21
   42f5a:	d504      	bpl.n	42f66 <CC_HalClearInterruptBit+0xe>
   42f5c:	4b04      	ldr	r3, [pc, #16]	; (42f70 <CC_HalClearInterruptBit+0x18>)
   42f5e:	f04f 32ff 	mov.w	r2, #4294967295
   42f62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   42f66:	4b02      	ldr	r3, [pc, #8]	; (42f70 <CC_HalClearInterruptBit+0x18>)
   42f68:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   42f6c:	4770      	bx	lr
   42f6e:	bf00      	nop
   42f70:	5002b000 	.word	0x5002b000

00042f74 <CC_HalMaskInterrupt>:
   42f74:	4b01      	ldr	r3, [pc, #4]	; (42f7c <CC_HalMaskInterrupt+0x8>)
   42f76:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   42f7a:	4770      	bx	lr
   42f7c:	5002b000 	.word	0x5002b000

00042f80 <CC_HalWaitInterrupt>:
   42f80:	b108      	cbz	r0, 42f86 <CC_HalWaitInterrupt+0x6>
   42f82:	f000 b86b 	b.w	4305c <CC_PalWaitInterrupt>
   42f86:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   42f8a:	4770      	bx	lr

00042f8c <CC_HalWaitInterruptRND>:
   42f8c:	b108      	cbz	r0, 42f92 <CC_HalWaitInterruptRND+0x6>
   42f8e:	f000 b84f 	b.w	43030 <CC_PalWaitInterruptRND>
   42f92:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   42f96:	4770      	bx	lr

00042f98 <CC_PalInit>:
   42f98:	b510      	push	{r4, lr}
   42f9a:	4811      	ldr	r0, [pc, #68]	; (42fe0 <CC_PalInit+0x48>)
   42f9c:	f000 f872 	bl	43084 <CC_PalMutexCreate>
   42fa0:	b100      	cbz	r0, 42fa4 <CC_PalInit+0xc>
   42fa2:	bd10      	pop	{r4, pc}
   42fa4:	480f      	ldr	r0, [pc, #60]	; (42fe4 <CC_PalInit+0x4c>)
   42fa6:	f000 f86d 	bl	43084 <CC_PalMutexCreate>
   42faa:	2800      	cmp	r0, #0
   42fac:	d1f9      	bne.n	42fa2 <CC_PalInit+0xa>
   42fae:	4c0e      	ldr	r4, [pc, #56]	; (42fe8 <CC_PalInit+0x50>)
   42fb0:	4620      	mov	r0, r4
   42fb2:	f000 f867 	bl	43084 <CC_PalMutexCreate>
   42fb6:	2800      	cmp	r0, #0
   42fb8:	d1f3      	bne.n	42fa2 <CC_PalInit+0xa>
   42fba:	4b0c      	ldr	r3, [pc, #48]	; (42fec <CC_PalInit+0x54>)
   42fbc:	480c      	ldr	r0, [pc, #48]	; (42ff0 <CC_PalInit+0x58>)
   42fbe:	601c      	str	r4, [r3, #0]
   42fc0:	f000 f860 	bl	43084 <CC_PalMutexCreate>
   42fc4:	4601      	mov	r1, r0
   42fc6:	2800      	cmp	r0, #0
   42fc8:	d1eb      	bne.n	42fa2 <CC_PalInit+0xa>
   42fca:	f000 f82d 	bl	43028 <CC_PalDmaInit>
   42fce:	4604      	mov	r4, r0
   42fd0:	b108      	cbz	r0, 42fd6 <CC_PalInit+0x3e>
   42fd2:	4620      	mov	r0, r4
   42fd4:	bd10      	pop	{r4, pc}
   42fd6:	f000 f87b 	bl	430d0 <CC_PalPowerSaveModeInit>
   42fda:	4620      	mov	r0, r4
   42fdc:	e7fa      	b.n	42fd4 <CC_PalInit+0x3c>
   42fde:	bf00      	nop
   42fe0:	200008c4 	.word	0x200008c4
   42fe4:	200008c0 	.word	0x200008c0
   42fe8:	200008bc 	.word	0x200008bc
   42fec:	200008b4 	.word	0x200008b4
   42ff0:	200008b8 	.word	0x200008b8

00042ff4 <CC_PalTerminate>:
   42ff4:	b508      	push	{r3, lr}
   42ff6:	4808      	ldr	r0, [pc, #32]	; (43018 <CC_PalTerminate+0x24>)
   42ff8:	f000 f84e 	bl	43098 <CC_PalMutexDestroy>
   42ffc:	4807      	ldr	r0, [pc, #28]	; (4301c <CC_PalTerminate+0x28>)
   42ffe:	f000 f84b 	bl	43098 <CC_PalMutexDestroy>
   43002:	4807      	ldr	r0, [pc, #28]	; (43020 <CC_PalTerminate+0x2c>)
   43004:	f000 f848 	bl	43098 <CC_PalMutexDestroy>
   43008:	4806      	ldr	r0, [pc, #24]	; (43024 <CC_PalTerminate+0x30>)
   4300a:	f000 f845 	bl	43098 <CC_PalMutexDestroy>
   4300e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   43012:	f000 b80b 	b.w	4302c <CC_PalDmaTerminate>
   43016:	bf00      	nop
   43018:	200008c4 	.word	0x200008c4
   4301c:	200008c0 	.word	0x200008c0
   43020:	200008bc 	.word	0x200008bc
   43024:	200008b8 	.word	0x200008b8

00043028 <CC_PalDmaInit>:
   43028:	2000      	movs	r0, #0
   4302a:	4770      	bx	lr

0004302c <CC_PalDmaTerminate>:
   4302c:	4770      	bx	lr
   4302e:	bf00      	nop

00043030 <CC_PalWaitInterruptRND>:
   43030:	b410      	push	{r4}
   43032:	4c09      	ldr	r4, [pc, #36]	; (43058 <CC_PalWaitInterruptRND+0x28>)
   43034:	4602      	mov	r2, r0
   43036:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   4303a:	4213      	tst	r3, r2
   4303c:	d0fb      	beq.n	43036 <CC_PalWaitInterruptRND+0x6>
   4303e:	b121      	cbz	r1, 4304a <CC_PalWaitInterruptRND+0x1a>
   43040:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   43044:	600b      	str	r3, [r1, #0]
   43046:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   4304a:	4b03      	ldr	r3, [pc, #12]	; (43058 <CC_PalWaitInterruptRND+0x28>)
   4304c:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   43050:	2000      	movs	r0, #0
   43052:	bc10      	pop	{r4}
   43054:	4770      	bx	lr
   43056:	bf00      	nop
   43058:	5002b000 	.word	0x5002b000

0004305c <CC_PalWaitInterrupt>:
   4305c:	4a04      	ldr	r2, [pc, #16]	; (43070 <CC_PalWaitInterrupt+0x14>)
   4305e:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   43062:	4218      	tst	r0, r3
   43064:	d0fb      	beq.n	4305e <CC_PalWaitInterrupt+0x2>
   43066:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   4306a:	2000      	movs	r0, #0
   4306c:	4770      	bx	lr
   4306e:	bf00      	nop
   43070:	5002b000 	.word	0x5002b000

00043074 <CC_PalMemCopyPlat>:
   43074:	f002 bb35 	b.w	456e2 <memmove>

00043078 <CC_PalMemSetPlat>:
   43078:	f002 bb55 	b.w	45726 <memset>

0004307c <CC_PalMemSetZeroPlat>:
   4307c:	460a      	mov	r2, r1
   4307e:	2100      	movs	r1, #0
   43080:	f002 bb51 	b.w	45726 <memset>

00043084 <CC_PalMutexCreate>:
   43084:	b508      	push	{r3, lr}
   43086:	4b03      	ldr	r3, [pc, #12]	; (43094 <CC_PalMutexCreate+0x10>)
   43088:	6802      	ldr	r2, [r0, #0]
   4308a:	681b      	ldr	r3, [r3, #0]
   4308c:	6810      	ldr	r0, [r2, #0]
   4308e:	4798      	blx	r3
   43090:	2000      	movs	r0, #0
   43092:	bd08      	pop	{r3, pc}
   43094:	20000880 	.word	0x20000880

00043098 <CC_PalMutexDestroy>:
   43098:	b508      	push	{r3, lr}
   4309a:	4b03      	ldr	r3, [pc, #12]	; (430a8 <CC_PalMutexDestroy+0x10>)
   4309c:	6802      	ldr	r2, [r0, #0]
   4309e:	685b      	ldr	r3, [r3, #4]
   430a0:	6810      	ldr	r0, [r2, #0]
   430a2:	4798      	blx	r3
   430a4:	2000      	movs	r0, #0
   430a6:	bd08      	pop	{r3, pc}
   430a8:	20000880 	.word	0x20000880

000430ac <CC_PalMutexLock>:
   430ac:	4b02      	ldr	r3, [pc, #8]	; (430b8 <CC_PalMutexLock+0xc>)
   430ae:	6802      	ldr	r2, [r0, #0]
   430b0:	689b      	ldr	r3, [r3, #8]
   430b2:	6810      	ldr	r0, [r2, #0]
   430b4:	4718      	bx	r3
   430b6:	bf00      	nop
   430b8:	20000880 	.word	0x20000880

000430bc <CC_PalMutexUnlock>:
   430bc:	b508      	push	{r3, lr}
   430be:	4b03      	ldr	r3, [pc, #12]	; (430cc <CC_PalMutexUnlock+0x10>)
   430c0:	6802      	ldr	r2, [r0, #0]
   430c2:	68db      	ldr	r3, [r3, #12]
   430c4:	6810      	ldr	r0, [r2, #0]
   430c6:	4798      	blx	r3
   430c8:	2000      	movs	r0, #0
   430ca:	bd08      	pop	{r3, pc}
   430cc:	20000880 	.word	0x20000880

000430d0 <CC_PalPowerSaveModeInit>:
   430d0:	b570      	push	{r4, r5, r6, lr}
   430d2:	4c09      	ldr	r4, [pc, #36]	; (430f8 <CC_PalPowerSaveModeInit+0x28>)
   430d4:	4d09      	ldr	r5, [pc, #36]	; (430fc <CC_PalPowerSaveModeInit+0x2c>)
   430d6:	6920      	ldr	r0, [r4, #16]
   430d8:	68ab      	ldr	r3, [r5, #8]
   430da:	4798      	blx	r3
   430dc:	b118      	cbz	r0, 430e6 <CC_PalPowerSaveModeInit+0x16>
   430de:	4b08      	ldr	r3, [pc, #32]	; (43100 <CC_PalPowerSaveModeInit+0x30>)
   430e0:	4808      	ldr	r0, [pc, #32]	; (43104 <CC_PalPowerSaveModeInit+0x34>)
   430e2:	685b      	ldr	r3, [r3, #4]
   430e4:	4798      	blx	r3
   430e6:	4a08      	ldr	r2, [pc, #32]	; (43108 <CC_PalPowerSaveModeInit+0x38>)
   430e8:	68eb      	ldr	r3, [r5, #12]
   430ea:	6920      	ldr	r0, [r4, #16]
   430ec:	2100      	movs	r1, #0
   430ee:	6011      	str	r1, [r2, #0]
   430f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   430f4:	4718      	bx	r3
   430f6:	bf00      	nop
   430f8:	2000086c 	.word	0x2000086c
   430fc:	20000880 	.word	0x20000880
   43100:	20000864 	.word	0x20000864
   43104:	000497cc 	.word	0x000497cc
   43108:	2000363c 	.word	0x2000363c

0004310c <CC_PalPowerSaveModeSelect>:
   4310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4310e:	4d1a      	ldr	r5, [pc, #104]	; (43178 <CC_PalPowerSaveModeSelect+0x6c>)
   43110:	4e1a      	ldr	r6, [pc, #104]	; (4317c <CC_PalPowerSaveModeSelect+0x70>)
   43112:	4604      	mov	r4, r0
   43114:	68b2      	ldr	r2, [r6, #8]
   43116:	6928      	ldr	r0, [r5, #16]
   43118:	4790      	blx	r2
   4311a:	b9e8      	cbnz	r0, 43158 <CC_PalPowerSaveModeSelect+0x4c>
   4311c:	4f18      	ldr	r7, [pc, #96]	; (43180 <CC_PalPowerSaveModeSelect+0x74>)
   4311e:	683b      	ldr	r3, [r7, #0]
   43120:	b14c      	cbz	r4, 43136 <CC_PalPowerSaveModeSelect+0x2a>
   43122:	b1a3      	cbz	r3, 4314e <CC_PalPowerSaveModeSelect+0x42>
   43124:	2b01      	cmp	r3, #1
   43126:	d019      	beq.n	4315c <CC_PalPowerSaveModeSelect+0x50>
   43128:	3b01      	subs	r3, #1
   4312a:	603b      	str	r3, [r7, #0]
   4312c:	6928      	ldr	r0, [r5, #16]
   4312e:	68f3      	ldr	r3, [r6, #12]
   43130:	4798      	blx	r3
   43132:	2000      	movs	r0, #0
   43134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43136:	b943      	cbnz	r3, 4314a <CC_PalPowerSaveModeSelect+0x3e>
   43138:	4a12      	ldr	r2, [pc, #72]	; (43184 <CC_PalPowerSaveModeSelect+0x78>)
   4313a:	2101      	movs	r1, #1
   4313c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   43140:	4911      	ldr	r1, [pc, #68]	; (43188 <CC_PalPowerSaveModeSelect+0x7c>)
   43142:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   43146:	2a00      	cmp	r2, #0
   43148:	d1fb      	bne.n	43142 <CC_PalPowerSaveModeSelect+0x36>
   4314a:	3301      	adds	r3, #1
   4314c:	603b      	str	r3, [r7, #0]
   4314e:	68f3      	ldr	r3, [r6, #12]
   43150:	6928      	ldr	r0, [r5, #16]
   43152:	4798      	blx	r3
   43154:	2000      	movs	r0, #0
   43156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43158:	480c      	ldr	r0, [pc, #48]	; (4318c <CC_PalPowerSaveModeSelect+0x80>)
   4315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4315c:	4a0a      	ldr	r2, [pc, #40]	; (43188 <CC_PalPowerSaveModeSelect+0x7c>)
   4315e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   43162:	2b00      	cmp	r3, #0
   43164:	d1fb      	bne.n	4315e <CC_PalPowerSaveModeSelect+0x52>
   43166:	4a07      	ldr	r2, [pc, #28]	; (43184 <CC_PalPowerSaveModeSelect+0x78>)
   43168:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   4316c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   43170:	f7ff ff00 	bl	42f74 <CC_HalMaskInterrupt>
   43174:	683b      	ldr	r3, [r7, #0]
   43176:	e7d7      	b.n	43128 <CC_PalPowerSaveModeSelect+0x1c>
   43178:	2000086c 	.word	0x2000086c
   4317c:	20000880 	.word	0x20000880
   43180:	2000363c 	.word	0x2000363c
   43184:	5002a000 	.word	0x5002a000
   43188:	5002b000 	.word	0x5002b000
   4318c:	ffff8fe9 	.word	0xffff8fe9

00043190 <mutex_init>:
   43190:	4b01      	ldr	r3, [pc, #4]	; (43198 <mutex_init+0x8>)
   43192:	681b      	ldr	r3, [r3, #0]
   43194:	4718      	bx	r3
   43196:	bf00      	nop
   43198:	20000880 	.word	0x20000880

0004319c <mutex_lock>:
   4319c:	4b01      	ldr	r3, [pc, #4]	; (431a4 <mutex_lock+0x8>)
   4319e:	689b      	ldr	r3, [r3, #8]
   431a0:	4718      	bx	r3
   431a2:	bf00      	nop
   431a4:	20000880 	.word	0x20000880

000431a8 <mutex_unlock>:
   431a8:	4b01      	ldr	r3, [pc, #4]	; (431b0 <mutex_unlock+0x8>)
   431aa:	68db      	ldr	r3, [r3, #12]
   431ac:	4718      	bx	r3
   431ae:	bf00      	nop
   431b0:	20000880 	.word	0x20000880

000431b4 <startTrngHW>:
   431b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   431b8:	2800      	cmp	r0, #0
   431ba:	d078      	beq.n	432ae <startTrngHW+0xfa>
   431bc:	460c      	mov	r4, r1
   431be:	2900      	cmp	r1, #0
   431c0:	d075      	beq.n	432ae <startTrngHW+0xfa>
   431c2:	461d      	mov	r5, r3
   431c4:	2b00      	cmp	r3, #0
   431c6:	d072      	beq.n	432ae <startTrngHW+0xfa>
   431c8:	4607      	mov	r7, r0
   431ca:	b11a      	cbz	r2, 431d4 <startTrngHW+0x20>
   431cc:	2201      	movs	r2, #1
   431ce:	2300      	movs	r3, #0
   431d0:	602a      	str	r2, [r5, #0]
   431d2:	6003      	str	r3, [r0, #0]
   431d4:	682b      	ldr	r3, [r5, #0]
   431d6:	2b00      	cmp	r3, #0
   431d8:	d064      	beq.n	432a4 <startTrngHW+0xf0>
   431da:	4629      	mov	r1, r5
   431dc:	4620      	mov	r0, r4
   431de:	f000 fddb 	bl	43d98 <LLF_RND_GetFastestRosc>
   431e2:	4680      	mov	r8, r0
   431e4:	2800      	cmp	r0, #0
   431e6:	d15f      	bne.n	432a8 <startTrngHW+0xf4>
   431e8:	6828      	ldr	r0, [r5, #0]
   431ea:	4621      	mov	r1, r4
   431ec:	f000 fdba 	bl	43d64 <LLF_RND_GetRoscSampleCnt>
   431f0:	4680      	mov	r8, r0
   431f2:	2800      	cmp	r0, #0
   431f4:	d158      	bne.n	432a8 <startTrngHW+0xf4>
   431f6:	682b      	ldr	r3, [r5, #0]
   431f8:	2b08      	cmp	r3, #8
   431fa:	d06c      	beq.n	432d6 <startTrngHW+0x122>
   431fc:	2b04      	cmp	r3, #4
   431fe:	d06d      	beq.n	432dc <startTrngHW+0x128>
   43200:	f1a3 0902 	sub.w	r9, r3, #2
   43204:	fab9 f989 	clz	r9, r9
   43208:	ea4f 1959 	mov.w	r9, r9, lsr #5
   4320c:	4e35      	ldr	r6, [pc, #212]	; (432e4 <startTrngHW+0x130>)
   4320e:	2101      	movs	r1, #1
   43210:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   43214:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   43218:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   4321c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4321e:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   43222:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   43226:	4293      	cmp	r3, r2
   43228:	d1f6      	bne.n	43218 <startTrngHW+0x64>
   4322a:	f04f 0a00 	mov.w	sl, #0
   4322e:	f04f 30ff 	mov.w	r0, #4294967295
   43232:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   43236:	f7ff fe8f 	bl	42f58 <CC_HalClearInterruptBit>
   4323a:	f06f 031b 	mvn.w	r3, #27
   4323e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   43242:	4650      	mov	r0, sl
   43244:	f7ff fe96 	bl	42f74 <CC_HalMaskInterrupt>
   43248:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   4324c:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   43250:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   43254:	f7ff fe8e 	bl	42f74 <CC_HalMaskInterrupt>
   43258:	230a      	movs	r3, #10
   4325a:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   4325e:	9b08      	ldr	r3, [sp, #32]
   43260:	2b01      	cmp	r3, #1
   43262:	d029      	beq.n	432b8 <startTrngHW+0x104>
   43264:	6923      	ldr	r3, [r4, #16]
   43266:	4a20      	ldr	r2, [pc, #128]	; (432e8 <startTrngHW+0x134>)
   43268:	fba2 2303 	umull	r2, r3, r2, r3
   4326c:	091b      	lsrs	r3, r3, #4
   4326e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   43270:	fb02 f303 	mul.w	r3, r2, r3
   43274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   43278:	4a1a      	ldr	r2, [pc, #104]	; (432e4 <startTrngHW+0x130>)
   4327a:	03db      	lsls	r3, r3, #15
   4327c:	099b      	lsrs	r3, r3, #6
   4327e:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   43282:	2301      	movs	r3, #1
   43284:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   43288:	683b      	ldr	r3, [r7, #0]
   4328a:	682a      	ldr	r2, [r5, #0]
   4328c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   43290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   43294:	603b      	str	r3, [r7, #0]
   43296:	682a      	ldr	r2, [r5, #0]
   43298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4329c:	603b      	str	r3, [r7, #0]
   4329e:	4640      	mov	r0, r8
   432a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   432a4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 432ec <startTrngHW+0x138>
   432a8:	4640      	mov	r0, r8
   432aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   432ae:	f8df 8040 	ldr.w	r8, [pc, #64]	; 432f0 <startTrngHW+0x13c>
   432b2:	4640      	mov	r0, r8
   432b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   432b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   432bc:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   432c0:	3201      	adds	r2, #1
   432c2:	d006      	beq.n	432d2 <startTrngHW+0x11e>
   432c4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   432c8:	4a07      	ldr	r2, [pc, #28]	; (432e8 <startTrngHW+0x134>)
   432ca:	fba2 2303 	umull	r2, r3, r2, r3
   432ce:	091b      	lsrs	r3, r3, #4
   432d0:	e7cd      	b.n	4326e <startTrngHW+0xba>
   432d2:	2316      	movs	r3, #22
   432d4:	e7cb      	b.n	4326e <startTrngHW+0xba>
   432d6:	f04f 0903 	mov.w	r9, #3
   432da:	e797      	b.n	4320c <startTrngHW+0x58>
   432dc:	f04f 0902 	mov.w	r9, #2
   432e0:	e794      	b.n	4320c <startTrngHW+0x58>
   432e2:	bf00      	nop
   432e4:	5002b000 	.word	0x5002b000
   432e8:	aaaaaaab 	.word	0xaaaaaaab
   432ec:	00f10c31 	.word	0x00f10c31
   432f0:	00f10c35 	.word	0x00f10c35

000432f4 <LLF_RND_RepetitionCounterTest>:
   432f4:	b350      	cbz	r0, 4334c <LLF_RND_RepetitionCounterTest+0x58>
   432f6:	1e4b      	subs	r3, r1, #1
   432f8:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   432fc:	d226      	bcs.n	4334c <LLF_RND_RepetitionCounterTest+0x58>
   432fe:	f04f 0c00 	mov.w	ip, #0
   43302:	b530      	push	{r4, r5, lr}
   43304:	00cd      	lsls	r5, r1, #3
   43306:	46e6      	mov	lr, ip
   43308:	4664      	mov	r4, ip
   4330a:	0963      	lsrs	r3, r4, #5
   4330c:	f004 011f 	and.w	r1, r4, #31
   43310:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   43314:	291f      	cmp	r1, #31
   43316:	fa23 f301 	lsr.w	r3, r3, r1
   4331a:	d006      	beq.n	4332a <LLF_RND_RepetitionCounterTest+0x36>
   4331c:	f003 0301 	and.w	r3, r3, #1
   43320:	b91c      	cbnz	r4, 4332a <LLF_RND_RepetitionCounterTest+0x36>
   43322:	2401      	movs	r4, #1
   43324:	469e      	mov	lr, r3
   43326:	46a4      	mov	ip, r4
   43328:	e7ef      	b.n	4330a <LLF_RND_RepetitionCounterTest+0x16>
   4332a:	459e      	cmp	lr, r3
   4332c:	f104 0401 	add.w	r4, r4, #1
   43330:	d006      	beq.n	43340 <LLF_RND_RepetitionCounterTest+0x4c>
   43332:	469e      	mov	lr, r3
   43334:	f04f 0c01 	mov.w	ip, #1
   43338:	42ac      	cmp	r4, r5
   4333a:	d1e6      	bne.n	4330a <LLF_RND_RepetitionCounterTest+0x16>
   4333c:	2000      	movs	r0, #0
   4333e:	bd30      	pop	{r4, r5, pc}
   43340:	f10c 0c01 	add.w	ip, ip, #1
   43344:	4594      	cmp	ip, r2
   43346:	d1f7      	bne.n	43338 <LLF_RND_RepetitionCounterTest+0x44>
   43348:	4801      	ldr	r0, [pc, #4]	; (43350 <LLF_RND_RepetitionCounterTest+0x5c>)
   4334a:	bd30      	pop	{r4, r5, pc}
   4334c:	4800      	ldr	r0, [pc, #0]	; (43350 <LLF_RND_RepetitionCounterTest+0x5c>)
   4334e:	4770      	bx	lr
   43350:	00f10c36 	.word	0x00f10c36

00043354 <LLF_RND_AdaptiveProportionTest>:
   43354:	b3c8      	cbz	r0, 433ca <LLF_RND_AdaptiveProportionTest+0x76>
   43356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4335a:	1e4c      	subs	r4, r1, #1
   4335c:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   43360:	d21c      	bcs.n	4339c <LLF_RND_AdaptiveProportionTest+0x48>
   43362:	b1db      	cbz	r3, 4339c <LLF_RND_AdaptiveProportionTest+0x48>
   43364:	b1d2      	cbz	r2, 4339c <LLF_RND_AdaptiveProportionTest+0x48>
   43366:	f04f 0e00 	mov.w	lr, #0
   4336a:	00cf      	lsls	r7, r1, #3
   4336c:	4676      	mov	r6, lr
   4336e:	46f0      	mov	r8, lr
   43370:	4675      	mov	r5, lr
   43372:	f103 39ff 	add.w	r9, r3, #4294967295
   43376:	096c      	lsrs	r4, r5, #5
   43378:	f005 011f 	and.w	r1, r5, #31
   4337c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   43380:	291f      	cmp	r1, #31
   43382:	fa24 fc01 	lsr.w	ip, r4, r1
   43386:	d00c      	beq.n	433a2 <LLF_RND_AdaptiveProportionTest+0x4e>
   43388:	f00c 0c01 	and.w	ip, ip, #1
   4338c:	b94d      	cbnz	r5, 433a2 <LLF_RND_AdaptiveProportionTest+0x4e>
   4338e:	2601      	movs	r6, #1
   43390:	46e0      	mov	r8, ip
   43392:	4635      	mov	r5, r6
   43394:	46b6      	mov	lr, r6
   43396:	e7ee      	b.n	43376 <LLF_RND_AdaptiveProportionTest+0x22>
   43398:	4296      	cmp	r6, r2
   4339a:	d918      	bls.n	433ce <LLF_RND_AdaptiveProportionTest+0x7a>
   4339c:	480d      	ldr	r0, [pc, #52]	; (433d4 <LLF_RND_AdaptiveProportionTest+0x80>)
   4339e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   433a2:	4573      	cmp	r3, lr
   433a4:	d00c      	beq.n	433c0 <LLF_RND_AdaptiveProportionTest+0x6c>
   433a6:	45c4      	cmp	ip, r8
   433a8:	bf08      	it	eq
   433aa:	3601      	addeq	r6, #1
   433ac:	45f1      	cmp	r9, lr
   433ae:	d0f3      	beq.n	43398 <LLF_RND_AdaptiveProportionTest+0x44>
   433b0:	f10e 0e01 	add.w	lr, lr, #1
   433b4:	3501      	adds	r5, #1
   433b6:	42bd      	cmp	r5, r7
   433b8:	d1dd      	bne.n	43376 <LLF_RND_AdaptiveProportionTest+0x22>
   433ba:	2000      	movs	r0, #0
   433bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   433c0:	f04f 0e01 	mov.w	lr, #1
   433c4:	46e0      	mov	r8, ip
   433c6:	4676      	mov	r6, lr
   433c8:	e7f4      	b.n	433b4 <LLF_RND_AdaptiveProportionTest+0x60>
   433ca:	4802      	ldr	r0, [pc, #8]	; (433d4 <LLF_RND_AdaptiveProportionTest+0x80>)
   433cc:	4770      	bx	lr
   433ce:	469e      	mov	lr, r3
   433d0:	e7f0      	b.n	433b4 <LLF_RND_AdaptiveProportionTest+0x60>
   433d2:	bf00      	nop
   433d4:	00f10c37 	.word	0x00f10c37

000433d8 <getTrngSource>:
   433d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   433dc:	b091      	sub	sp, #68	; 0x44
   433de:	460d      	mov	r5, r1
   433e0:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   433e4:	4682      	mov	sl, r0
   433e6:	2900      	cmp	r1, #0
   433e8:	d16e      	bne.n	434c8 <getTrngSource+0xf0>
   433ea:	6928      	ldr	r0, [r5, #16]
   433ec:	9006      	str	r0, [sp, #24]
   433ee:	981a      	ldr	r0, [sp, #104]	; 0x68
   433f0:	601c      	str	r4, [r3, #0]
   433f2:	2300      	movs	r3, #0
   433f4:	6003      	str	r3, [r0, #0]
   433f6:	2a00      	cmp	r2, #0
   433f8:	f000 812e 	beq.w	43658 <getTrngSource+0x280>
   433fc:	4b9c      	ldr	r3, [pc, #624]	; (43670 <getTrngSource+0x298>)
   433fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   43400:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   43404:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   43408:	429a      	cmp	r2, r3
   4340a:	d169      	bne.n	434e0 <getTrngSource+0x108>
   4340c:	290a      	cmp	r1, #10
   4340e:	d167      	bne.n	434e0 <getTrngSource+0x108>
   43410:	f89a 3003 	ldrb.w	r3, [sl, #3]
   43414:	9308      	str	r3, [sp, #32]
   43416:	f104 0308 	add.w	r3, r4, #8
   4341a:	9906      	ldr	r1, [sp, #24]
   4341c:	9307      	str	r3, [sp, #28]
   4341e:	4b95      	ldr	r3, [pc, #596]	; (43674 <getTrngSource+0x29c>)
   43420:	4c93      	ldr	r4, [pc, #588]	; (43670 <getTrngSource+0x298>)
   43422:	fba3 2301 	umull	r2, r3, r3, r1
   43426:	089b      	lsrs	r3, r3, #2
   43428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4342c:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   43430:	9303      	str	r3, [sp, #12]
   43432:	2304      	movs	r3, #4
   43434:	9305      	str	r3, [sp, #20]
   43436:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   43438:	9e06      	ldr	r6, [sp, #24]
   4343a:	601e      	str	r6, [r3, #0]
   4343c:	2e00      	cmp	r6, #0
   4343e:	f000 80e9 	beq.w	43614 <getTrngSource+0x23c>
   43442:	2700      	movs	r7, #0
   43444:	f000 fcb8 	bl	43db8 <LLF_RND_TurnOffTrng>
   43448:	9709      	str	r7, [sp, #36]	; 0x24
   4344a:	f1ba 0f00 	cmp.w	sl, #0
   4344e:	f000 80d5 	beq.w	435fc <getTrngSource+0x224>
   43452:	f8dd 801c 	ldr.w	r8, [sp, #28]
   43456:	f04f 0901 	mov.w	r9, #1
   4345a:	2d00      	cmp	r5, #0
   4345c:	f000 80ce 	beq.w	435fc <getTrngSource+0x224>
   43460:	9b08      	ldr	r3, [sp, #32]
   43462:	2b00      	cmp	r3, #0
   43464:	d03e      	beq.n	434e4 <getTrngSource+0x10c>
   43466:	a908      	add	r1, sp, #32
   43468:	4628      	mov	r0, r5
   4346a:	f000 fc95 	bl	43d98 <LLF_RND_GetFastestRosc>
   4346e:	2800      	cmp	r0, #0
   43470:	d03a      	beq.n	434e8 <getTrngSource+0x110>
   43472:	4b81      	ldr	r3, [pc, #516]	; (43678 <getTrngSource+0x2a0>)
   43474:	4298      	cmp	r0, r3
   43476:	d020      	beq.n	434ba <getTrngSource+0xe2>
   43478:	9b08      	ldr	r3, [sp, #32]
   4347a:	2b08      	cmp	r3, #8
   4347c:	f000 80e4 	beq.w	43648 <getTrngSource+0x270>
   43480:	005b      	lsls	r3, r3, #1
   43482:	2200      	movs	r2, #0
   43484:	9308      	str	r3, [sp, #32]
   43486:	9200      	str	r2, [sp, #0]
   43488:	ab08      	add	r3, sp, #32
   4348a:	4629      	mov	r1, r5
   4348c:	4650      	mov	r0, sl
   4348e:	f7ff fe91 	bl	431b4 <startTrngHW>
   43492:	4b7a      	ldr	r3, [pc, #488]	; (4367c <getTrngSource+0x2a4>)
   43494:	4298      	cmp	r0, r3
   43496:	f000 80d3 	beq.w	43640 <getTrngSource+0x268>
   4349a:	b970      	cbnz	r0, 434ba <getTrngSource+0xe2>
   4349c:	f8da 2000 	ldr.w	r2, [sl]
   434a0:	0a13      	lsrs	r3, r2, #8
   434a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   434a6:	4313      	orrs	r3, r2
   434a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   434ac:	f8ca 3000 	str.w	r3, [sl]
   434b0:	9b05      	ldr	r3, [sp, #20]
   434b2:	3b01      	subs	r3, #1
   434b4:	9305      	str	r3, [sp, #20]
   434b6:	d1be      	bne.n	43436 <getTrngSource+0x5e>
   434b8:	2000      	movs	r0, #0
   434ba:	9003      	str	r0, [sp, #12]
   434bc:	f000 fc7c 	bl	43db8 <LLF_RND_TurnOffTrng>
   434c0:	9803      	ldr	r0, [sp, #12]
   434c2:	b011      	add	sp, #68	; 0x44
   434c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   434c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   434cc:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   434d0:	3601      	adds	r6, #1
   434d2:	bf14      	ite	ne
   434d4:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   434d8:	f44f 7004 	moveq.w	r0, #528	; 0x210
   434dc:	9006      	str	r0, [sp, #24]
   434de:	e786      	b.n	433ee <getTrngSource+0x16>
   434e0:	4867      	ldr	r0, [pc, #412]	; (43680 <getTrngSource+0x2a8>)
   434e2:	e7ea      	b.n	434ba <getTrngSource+0xe2>
   434e4:	4865      	ldr	r0, [pc, #404]	; (4367c <getTrngSource+0x2a4>)
   434e6:	e7c4      	b.n	43472 <getTrngSource+0x9a>
   434e8:	9808      	ldr	r0, [sp, #32]
   434ea:	4629      	mov	r1, r5
   434ec:	f000 fc3a 	bl	43d64 <LLF_RND_GetRoscSampleCnt>
   434f0:	2800      	cmp	r0, #0
   434f2:	d1be      	bne.n	43472 <getTrngSource+0x9a>
   434f4:	9b08      	ldr	r3, [sp, #32]
   434f6:	2b08      	cmp	r3, #8
   434f8:	f000 80a8 	beq.w	4364c <getTrngSource+0x274>
   434fc:	2b04      	cmp	r3, #4
   434fe:	f000 80a8 	beq.w	43652 <getTrngSource+0x27a>
   43502:	f1a3 0302 	sub.w	r3, r3, #2
   43506:	fab3 f383 	clz	r3, r3
   4350a:	095b      	lsrs	r3, r3, #5
   4350c:	9304      	str	r3, [sp, #16]
   4350e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   43512:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   43516:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   4351a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   4351c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   43520:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   43524:	4293      	cmp	r3, r2
   43526:	d1f6      	bne.n	43516 <getTrngSource+0x13e>
   43528:	f04f 0b00 	mov.w	fp, #0
   4352c:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   43530:	f04f 30ff 	mov.w	r0, #4294967295
   43534:	f7ff fd10 	bl	42f58 <CC_HalClearInterruptBit>
   43538:	f06f 031b 	mvn.w	r3, #27
   4353c:	4658      	mov	r0, fp
   4353e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   43542:	f7ff fd17 	bl	42f74 <CC_HalMaskInterrupt>
   43546:	9b04      	ldr	r3, [sp, #16]
   43548:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   4354c:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   43550:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   43554:	f7ff fd0e 	bl	42f74 <CC_HalMaskInterrupt>
   43558:	230a      	movs	r3, #10
   4355a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   4355e:	692b      	ldr	r3, [r5, #16]
   43560:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   43564:	fbab 2303 	umull	r2, r3, fp, r3
   43568:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   4356a:	091b      	lsrs	r3, r3, #4
   4356c:	fb02 f303 	mul.w	r3, r2, r3
   43570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   43574:	03db      	lsls	r3, r3, #15
   43576:	099b      	lsrs	r3, r3, #6
   43578:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   4357c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   43580:	f8da 3000 	ldr.w	r3, [sl]
   43584:	9908      	ldr	r1, [sp, #32]
   43586:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   4358a:	020b      	lsls	r3, r1, #8
   4358c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   43590:	4313      	orrs	r3, r2
   43592:	f8ca 3000 	str.w	r3, [sl]
   43596:	a809      	add	r0, sp, #36	; 0x24
   43598:	f000 fbd4 	bl	43d44 <LLF_RND_WaitRngInterrupt>
   4359c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4359e:	f003 031a 	and.w	r3, r3, #26
   435a2:	4303      	orrs	r3, r0
   435a4:	f47f af68 	bne.w	43478 <getTrngSource+0xa0>
   435a8:	fbab 3b06 	umull	r3, fp, fp, r6
   435ac:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   435b0:	930a      	str	r3, [sp, #40]	; 0x28
   435b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   435b6:	930b      	str	r3, [sp, #44]	; 0x2c
   435b8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   435bc:	930c      	str	r3, [sp, #48]	; 0x30
   435be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   435c2:	930d      	str	r3, [sp, #52]	; 0x34
   435c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   435c8:	930e      	str	r3, [sp, #56]	; 0x38
   435ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   435ce:	930f      	str	r3, [sp, #60]	; 0x3c
   435d0:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   435d4:	d101      	bne.n	435da <getTrngSource+0x202>
   435d6:	9b03      	ldr	r3, [sp, #12]
   435d8:	b993      	cbnz	r3, 43600 <getTrngSource+0x228>
   435da:	4640      	mov	r0, r8
   435dc:	2218      	movs	r2, #24
   435de:	a90a      	add	r1, sp, #40	; 0x28
   435e0:	3e18      	subs	r6, #24
   435e2:	f7ff fd47 	bl	43074 <CC_PalMemCopyPlat>
   435e6:	f108 0818 	add.w	r8, r8, #24
   435ea:	3701      	adds	r7, #1
   435ec:	b196      	cbz	r6, 43614 <getTrngSource+0x23c>
   435ee:	f000 fbe3 	bl	43db8 <LLF_RND_TurnOffTrng>
   435f2:	2300      	movs	r3, #0
   435f4:	9309      	str	r3, [sp, #36]	; 0x24
   435f6:	2d00      	cmp	r5, #0
   435f8:	f47f af32 	bne.w	43460 <getTrngSource+0x88>
   435fc:	4821      	ldr	r0, [pc, #132]	; (43684 <getTrngSource+0x2ac>)
   435fe:	e738      	b.n	43472 <getTrngSource+0x9a>
   43600:	4640      	mov	r0, r8
   43602:	1af6      	subs	r6, r6, r3
   43604:	461a      	mov	r2, r3
   43606:	a90a      	add	r1, sp, #40	; 0x28
   43608:	4498      	add	r8, r3
   4360a:	3701      	adds	r7, #1
   4360c:	f7ff fd32 	bl	43074 <CC_PalMemCopyPlat>
   43610:	2e00      	cmp	r6, #0
   43612:	d1ec      	bne.n	435ee <getTrngSource+0x216>
   43614:	9f06      	ldr	r7, [sp, #24]
   43616:	9e07      	ldr	r6, [sp, #28]
   43618:	696a      	ldr	r2, [r5, #20]
   4361a:	4639      	mov	r1, r7
   4361c:	4630      	mov	r0, r6
   4361e:	f7ff fe69 	bl	432f4 <LLF_RND_RepetitionCounterTest>
   43622:	69aa      	ldr	r2, [r5, #24]
   43624:	b940      	cbnz	r0, 43638 <getTrngSource+0x260>
   43626:	f44f 6380 	mov.w	r3, #1024	; 0x400
   4362a:	4639      	mov	r1, r7
   4362c:	4630      	mov	r0, r6
   4362e:	f7ff fe91 	bl	43354 <LLF_RND_AdaptiveProportionTest>
   43632:	2800      	cmp	r0, #0
   43634:	f43f af40 	beq.w	434b8 <getTrngSource+0xe0>
   43638:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   4363a:	2300      	movs	r3, #0
   4363c:	6013      	str	r3, [r2, #0]
   4363e:	e718      	b.n	43472 <getTrngSource+0x9a>
   43640:	6a2b      	ldr	r3, [r5, #32]
   43642:	2b00      	cmp	r3, #0
   43644:	f43f af39 	beq.w	434ba <getTrngSource+0xe2>
   43648:	480f      	ldr	r0, [pc, #60]	; (43688 <getTrngSource+0x2b0>)
   4364a:	e736      	b.n	434ba <getTrngSource+0xe2>
   4364c:	2303      	movs	r3, #3
   4364e:	9304      	str	r3, [sp, #16]
   43650:	e75d      	b.n	4350e <getTrngSource+0x136>
   43652:	2302      	movs	r3, #2
   43654:	9304      	str	r3, [sp, #16]
   43656:	e75a      	b.n	4350e <getTrngSource+0x136>
   43658:	9100      	str	r1, [sp, #0]
   4365a:	ab08      	add	r3, sp, #32
   4365c:	2201      	movs	r2, #1
   4365e:	4629      	mov	r1, r5
   43660:	4650      	mov	r0, sl
   43662:	f7ff fda7 	bl	431b4 <startTrngHW>
   43666:	2800      	cmp	r0, #0
   43668:	f43f aed5 	beq.w	43416 <getTrngSource+0x3e>
   4366c:	e725      	b.n	434ba <getTrngSource+0xe2>
   4366e:	bf00      	nop
   43670:	5002b000 	.word	0x5002b000
   43674:	aaaaaaab 	.word	0xaaaaaaab
   43678:	00f10c02 	.word	0x00f10c02
   4367c:	00f10c31 	.word	0x00f10c31
   43680:	00f10c30 	.word	0x00f10c30
   43684:	00f10c35 	.word	0x00f10c35
   43688:	00f10c32 	.word	0x00f10c32

0004368c <LLF_RND_GetTrngSource>:
   4368c:	b410      	push	{r4}
   4368e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   43692:	9401      	str	r4, [sp, #4]
   43694:	9c03      	ldr	r4, [sp, #12]
   43696:	9402      	str	r4, [sp, #8]
   43698:	2400      	movs	r4, #0
   4369a:	9403      	str	r4, [sp, #12]
   4369c:	bc10      	pop	{r4}
   4369e:	f7ff be9b 	b.w	433d8 <getTrngSource>
   436a2:	bf00      	nop

000436a4 <LLF_RND_RunTrngStartupTest>:
   436a4:	b510      	push	{r4, lr}
   436a6:	b086      	sub	sp, #24
   436a8:	ab05      	add	r3, sp, #20
   436aa:	2401      	movs	r4, #1
   436ac:	e9cd 2401 	strd	r2, r4, [sp, #4]
   436b0:	9300      	str	r3, [sp, #0]
   436b2:	2200      	movs	r2, #0
   436b4:	ab04      	add	r3, sp, #16
   436b6:	f7ff fe8f 	bl	433d8 <getTrngSource>
   436ba:	b006      	add	sp, #24
   436bc:	bd10      	pop	{r4, pc}
   436be:	bf00      	nop

000436c0 <mbedtls_hardware_poll>:
   436c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   436c2:	b087      	sub	sp, #28
   436c4:	2900      	cmp	r1, #0
   436c6:	d066      	beq.n	43796 <mbedtls_hardware_poll+0xd6>
   436c8:	461e      	mov	r6, r3
   436ca:	2b00      	cmp	r3, #0
   436cc:	d063      	beq.n	43796 <mbedtls_hardware_poll+0xd6>
   436ce:	4614      	mov	r4, r2
   436d0:	2a00      	cmp	r2, #0
   436d2:	d060      	beq.n	43796 <mbedtls_hardware_poll+0xd6>
   436d4:	4f31      	ldr	r7, [pc, #196]	; (4379c <mbedtls_hardware_poll+0xdc>)
   436d6:	460d      	mov	r5, r1
   436d8:	6838      	ldr	r0, [r7, #0]
   436da:	f04f 31ff 	mov.w	r1, #4294967295
   436de:	f7ff fce5 	bl	430ac <CC_PalMutexLock>
   436e2:	2800      	cmp	r0, #0
   436e4:	d14d      	bne.n	43782 <mbedtls_hardware_poll+0xc2>
   436e6:	2000      	movs	r0, #0
   436e8:	f7ff fd10 	bl	4310c <CC_PalPowerSaveModeSelect>
   436ec:	2800      	cmp	r0, #0
   436ee:	d144      	bne.n	4377a <mbedtls_hardware_poll+0xba>
   436f0:	482b      	ldr	r0, [pc, #172]	; (437a0 <mbedtls_hardware_poll+0xe0>)
   436f2:	f000 fa99 	bl	43c28 <RNG_PLAT_SetUserRngParameters>
   436f6:	4603      	mov	r3, r0
   436f8:	b1d8      	cbz	r0, 43732 <mbedtls_hardware_poll+0x72>
   436fa:	2001      	movs	r0, #1
   436fc:	f04f 35ff 	mov.w	r5, #4294967295
   43700:	f7ff fd04 	bl	4310c <CC_PalPowerSaveModeSelect>
   43704:	2800      	cmp	r0, #0
   43706:	d134      	bne.n	43772 <mbedtls_hardware_poll+0xb2>
   43708:	4826      	ldr	r0, [pc, #152]	; (437a4 <mbedtls_hardware_poll+0xe4>)
   4370a:	f44f 7108 	mov.w	r1, #544	; 0x220
   4370e:	f7fe fed9 	bl	424c4 <mbedtls_zeroize_internal>
   43712:	4825      	ldr	r0, [pc, #148]	; (437a8 <mbedtls_hardware_poll+0xe8>)
   43714:	2104      	movs	r1, #4
   43716:	f7fe fed5 	bl	424c4 <mbedtls_zeroize_internal>
   4371a:	4821      	ldr	r0, [pc, #132]	; (437a0 <mbedtls_hardware_poll+0xe0>)
   4371c:	2128      	movs	r1, #40	; 0x28
   4371e:	f7fe fed1 	bl	424c4 <mbedtls_zeroize_internal>
   43722:	6838      	ldr	r0, [r7, #0]
   43724:	f7ff fcca 	bl	430bc <CC_PalMutexUnlock>
   43728:	2800      	cmp	r0, #0
   4372a:	d12e      	bne.n	4378a <mbedtls_hardware_poll+0xca>
   4372c:	4628      	mov	r0, r5
   4372e:	b007      	add	sp, #28
   43730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   43732:	4a1c      	ldr	r2, [pc, #112]	; (437a4 <mbedtls_hardware_poll+0xe4>)
   43734:	9202      	str	r2, [sp, #8]
   43736:	aa05      	add	r2, sp, #20
   43738:	9201      	str	r2, [sp, #4]
   4373a:	aa04      	add	r2, sp, #16
   4373c:	9003      	str	r0, [sp, #12]
   4373e:	9200      	str	r2, [sp, #0]
   43740:	4917      	ldr	r1, [pc, #92]	; (437a0 <mbedtls_hardware_poll+0xe0>)
   43742:	4819      	ldr	r0, [pc, #100]	; (437a8 <mbedtls_hardware_poll+0xe8>)
   43744:	461a      	mov	r2, r3
   43746:	f7ff ffa1 	bl	4368c <LLF_RND_GetTrngSource>
   4374a:	4603      	mov	r3, r0
   4374c:	2800      	cmp	r0, #0
   4374e:	d1d4      	bne.n	436fa <mbedtls_hardware_poll+0x3a>
   43750:	4628      	mov	r0, r5
   43752:	461d      	mov	r5, r3
   43754:	9b05      	ldr	r3, [sp, #20]
   43756:	9904      	ldr	r1, [sp, #16]
   43758:	429c      	cmp	r4, r3
   4375a:	4622      	mov	r2, r4
   4375c:	bf28      	it	cs
   4375e:	461a      	movcs	r2, r3
   43760:	6032      	str	r2, [r6, #0]
   43762:	3108      	adds	r1, #8
   43764:	f7ff fc86 	bl	43074 <CC_PalMemCopyPlat>
   43768:	2001      	movs	r0, #1
   4376a:	f7ff fccf 	bl	4310c <CC_PalPowerSaveModeSelect>
   4376e:	2800      	cmp	r0, #0
   43770:	d0ca      	beq.n	43708 <mbedtls_hardware_poll+0x48>
   43772:	480e      	ldr	r0, [pc, #56]	; (437ac <mbedtls_hardware_poll+0xec>)
   43774:	f7fe fd8e 	bl	42294 <CC_PalAbort>
   43778:	e7c6      	b.n	43708 <mbedtls_hardware_poll+0x48>
   4377a:	480d      	ldr	r0, [pc, #52]	; (437b0 <mbedtls_hardware_poll+0xf0>)
   4377c:	f7fe fd8a 	bl	42294 <CC_PalAbort>
   43780:	e7b6      	b.n	436f0 <mbedtls_hardware_poll+0x30>
   43782:	480c      	ldr	r0, [pc, #48]	; (437b4 <mbedtls_hardware_poll+0xf4>)
   43784:	f7fe fd86 	bl	42294 <CC_PalAbort>
   43788:	e7ad      	b.n	436e6 <mbedtls_hardware_poll+0x26>
   4378a:	480b      	ldr	r0, [pc, #44]	; (437b8 <mbedtls_hardware_poll+0xf8>)
   4378c:	f7fe fd82 	bl	42294 <CC_PalAbort>
   43790:	4628      	mov	r0, r5
   43792:	b007      	add	sp, #28
   43794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   43796:	f04f 35ff 	mov.w	r5, #4294967295
   4379a:	e7c7      	b.n	4372c <mbedtls_hardware_poll+0x6c>
   4379c:	200008b4 	.word	0x200008b4
   437a0:	20003644 	.word	0x20003644
   437a4:	2000366c 	.word	0x2000366c
   437a8:	20003640 	.word	0x20003640
   437ac:	00049794 	.word	0x00049794
   437b0:	00049774 	.word	0x00049774
   437b4:	0004975c 	.word	0x0004975c
   437b8:	000497ec 	.word	0x000497ec

000437bc <cc_mbedtls_aes_init>:
   437bc:	b510      	push	{r4, lr}
   437be:	4604      	mov	r4, r0
   437c0:	b130      	cbz	r0, 437d0 <cc_mbedtls_aes_init+0x14>
   437c2:	2200      	movs	r2, #0
   437c4:	2301      	movs	r3, #1
   437c6:	6562      	str	r2, [r4, #84]	; 0x54
   437c8:	65a2      	str	r2, [r4, #88]	; 0x58
   437ca:	65e3      	str	r3, [r4, #92]	; 0x5c
   437cc:	6623      	str	r3, [r4, #96]	; 0x60
   437ce:	bd10      	pop	{r4, pc}
   437d0:	4801      	ldr	r0, [pc, #4]	; (437d8 <cc_mbedtls_aes_init+0x1c>)
   437d2:	f7fe fd5f 	bl	42294 <CC_PalAbort>
   437d6:	e7f4      	b.n	437c2 <cc_mbedtls_aes_init+0x6>
   437d8:	00049804 	.word	0x00049804

000437dc <cc_mbedtls_aes_free>:
   437dc:	b118      	cbz	r0, 437e6 <cc_mbedtls_aes_free+0xa>
   437de:	2274      	movs	r2, #116	; 0x74
   437e0:	2100      	movs	r1, #0
   437e2:	f7ff bc49 	b.w	43078 <CC_PalMemSetPlat>
   437e6:	4770      	bx	lr

000437e8 <cc_mbedtls_aes_setkey_enc>:
   437e8:	b190      	cbz	r0, 43810 <cc_mbedtls_aes_setkey_enc+0x28>
   437ea:	b1a1      	cbz	r1, 43816 <cc_mbedtls_aes_setkey_enc+0x2e>
   437ec:	b510      	push	{r4, lr}
   437ee:	2a80      	cmp	r2, #128	; 0x80
   437f0:	f04f 0400 	mov.w	r4, #0
   437f4:	6384      	str	r4, [r0, #56]	; 0x38
   437f6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   437fa:	d106      	bne.n	4380a <cc_mbedtls_aes_setkey_enc+0x22>
   437fc:	2210      	movs	r2, #16
   437fe:	6304      	str	r4, [r0, #48]	; 0x30
   43800:	4410      	add	r0, r2
   43802:	f7ff fc37 	bl	43074 <CC_PalMemCopyPlat>
   43806:	4620      	mov	r0, r4
   43808:	bd10      	pop	{r4, pc}
   4380a:	f06f 001f 	mvn.w	r0, #31
   4380e:	bd10      	pop	{r4, pc}
   43810:	f06f 0021 	mvn.w	r0, #33	; 0x21
   43814:	4770      	bx	lr
   43816:	f06f 001f 	mvn.w	r0, #31
   4381a:	4770      	bx	lr

0004381c <cc_mbedtls_aes_crypt_ecb>:
   4381c:	b328      	cbz	r0, 4386a <cc_mbedtls_aes_crypt_ecb+0x4e>
   4381e:	b322      	cbz	r2, 4386a <cc_mbedtls_aes_crypt_ecb+0x4e>
   43820:	b31b      	cbz	r3, 4386a <cc_mbedtls_aes_crypt_ecb+0x4e>
   43822:	2901      	cmp	r1, #1
   43824:	d821      	bhi.n	4386a <cc_mbedtls_aes_crypt_ecb+0x4e>
   43826:	b570      	push	{r4, r5, r6, lr}
   43828:	4604      	mov	r4, r0
   4382a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   4382c:	b086      	sub	sp, #24
   4382e:	d017      	beq.n	43860 <cc_mbedtls_aes_crypt_ecb+0x44>
   43830:	2901      	cmp	r1, #1
   43832:	d117      	bne.n	43864 <cc_mbedtls_aes_crypt_ecb+0x48>
   43834:	2510      	movs	r5, #16
   43836:	2100      	movs	r1, #0
   43838:	eb0d 0605 	add.w	r6, sp, r5
   4383c:	6361      	str	r1, [r4, #52]	; 0x34
   4383e:	4610      	mov	r0, r2
   43840:	9500      	str	r5, [sp, #0]
   43842:	9601      	str	r6, [sp, #4]
   43844:	aa02      	add	r2, sp, #8
   43846:	4629      	mov	r1, r5
   43848:	f000 fac2 	bl	43dd0 <SetDataBuffersInfo>
   4384c:	b950      	cbnz	r0, 43864 <cc_mbedtls_aes_crypt_ecb+0x48>
   4384e:	462b      	mov	r3, r5
   43850:	4632      	mov	r2, r6
   43852:	a902      	add	r1, sp, #8
   43854:	4620      	mov	r0, r4
   43856:	f000 fd43 	bl	442e0 <ProcessAesDrv>
   4385a:	b918      	cbnz	r0, 43864 <cc_mbedtls_aes_crypt_ecb+0x48>
   4385c:	b006      	add	sp, #24
   4385e:	bd70      	pop	{r4, r5, r6, pc}
   43860:	2900      	cmp	r1, #0
   43862:	d0e7      	beq.n	43834 <cc_mbedtls_aes_crypt_ecb+0x18>
   43864:	f06f 0021 	mvn.w	r0, #33	; 0x21
   43868:	e7f8      	b.n	4385c <cc_mbedtls_aes_crypt_ecb+0x40>
   4386a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   4386e:	4770      	bx	lr

00043870 <cc_mbedtls_sha256_init>:
   43870:	b510      	push	{r4, lr}
   43872:	4604      	mov	r4, r0
   43874:	b128      	cbz	r0, 43882 <cc_mbedtls_sha256_init+0x12>
   43876:	4620      	mov	r0, r4
   43878:	21f4      	movs	r1, #244	; 0xf4
   4387a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4387e:	f7ff bbfd 	b.w	4307c <CC_PalMemSetZeroPlat>
   43882:	4804      	ldr	r0, [pc, #16]	; (43894 <cc_mbedtls_sha256_init+0x24>)
   43884:	f7fe fd06 	bl	42294 <CC_PalAbort>
   43888:	4620      	mov	r0, r4
   4388a:	21f4      	movs	r1, #244	; 0xf4
   4388c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43890:	f7ff bbf4 	b.w	4307c <CC_PalMemSetZeroPlat>
   43894:	00049818 	.word	0x00049818

00043898 <cc_mbedtls_sha256_free>:
   43898:	b110      	cbz	r0, 438a0 <cc_mbedtls_sha256_free+0x8>
   4389a:	21f4      	movs	r1, #244	; 0xf4
   4389c:	f7fe be12 	b.w	424c4 <mbedtls_zeroize_internal>
   438a0:	4770      	bx	lr
   438a2:	bf00      	nop

000438a4 <cc_mbedtls_sha256_starts>:
   438a4:	b508      	push	{r3, lr}
   438a6:	b121      	cbz	r1, 438b2 <cc_mbedtls_sha256_starts+0xe>
   438a8:	2901      	cmp	r1, #1
   438aa:	d008      	beq.n	438be <cc_mbedtls_sha256_starts+0x1a>
   438ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   438b0:	bd08      	pop	{r3, pc}
   438b2:	2101      	movs	r1, #1
   438b4:	f000 f858 	bl	43968 <mbedtls_sha_starts_internal>
   438b8:	2800      	cmp	r0, #0
   438ba:	d1f7      	bne.n	438ac <cc_mbedtls_sha256_starts+0x8>
   438bc:	bd08      	pop	{r3, pc}
   438be:	2102      	movs	r1, #2
   438c0:	f000 f852 	bl	43968 <mbedtls_sha_starts_internal>
   438c4:	2800      	cmp	r0, #0
   438c6:	d0f9      	beq.n	438bc <cc_mbedtls_sha256_starts+0x18>
   438c8:	e7f0      	b.n	438ac <cc_mbedtls_sha256_starts+0x8>
   438ca:	bf00      	nop

000438cc <cc_mbedtls_sha256_update>:
   438cc:	b530      	push	{r4, r5, lr}
   438ce:	4605      	mov	r5, r0
   438d0:	1888      	adds	r0, r1, r2
   438d2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   438d6:	b0a1      	sub	sp, #132	; 0x84
   438d8:	460b      	mov	r3, r1
   438da:	4614      	mov	r4, r2
   438dc:	d801      	bhi.n	438e2 <cc_mbedtls_sha256_update+0x16>
   438de:	2a80      	cmp	r2, #128	; 0x80
   438e0:	d90c      	bls.n	438fc <cc_mbedtls_sha256_update+0x30>
   438e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   438e6:	d917      	bls.n	43918 <cc_mbedtls_sha256_update+0x4c>
   438e8:	4622      	mov	r2, r4
   438ea:	4619      	mov	r1, r3
   438ec:	4628      	mov	r0, r5
   438ee:	f000 f87d 	bl	439ec <mbedtls_sha_update_internal>
   438f2:	4604      	mov	r4, r0
   438f4:	b984      	cbnz	r4, 43918 <cc_mbedtls_sha256_update+0x4c>
   438f6:	4620      	mov	r0, r4
   438f8:	b021      	add	sp, #132	; 0x84
   438fa:	bd30      	pop	{r4, r5, pc}
   438fc:	4668      	mov	r0, sp
   438fe:	f7ff fbb9 	bl	43074 <CC_PalMemCopyPlat>
   43902:	4622      	mov	r2, r4
   43904:	4669      	mov	r1, sp
   43906:	4628      	mov	r0, r5
   43908:	f000 f870 	bl	439ec <mbedtls_sha_update_internal>
   4390c:	2180      	movs	r1, #128	; 0x80
   4390e:	4604      	mov	r4, r0
   43910:	4668      	mov	r0, sp
   43912:	f7ff fbb3 	bl	4307c <CC_PalMemSetZeroPlat>
   43916:	e7ed      	b.n	438f4 <cc_mbedtls_sha256_update+0x28>
   43918:	f06f 0436 	mvn.w	r4, #54	; 0x36
   4391c:	e7eb      	b.n	438f6 <cc_mbedtls_sha256_update+0x2a>
   4391e:	bf00      	nop

00043920 <cc_mbedtls_sha256_finish>:
   43920:	b570      	push	{r4, r5, r6, lr}
   43922:	b1e8      	cbz	r0, 43960 <cc_mbedtls_sha256_finish+0x40>
   43924:	460e      	mov	r6, r1
   43926:	b1d9      	cbz	r1, 43960 <cc_mbedtls_sha256_finish+0x40>
   43928:	4604      	mov	r4, r0
   4392a:	f000 f831 	bl	43990 <mbedtls_sha_finish_internal>
   4392e:	4605      	mov	r5, r0
   43930:	b9b0      	cbnz	r0, 43960 <cc_mbedtls_sha256_finish+0x40>
   43932:	6823      	ldr	r3, [r4, #0]
   43934:	2b01      	cmp	r3, #1
   43936:	d00b      	beq.n	43950 <cc_mbedtls_sha256_finish+0x30>
   43938:	2b02      	cmp	r3, #2
   4393a:	d001      	beq.n	43940 <cc_mbedtls_sha256_finish+0x20>
   4393c:	4628      	mov	r0, r5
   4393e:	bd70      	pop	{r4, r5, r6, pc}
   43940:	221c      	movs	r2, #28
   43942:	f104 0108 	add.w	r1, r4, #8
   43946:	4630      	mov	r0, r6
   43948:	f7ff fb94 	bl	43074 <CC_PalMemCopyPlat>
   4394c:	4628      	mov	r0, r5
   4394e:	bd70      	pop	{r4, r5, r6, pc}
   43950:	2220      	movs	r2, #32
   43952:	f104 0108 	add.w	r1, r4, #8
   43956:	4630      	mov	r0, r6
   43958:	f7ff fb8c 	bl	43074 <CC_PalMemCopyPlat>
   4395c:	4628      	mov	r0, r5
   4395e:	bd70      	pop	{r4, r5, r6, pc}
   43960:	f06f 0536 	mvn.w	r5, #54	; 0x36
   43964:	e7ea      	b.n	4393c <cc_mbedtls_sha256_finish+0x1c>
   43966:	bf00      	nop

00043968 <mbedtls_sha_starts_internal>:
   43968:	b178      	cbz	r0, 4398a <mbedtls_sha_starts_internal+0x22>
   4396a:	b538      	push	{r3, r4, r5, lr}
   4396c:	4604      	mov	r4, r0
   4396e:	460d      	mov	r5, r1
   43970:	21f0      	movs	r1, #240	; 0xf0
   43972:	f7ff fb83 	bl	4307c <CC_PalMemSetZeroPlat>
   43976:	2340      	movs	r3, #64	; 0x40
   43978:	6025      	str	r5, [r4, #0]
   4397a:	65e3      	str	r3, [r4, #92]	; 0x5c
   4397c:	4620      	mov	r0, r4
   4397e:	f000 fa5b 	bl	43e38 <InitHashDrv>
   43982:	3800      	subs	r0, #0
   43984:	bf18      	it	ne
   43986:	2001      	movne	r0, #1
   43988:	bd38      	pop	{r3, r4, r5, pc}
   4398a:	2001      	movs	r0, #1
   4398c:	4770      	bx	lr
   4398e:	bf00      	nop

00043990 <mbedtls_sha_finish_internal>:
   43990:	b570      	push	{r4, r5, r6, lr}
   43992:	6e05      	ldr	r5, [r0, #96]	; 0x60
   43994:	b0a4      	sub	sp, #144	; 0x90
   43996:	4604      	mov	r4, r0
   43998:	ae04      	add	r6, sp, #16
   4399a:	b9e5      	cbnz	r5, 439d6 <mbedtls_sha_finish_internal+0x46>
   4399c:	2201      	movs	r2, #1
   4399e:	2300      	movs	r3, #0
   439a0:	6062      	str	r2, [r4, #4]
   439a2:	4630      	mov	r0, r6
   439a4:	e9cd 3300 	strd	r3, r3, [sp]
   439a8:	aa02      	add	r2, sp, #8
   439aa:	4629      	mov	r1, r5
   439ac:	f000 fa10 	bl	43dd0 <SetDataBuffersInfo>
   439b0:	b110      	cbz	r0, 439b8 <mbedtls_sha_finish_internal+0x28>
   439b2:	2001      	movs	r0, #1
   439b4:	b024      	add	sp, #144	; 0x90
   439b6:	bd70      	pop	{r4, r5, r6, pc}
   439b8:	462a      	mov	r2, r5
   439ba:	a902      	add	r1, sp, #8
   439bc:	4620      	mov	r0, r4
   439be:	f000 fa63 	bl	43e88 <ProcessHashDrv>
   439c2:	2800      	cmp	r0, #0
   439c4:	d1f5      	bne.n	439b2 <mbedtls_sha_finish_internal+0x22>
   439c6:	4620      	mov	r0, r4
   439c8:	f000 fb74 	bl	440b4 <FinishHashDrv>
   439cc:	2800      	cmp	r0, #0
   439ce:	d1f0      	bne.n	439b2 <mbedtls_sha_finish_internal+0x22>
   439d0:	6620      	str	r0, [r4, #96]	; 0x60
   439d2:	b024      	add	sp, #144	; 0x90
   439d4:	bd70      	pop	{r4, r5, r6, pc}
   439d6:	2d80      	cmp	r5, #128	; 0x80
   439d8:	462a      	mov	r2, r5
   439da:	f100 0164 	add.w	r1, r0, #100	; 0x64
   439de:	bf28      	it	cs
   439e0:	2280      	movcs	r2, #128	; 0x80
   439e2:	4630      	mov	r0, r6
   439e4:	f7ff fb46 	bl	43074 <CC_PalMemCopyPlat>
   439e8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   439ea:	e7d7      	b.n	4399c <mbedtls_sha_finish_internal+0xc>

000439ec <mbedtls_sha_update_internal>:
   439ec:	2800      	cmp	r0, #0
   439ee:	f000 80ae 	beq.w	43b4e <mbedtls_sha_update_internal+0x162>
   439f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   439f6:	4614      	mov	r4, r2
   439f8:	b0a5      	sub	sp, #148	; 0x94
   439fa:	2a00      	cmp	r2, #0
   439fc:	d03d      	beq.n	43a7a <mbedtls_sha_update_internal+0x8e>
   439fe:	460f      	mov	r7, r1
   43a00:	2900      	cmp	r1, #0
   43a02:	d049      	beq.n	43a98 <mbedtls_sha_update_internal+0xac>
   43a04:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   43a08:	4605      	mov	r5, r0
   43a0a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   43a0c:	d320      	bcc.n	43a50 <mbedtls_sha_update_internal+0x64>
   43a0e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   43a12:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   43a16:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   43a18:	1a1a      	subs	r2, r3, r0
   43a1a:	fbb2 f1f3 	udiv	r1, r2, r3
   43a1e:	fb03 2211 	mls	r2, r3, r1, r2
   43a22:	2a00      	cmp	r2, #0
   43a24:	d165      	bne.n	43af2 <mbedtls_sha_update_internal+0x106>
   43a26:	4283      	cmp	r3, r0
   43a28:	46b9      	mov	r9, r7
   43a2a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   43a2e:	d072      	beq.n	43b16 <mbedtls_sha_update_internal+0x12a>
   43a30:	fbb6 fbf3 	udiv	fp, r6, r3
   43a34:	fb03 fb0b 	mul.w	fp, r3, fp
   43a38:	f1bb 0f00 	cmp.w	fp, #0
   43a3c:	d130      	bne.n	43aa0 <mbedtls_sha_update_internal+0xb4>
   43a3e:	2e00      	cmp	r6, #0
   43a40:	d145      	bne.n	43ace <mbedtls_sha_update_internal+0xe2>
   43a42:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   43a46:	3cff      	subs	r4, #255	; 0xff
   43a48:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   43a4c:	4447      	add	r7, r8
   43a4e:	d2e2      	bcs.n	43a16 <mbedtls_sha_update_internal+0x2a>
   43a50:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   43a52:	1a16      	subs	r6, r2, r0
   43a54:	fbb6 f3f2 	udiv	r3, r6, r2
   43a58:	fb02 6613 	mls	r6, r2, r3, r6
   43a5c:	42a6      	cmp	r6, r4
   43a5e:	bf28      	it	cs
   43a60:	4626      	movcs	r6, r4
   43a62:	2e00      	cmp	r6, #0
   43a64:	d175      	bne.n	43b52 <mbedtls_sha_update_internal+0x166>
   43a66:	4282      	cmp	r2, r0
   43a68:	f000 808d 	beq.w	43b86 <mbedtls_sha_update_internal+0x19a>
   43a6c:	fbb4 f6f2 	udiv	r6, r4, r2
   43a70:	fb02 f606 	mul.w	r6, r2, r6
   43a74:	b92e      	cbnz	r6, 43a82 <mbedtls_sha_update_internal+0x96>
   43a76:	2c00      	cmp	r4, #0
   43a78:	d179      	bne.n	43b6e <mbedtls_sha_update_internal+0x182>
   43a7a:	2000      	movs	r0, #0
   43a7c:	b025      	add	sp, #148	; 0x94
   43a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43a82:	2300      	movs	r3, #0
   43a84:	e9cd 3300 	strd	r3, r3, [sp]
   43a88:	aa02      	add	r2, sp, #8
   43a8a:	4631      	mov	r1, r6
   43a8c:	4638      	mov	r0, r7
   43a8e:	f000 f99f 	bl	43dd0 <SetDataBuffersInfo>
   43a92:	2800      	cmp	r0, #0
   43a94:	f000 8095 	beq.w	43bc2 <mbedtls_sha_update_internal+0x1d6>
   43a98:	2001      	movs	r0, #1
   43a9a:	b025      	add	sp, #148	; 0x94
   43a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43aa0:	2300      	movs	r3, #0
   43aa2:	e9cd 3300 	strd	r3, r3, [sp]
   43aa6:	aa02      	add	r2, sp, #8
   43aa8:	4659      	mov	r1, fp
   43aaa:	4648      	mov	r0, r9
   43aac:	f000 f990 	bl	43dd0 <SetDataBuffersInfo>
   43ab0:	2800      	cmp	r0, #0
   43ab2:	d1f1      	bne.n	43a98 <mbedtls_sha_update_internal+0xac>
   43ab4:	a902      	add	r1, sp, #8
   43ab6:	465a      	mov	r2, fp
   43ab8:	4628      	mov	r0, r5
   43aba:	f000 f9e5 	bl	43e88 <ProcessHashDrv>
   43abe:	2800      	cmp	r0, #0
   43ac0:	d1ea      	bne.n	43a98 <mbedtls_sha_update_internal+0xac>
   43ac2:	eba6 060b 	sub.w	r6, r6, fp
   43ac6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   43ac8:	44d9      	add	r9, fp
   43aca:	2e00      	cmp	r6, #0
   43acc:	d0b9      	beq.n	43a42 <mbedtls_sha_update_internal+0x56>
   43ace:	3019      	adds	r0, #25
   43ad0:	4649      	mov	r1, r9
   43ad2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   43ad6:	4632      	mov	r2, r6
   43ad8:	f7ff facc 	bl	43074 <CC_PalMemCopyPlat>
   43adc:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   43ae0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   43ae2:	3cff      	subs	r4, #255	; 0xff
   43ae4:	4430      	add	r0, r6
   43ae6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   43aea:	4447      	add	r7, r8
   43aec:	6628      	str	r0, [r5, #96]	; 0x60
   43aee:	d292      	bcs.n	43a16 <mbedtls_sha_update_internal+0x2a>
   43af0:	e7ae      	b.n	43a50 <mbedtls_sha_update_internal+0x64>
   43af2:	4542      	cmp	r2, r8
   43af4:	bf28      	it	cs
   43af6:	4642      	movcs	r2, r8
   43af8:	4450      	add	r0, sl
   43afa:	4639      	mov	r1, r7
   43afc:	4616      	mov	r6, r2
   43afe:	f7ff fab9 	bl	43074 <CC_PalMemCopyPlat>
   43b02:	6e28      	ldr	r0, [r5, #96]	; 0x60
   43b04:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   43b06:	4430      	add	r0, r6
   43b08:	4283      	cmp	r3, r0
   43b0a:	eb07 0906 	add.w	r9, r7, r6
   43b0e:	6628      	str	r0, [r5, #96]	; 0x60
   43b10:	eba8 0606 	sub.w	r6, r8, r6
   43b14:	d18c      	bne.n	43a30 <mbedtls_sha_update_internal+0x44>
   43b16:	2b80      	cmp	r3, #128	; 0x80
   43b18:	bf28      	it	cs
   43b1a:	2380      	movcs	r3, #128	; 0x80
   43b1c:	461a      	mov	r2, r3
   43b1e:	4651      	mov	r1, sl
   43b20:	a804      	add	r0, sp, #16
   43b22:	f7ff faa7 	bl	43074 <CC_PalMemCopyPlat>
   43b26:	2300      	movs	r3, #0
   43b28:	e9cd 3300 	strd	r3, r3, [sp]
   43b2c:	aa02      	add	r2, sp, #8
   43b2e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   43b30:	a804      	add	r0, sp, #16
   43b32:	f000 f94d 	bl	43dd0 <SetDataBuffersInfo>
   43b36:	2800      	cmp	r0, #0
   43b38:	d1ae      	bne.n	43a98 <mbedtls_sha_update_internal+0xac>
   43b3a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   43b3c:	a902      	add	r1, sp, #8
   43b3e:	4628      	mov	r0, r5
   43b40:	f000 f9a2 	bl	43e88 <ProcessHashDrv>
   43b44:	2800      	cmp	r0, #0
   43b46:	d1a7      	bne.n	43a98 <mbedtls_sha_update_internal+0xac>
   43b48:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   43b4a:	6628      	str	r0, [r5, #96]	; 0x60
   43b4c:	e770      	b.n	43a30 <mbedtls_sha_update_internal+0x44>
   43b4e:	2001      	movs	r0, #1
   43b50:	4770      	bx	lr
   43b52:	f105 0364 	add.w	r3, r5, #100	; 0x64
   43b56:	4639      	mov	r1, r7
   43b58:	4632      	mov	r2, r6
   43b5a:	4418      	add	r0, r3
   43b5c:	f7ff fa8a 	bl	43074 <CC_PalMemCopyPlat>
   43b60:	6e28      	ldr	r0, [r5, #96]	; 0x60
   43b62:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   43b64:	4430      	add	r0, r6
   43b66:	1ba4      	subs	r4, r4, r6
   43b68:	4437      	add	r7, r6
   43b6a:	6628      	str	r0, [r5, #96]	; 0x60
   43b6c:	e77b      	b.n	43a66 <mbedtls_sha_update_internal+0x7a>
   43b6e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   43b70:	3319      	adds	r3, #25
   43b72:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   43b76:	4622      	mov	r2, r4
   43b78:	4639      	mov	r1, r7
   43b7a:	f7ff fa7b 	bl	43074 <CC_PalMemCopyPlat>
   43b7e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   43b80:	4423      	add	r3, r4
   43b82:	662b      	str	r3, [r5, #96]	; 0x60
   43b84:	e779      	b.n	43a7a <mbedtls_sha_update_internal+0x8e>
   43b86:	2a80      	cmp	r2, #128	; 0x80
   43b88:	bf28      	it	cs
   43b8a:	2280      	movcs	r2, #128	; 0x80
   43b8c:	f105 0164 	add.w	r1, r5, #100	; 0x64
   43b90:	a804      	add	r0, sp, #16
   43b92:	f7ff fa6f 	bl	43074 <CC_PalMemCopyPlat>
   43b96:	2300      	movs	r3, #0
   43b98:	e9cd 3300 	strd	r3, r3, [sp]
   43b9c:	a804      	add	r0, sp, #16
   43b9e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   43ba0:	aa02      	add	r2, sp, #8
   43ba2:	f000 f915 	bl	43dd0 <SetDataBuffersInfo>
   43ba6:	2800      	cmp	r0, #0
   43ba8:	f47f af76 	bne.w	43a98 <mbedtls_sha_update_internal+0xac>
   43bac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   43bae:	a902      	add	r1, sp, #8
   43bb0:	4628      	mov	r0, r5
   43bb2:	f000 f969 	bl	43e88 <ProcessHashDrv>
   43bb6:	2800      	cmp	r0, #0
   43bb8:	f47f af6e 	bne.w	43a98 <mbedtls_sha_update_internal+0xac>
   43bbc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   43bbe:	6628      	str	r0, [r5, #96]	; 0x60
   43bc0:	e754      	b.n	43a6c <mbedtls_sha_update_internal+0x80>
   43bc2:	a902      	add	r1, sp, #8
   43bc4:	4632      	mov	r2, r6
   43bc6:	4628      	mov	r0, r5
   43bc8:	f000 f95e 	bl	43e88 <ProcessHashDrv>
   43bcc:	2800      	cmp	r0, #0
   43bce:	f47f af63 	bne.w	43a98 <mbedtls_sha_update_internal+0xac>
   43bd2:	4437      	add	r7, r6
   43bd4:	1ba4      	subs	r4, r4, r6
   43bd6:	e74e      	b.n	43a76 <mbedtls_sha_update_internal+0x8a>

00043bd8 <cc_mbedtls_sha256>:
   43bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43bda:	461c      	mov	r4, r3
   43bdc:	4605      	mov	r5, r0
   43bde:	4811      	ldr	r0, [pc, #68]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43be0:	460e      	mov	r6, r1
   43be2:	4617      	mov	r7, r2
   43be4:	f7ff fe44 	bl	43870 <cc_mbedtls_sha256_init>
   43be8:	4621      	mov	r1, r4
   43bea:	480e      	ldr	r0, [pc, #56]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43bec:	f7ff fe5a 	bl	438a4 <cc_mbedtls_sha256_starts>
   43bf0:	4604      	mov	r4, r0
   43bf2:	b120      	cbz	r0, 43bfe <cc_mbedtls_sha256+0x26>
   43bf4:	480b      	ldr	r0, [pc, #44]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43bf6:	f7ff fe4f 	bl	43898 <cc_mbedtls_sha256_free>
   43bfa:	4620      	mov	r0, r4
   43bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43bfe:	4809      	ldr	r0, [pc, #36]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43c00:	4632      	mov	r2, r6
   43c02:	4629      	mov	r1, r5
   43c04:	f7ff fe62 	bl	438cc <cc_mbedtls_sha256_update>
   43c08:	4604      	mov	r4, r0
   43c0a:	2800      	cmp	r0, #0
   43c0c:	d1f2      	bne.n	43bf4 <cc_mbedtls_sha256+0x1c>
   43c0e:	4639      	mov	r1, r7
   43c10:	4804      	ldr	r0, [pc, #16]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43c12:	f7ff fe85 	bl	43920 <cc_mbedtls_sha256_finish>
   43c16:	4604      	mov	r4, r0
   43c18:	4802      	ldr	r0, [pc, #8]	; (43c24 <cc_mbedtls_sha256+0x4c>)
   43c1a:	f7ff fe3d 	bl	43898 <cc_mbedtls_sha256_free>
   43c1e:	4620      	mov	r0, r4
   43c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43c22:	bf00      	nop
   43c24:	2000388c 	.word	0x2000388c

00043c28 <RNG_PLAT_SetUserRngParameters>:
   43c28:	b530      	push	{r4, r5, lr}
   43c2a:	b083      	sub	sp, #12
   43c2c:	231c      	movs	r3, #28
   43c2e:	a901      	add	r1, sp, #4
   43c30:	4605      	mov	r5, r0
   43c32:	9301      	str	r3, [sp, #4]
   43c34:	f000 f832 	bl	43c9c <CC_PalTrngParamGet>
   43c38:	4604      	mov	r4, r0
   43c3a:	b938      	cbnz	r0, 43c4c <RNG_PLAT_SetUserRngParameters+0x24>
   43c3c:	9b01      	ldr	r3, [sp, #4]
   43c3e:	2b1c      	cmp	r3, #28
   43c40:	d007      	beq.n	43c52 <RNG_PLAT_SetUserRngParameters+0x2a>
   43c42:	4c14      	ldr	r4, [pc, #80]	; (43c94 <RNG_PLAT_SetUserRngParameters+0x6c>)
   43c44:	211c      	movs	r1, #28
   43c46:	4628      	mov	r0, r5
   43c48:	f7ff fa18 	bl	4307c <CC_PalMemSetZeroPlat>
   43c4c:	4620      	mov	r0, r4
   43c4e:	b003      	add	sp, #12
   43c50:	bd30      	pop	{r4, r5, pc}
   43c52:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   43c56:	1e13      	subs	r3, r2, #0
   43c58:	bf18      	it	ne
   43c5a:	2301      	movne	r3, #1
   43c5c:	3900      	subs	r1, #0
   43c5e:	682a      	ldr	r2, [r5, #0]
   43c60:	bf18      	it	ne
   43c62:	2101      	movne	r1, #1
   43c64:	009b      	lsls	r3, r3, #2
   43c66:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   43c6a:	2a00      	cmp	r2, #0
   43c6c:	bf18      	it	ne
   43c6e:	f043 0301 	orrne.w	r3, r3, #1
   43c72:	68ea      	ldr	r2, [r5, #12]
   43c74:	2001      	movs	r0, #1
   43c76:	61e8      	str	r0, [r5, #28]
   43c78:	b92a      	cbnz	r2, 43c86 <RNG_PLAT_SetUserRngParameters+0x5e>
   43c7a:	e9c5 3408 	strd	r3, r4, [r5, #32]
   43c7e:	2b00      	cmp	r3, #0
   43c80:	d1e4      	bne.n	43c4c <RNG_PLAT_SetUserRngParameters+0x24>
   43c82:	4c05      	ldr	r4, [pc, #20]	; (43c98 <RNG_PLAT_SetUserRngParameters+0x70>)
   43c84:	e7de      	b.n	43c44 <RNG_PLAT_SetUserRngParameters+0x1c>
   43c86:	f043 0308 	orr.w	r3, r3, #8
   43c8a:	4620      	mov	r0, r4
   43c8c:	e9c5 3408 	strd	r3, r4, [r5, #32]
   43c90:	b003      	add	sp, #12
   43c92:	bd30      	pop	{r4, r5, pc}
   43c94:	00f00c37 	.word	0x00f00c37
   43c98:	00f00c0e 	.word	0x00f00c0e

00043c9c <CC_PalTrngParamGet>:
   43c9c:	b118      	cbz	r0, 43ca6 <CC_PalTrngParamGet+0xa>
   43c9e:	b111      	cbz	r1, 43ca6 <CC_PalTrngParamGet+0xa>
   43ca0:	680b      	ldr	r3, [r1, #0]
   43ca2:	2b1c      	cmp	r3, #28
   43ca4:	d001      	beq.n	43caa <CC_PalTrngParamGet+0xe>
   43ca6:	2001      	movs	r0, #1
   43ca8:	4770      	bx	lr
   43caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43cae:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   43cb2:	3201      	adds	r2, #1
   43cb4:	bf14      	ite	ne
   43cb6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   43cba:	f241 225c 	movweq	r2, #4700	; 0x125c
   43cbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43cc2:	6002      	str	r2, [r0, #0]
   43cc4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   43cc8:	3201      	adds	r2, #1
   43cca:	bf14      	ite	ne
   43ccc:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   43cd0:	f641 1264 	movweq	r2, #6500	; 0x1964
   43cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43cd8:	6042      	str	r2, [r0, #4]
   43cda:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   43cde:	3201      	adds	r2, #1
   43ce0:	bf14      	ite	ne
   43ce2:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   43ce6:	f640 62d8 	movweq	r2, #3800	; 0xed8
   43cea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43cee:	6082      	str	r2, [r0, #8]
   43cf0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   43cf4:	3201      	adds	r2, #1
   43cf6:	bf14      	ite	ne
   43cf8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   43cfc:	f241 3288 	movweq	r2, #5000	; 0x1388
   43d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43d04:	60c2      	str	r2, [r0, #12]
   43d06:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   43d0a:	3201      	adds	r2, #1
   43d0c:	bf14      	ite	ne
   43d0e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   43d12:	2290      	moveq	r2, #144	; 0x90
   43d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43d18:	6102      	str	r2, [r0, #16]
   43d1a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   43d1e:	3201      	adds	r2, #1
   43d20:	bf14      	ite	ne
   43d22:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   43d26:	2251      	moveq	r2, #81	; 0x51
   43d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43d2c:	6142      	str	r2, [r0, #20]
   43d2e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   43d32:	3201      	adds	r2, #1
   43d34:	bf14      	ite	ne
   43d36:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   43d3a:	f240 3337 	movweq	r3, #823	; 0x337
   43d3e:	6183      	str	r3, [r0, #24]
   43d40:	2000      	movs	r0, #0
   43d42:	4770      	bx	lr

00043d44 <LLF_RND_WaitRngInterrupt>:
   43d44:	b508      	push	{r3, lr}
   43d46:	4601      	mov	r1, r0
   43d48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   43d4c:	f7ff f91e 	bl	42f8c <CC_HalWaitInterruptRND>
   43d50:	4b03      	ldr	r3, [pc, #12]	; (43d60 <LLF_RND_WaitRngInterrupt+0x1c>)
   43d52:	2200      	movs	r2, #0
   43d54:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   43d58:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   43d5c:	bd08      	pop	{r3, pc}
   43d5e:	bf00      	nop
   43d60:	5002b000 	.word	0x5002b000

00043d64 <LLF_RND_GetRoscSampleCnt>:
   43d64:	3801      	subs	r0, #1
   43d66:	2807      	cmp	r0, #7
   43d68:	d805      	bhi.n	43d76 <LLF_RND_GetRoscSampleCnt+0x12>
   43d6a:	e8df f000 	tbb	[pc, r0]
   43d6e:	0e10      	.short	0x0e10
   43d70:	04040a04 	.word	0x04040a04
   43d74:	0604      	.short	0x0604
   43d76:	4807      	ldr	r0, [pc, #28]	; (43d94 <LLF_RND_GetRoscSampleCnt+0x30>)
   43d78:	4770      	bx	lr
   43d7a:	68cb      	ldr	r3, [r1, #12]
   43d7c:	624b      	str	r3, [r1, #36]	; 0x24
   43d7e:	2000      	movs	r0, #0
   43d80:	4770      	bx	lr
   43d82:	688b      	ldr	r3, [r1, #8]
   43d84:	624b      	str	r3, [r1, #36]	; 0x24
   43d86:	2000      	movs	r0, #0
   43d88:	4770      	bx	lr
   43d8a:	684b      	ldr	r3, [r1, #4]
   43d8c:	e7f6      	b.n	43d7c <LLF_RND_GetRoscSampleCnt+0x18>
   43d8e:	680b      	ldr	r3, [r1, #0]
   43d90:	e7f4      	b.n	43d7c <LLF_RND_GetRoscSampleCnt+0x18>
   43d92:	bf00      	nop
   43d94:	00f10c31 	.word	0x00f10c31

00043d98 <LLF_RND_GetFastestRosc>:
   43d98:	680b      	ldr	r3, [r1, #0]
   43d9a:	e002      	b.n	43da2 <LLF_RND_GetFastestRosc+0xa>
   43d9c:	2b08      	cmp	r3, #8
   43d9e:	600b      	str	r3, [r1, #0]
   43da0:	d806      	bhi.n	43db0 <LLF_RND_GetFastestRosc+0x18>
   43da2:	6a02      	ldr	r2, [r0, #32]
   43da4:	4213      	tst	r3, r2
   43da6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   43daa:	d0f7      	beq.n	43d9c <LLF_RND_GetFastestRosc+0x4>
   43dac:	2000      	movs	r0, #0
   43dae:	4770      	bx	lr
   43db0:	4800      	ldr	r0, [pc, #0]	; (43db4 <LLF_RND_GetFastestRosc+0x1c>)
   43db2:	4770      	bx	lr
   43db4:	00f10c31 	.word	0x00f10c31

00043db8 <LLF_RND_TurnOffTrng>:
   43db8:	4b04      	ldr	r3, [pc, #16]	; (43dcc <LLF_RND_TurnOffTrng+0x14>)
   43dba:	2200      	movs	r2, #0
   43dbc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   43dc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   43dc4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   43dc8:	f7ff b8c6 	b.w	42f58 <CC_HalClearInterruptBit>
   43dcc:	5002b000 	.word	0x5002b000

00043dd0 <SetDataBuffersInfo>:
   43dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   43dd2:	b083      	sub	sp, #12
   43dd4:	461d      	mov	r5, r3
   43dd6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   43dda:	f04f 0300 	mov.w	r3, #0
   43dde:	f88d 3007 	strb.w	r3, [sp, #7]
   43de2:	d324      	bcc.n	43e2e <SetDataBuffersInfo+0x5e>
   43de4:	468c      	mov	ip, r1
   43de6:	4484      	add	ip, r0
   43de8:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   43dec:	4604      	mov	r4, r0
   43dee:	d81e      	bhi.n	43e2e <SetDataBuffersInfo+0x5e>
   43df0:	4617      	mov	r7, r2
   43df2:	f10d 0307 	add.w	r3, sp, #7
   43df6:	2201      	movs	r2, #1
   43df8:	f000 fe64 	bl	44ac4 <CC_PalDataBufferAttrGet>
   43dfc:	4606      	mov	r6, r0
   43dfe:	b9b0      	cbnz	r0, 43e2e <SetDataBuffersInfo+0x5e>
   43e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   43e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   43e06:	603c      	str	r4, [r7, #0]
   43e08:	713b      	strb	r3, [r7, #4]
   43e0a:	b192      	cbz	r2, 43e32 <SetDataBuffersInfo+0x62>
   43e0c:	b14d      	cbz	r5, 43e22 <SetDataBuffersInfo+0x52>
   43e0e:	4602      	mov	r2, r0
   43e10:	9908      	ldr	r1, [sp, #32]
   43e12:	f10d 0307 	add.w	r3, sp, #7
   43e16:	4628      	mov	r0, r5
   43e18:	f000 fe54 	bl	44ac4 <CC_PalDataBufferAttrGet>
   43e1c:	b938      	cbnz	r0, 43e2e <SetDataBuffersInfo+0x5e>
   43e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   43e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
   43e24:	4630      	mov	r0, r6
   43e26:	6015      	str	r5, [r2, #0]
   43e28:	7113      	strb	r3, [r2, #4]
   43e2a:	b003      	add	sp, #12
   43e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   43e2e:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   43e32:	4630      	mov	r0, r6
   43e34:	b003      	add	sp, #12
   43e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00043e38 <InitHashDrv>:
   43e38:	b1d8      	cbz	r0, 43e72 <InitHashDrv+0x3a>
   43e3a:	b508      	push	{r3, lr}
   43e3c:	6803      	ldr	r3, [r0, #0]
   43e3e:	2b01      	cmp	r3, #1
   43e40:	d004      	beq.n	43e4c <InitHashDrv+0x14>
   43e42:	2b02      	cmp	r3, #2
   43e44:	d00f      	beq.n	43e66 <InitHashDrv+0x2e>
   43e46:	b143      	cbz	r3, 43e5a <InitHashDrv+0x22>
   43e48:	480b      	ldr	r0, [pc, #44]	; (43e78 <InitHashDrv+0x40>)
   43e4a:	bd08      	pop	{r3, pc}
   43e4c:	490b      	ldr	r1, [pc, #44]	; (43e7c <InitHashDrv+0x44>)
   43e4e:	2220      	movs	r2, #32
   43e50:	3008      	adds	r0, #8
   43e52:	f7ff f90f 	bl	43074 <CC_PalMemCopyPlat>
   43e56:	2000      	movs	r0, #0
   43e58:	bd08      	pop	{r3, pc}
   43e5a:	4909      	ldr	r1, [pc, #36]	; (43e80 <InitHashDrv+0x48>)
   43e5c:	2214      	movs	r2, #20
   43e5e:	3008      	adds	r0, #8
   43e60:	f7ff f908 	bl	43074 <CC_PalMemCopyPlat>
   43e64:	e7f7      	b.n	43e56 <InitHashDrv+0x1e>
   43e66:	4907      	ldr	r1, [pc, #28]	; (43e84 <InitHashDrv+0x4c>)
   43e68:	2220      	movs	r2, #32
   43e6a:	3008      	adds	r0, #8
   43e6c:	f7ff f902 	bl	43074 <CC_PalMemCopyPlat>
   43e70:	e7f1      	b.n	43e56 <InitHashDrv+0x1e>
   43e72:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   43e76:	4770      	bx	lr
   43e78:	00f30001 	.word	0x00f30001
   43e7c:	00049828 	.word	0x00049828
   43e80:	00049868 	.word	0x00049868
   43e84:	00049848 	.word	0x00049848

00043e88 <ProcessHashDrv>:
   43e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43e8c:	2900      	cmp	r1, #0
   43e8e:	f000 80f9 	beq.w	44084 <ProcessHashDrv+0x1fc>
   43e92:	4604      	mov	r4, r0
   43e94:	2800      	cmp	r0, #0
   43e96:	f000 80f9 	beq.w	4408c <ProcessHashDrv+0x204>
   43e9a:	6803      	ldr	r3, [r0, #0]
   43e9c:	4690      	mov	r8, r2
   43e9e:	460f      	mov	r7, r1
   43ea0:	2b00      	cmp	r3, #0
   43ea2:	f000 80c3 	beq.w	4402c <ProcessHashDrv+0x1a4>
   43ea6:	3b01      	subs	r3, #1
   43ea8:	2b01      	cmp	r3, #1
   43eaa:	f200 80d7 	bhi.w	4405c <ProcessHashDrv+0x1d4>
   43eae:	4879      	ldr	r0, [pc, #484]	; (44094 <ProcessHashDrv+0x20c>)
   43eb0:	f04f 31ff 	mov.w	r1, #4294967295
   43eb4:	f04f 0902 	mov.w	r9, #2
   43eb8:	f7ff f8f8 	bl	430ac <CC_PalMutexLock>
   43ebc:	2800      	cmp	r0, #0
   43ebe:	f040 80bf 	bne.w	44040 <ProcessHashDrv+0x1b8>
   43ec2:	2000      	movs	r0, #0
   43ec4:	f7ff f922 	bl	4310c <CC_PalPowerSaveModeSelect>
   43ec8:	4606      	mov	r6, r0
   43eca:	2800      	cmp	r0, #0
   43ecc:	f040 80c2 	bne.w	44054 <ProcessHashDrv+0x1cc>
   43ed0:	4a71      	ldr	r2, [pc, #452]	; (44098 <ProcessHashDrv+0x210>)
   43ed2:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   43ed6:	2b00      	cmp	r3, #0
   43ed8:	d1fb      	bne.n	43ed2 <ProcessHashDrv+0x4a>
   43eda:	4d6f      	ldr	r5, [pc, #444]	; (44098 <ProcessHashDrv+0x210>)
   43edc:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   43ee0:	2b00      	cmp	r3, #0
   43ee2:	d1fb      	bne.n	43edc <ProcessHashDrv+0x54>
   43ee4:	f04f 30ff 	mov.w	r0, #4294967295
   43ee8:	f7ff f836 	bl	42f58 <CC_HalClearInterruptBit>
   43eec:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   43ef0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   43ef4:	f7ff f83e 	bl	42f74 <CC_HalMaskInterrupt>
   43ef8:	2301      	movs	r3, #1
   43efa:	2207      	movs	r2, #7
   43efc:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   43f00:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   43f04:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   43f08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   43f0a:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   43f0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   43f10:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   43f14:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   43f18:	6823      	ldr	r3, [r4, #0]
   43f1a:	b15b      	cbz	r3, 43f34 <ProcessHashDrv+0xac>
   43f1c:	3b01      	subs	r3, #1
   43f1e:	2b01      	cmp	r3, #1
   43f20:	d818      	bhi.n	43f54 <ProcessHashDrv+0xcc>
   43f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   43f24:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   43f28:	6a23      	ldr	r3, [r4, #32]
   43f2a:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   43f2e:	69e3      	ldr	r3, [r4, #28]
   43f30:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   43f34:	4b58      	ldr	r3, [pc, #352]	; (44098 <ProcessHashDrv+0x210>)
   43f36:	69a2      	ldr	r2, [r4, #24]
   43f38:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   43f3c:	6962      	ldr	r2, [r4, #20]
   43f3e:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   43f42:	6922      	ldr	r2, [r4, #16]
   43f44:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   43f48:	68e2      	ldr	r2, [r4, #12]
   43f4a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   43f4e:	68a2      	ldr	r2, [r4, #8]
   43f50:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   43f54:	4a50      	ldr	r2, [pc, #320]	; (44098 <ProcessHashDrv+0x210>)
   43f56:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   43f5a:	2b00      	cmp	r3, #0
   43f5c:	d1fb      	bne.n	43f56 <ProcessHashDrv+0xce>
   43f5e:	f1b8 0f00 	cmp.w	r8, #0
   43f62:	d05f      	beq.n	44024 <ProcessHashDrv+0x19c>
   43f64:	6863      	ldr	r3, [r4, #4]
   43f66:	2b01      	cmp	r3, #1
   43f68:	bf08      	it	eq
   43f6a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   43f6e:	4b4a      	ldr	r3, [pc, #296]	; (44098 <ProcessHashDrv+0x210>)
   43f70:	683a      	ldr	r2, [r7, #0]
   43f72:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   43f76:	2040      	movs	r0, #64	; 0x40
   43f78:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   43f7c:	f7ff f800 	bl	42f80 <CC_HalWaitInterrupt>
   43f80:	4606      	mov	r6, r0
   43f82:	4a45      	ldr	r2, [pc, #276]	; (44098 <ProcessHashDrv+0x210>)
   43f84:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   43f88:	2b00      	cmp	r3, #0
   43f8a:	d1fb      	bne.n	43f84 <ProcessHashDrv+0xfc>
   43f8c:	4a42      	ldr	r2, [pc, #264]	; (44098 <ProcessHashDrv+0x210>)
   43f8e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   43f92:	2b00      	cmp	r3, #0
   43f94:	d1fb      	bne.n	43f8e <ProcessHashDrv+0x106>
   43f96:	6823      	ldr	r3, [r4, #0]
   43f98:	b15b      	cbz	r3, 43fb2 <ProcessHashDrv+0x12a>
   43f9a:	3b01      	subs	r3, #1
   43f9c:	2b01      	cmp	r3, #1
   43f9e:	d818      	bhi.n	43fd2 <ProcessHashDrv+0x14a>
   43fa0:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   43fa4:	6263      	str	r3, [r4, #36]	; 0x24
   43fa6:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   43faa:	6223      	str	r3, [r4, #32]
   43fac:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   43fb0:	61e3      	str	r3, [r4, #28]
   43fb2:	4b39      	ldr	r3, [pc, #228]	; (44098 <ProcessHashDrv+0x210>)
   43fb4:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   43fb8:	61a2      	str	r2, [r4, #24]
   43fba:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   43fbe:	6162      	str	r2, [r4, #20]
   43fc0:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   43fc4:	6122      	str	r2, [r4, #16]
   43fc6:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   43fca:	60e2      	str	r2, [r4, #12]
   43fcc:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   43fd0:	60a3      	str	r3, [r4, #8]
   43fd2:	4a31      	ldr	r2, [pc, #196]	; (44098 <ProcessHashDrv+0x210>)
   43fd4:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   43fd8:	64a1      	str	r1, [r4, #72]	; 0x48
   43fda:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   43fde:	64e1      	str	r1, [r4, #76]	; 0x4c
   43fe0:	2300      	movs	r3, #0
   43fe2:	2101      	movs	r1, #1
   43fe4:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   43fe8:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   43fec:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   43ff0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   43ff4:	2b00      	cmp	r3, #0
   43ff6:	d1fb      	bne.n	43ff0 <ProcessHashDrv+0x168>
   43ff8:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   43ffc:	2e00      	cmp	r6, #0
   43ffe:	d13b      	bne.n	44078 <ProcessHashDrv+0x1f0>
   44000:	4b25      	ldr	r3, [pc, #148]	; (44098 <ProcessHashDrv+0x210>)
   44002:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   44006:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   4400a:	f7fe ffb3 	bl	42f74 <CC_HalMaskInterrupt>
   4400e:	2001      	movs	r0, #1
   44010:	f7ff f87c 	bl	4310c <CC_PalPowerSaveModeSelect>
   44014:	bb60      	cbnz	r0, 44070 <ProcessHashDrv+0x1e8>
   44016:	481f      	ldr	r0, [pc, #124]	; (44094 <ProcessHashDrv+0x20c>)
   44018:	f7ff f850 	bl	430bc <CC_PalMutexUnlock>
   4401c:	bb10      	cbnz	r0, 44064 <ProcessHashDrv+0x1dc>
   4401e:	4630      	mov	r0, r6
   44020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44024:	2304      	movs	r3, #4
   44026:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   4402a:	e7aa      	b.n	43f82 <ProcessHashDrv+0xfa>
   4402c:	4819      	ldr	r0, [pc, #100]	; (44094 <ProcessHashDrv+0x20c>)
   4402e:	f04f 31ff 	mov.w	r1, #4294967295
   44032:	f04f 0901 	mov.w	r9, #1
   44036:	f7ff f839 	bl	430ac <CC_PalMutexLock>
   4403a:	2800      	cmp	r0, #0
   4403c:	f43f af41 	beq.w	43ec2 <ProcessHashDrv+0x3a>
   44040:	4816      	ldr	r0, [pc, #88]	; (4409c <ProcessHashDrv+0x214>)
   44042:	f7fe f927 	bl	42294 <CC_PalAbort>
   44046:	2000      	movs	r0, #0
   44048:	f7ff f860 	bl	4310c <CC_PalPowerSaveModeSelect>
   4404c:	4606      	mov	r6, r0
   4404e:	2800      	cmp	r0, #0
   44050:	f43f af3e 	beq.w	43ed0 <ProcessHashDrv+0x48>
   44054:	4812      	ldr	r0, [pc, #72]	; (440a0 <ProcessHashDrv+0x218>)
   44056:	f7fe f91d 	bl	42294 <CC_PalAbort>
   4405a:	e739      	b.n	43ed0 <ProcessHashDrv+0x48>
   4405c:	4e11      	ldr	r6, [pc, #68]	; (440a4 <ProcessHashDrv+0x21c>)
   4405e:	4630      	mov	r0, r6
   44060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44064:	4810      	ldr	r0, [pc, #64]	; (440a8 <ProcessHashDrv+0x220>)
   44066:	f7fe f915 	bl	42294 <CC_PalAbort>
   4406a:	4630      	mov	r0, r6
   4406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   44070:	480e      	ldr	r0, [pc, #56]	; (440ac <ProcessHashDrv+0x224>)
   44072:	f7fe f90f 	bl	42294 <CC_PalAbort>
   44076:	e7ce      	b.n	44016 <ProcessHashDrv+0x18e>
   44078:	2110      	movs	r1, #16
   4407a:	f104 0008 	add.w	r0, r4, #8
   4407e:	f7fe fffd 	bl	4307c <CC_PalMemSetZeroPlat>
   44082:	e7bd      	b.n	44000 <ProcessHashDrv+0x178>
   44084:	4e0a      	ldr	r6, [pc, #40]	; (440b0 <ProcessHashDrv+0x228>)
   44086:	4630      	mov	r0, r6
   44088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4408c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   44090:	e7c5      	b.n	4401e <ProcessHashDrv+0x196>
   44092:	bf00      	nop
   44094:	200008c4 	.word	0x200008c4
   44098:	5002b000 	.word	0x5002b000
   4409c:	0004975c 	.word	0x0004975c
   440a0:	00049774 	.word	0x00049774
   440a4:	00f30001 	.word	0x00f30001
   440a8:	000497b4 	.word	0x000497b4
   440ac:	00049794 	.word	0x00049794
   440b0:	00f30003 	.word	0x00f30003

000440b4 <FinishHashDrv>:
   440b4:	b398      	cbz	r0, 4411e <FinishHashDrv+0x6a>
   440b6:	b470      	push	{r4, r5, r6}
   440b8:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   440bc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   440c0:	ba26      	rev	r6, r4
   440c2:	ba0d      	rev	r5, r1
   440c4:	ba14      	rev	r4, r2
   440c6:	ba19      	rev	r1, r3
   440c8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   440cc:	ba12      	rev	r2, r2
   440ce:	e9c0 4104 	strd	r4, r1, [r0, #16]
   440d2:	6182      	str	r2, [r0, #24]
   440d4:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   440d8:	e9c0 6502 	strd	r6, r5, [r0, #8]
   440dc:	ba1b      	rev	r3, r3
   440de:	ba25      	rev	r5, r4
   440e0:	e9c0 3507 	strd	r3, r5, [r0, #28]
   440e4:	ba14      	rev	r4, r2
   440e6:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   440ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
   440ec:	ba12      	rev	r2, r2
   440ee:	ba09      	rev	r1, r1
   440f0:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   440f4:	62c2      	str	r2, [r0, #44]	; 0x2c
   440f6:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   440fa:	ba1b      	rev	r3, r3
   440fc:	ba25      	rev	r5, r4
   440fe:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   44102:	ba14      	rev	r4, r2
   44104:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   44108:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   4410a:	ba12      	rev	r2, r2
   4410c:	ba09      	rev	r1, r1
   4410e:	ba1b      	rev	r3, r3
   44110:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   44114:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   44118:	2000      	movs	r0, #0
   4411a:	bc70      	pop	{r4, r5, r6}
   4411c:	4770      	bx	lr
   4411e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   44122:	4770      	bx	lr

00044124 <LoadAesKey>:
   44124:	2800      	cmp	r0, #0
   44126:	d047      	beq.n	441b8 <LoadAesKey+0x94>
   44128:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   4412c:	2b00      	cmp	r3, #0
   4412e:	d034      	beq.n	4419a <LoadAesKey+0x76>
   44130:	2b03      	cmp	r3, #3
   44132:	b510      	push	{r4, lr}
   44134:	d013      	beq.n	4415e <LoadAesKey+0x3a>
   44136:	4822      	ldr	r0, [pc, #136]	; (441c0 <LoadAesKey+0x9c>)
   44138:	4c22      	ldr	r4, [pc, #136]	; (441c4 <LoadAesKey+0xa0>)
   4413a:	6822      	ldr	r2, [r4, #0]
   4413c:	4b22      	ldr	r3, [pc, #136]	; (441c8 <LoadAesKey+0xa4>)
   4413e:	6812      	ldr	r2, [r2, #0]
   44140:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   44144:	6822      	ldr	r2, [r4, #0]
   44146:	6852      	ldr	r2, [r2, #4]
   44148:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   4414c:	6822      	ldr	r2, [r4, #0]
   4414e:	6892      	ldr	r2, [r2, #8]
   44150:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   44154:	6822      	ldr	r2, [r4, #0]
   44156:	68d2      	ldr	r2, [r2, #12]
   44158:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   4415c:	bd10      	pop	{r4, pc}
   4415e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   44160:	6c00      	ldr	r0, [r0, #64]	; 0x40
   44162:	4c18      	ldr	r4, [pc, #96]	; (441c4 <LoadAesKey+0xa0>)
   44164:	f000 fba8 	bl	448b8 <kmu_validate_kdr_slot_and_size>
   44168:	2800      	cmp	r0, #0
   4416a:	d1e6      	bne.n	4413a <LoadAesKey+0x16>
   4416c:	6822      	ldr	r2, [r4, #0]
   4416e:	4b16      	ldr	r3, [pc, #88]	; (441c8 <LoadAesKey+0xa4>)
   44170:	6812      	ldr	r2, [r2, #0]
   44172:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   44176:	6822      	ldr	r2, [r4, #0]
   44178:	6852      	ldr	r2, [r2, #4]
   4417a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   4417e:	6822      	ldr	r2, [r4, #0]
   44180:	6892      	ldr	r2, [r2, #8]
   44182:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   44186:	6822      	ldr	r2, [r4, #0]
   44188:	68d2      	ldr	r2, [r2, #12]
   4418a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   4418e:	f000 fba1 	bl	448d4 <kmu_use_kdr_key>
   44192:	2800      	cmp	r0, #0
   44194:	d1d1      	bne.n	4413a <LoadAesKey+0x16>
   44196:	2000      	movs	r0, #0
   44198:	bd10      	pop	{r4, pc}
   4419a:	4b0b      	ldr	r3, [pc, #44]	; (441c8 <LoadAesKey+0xa4>)
   4419c:	6902      	ldr	r2, [r0, #16]
   4419e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   441a2:	6942      	ldr	r2, [r0, #20]
   441a4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   441a8:	6982      	ldr	r2, [r0, #24]
   441aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   441ae:	69c2      	ldr	r2, [r0, #28]
   441b0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   441b4:	2000      	movs	r0, #0
   441b6:	4770      	bx	lr
   441b8:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   441bc:	4770      	bx	lr
   441be:	bf00      	nop
   441c0:	00f10009 	.word	0x00f10009
   441c4:	200008b0 	.word	0x200008b0
   441c8:	5002b000 	.word	0x5002b000

000441cc <InitAes.part.0>:
   441cc:	4a37      	ldr	r2, [pc, #220]	; (442ac <InitAes.part.0+0xe0>)
   441ce:	b538      	push	{r3, r4, r5, lr}
   441d0:	4604      	mov	r4, r0
   441d2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   441d6:	2b00      	cmp	r3, #0
   441d8:	d1fb      	bne.n	441d2 <InitAes.part.0+0x6>
   441da:	4a34      	ldr	r2, [pc, #208]	; (442ac <InitAes.part.0+0xe0>)
   441dc:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   441e0:	2b00      	cmp	r3, #0
   441e2:	d1fb      	bne.n	441dc <InitAes.part.0+0x10>
   441e4:	4a31      	ldr	r2, [pc, #196]	; (442ac <InitAes.part.0+0xe0>)
   441e6:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   441ea:	2b00      	cmp	r3, #0
   441ec:	d1fb      	bne.n	441e6 <InitAes.part.0+0x1a>
   441ee:	4a2f      	ldr	r2, [pc, #188]	; (442ac <InitAes.part.0+0xe0>)
   441f0:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   441f4:	2b00      	cmp	r3, #0
   441f6:	d1fb      	bne.n	441f0 <InitAes.part.0+0x24>
   441f8:	4a2c      	ldr	r2, [pc, #176]	; (442ac <InitAes.part.0+0xe0>)
   441fa:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   441fe:	2b00      	cmp	r3, #0
   44200:	d1fb      	bne.n	441fa <InitAes.part.0+0x2e>
   44202:	4d2a      	ldr	r5, [pc, #168]	; (442ac <InitAes.part.0+0xe0>)
   44204:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   44208:	2b00      	cmp	r3, #0
   4420a:	d1fb      	bne.n	44204 <InitAes.part.0+0x38>
   4420c:	f04f 30ff 	mov.w	r0, #4294967295
   44210:	f7fe fea2 	bl	42f58 <CC_HalClearInterruptBit>
   44214:	6b63      	ldr	r3, [r4, #52]	; 0x34
   44216:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   4421a:	f023 0304 	bic.w	r3, r3, #4
   4421e:	2b03      	cmp	r3, #3
   44220:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   44222:	d039      	beq.n	44298 <InitAes.part.0+0xcc>
   44224:	2b01      	cmp	r3, #1
   44226:	bf0c      	ite	eq
   44228:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   4422c:	f020 0020 	bicne.w	r0, r0, #32
   44230:	f7fe fea0 	bl	42f74 <CC_HalMaskInterrupt>
   44234:	4a1d      	ldr	r2, [pc, #116]	; (442ac <InitAes.part.0+0xe0>)
   44236:	2301      	movs	r3, #1
   44238:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   4423c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   44240:	2b00      	cmp	r3, #0
   44242:	d1fb      	bne.n	4423c <InitAes.part.0+0x70>
   44244:	4a19      	ldr	r2, [pc, #100]	; (442ac <InitAes.part.0+0xe0>)
   44246:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   4424a:	2b00      	cmp	r3, #0
   4424c:	d1fb      	bne.n	44246 <InitAes.part.0+0x7a>
   4424e:	4917      	ldr	r1, [pc, #92]	; (442ac <InitAes.part.0+0xe0>)
   44250:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   44254:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   44258:	2b00      	cmp	r3, #0
   4425a:	d1fb      	bne.n	44254 <InitAes.part.0+0x88>
   4425c:	4a13      	ldr	r2, [pc, #76]	; (442ac <InitAes.part.0+0xe0>)
   4425e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   44262:	2b00      	cmp	r3, #0
   44264:	d1fb      	bne.n	4425e <InitAes.part.0+0x92>
   44266:	6b62      	ldr	r2, [r4, #52]	; 0x34
   44268:	f022 0104 	bic.w	r1, r2, #4
   4426c:	2903      	cmp	r1, #3
   4426e:	bf18      	it	ne
   44270:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   44272:	490e      	ldr	r1, [pc, #56]	; (442ac <InitAes.part.0+0xe0>)
   44274:	ea4f 0282 	mov.w	r2, r2, lsl #2
   44278:	bf18      	it	ne
   4427a:	f003 0301 	andne.w	r3, r3, #1
   4427e:	f002 021c 	and.w	r2, r2, #28
   44282:	431a      	orrs	r2, r3
   44284:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   44288:	6b63      	ldr	r3, [r4, #52]	; 0x34
   4428a:	2b07      	cmp	r3, #7
   4428c:	bf04      	itt	eq
   4428e:	2301      	moveq	r3, #1
   44290:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   44294:	2000      	movs	r0, #0
   44296:	bd38      	pop	{r3, r4, r5, pc}
   44298:	2b01      	cmp	r3, #1
   4429a:	bf0c      	ite	eq
   4429c:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   442a0:	f020 0010 	bicne.w	r0, r0, #16
   442a4:	f7fe fe66 	bl	42f74 <CC_HalMaskInterrupt>
   442a8:	e7c4      	b.n	44234 <InitAes.part.0+0x68>
   442aa:	bf00      	nop
   442ac:	5002b000 	.word	0x5002b000

000442b0 <write_invalid_key>:
   442b0:	4a09      	ldr	r2, [pc, #36]	; (442d8 <write_invalid_key+0x28>)
   442b2:	4b0a      	ldr	r3, [pc, #40]	; (442dc <write_invalid_key+0x2c>)
   442b4:	6811      	ldr	r1, [r2, #0]
   442b6:	6809      	ldr	r1, [r1, #0]
   442b8:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   442bc:	6811      	ldr	r1, [r2, #0]
   442be:	6849      	ldr	r1, [r1, #4]
   442c0:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   442c4:	6811      	ldr	r1, [r2, #0]
   442c6:	6889      	ldr	r1, [r1, #8]
   442c8:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   442cc:	6812      	ldr	r2, [r2, #0]
   442ce:	68d2      	ldr	r2, [r2, #12]
   442d0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   442d4:	4770      	bx	lr
   442d6:	bf00      	nop
   442d8:	200008b0 	.word	0x200008b0
   442dc:	5002b000 	.word	0x5002b000

000442e0 <ProcessAesDrv>:
   442e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   442e4:	b085      	sub	sp, #20
   442e6:	2900      	cmp	r1, #0
   442e8:	f000 80ec 	beq.w	444c4 <ProcessAesDrv+0x1e4>
   442ec:	4690      	mov	r8, r2
   442ee:	2a00      	cmp	r2, #0
   442f0:	f000 80e8 	beq.w	444c4 <ProcessAesDrv+0x1e4>
   442f4:	4605      	mov	r5, r0
   442f6:	2800      	cmp	r0, #0
   442f8:	f000 8129 	beq.w	4454e <ProcessAesDrv+0x26e>
   442fc:	4699      	mov	r9, r3
   442fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   44300:	460e      	mov	r6, r1
   44302:	2b00      	cmp	r3, #0
   44304:	d152      	bne.n	443ac <ProcessAesDrv+0xcc>
   44306:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   4430a:	d254      	bcs.n	443b6 <ProcessAesDrv+0xd6>
   4430c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   44310:	2b04      	cmp	r3, #4
   44312:	f000 80ff 	beq.w	44514 <ProcessAesDrv+0x234>
   44316:	2700      	movs	r7, #0
   44318:	48ad      	ldr	r0, [pc, #692]	; (445d0 <ProcessAesDrv+0x2f0>)
   4431a:	f04f 31ff 	mov.w	r1, #4294967295
   4431e:	f7fe fec5 	bl	430ac <CC_PalMutexLock>
   44322:	2800      	cmp	r0, #0
   44324:	f040 80d5 	bne.w	444d2 <ProcessAesDrv+0x1f2>
   44328:	2000      	movs	r0, #0
   4432a:	f7fe feef 	bl	4310c <CC_PalPowerSaveModeSelect>
   4432e:	2800      	cmp	r0, #0
   44330:	f040 80d8 	bne.w	444e4 <ProcessAesDrv+0x204>
   44334:	48a7      	ldr	r0, [pc, #668]	; (445d4 <ProcessAesDrv+0x2f4>)
   44336:	2301      	movs	r3, #1
   44338:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   4433c:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   44340:	2c00      	cmp	r4, #0
   44342:	d1fb      	bne.n	4433c <ProcessAesDrv+0x5c>
   44344:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   44346:	2b03      	cmp	r3, #3
   44348:	dc3a      	bgt.n	443c0 <ProcessAesDrv+0xe0>
   4434a:	2b00      	cmp	r3, #0
   4434c:	da3b      	bge.n	443c6 <ProcessAesDrv+0xe6>
   4434e:	4ca2      	ldr	r4, [pc, #648]	; (445d8 <ProcessAesDrv+0x2f8>)
   44350:	4aa0      	ldr	r2, [pc, #640]	; (445d4 <ProcessAesDrv+0x2f4>)
   44352:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   44356:	2b00      	cmp	r3, #0
   44358:	d1fb      	bne.n	44352 <ProcessAesDrv+0x72>
   4435a:	2f00      	cmp	r7, #0
   4435c:	f040 80d1 	bne.w	44502 <ProcessAesDrv+0x222>
   44360:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   44362:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   44364:	f023 0304 	bic.w	r3, r3, #4
   44368:	2b03      	cmp	r3, #3
   4436a:	4b9a      	ldr	r3, [pc, #616]	; (445d4 <ProcessAesDrv+0x2f4>)
   4436c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   44370:	f000 809f 	beq.w	444b2 <ProcessAesDrv+0x1d2>
   44374:	2a01      	cmp	r2, #1
   44376:	bf0c      	ite	eq
   44378:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   4437c:	f040 0020 	orrne.w	r0, r0, #32
   44380:	f7fe fdf8 	bl	42f74 <CC_HalMaskInterrupt>
   44384:	4b93      	ldr	r3, [pc, #588]	; (445d4 <ProcessAesDrv+0x2f4>)
   44386:	2200      	movs	r2, #0
   44388:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   4438c:	2001      	movs	r0, #1
   4438e:	f7fe febd 	bl	4310c <CC_PalPowerSaveModeSelect>
   44392:	2800      	cmp	r0, #0
   44394:	f040 80b1 	bne.w	444fa <ProcessAesDrv+0x21a>
   44398:	488d      	ldr	r0, [pc, #564]	; (445d0 <ProcessAesDrv+0x2f0>)
   4439a:	f7fe fe8f 	bl	430bc <CC_PalMutexUnlock>
   4439e:	2800      	cmp	r0, #0
   443a0:	f040 80a4 	bne.w	444ec <ProcessAesDrv+0x20c>
   443a4:	4620      	mov	r0, r4
   443a6:	b005      	add	sp, #20
   443a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   443ac:	2b01      	cmp	r3, #1
   443ae:	d1ad      	bne.n	4430c <ProcessAesDrv+0x2c>
   443b0:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   443b4:	d3aa      	bcc.n	4430c <ProcessAesDrv+0x2c>
   443b6:	4c89      	ldr	r4, [pc, #548]	; (445dc <ProcessAesDrv+0x2fc>)
   443b8:	4620      	mov	r0, r4
   443ba:	b005      	add	sp, #20
   443bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   443c0:	3b06      	subs	r3, #6
   443c2:	2b01      	cmp	r3, #1
   443c4:	d8c3      	bhi.n	4434e <ProcessAesDrv+0x6e>
   443c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   443c8:	2b01      	cmp	r3, #1
   443ca:	f200 80be 	bhi.w	4454a <ProcessAesDrv+0x26a>
   443ce:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   443d0:	2b01      	cmp	r3, #1
   443d2:	d87c      	bhi.n	444ce <ProcessAesDrv+0x1ee>
   443d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   443d6:	2b01      	cmp	r3, #1
   443d8:	f200 80e8 	bhi.w	445ac <ProcessAesDrv+0x2cc>
   443dc:	4628      	mov	r0, r5
   443de:	f7ff fef5 	bl	441cc <InitAes.part.0>
   443e2:	4604      	mov	r4, r0
   443e4:	2800      	cmp	r0, #0
   443e6:	d1b3      	bne.n	44350 <ProcessAesDrv+0x70>
   443e8:	4628      	mov	r0, r5
   443ea:	f7ff fe9b 	bl	44124 <LoadAesKey>
   443ee:	4604      	mov	r4, r0
   443f0:	2800      	cmp	r0, #0
   443f2:	d1ad      	bne.n	44350 <ProcessAesDrv+0x70>
   443f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   443f6:	2b07      	cmp	r3, #7
   443f8:	d8a9      	bhi.n	4434e <ProcessAesDrv+0x6e>
   443fa:	2201      	movs	r2, #1
   443fc:	409a      	lsls	r2, r3
   443fe:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   44402:	f040 80d5 	bne.w	445b0 <ProcessAesDrv+0x2d0>
   44406:	f012 0f44 	tst.w	r2, #68	; 0x44
   4440a:	f040 80ba 	bne.w	44582 <ProcessAesDrv+0x2a2>
   4440e:	07d2      	lsls	r2, r2, #31
   44410:	d59d      	bpl.n	4434e <ProcessAesDrv+0x6e>
   44412:	f023 0304 	bic.w	r3, r3, #4
   44416:	2b03      	cmp	r3, #3
   44418:	6832      	ldr	r2, [r6, #0]
   4441a:	d00d      	beq.n	44438 <ProcessAesDrv+0x158>
   4441c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   4441e:	f8d8 1000 	ldr.w	r1, [r8]
   44422:	2b01      	cmp	r3, #1
   44424:	4b6b      	ldr	r3, [pc, #428]	; (445d4 <ProcessAesDrv+0x2f4>)
   44426:	bf0b      	itete	eq
   44428:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   4442c:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   44430:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   44434:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   44438:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   4443a:	2b01      	cmp	r3, #1
   4443c:	4b65      	ldr	r3, [pc, #404]	; (445d4 <ProcessAesDrv+0x2f4>)
   4443e:	bf0b      	itete	eq
   44440:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   44444:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   44448:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   4444c:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   44450:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   44452:	f023 0304 	bic.w	r3, r3, #4
   44456:	2b03      	cmp	r3, #3
   44458:	f000 80a2 	beq.w	445a0 <ProcessAesDrv+0x2c0>
   4445c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   4445e:	2b01      	cmp	r3, #1
   44460:	bf14      	ite	ne
   44462:	2020      	movne	r0, #32
   44464:	2080      	moveq	r0, #128	; 0x80
   44466:	f7fe fd8b 	bl	42f80 <CC_HalWaitInterrupt>
   4446a:	4604      	mov	r4, r0
   4446c:	2800      	cmp	r0, #0
   4446e:	f47f af6f 	bne.w	44350 <ProcessAesDrv+0x70>
   44472:	4b58      	ldr	r3, [pc, #352]	; (445d4 <ProcessAesDrv+0x2f4>)
   44474:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   44478:	2c00      	cmp	r4, #0
   4447a:	d1fb      	bne.n	44474 <ProcessAesDrv+0x194>
   4447c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   4447e:	2907      	cmp	r1, #7
   44480:	d814      	bhi.n	444ac <ProcessAesDrv+0x1cc>
   44482:	2201      	movs	r2, #1
   44484:	408a      	lsls	r2, r1
   44486:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   4448a:	f040 80bb 	bne.w	44604 <ProcessAesDrv+0x324>
   4448e:	f012 0f44 	tst.w	r2, #68	; 0x44
   44492:	d00b      	beq.n	444ac <ProcessAesDrv+0x1cc>
   44494:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   44498:	602a      	str	r2, [r5, #0]
   4449a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   4449e:	606a      	str	r2, [r5, #4]
   444a0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   444a4:	60aa      	str	r2, [r5, #8]
   444a6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   444aa:	60eb      	str	r3, [r5, #12]
   444ac:	2301      	movs	r3, #1
   444ae:	65ab      	str	r3, [r5, #88]	; 0x58
   444b0:	e74e      	b.n	44350 <ProcessAesDrv+0x70>
   444b2:	2a01      	cmp	r2, #1
   444b4:	bf0c      	ite	eq
   444b6:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   444ba:	f040 0010 	orrne.w	r0, r0, #16
   444be:	f7fe fd59 	bl	42f74 <CC_HalMaskInterrupt>
   444c2:	e75f      	b.n	44384 <ProcessAesDrv+0xa4>
   444c4:	4c46      	ldr	r4, [pc, #280]	; (445e0 <ProcessAesDrv+0x300>)
   444c6:	4620      	mov	r0, r4
   444c8:	b005      	add	sp, #20
   444ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   444ce:	4c45      	ldr	r4, [pc, #276]	; (445e4 <ProcessAesDrv+0x304>)
   444d0:	e73e      	b.n	44350 <ProcessAesDrv+0x70>
   444d2:	4845      	ldr	r0, [pc, #276]	; (445e8 <ProcessAesDrv+0x308>)
   444d4:	f7fd fede 	bl	42294 <CC_PalAbort>
   444d8:	2000      	movs	r0, #0
   444da:	f7fe fe17 	bl	4310c <CC_PalPowerSaveModeSelect>
   444de:	2800      	cmp	r0, #0
   444e0:	f43f af28 	beq.w	44334 <ProcessAesDrv+0x54>
   444e4:	4841      	ldr	r0, [pc, #260]	; (445ec <ProcessAesDrv+0x30c>)
   444e6:	f7fd fed5 	bl	42294 <CC_PalAbort>
   444ea:	e723      	b.n	44334 <ProcessAesDrv+0x54>
   444ec:	4840      	ldr	r0, [pc, #256]	; (445f0 <ProcessAesDrv+0x310>)
   444ee:	f7fd fed1 	bl	42294 <CC_PalAbort>
   444f2:	4620      	mov	r0, r4
   444f4:	b005      	add	sp, #20
   444f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   444fa:	483e      	ldr	r0, [pc, #248]	; (445f4 <ProcessAesDrv+0x314>)
   444fc:	f7fd feca 	bl	42294 <CC_PalAbort>
   44500:	e74a      	b.n	44398 <ProcessAesDrv+0xb8>
   44502:	2304      	movs	r3, #4
   44504:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   44508:	2120      	movs	r1, #32
   4450a:	f105 0010 	add.w	r0, r5, #16
   4450e:	f7fe fdb5 	bl	4307c <CC_PalMemSetZeroPlat>
   44512:	e725      	b.n	44360 <ProcessAesDrv+0x80>
   44514:	6b29      	ldr	r1, [r5, #48]	; 0x30
   44516:	6c28      	ldr	r0, [r5, #64]	; 0x40
   44518:	f000 f9c0 	bl	4489c <kmu_validate_slot_and_size>
   4451c:	b998      	cbnz	r0, 44546 <ProcessAesDrv+0x266>
   4451e:	4f36      	ldr	r7, [pc, #216]	; (445f8 <ProcessAesDrv+0x318>)
   44520:	4c2c      	ldr	r4, [pc, #176]	; (445d4 <ProcessAesDrv+0x2f4>)
   44522:	683b      	ldr	r3, [r7, #0]
   44524:	681b      	ldr	r3, [r3, #0]
   44526:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   4452a:	683b      	ldr	r3, [r7, #0]
   4452c:	685b      	ldr	r3, [r3, #4]
   4452e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   44532:	683b      	ldr	r3, [r7, #0]
   44534:	689b      	ldr	r3, [r3, #8]
   44536:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   4453a:	683b      	ldr	r3, [r7, #0]
   4453c:	68db      	ldr	r3, [r3, #12]
   4453e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   44542:	6b29      	ldr	r1, [r5, #48]	; 0x30
   44544:	b131      	cbz	r1, 44554 <ProcessAesDrv+0x274>
   44546:	2701      	movs	r7, #1
   44548:	e6e6      	b.n	44318 <ProcessAesDrv+0x38>
   4454a:	4c2c      	ldr	r4, [pc, #176]	; (445fc <ProcessAesDrv+0x31c>)
   4454c:	e700      	b.n	44350 <ProcessAesDrv+0x70>
   4454e:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   44552:	e727      	b.n	443a4 <ProcessAesDrv+0xc4>
   44554:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   44556:	9301      	str	r3, [sp, #4]
   44558:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   4455a:	9300      	str	r3, [sp, #0]
   4455c:	f105 0a10 	add.w	sl, r5, #16
   44560:	f04f 0b10 	mov.w	fp, #16
   44564:	f8cd a008 	str.w	sl, [sp, #8]
   44568:	f8cd b00c 	str.w	fp, [sp, #12]
   4456c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   44570:	6c28      	ldr	r0, [r5, #64]	; 0x40
   44572:	f000 f9b9 	bl	448e8 <kmu_derive_cmac>
   44576:	2800      	cmp	r0, #0
   44578:	d151      	bne.n	4461e <ProcessAesDrv+0x33e>
   4457a:	2300      	movs	r3, #0
   4457c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   44580:	e7e1      	b.n	44546 <ProcessAesDrv+0x266>
   44582:	4b14      	ldr	r3, [pc, #80]	; (445d4 <ProcessAesDrv+0x2f4>)
   44584:	682a      	ldr	r2, [r5, #0]
   44586:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   4458a:	686a      	ldr	r2, [r5, #4]
   4458c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   44590:	68aa      	ldr	r2, [r5, #8]
   44592:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   44596:	68ea      	ldr	r2, [r5, #12]
   44598:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   4459c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4459e:	e738      	b.n	44412 <ProcessAesDrv+0x132>
   445a0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   445a2:	2b01      	cmp	r3, #1
   445a4:	bf14      	ite	ne
   445a6:	2010      	movne	r0, #16
   445a8:	2040      	moveq	r0, #64	; 0x40
   445aa:	e75c      	b.n	44466 <ProcessAesDrv+0x186>
   445ac:	4c14      	ldr	r4, [pc, #80]	; (44600 <ProcessAesDrv+0x320>)
   445ae:	e6cf      	b.n	44350 <ProcessAesDrv+0x70>
   445b0:	4b08      	ldr	r3, [pc, #32]	; (445d4 <ProcessAesDrv+0x2f4>)
   445b2:	682a      	ldr	r2, [r5, #0]
   445b4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   445b8:	686a      	ldr	r2, [r5, #4]
   445ba:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   445be:	68aa      	ldr	r2, [r5, #8]
   445c0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   445c4:	68ea      	ldr	r2, [r5, #12]
   445c6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   445ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   445cc:	e721      	b.n	44412 <ProcessAesDrv+0x132>
   445ce:	bf00      	nop
   445d0:	200008c4 	.word	0x200008c4
   445d4:	5002b000 	.word	0x5002b000
   445d8:	00f10001 	.word	0x00f10001
   445dc:	00f10005 	.word	0x00f10005
   445e0:	00f1000b 	.word	0x00f1000b
   445e4:	00f10003 	.word	0x00f10003
   445e8:	0004975c 	.word	0x0004975c
   445ec:	00049774 	.word	0x00049774
   445f0:	000497b4 	.word	0x000497b4
   445f4:	00049794 	.word	0x00049794
   445f8:	200008b0 	.word	0x200008b0
   445fc:	00f10002 	.word	0x00f10002
   44600:	00f10004 	.word	0x00f10004
   44604:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   44608:	602a      	str	r2, [r5, #0]
   4460a:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   4460e:	606a      	str	r2, [r5, #4]
   44610:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   44614:	60aa      	str	r2, [r5, #8]
   44616:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   4461a:	60eb      	str	r3, [r5, #12]
   4461c:	e746      	b.n	444ac <ProcessAesDrv+0x1cc>
   4461e:	683b      	ldr	r3, [r7, #0]
   44620:	681b      	ldr	r3, [r3, #0]
   44622:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   44626:	683b      	ldr	r3, [r7, #0]
   44628:	685b      	ldr	r3, [r3, #4]
   4462a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   4462e:	683b      	ldr	r3, [r7, #0]
   44630:	689b      	ldr	r3, [r3, #8]
   44632:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   44636:	683b      	ldr	r3, [r7, #0]
   44638:	68db      	ldr	r3, [r3, #12]
   4463a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   4463e:	4659      	mov	r1, fp
   44640:	4650      	mov	r0, sl
   44642:	f7fe fd1b 	bl	4307c <CC_PalMemSetZeroPlat>
   44646:	e798      	b.n	4457a <ProcessAesDrv+0x29a>

00044648 <FinishAesDrv>:
   44648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4464c:	b309      	cbz	r1, 44692 <FinishAesDrv+0x4a>
   4464e:	b302      	cbz	r2, 44692 <FinishAesDrv+0x4a>
   44650:	4604      	mov	r4, r0
   44652:	2800      	cmp	r0, #0
   44654:	f000 80af 	beq.w	447b6 <FinishAesDrv+0x16e>
   44658:	461d      	mov	r5, r3
   4465a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   4465c:	2b07      	cmp	r3, #7
   4465e:	460e      	mov	r6, r1
   44660:	d01b      	beq.n	4469a <FinishAesDrv+0x52>
   44662:	b95d      	cbnz	r5, 4467c <FinishAesDrv+0x34>
   44664:	2b03      	cmp	r3, #3
   44666:	d110      	bne.n	4468a <FinishAesDrv+0x42>
   44668:	6d83      	ldr	r3, [r0, #88]	; 0x58
   4466a:	b973      	cbnz	r3, 4468a <FinishAesDrv+0x42>
   4466c:	f100 0364 	add.w	r3, r0, #100	; 0x64
   44670:	6645      	str	r5, [r0, #100]	; 0x64
   44672:	6685      	str	r5, [r0, #104]	; 0x68
   44674:	66c5      	str	r5, [r0, #108]	; 0x6c
   44676:	6705      	str	r5, [r0, #112]	; 0x70
   44678:	600b      	str	r3, [r1, #0]
   4467a:	2510      	movs	r5, #16
   4467c:	462b      	mov	r3, r5
   4467e:	4631      	mov	r1, r6
   44680:	4620      	mov	r0, r4
   44682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   44686:	f7ff be2b 	b.w	442e0 <ProcessAesDrv>
   4468a:	462f      	mov	r7, r5
   4468c:	4638      	mov	r0, r7
   4468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   44692:	4f76      	ldr	r7, [pc, #472]	; (4486c <FinishAesDrv+0x224>)
   44694:	4638      	mov	r0, r7
   44696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4469a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   4469c:	2b00      	cmp	r3, #0
   4469e:	f040 808d 	bne.w	447bc <FinishAesDrv+0x174>
   446a2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   446a6:	f080 8090 	bcs.w	447ca <FinishAesDrv+0x182>
   446aa:	b91d      	cbnz	r5, 446b4 <FinishAesDrv+0x6c>
   446ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
   446ae:	2b00      	cmp	r3, #0
   446b0:	f040 808b 	bne.w	447ca <FinishAesDrv+0x182>
   446b4:	486e      	ldr	r0, [pc, #440]	; (44870 <FinishAesDrv+0x228>)
   446b6:	f04f 31ff 	mov.w	r1, #4294967295
   446ba:	f7fe fcf7 	bl	430ac <CC_PalMutexLock>
   446be:	2800      	cmp	r0, #0
   446c0:	f040 808f 	bne.w	447e2 <FinishAesDrv+0x19a>
   446c4:	2000      	movs	r0, #0
   446c6:	f7fe fd21 	bl	4310c <CC_PalPowerSaveModeSelect>
   446ca:	2800      	cmp	r0, #0
   446cc:	f040 8085 	bne.w	447da <FinishAesDrv+0x192>
   446d0:	4a68      	ldr	r2, [pc, #416]	; (44874 <FinishAesDrv+0x22c>)
   446d2:	2301      	movs	r3, #1
   446d4:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   446d8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   446dc:	2b00      	cmp	r3, #0
   446de:	d1fb      	bne.n	446d8 <FinishAesDrv+0x90>
   446e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   446e2:	2b03      	cmp	r3, #3
   446e4:	dd4f      	ble.n	44786 <FinishAesDrv+0x13e>
   446e6:	3b06      	subs	r3, #6
   446e8:	2b01      	cmp	r3, #1
   446ea:	d84e      	bhi.n	4478a <FinishAesDrv+0x142>
   446ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   446ee:	2b01      	cmp	r3, #1
   446f0:	d86d      	bhi.n	447ce <FinishAesDrv+0x186>
   446f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   446f4:	2b01      	cmp	r3, #1
   446f6:	d878      	bhi.n	447ea <FinishAesDrv+0x1a2>
   446f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   446fa:	2b01      	cmp	r3, #1
   446fc:	d877      	bhi.n	447ee <FinishAesDrv+0x1a6>
   446fe:	4620      	mov	r0, r4
   44700:	f7ff fd64 	bl	441cc <InitAes.part.0>
   44704:	4607      	mov	r7, r0
   44706:	2800      	cmp	r0, #0
   44708:	d140      	bne.n	4478c <FinishAesDrv+0x144>
   4470a:	4620      	mov	r0, r4
   4470c:	f7ff fd0a 	bl	44124 <LoadAesKey>
   44710:	4607      	mov	r7, r0
   44712:	2800      	cmp	r0, #0
   44714:	d13a      	bne.n	4478c <FinishAesDrv+0x144>
   44716:	6b62      	ldr	r2, [r4, #52]	; 0x34
   44718:	2a07      	cmp	r2, #7
   4471a:	d836      	bhi.n	4478a <FinishAesDrv+0x142>
   4471c:	2301      	movs	r3, #1
   4471e:	4093      	lsls	r3, r2
   44720:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   44724:	f040 8081 	bne.w	4482a <FinishAesDrv+0x1e2>
   44728:	f013 0f44 	tst.w	r3, #68	; 0x44
   4472c:	d16f      	bne.n	4480e <FinishAesDrv+0x1c6>
   4472e:	07db      	lsls	r3, r3, #31
   44730:	d52b      	bpl.n	4478a <FinishAesDrv+0x142>
   44732:	4b50      	ldr	r3, [pc, #320]	; (44874 <FinishAesDrv+0x22c>)
   44734:	2201      	movs	r2, #1
   44736:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   4473a:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   4473e:	6831      	ldr	r1, [r6, #0]
   44740:	2d00      	cmp	r5, #0
   44742:	d156      	bne.n	447f2 <FinishAesDrv+0x1aa>
   44744:	6da1      	ldr	r1, [r4, #88]	; 0x58
   44746:	b909      	cbnz	r1, 4474c <FinishAesDrv+0x104>
   44748:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   4474c:	4b49      	ldr	r3, [pc, #292]	; (44874 <FinishAesDrv+0x22c>)
   4474e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   44752:	2f00      	cmp	r7, #0
   44754:	d1fb      	bne.n	4474e <FinishAesDrv+0x106>
   44756:	6b61      	ldr	r1, [r4, #52]	; 0x34
   44758:	2907      	cmp	r1, #7
   4475a:	d817      	bhi.n	4478c <FinishAesDrv+0x144>
   4475c:	2201      	movs	r2, #1
   4475e:	408a      	lsls	r2, r1
   44760:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   44764:	d16f      	bne.n	44846 <FinishAesDrv+0x1fe>
   44766:	f012 0f44 	tst.w	r2, #68	; 0x44
   4476a:	d00f      	beq.n	4478c <FinishAesDrv+0x144>
   4476c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   44770:	6022      	str	r2, [r4, #0]
   44772:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   44776:	6062      	str	r2, [r4, #4]
   44778:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   4477c:	60a2      	str	r2, [r4, #8]
   4477e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   44782:	60e3      	str	r3, [r4, #12]
   44784:	e002      	b.n	4478c <FinishAesDrv+0x144>
   44786:	2b00      	cmp	r3, #0
   44788:	dab0      	bge.n	446ec <FinishAesDrv+0xa4>
   4478a:	4f3b      	ldr	r7, [pc, #236]	; (44878 <FinishAesDrv+0x230>)
   4478c:	4a39      	ldr	r2, [pc, #228]	; (44874 <FinishAesDrv+0x22c>)
   4478e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   44792:	2b00      	cmp	r3, #0
   44794:	d1fb      	bne.n	4478e <FinishAesDrv+0x146>
   44796:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   4479a:	2001      	movs	r0, #1
   4479c:	f7fe fcb6 	bl	4310c <CC_PalPowerSaveModeSelect>
   447a0:	b9b8      	cbnz	r0, 447d2 <FinishAesDrv+0x18a>
   447a2:	4833      	ldr	r0, [pc, #204]	; (44870 <FinishAesDrv+0x228>)
   447a4:	f7fe fc8a 	bl	430bc <CC_PalMutexUnlock>
   447a8:	2800      	cmp	r0, #0
   447aa:	f43f af6f 	beq.w	4468c <FinishAesDrv+0x44>
   447ae:	4833      	ldr	r0, [pc, #204]	; (4487c <FinishAesDrv+0x234>)
   447b0:	f7fd fd70 	bl	42294 <CC_PalAbort>
   447b4:	e76a      	b.n	4468c <FinishAesDrv+0x44>
   447b6:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   447ba:	e767      	b.n	4468c <FinishAesDrv+0x44>
   447bc:	2b01      	cmp	r3, #1
   447be:	f47f af74 	bne.w	446aa <FinishAesDrv+0x62>
   447c2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   447c6:	f4ff af70 	bcc.w	446aa <FinishAesDrv+0x62>
   447ca:	4f2d      	ldr	r7, [pc, #180]	; (44880 <FinishAesDrv+0x238>)
   447cc:	e75e      	b.n	4468c <FinishAesDrv+0x44>
   447ce:	4f2d      	ldr	r7, [pc, #180]	; (44884 <FinishAesDrv+0x23c>)
   447d0:	e7dc      	b.n	4478c <FinishAesDrv+0x144>
   447d2:	482d      	ldr	r0, [pc, #180]	; (44888 <FinishAesDrv+0x240>)
   447d4:	f7fd fd5e 	bl	42294 <CC_PalAbort>
   447d8:	e7e3      	b.n	447a2 <FinishAesDrv+0x15a>
   447da:	482c      	ldr	r0, [pc, #176]	; (4488c <FinishAesDrv+0x244>)
   447dc:	f7fd fd5a 	bl	42294 <CC_PalAbort>
   447e0:	e776      	b.n	446d0 <FinishAesDrv+0x88>
   447e2:	482b      	ldr	r0, [pc, #172]	; (44890 <FinishAesDrv+0x248>)
   447e4:	f7fd fd56 	bl	42294 <CC_PalAbort>
   447e8:	e76c      	b.n	446c4 <FinishAesDrv+0x7c>
   447ea:	4f2a      	ldr	r7, [pc, #168]	; (44894 <FinishAesDrv+0x24c>)
   447ec:	e7ce      	b.n	4478c <FinishAesDrv+0x144>
   447ee:	4f2a      	ldr	r7, [pc, #168]	; (44898 <FinishAesDrv+0x250>)
   447f0:	e7cc      	b.n	4478c <FinishAesDrv+0x144>
   447f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   447f4:	2a01      	cmp	r2, #1
   447f6:	d033      	beq.n	44860 <FinishAesDrv+0x218>
   447f8:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   447fc:	2010      	movs	r0, #16
   447fe:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   44802:	f7fe fbbd 	bl	42f80 <CC_HalWaitInterrupt>
   44806:	4607      	mov	r7, r0
   44808:	2800      	cmp	r0, #0
   4480a:	d09f      	beq.n	4474c <FinishAesDrv+0x104>
   4480c:	e7be      	b.n	4478c <FinishAesDrv+0x144>
   4480e:	4b19      	ldr	r3, [pc, #100]	; (44874 <FinishAesDrv+0x22c>)
   44810:	6822      	ldr	r2, [r4, #0]
   44812:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   44816:	6862      	ldr	r2, [r4, #4]
   44818:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   4481c:	68a2      	ldr	r2, [r4, #8]
   4481e:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   44822:	68e2      	ldr	r2, [r4, #12]
   44824:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   44828:	e783      	b.n	44732 <FinishAesDrv+0xea>
   4482a:	4b12      	ldr	r3, [pc, #72]	; (44874 <FinishAesDrv+0x22c>)
   4482c:	6822      	ldr	r2, [r4, #0]
   4482e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   44832:	6862      	ldr	r2, [r4, #4]
   44834:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   44838:	68a2      	ldr	r2, [r4, #8]
   4483a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   4483e:	68e2      	ldr	r2, [r4, #12]
   44840:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   44844:	e775      	b.n	44732 <FinishAesDrv+0xea>
   44846:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   4484a:	6022      	str	r2, [r4, #0]
   4484c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   44850:	6062      	str	r2, [r4, #4]
   44852:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   44856:	60a2      	str	r2, [r4, #8]
   44858:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   4485c:	60e3      	str	r3, [r4, #12]
   4485e:	e795      	b.n	4478c <FinishAesDrv+0x144>
   44860:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   44864:	2040      	movs	r0, #64	; 0x40
   44866:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   4486a:	e7ca      	b.n	44802 <FinishAesDrv+0x1ba>
   4486c:	00f1000b 	.word	0x00f1000b
   44870:	200008c4 	.word	0x200008c4
   44874:	5002b000 	.word	0x5002b000
   44878:	00f10001 	.word	0x00f10001
   4487c:	000497b4 	.word	0x000497b4
   44880:	00f10005 	.word	0x00f10005
   44884:	00f10002 	.word	0x00f10002
   44888:	00049794 	.word	0x00049794
   4488c:	00049774 	.word	0x00049774
   44890:	0004975c 	.word	0x0004975c
   44894:	00f10003 	.word	0x00f10003
   44898:	00f10004 	.word	0x00f10004

0004489c <kmu_validate_slot_and_size>:
   4489c:	b929      	cbnz	r1, 448aa <kmu_validate_slot_and_size+0xe>
   4489e:	4b04      	ldr	r3, [pc, #16]	; (448b0 <kmu_validate_slot_and_size+0x14>)
   448a0:	2800      	cmp	r0, #0
   448a2:	bf14      	ite	ne
   448a4:	4618      	movne	r0, r3
   448a6:	2000      	moveq	r0, #0
   448a8:	4770      	bx	lr
   448aa:	4802      	ldr	r0, [pc, #8]	; (448b4 <kmu_validate_slot_and_size+0x18>)
   448ac:	4770      	bx	lr
   448ae:	bf00      	nop
   448b0:	00f70001 	.word	0x00f70001
   448b4:	00f70003 	.word	0x00f70003

000448b8 <kmu_validate_kdr_slot_and_size>:
   448b8:	b929      	cbnz	r1, 448c6 <kmu_validate_kdr_slot_and_size+0xe>
   448ba:	4b04      	ldr	r3, [pc, #16]	; (448cc <kmu_validate_kdr_slot_and_size+0x14>)
   448bc:	2800      	cmp	r0, #0
   448be:	bf14      	ite	ne
   448c0:	4618      	movne	r0, r3
   448c2:	2000      	moveq	r0, #0
   448c4:	4770      	bx	lr
   448c6:	4802      	ldr	r0, [pc, #8]	; (448d0 <kmu_validate_kdr_slot_and_size+0x18>)
   448c8:	4770      	bx	lr
   448ca:	bf00      	nop
   448cc:	00f70001 	.word	0x00f70001
   448d0:	00f70003 	.word	0x00f70003

000448d4 <kmu_use_kdr_key>:
   448d4:	4b03      	ldr	r3, [pc, #12]	; (448e4 <kmu_use_kdr_key+0x10>)
   448d6:	2000      	movs	r0, #0
   448d8:	2201      	movs	r2, #1
   448da:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   448de:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   448e2:	4770      	bx	lr
   448e4:	5002b000 	.word	0x5002b000

000448e8 <kmu_derive_cmac>:
   448e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   448ec:	b0cc      	sub	sp, #304	; 0x130
   448ee:	2400      	movs	r4, #0
   448f0:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   448f2:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   448f6:	4682      	mov	sl, r0
   448f8:	4689      	mov	r9, r1
   448fa:	4616      	mov	r6, r2
   448fc:	4621      	mov	r1, r4
   448fe:	2274      	movs	r2, #116	; 0x74
   44900:	a80e      	add	r0, sp, #56	; 0x38
   44902:	461f      	mov	r7, r3
   44904:	f000 ff0f 	bl	45726 <memset>
   44908:	2280      	movs	r2, #128	; 0x80
   4490a:	4621      	mov	r1, r4
   4490c:	a82c      	add	r0, sp, #176	; 0xb0
   4490e:	942b      	str	r4, [sp, #172]	; 0xac
   44910:	f000 ff09 	bl	45726 <memset>
   44914:	2384      	movs	r3, #132	; 0x84
   44916:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   4491a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   4491e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   44922:	9305      	str	r3, [sp, #20]
   44924:	d863      	bhi.n	449ee <kmu_derive_cmac+0x106>
   44926:	f7ff fcc3 	bl	442b0 <write_invalid_key>
   4492a:	ab05      	add	r3, sp, #20
   4492c:	4630      	mov	r0, r6
   4492e:	ae2b      	add	r6, sp, #172	; 0xac
   44930:	9301      	str	r3, [sp, #4]
   44932:	9502      	str	r5, [sp, #8]
   44934:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   44938:	4639      	mov	r1, r7
   4493a:	9600      	str	r6, [sp, #0]
   4493c:	f000 f862 	bl	44a04 <UtilCmacBuildDataForDerivation>
   44940:	2800      	cmp	r0, #0
   44942:	d14f      	bne.n	449e4 <kmu_derive_cmac+0xfc>
   44944:	2303      	movs	r3, #3
   44946:	f88d 3013 	strb.w	r3, [sp, #19]
   4494a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   4494e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   44952:	2307      	movs	r3, #7
   44954:	2200      	movs	r2, #0
   44956:	901c      	str	r0, [sp, #112]	; 0x70
   44958:	2110      	movs	r1, #16
   4495a:	a80e      	add	r0, sp, #56	; 0x38
   4495c:	931b      	str	r3, [sp, #108]	; 0x6c
   4495e:	2401      	movs	r4, #1
   44960:	2301      	movs	r3, #1
   44962:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   44966:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   4496a:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   4496e:	9426      	str	r4, [sp, #152]	; 0x98
   44970:	f10d 0920 	add.w	r9, sp, #32
   44974:	f7fe fb82 	bl	4307c <CC_PalMemSetZeroPlat>
   44978:	2210      	movs	r2, #16
   4497a:	9200      	str	r2, [sp, #0]
   4497c:	9905      	ldr	r1, [sp, #20]
   4497e:	f8cd 9004 	str.w	r9, [sp, #4]
   44982:	ab0a      	add	r3, sp, #40	; 0x28
   44984:	4630      	mov	r0, r6
   44986:	aa06      	add	r2, sp, #24
   44988:	f7ff fa22 	bl	43dd0 <SetDataBuffersInfo>
   4498c:	4607      	mov	r7, r0
   4498e:	b170      	cbz	r0, 449ae <kmu_derive_cmac+0xc6>
   44990:	e01d      	b.n	449ce <kmu_derive_cmac+0xe6>
   44992:	a90e      	add	r1, sp, #56	; 0x38
   44994:	eb08 0007 	add.w	r0, r8, r7
   44998:	f7fe fb6c 	bl	43074 <CC_PalMemCopyPlat>
   4499c:	2110      	movs	r1, #16
   4499e:	a80e      	add	r0, sp, #56	; 0x38
   449a0:	f7fe fb6c 	bl	4307c <CC_PalMemSetZeroPlat>
   449a4:	3401      	adds	r4, #1
   449a6:	1bad      	subs	r5, r5, r6
   449a8:	4437      	add	r7, r6
   449aa:	b2e4      	uxtb	r4, r4
   449ac:	d024      	beq.n	449f8 <kmu_derive_cmac+0x110>
   449ae:	2d10      	cmp	r5, #16
   449b0:	464a      	mov	r2, r9
   449b2:	9b05      	ldr	r3, [sp, #20]
   449b4:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   449b8:	a906      	add	r1, sp, #24
   449ba:	a80e      	add	r0, sp, #56	; 0x38
   449bc:	462e      	mov	r6, r5
   449be:	bf28      	it	cs
   449c0:	2610      	movcs	r6, #16
   449c2:	f7ff fe41 	bl	44648 <FinishAesDrv>
   449c6:	4632      	mov	r2, r6
   449c8:	2800      	cmp	r0, #0
   449ca:	d0e2      	beq.n	44992 <kmu_derive_cmac+0xaa>
   449cc:	4607      	mov	r7, r0
   449ce:	a80e      	add	r0, sp, #56	; 0x38
   449d0:	2274      	movs	r2, #116	; 0x74
   449d2:	2100      	movs	r1, #0
   449d4:	f7fe fb50 	bl	43078 <CC_PalMemSetPlat>
   449d8:	f7ff fc6a 	bl	442b0 <write_invalid_key>
   449dc:	4638      	mov	r0, r7
   449de:	b04c      	add	sp, #304	; 0x130
   449e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   449e4:	4f05      	ldr	r7, [pc, #20]	; (449fc <kmu_derive_cmac+0x114>)
   449e6:	4638      	mov	r0, r7
   449e8:	b04c      	add	sp, #304	; 0x130
   449ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   449ee:	4f04      	ldr	r7, [pc, #16]	; (44a00 <kmu_derive_cmac+0x118>)
   449f0:	4638      	mov	r0, r7
   449f2:	b04c      	add	sp, #304	; 0x130
   449f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   449f8:	462f      	mov	r7, r5
   449fa:	e7e8      	b.n	449ce <kmu_derive_cmac+0xe6>
   449fc:	00f1000e 	.word	0x00f1000e
   44a00:	00f1000f 	.word	0x00f1000f

00044a04 <UtilCmacBuildDataForDerivation>:
   44a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44a08:	b082      	sub	sp, #8
   44a0a:	461e      	mov	r6, r3
   44a0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   44a0e:	2300      	movs	r3, #0
   44a10:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   44a14:	9301      	str	r3, [sp, #4]
   44a16:	d83e      	bhi.n	44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a18:	00ed      	lsls	r5, r5, #3
   44a1a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   44a1e:	4617      	mov	r7, r2
   44a20:	f101 32ff 	add.w	r2, r1, #4294967295
   44a24:	bf34      	ite	cc
   44a26:	2303      	movcc	r3, #3
   44a28:	2304      	movcs	r3, #4
   44a2a:	2a3f      	cmp	r2, #63	; 0x3f
   44a2c:	460c      	mov	r4, r1
   44a2e:	9300      	str	r3, [sp, #0]
   44a30:	d831      	bhi.n	44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a32:	b380      	cbz	r0, 44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a34:	bb66      	cbnz	r6, 44a90 <UtilCmacBuildDataForDerivation+0x8c>
   44a36:	9a08      	ldr	r2, [sp, #32]
   44a38:	b36a      	cbz	r2, 44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   44a3c:	6811      	ldr	r1, [r2, #0]
   44a3e:	b351      	cbz	r1, 44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a40:	19a2      	adds	r2, r4, r6
   44a42:	4413      	add	r3, r2
   44a44:	4299      	cmp	r1, r3
   44a46:	d326      	bcc.n	44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a48:	9b08      	ldr	r3, [sp, #32]
   44a4a:	4601      	mov	r1, r0
   44a4c:	4622      	mov	r2, r4
   44a4e:	1c58      	adds	r0, r3, #1
   44a50:	f7fe fb10 	bl	43074 <CC_PalMemCopyPlat>
   44a54:	9b08      	ldr	r3, [sp, #32]
   44a56:	f104 0802 	add.w	r8, r4, #2
   44a5a:	441c      	add	r4, r3
   44a5c:	2300      	movs	r3, #0
   44a5e:	7063      	strb	r3, [r4, #1]
   44a60:	bb26      	cbnz	r6, 44aac <UtilCmacBuildDataForDerivation+0xa8>
   44a62:	9b08      	ldr	r3, [sp, #32]
   44a64:	9500      	str	r5, [sp, #0]
   44a66:	2dff      	cmp	r5, #255	; 0xff
   44a68:	eb03 0008 	add.w	r0, r3, r8
   44a6c:	d917      	bls.n	44a9e <UtilCmacBuildDataForDerivation+0x9a>
   44a6e:	022b      	lsls	r3, r5, #8
   44a70:	b29b      	uxth	r3, r3
   44a72:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   44a76:	2202      	movs	r2, #2
   44a78:	a901      	add	r1, sp, #4
   44a7a:	9301      	str	r3, [sp, #4]
   44a7c:	f7fe fafa 	bl	43074 <CC_PalMemCopyPlat>
   44a80:	f108 0302 	add.w	r3, r8, #2
   44a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   44a86:	2000      	movs	r0, #0
   44a88:	6013      	str	r3, [r2, #0]
   44a8a:	b002      	add	sp, #8
   44a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   44a90:	b10f      	cbz	r7, 44a96 <UtilCmacBuildDataForDerivation+0x92>
   44a92:	2e40      	cmp	r6, #64	; 0x40
   44a94:	d9cf      	bls.n	44a36 <UtilCmacBuildDataForDerivation+0x32>
   44a96:	480a      	ldr	r0, [pc, #40]	; (44ac0 <UtilCmacBuildDataForDerivation+0xbc>)
   44a98:	b002      	add	sp, #8
   44a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   44a9e:	2201      	movs	r2, #1
   44aa0:	4669      	mov	r1, sp
   44aa2:	f7fe fae7 	bl	43074 <CC_PalMemCopyPlat>
   44aa6:	f108 0301 	add.w	r3, r8, #1
   44aaa:	e7eb      	b.n	44a84 <UtilCmacBuildDataForDerivation+0x80>
   44aac:	9b08      	ldr	r3, [sp, #32]
   44aae:	4632      	mov	r2, r6
   44ab0:	eb03 0008 	add.w	r0, r3, r8
   44ab4:	4639      	mov	r1, r7
   44ab6:	f7fe fadd 	bl	43074 <CC_PalMemCopyPlat>
   44aba:	44b0      	add	r8, r6
   44abc:	e7d1      	b.n	44a62 <UtilCmacBuildDataForDerivation+0x5e>
   44abe:	bf00      	nop
   44ac0:	80000006 	.word	0x80000006

00044ac4 <CC_PalDataBufferAttrGet>:
   44ac4:	2000      	movs	r0, #0
   44ac6:	7018      	strb	r0, [r3, #0]
   44ac8:	4770      	bx	lr
   44aca:	bf00      	nop

00044acc <arch_printk_char_out>:
}
   44acc:	2000      	movs	r0, #0
   44ace:	4770      	bx	lr

00044ad0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   44ad0:	b40f      	push	{r0, r1, r2, r3}
   44ad2:	b507      	push	{r0, r1, r2, lr}
   44ad4:	a904      	add	r1, sp, #16
   44ad6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   44ada:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   44adc:	f7f2 ffc4 	bl	37a68 <vprintk>

	va_end(ap);
}
   44ae0:	b003      	add	sp, #12
   44ae2:	f85d eb04 	ldr.w	lr, [sp], #4
   44ae6:	b004      	add	sp, #16
   44ae8:	4770      	bx	lr

00044aea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   44aea:	4604      	mov	r4, r0
   44aec:	b508      	push	{r3, lr}
   44aee:	4608      	mov	r0, r1
   44af0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   44af2:	461a      	mov	r2, r3
   44af4:	47a0      	blx	r4
	return z_impl_z_current_get();
   44af6:	f7fc fce9 	bl	414cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   44afa:	f7f4 fae9 	bl	390d0 <z_impl_k_thread_abort>

00044afe <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   44afe:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   44b02:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   44b04:	0840      	lsrs	r0, r0, #1
   44b06:	4770      	bx	lr

00044b08 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   44b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44b0a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   44b0c:	f7ff fff7 	bl	44afe <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   44b10:	fab0 f080 	clz	r0, r0
   44b14:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   44b18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   44b1c:	00ca      	lsls	r2, r1, #3
   44b1e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   44b22:	1d17      	adds	r7, r2, #4
{
   44b24:	460c      	mov	r4, r1
   44b26:	3206      	adds	r2, #6
   44b28:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   44b2a:	b956      	cbnz	r6, 44b42 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   44b2c:	2101      	movs	r1, #1
   44b2e:	fa01 f000 	lsl.w	r0, r1, r0
   44b32:	68d9      	ldr	r1, [r3, #12]
   44b34:	4301      	orrs	r1, r0
   44b36:	60d9      	str	r1, [r3, #12]
		b->next = c;
   44b38:	f8cc 4010 	str.w	r4, [ip, #16]
   44b3c:	53dd      	strh	r5, [r3, r7]
   44b3e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   44b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   44b42:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   44b44:	3104      	adds	r1, #4
   44b46:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   44b48:	53d8      	strh	r0, [r3, r7]
   44b4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   44b4e:	529e      	strh	r6, [r3, r2]
   44b50:	80c5      	strh	r5, [r0, #6]
   44b52:	525d      	strh	r5, [r3, r1]
   44b54:	e7f4      	b.n	44b40 <free_list_add+0x38>

00044b56 <free_list_remove_bidx>:
{
   44b56:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   44b58:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   44b5c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   44b5e:	4299      	cmp	r1, r3
   44b60:	f102 0104 	add.w	r1, r2, #4
   44b64:	d10a      	bne.n	44b7c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   44b66:	2301      	movs	r3, #1
   44b68:	fa03 f202 	lsl.w	r2, r3, r2
   44b6c:	68c3      	ldr	r3, [r0, #12]
   44b6e:	ea23 0302 	bic.w	r3, r3, r2
   44b72:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   44b74:	2300      	movs	r3, #0
   44b76:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   44b7a:	bd10      	pop	{r4, pc}
   44b7c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   44b7e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   44b82:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   44b86:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   44b8a:	80cb      	strh	r3, [r1, #6]
   44b8c:	8082      	strh	r2, [r0, #4]
}
   44b8e:	e7f4      	b.n	44b7a <free_list_remove_bidx+0x24>

00044b90 <free_list_remove>:
{
   44b90:	b508      	push	{r3, lr}
   44b92:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   44b94:	f7ff ffb3 	bl	44afe <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   44b98:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   44b9c:	f1c2 021f 	rsb	r2, r2, #31
   44ba0:	4618      	mov	r0, r3
}
   44ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   44ba6:	f7ff bfd6 	b.w	44b56 <free_list_remove_bidx>

00044baa <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   44baa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   44bae:	fab1 f581 	clz	r5, r1
   44bb2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   44bb6:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   44bba:	4603      	mov	r3, r0
	if (b->next) {
   44bbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   44bc0:	460e      	mov	r6, r1
	if (b->next) {
   44bc2:	b1c2      	cbz	r2, 44bf6 <alloc_chunk+0x4c>
   44bc4:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   44bc6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   44bca:	4618      	mov	r0, r3
   44bcc:	4621      	mov	r1, r4
   44bce:	f7ff ff96 	bl	44afe <chunk_size>
   44bd2:	42b0      	cmp	r0, r6
   44bd4:	d306      	bcc.n	44be4 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   44bd6:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   44bd8:	4618      	mov	r0, r3
   44bda:	f7ff ffbc 	bl	44b56 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   44bde:	4620      	mov	r0, r4
   44be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   44be4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   44be8:	3f01      	subs	r7, #1
   44bea:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   44bec:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   44bf0:	d001      	beq.n	44bf6 <alloc_chunk+0x4c>
   44bf2:	4282      	cmp	r2, r0
   44bf4:	d1e7      	bne.n	44bc6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   44bf6:	f1c5 0220 	rsb	r2, r5, #32
   44bfa:	f04f 34ff 	mov.w	r4, #4294967295
   44bfe:	4094      	lsls	r4, r2
   44c00:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   44c02:	4014      	ands	r4, r2
   44c04:	d0eb      	beq.n	44bde <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   44c06:	fa94 f2a4 	rbit	r2, r4
   44c0a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   44c0e:	1d11      	adds	r1, r2, #4
   44c10:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   44c14:	4621      	mov	r1, r4
   44c16:	e7df      	b.n	44bd8 <alloc_chunk+0x2e>

00044c18 <merge_chunks>:
{
   44c18:	b538      	push	{r3, r4, r5, lr}
   44c1a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   44c1c:	f7ff ff6f 	bl	44afe <chunk_size>
{
   44c20:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   44c22:	4604      	mov	r4, r0
   44c24:	4611      	mov	r1, r2
   44c26:	4618      	mov	r0, r3
   44c28:	f7ff ff69 	bl	44afe <chunk_size>
		((uint16_t *)cmem)[f] = val;
   44c2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   44c30:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44c32:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   44c34:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   44c36:	4618      	mov	r0, r3
   44c38:	f7ff ff61 	bl	44afe <chunk_size>
	void *cmem = &buf[c];
   44c3c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   44c3e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   44c42:	bd38      	pop	{r3, r4, r5, pc}

00044c44 <split_chunks>:
{
   44c44:	b538      	push	{r3, r4, r5, lr}
   44c46:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   44c48:	f7ff ff59 	bl	44afe <chunk_size>
{
   44c4c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   44c4e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   44c50:	1a51      	subs	r1, r2, r1
   44c52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   44c56:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44c58:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   44c5a:	8060      	strh	r0, [r4, #2]
   44c5c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44c60:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   44c62:	8044      	strh	r4, [r0, #2]
   44c64:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   44c68:	4618      	mov	r0, r3
   44c6a:	4611      	mov	r1, r2
   44c6c:	f7ff ff47 	bl	44afe <chunk_size>
	void *cmem = &buf[c];
   44c70:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   44c72:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   44c76:	bd38      	pop	{r3, r4, r5, pc}

00044c78 <free_chunk>:
{
   44c78:	b538      	push	{r3, r4, r5, lr}
   44c7a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   44c7c:	f7ff ff3f 	bl	44afe <chunk_size>
   44c80:	460c      	mov	r4, r1
   44c82:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   44c84:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   44c88:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   44c8a:	07da      	lsls	r2, r3, #31
   44c8c:	d40a      	bmi.n	44ca4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   44c8e:	4628      	mov	r0, r5
   44c90:	f7ff ff7e 	bl	44b90 <free_list_remove>
	return c + chunk_size(h, c);
   44c94:	4621      	mov	r1, r4
   44c96:	4628      	mov	r0, r5
   44c98:	f7ff ff31 	bl	44afe <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   44c9c:	1822      	adds	r2, r4, r0
   44c9e:	4628      	mov	r0, r5
   44ca0:	f7ff ffba 	bl	44c18 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   44ca4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   44ca8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   44caa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   44cae:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   44cb0:	07db      	lsls	r3, r3, #31
   44cb2:	d40c      	bmi.n	44cce <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   44cb4:	4628      	mov	r0, r5
   44cb6:	f7ff ff6b 	bl	44b90 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   44cba:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   44cbe:	4622      	mov	r2, r4
   44cc0:	1a61      	subs	r1, r4, r1
   44cc2:	4628      	mov	r0, r5
   44cc4:	f7ff ffa8 	bl	44c18 <merge_chunks>
   44cc8:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   44ccc:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   44cce:	4621      	mov	r1, r4
   44cd0:	4628      	mov	r0, r5
}
   44cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   44cd6:	f7ff bf17 	b.w	44b08 <free_list_add>

00044cda <sys_heap_free>:
	if (mem == NULL) {
   44cda:	b161      	cbz	r1, 44cf6 <sys_heap_free+0x1c>
   44cdc:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   44cde:	3904      	subs	r1, #4
   44ce0:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   44ce2:	f021 0307 	bic.w	r3, r1, #7
   44ce6:	4403      	add	r3, r0
	free_chunk(h, c);
   44ce8:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   44cea:	885a      	ldrh	r2, [r3, #2]
   44cec:	f022 0201 	bic.w	r2, r2, #1
   44cf0:	805a      	strh	r2, [r3, #2]
   44cf2:	f7ff bfc1 	b.w	44c78 <free_chunk>
}
   44cf6:	4770      	bx	lr

00044cf8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   44cf8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   44cfa:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   44cfc:	b909      	cbnz	r1, 44d02 <sys_heap_alloc+0xa>
		return NULL;
   44cfe:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   44d00:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   44d02:	68ab      	ldr	r3, [r5, #8]
   44d04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   44d08:	d9f9      	bls.n	44cfe <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   44d0a:	310b      	adds	r1, #11
   44d0c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   44d0e:	4621      	mov	r1, r4
   44d10:	4628      	mov	r0, r5
   44d12:	f7ff ff4a 	bl	44baa <alloc_chunk>
	if (c == 0U) {
   44d16:	4606      	mov	r6, r0
   44d18:	2800      	cmp	r0, #0
   44d1a:	d0f0      	beq.n	44cfe <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   44d1c:	4601      	mov	r1, r0
   44d1e:	4628      	mov	r0, r5
   44d20:	f7ff feed 	bl	44afe <chunk_size>
   44d24:	42a0      	cmp	r0, r4
   44d26:	d907      	bls.n	44d38 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   44d28:	1932      	adds	r2, r6, r4
   44d2a:	4628      	mov	r0, r5
   44d2c:	f7ff ff8a 	bl	44c44 <split_chunks>
		free_list_add(h, c + chunk_sz);
   44d30:	4611      	mov	r1, r2
   44d32:	4628      	mov	r0, r5
   44d34:	f7ff fee8 	bl	44b08 <free_list_add>
	void *cmem = &buf[c];
   44d38:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   44d3c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   44d3e:	8853      	ldrh	r3, [r2, #2]
   44d40:	f043 0301 	orr.w	r3, r3, #1
   44d44:	8053      	strh	r3, [r2, #2]
   44d46:	3004      	adds	r0, #4
	return mem;
   44d48:	e7da      	b.n	44d00 <sys_heap_alloc+0x8>

00044d4a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   44d4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   44d4e:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   44d52:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   44d56:	6806      	ldr	r6, [r0, #0]
{
   44d58:	460f      	mov	r7, r1
   44d5a:	4614      	mov	r4, r2
	if (align != rew) {
   44d5c:	d00c      	beq.n	44d78 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   44d5e:	424b      	negs	r3, r1
   44d60:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   44d62:	2b04      	cmp	r3, #4
   44d64:	461a      	mov	r2, r3
   44d66:	464f      	mov	r7, r9
   44d68:	bf28      	it	cs
   44d6a:	2204      	movcs	r2, #4
	rew = align & -align;
   44d6c:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   44d6e:	b964      	cbnz	r4, 44d8a <sys_heap_aligned_alloc+0x40>
		return NULL;
   44d70:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   44d72:	4628      	mov	r0, r5
   44d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   44d78:	2904      	cmp	r1, #4
   44d7a:	d804      	bhi.n	44d86 <sys_heap_aligned_alloc+0x3c>
}
   44d7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   44d80:	4611      	mov	r1, r2
   44d82:	f7ff bfb9 	b.w	44cf8 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   44d86:	2204      	movs	r2, #4
   44d88:	e7f1      	b.n	44d6e <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   44d8a:	68b3      	ldr	r3, [r6, #8]
   44d8c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   44d90:	d9ee      	bls.n	44d70 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   44d92:	f104 010b 	add.w	r1, r4, #11
   44d96:	4439      	add	r1, r7
   44d98:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   44d9a:	08c9      	lsrs	r1, r1, #3
   44d9c:	4630      	mov	r0, r6
   44d9e:	f7ff ff04 	bl	44baa <alloc_chunk>
	if (c0 == 0) {
   44da2:	4680      	mov	r8, r0
   44da4:	2800      	cmp	r0, #0
   44da6:	d0e3      	beq.n	44d70 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   44da8:	f109 0504 	add.w	r5, r9, #4
   44dac:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   44db0:	1e7b      	subs	r3, r7, #1
   44db2:	4435      	add	r5, r6
   44db4:	441d      	add	r5, r3
   44db6:	427f      	negs	r7, r7
   44db8:	403d      	ands	r5, r7
   44dba:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   44dbe:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   44dc0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   44dc2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   44dc4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   44dc6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   44dca:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   44dcc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   44dd0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   44dd4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   44dd8:	d208      	bcs.n	44dec <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   44dda:	4601      	mov	r1, r0
   44ddc:	463a      	mov	r2, r7
   44dde:	4630      	mov	r0, r6
   44de0:	f7ff ff30 	bl	44c44 <split_chunks>
		free_list_add(h, c0);
   44de4:	4641      	mov	r1, r8
   44de6:	4630      	mov	r0, r6
   44de8:	f7ff fe8e 	bl	44b08 <free_list_add>
	return c + chunk_size(h, c);
   44dec:	4639      	mov	r1, r7
   44dee:	4630      	mov	r0, r6
   44df0:	f7ff fe85 	bl	44afe <chunk_size>
   44df4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   44df6:	4284      	cmp	r4, r0
   44df8:	d207      	bcs.n	44e0a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   44dfa:	4630      	mov	r0, r6
   44dfc:	4622      	mov	r2, r4
   44dfe:	f7ff ff21 	bl	44c44 <split_chunks>
		free_list_add(h, c_end);
   44e02:	4621      	mov	r1, r4
   44e04:	4630      	mov	r0, r6
   44e06:	f7ff fe7f 	bl	44b08 <free_list_add>
	void *cmem = &buf[c];
   44e0a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   44e0e:	8873      	ldrh	r3, [r6, #2]
   44e10:	f043 0301 	orr.w	r3, r3, #1
   44e14:	8073      	strh	r3, [r6, #2]
   44e16:	e7ac      	b.n	44d72 <sys_heap_aligned_alloc+0x28>

00044e18 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   44e18:	3a04      	subs	r2, #4
{
   44e1a:	b4f0      	push	{r4, r5, r6, r7}
   44e1c:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   44e1e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   44e20:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   44e22:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   44e26:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   44e2a:	1a0e      	subs	r6, r1, r0
   44e2c:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   44e2e:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   44e30:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   44e34:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   44e36:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   44e3a:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   44e3c:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   44e3e:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   44e40:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   44e44:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   44e46:	f1c2 0220 	rsb	r2, r2, #32
   44e4a:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   44e4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   44e50:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   44e54:	4294      	cmp	r4, r2
   44e56:	d1fb      	bne.n	44e50 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44e58:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   44e5a:	f042 0201 	orr.w	r2, r2, #1
   44e5e:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   44e60:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   44e64:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44e66:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   44e68:	8007      	strh	r7, [r0, #0]
   44e6a:	8065      	strh	r5, [r4, #2]
   44e6c:	1984      	adds	r4, r0, r6
   44e6e:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   44e72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   44e76:	8067      	strh	r7, [r4, #2]
   44e78:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   44e7a:	885a      	ldrh	r2, [r3, #2]
   44e7c:	f042 0201 	orr.w	r2, r2, #1
   44e80:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   44e82:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   44e84:	f7ff be40 	b.w	44b08 <free_list_add>

00044e88 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44e88:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   44e8a:	f013 0307 	ands.w	r3, r3, #7
   44e8e:	d105      	bne.n	44e9c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   44e90:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   44e92:	2b00      	cmp	r3, #0
   44e94:	bf0c      	ite	eq
   44e96:	2000      	moveq	r0, #0
   44e98:	2003      	movne	r0, #3
   44e9a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   44e9c:	2b02      	cmp	r3, #2
   44e9e:	d105      	bne.n	44eac <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   44ea0:	8b40      	ldrh	r0, [r0, #26]
   44ea2:	fab0 f080 	clz	r0, r0
   44ea6:	0940      	lsrs	r0, r0, #5
   44ea8:	0080      	lsls	r0, r0, #2
   44eaa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   44eac:	2b01      	cmp	r3, #1
   44eae:	d105      	bne.n	44ebc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   44eb0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   44eb2:	2b00      	cmp	r3, #0
   44eb4:	bf0c      	ite	eq
   44eb6:	2000      	moveq	r0, #0
   44eb8:	2005      	movne	r0, #5
   44eba:	4770      	bx	lr
	int evt = EVT_NOP;
   44ebc:	2000      	movs	r0, #0
}
   44ebe:	4770      	bx	lr

00044ec0 <validate_args>:
{
   44ec0:	b510      	push	{r4, lr}
   44ec2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   44ec4:	b100      	cbz	r0, 44ec8 <validate_args+0x8>
   44ec6:	b911      	cbnz	r1, 44ece <validate_args+0xe>
		return -EINVAL;
   44ec8:	f06f 0015 	mvn.w	r0, #21
}
   44ecc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   44ece:	1d08      	adds	r0, r1, #4
   44ed0:	f000 f895 	bl	44ffe <sys_notify_validate>
	if ((rv == 0)
   44ed4:	2800      	cmp	r0, #0
   44ed6:	d1f9      	bne.n	44ecc <validate_args+0xc>
	    && ((cli->notify.flags
   44ed8:	68a3      	ldr	r3, [r4, #8]
   44eda:	2b03      	cmp	r3, #3
   44edc:	d9f6      	bls.n	44ecc <validate_args+0xc>
   44ede:	e7f3      	b.n	44ec8 <validate_args+0x8>

00044ee0 <notify_one>:
{
   44ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44ee4:	460d      	mov	r5, r1
   44ee6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   44ee8:	4619      	mov	r1, r3
   44eea:	1d28      	adds	r0, r5, #4
{
   44eec:	4690      	mov	r8, r2
   44eee:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   44ef0:	f000 f899 	bl	45026 <sys_notify_finalize>
	if (cb) {
   44ef4:	4604      	mov	r4, r0
   44ef6:	b138      	cbz	r0, 44f08 <notify_one+0x28>
		cb(mgr, cli, state, res);
   44ef8:	4633      	mov	r3, r6
   44efa:	4642      	mov	r2, r8
   44efc:	4629      	mov	r1, r5
   44efe:	4638      	mov	r0, r7
   44f00:	46a4      	mov	ip, r4
}
   44f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   44f06:	4760      	bx	ip
}
   44f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00044f0c <transition_complete>:
{
   44f0c:	b410      	push	{r4}
   44f0e:	f04f 0440 	mov.w	r4, #64	; 0x40
   44f12:	f3ef 8211 	mrs	r2, BASEPRI
   44f16:	f384 8812 	msr	BASEPRI_MAX, r4
   44f1a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   44f1e:	6141      	str	r1, [r0, #20]
}
   44f20:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   44f22:	2101      	movs	r1, #1
   44f24:	f7f2 bdae 	b.w	37a84 <process_event>

00044f28 <onoff_manager_init>:
{
   44f28:	b538      	push	{r3, r4, r5, lr}
   44f2a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   44f2c:	4605      	mov	r5, r0
   44f2e:	b158      	cbz	r0, 44f48 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   44f30:	b151      	cbz	r1, 44f48 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   44f32:	680b      	ldr	r3, [r1, #0]
   44f34:	b143      	cbz	r3, 44f48 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   44f36:	684b      	ldr	r3, [r1, #4]
   44f38:	b133      	cbz	r3, 44f48 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   44f3a:	221c      	movs	r2, #28
   44f3c:	2100      	movs	r1, #0
   44f3e:	f000 fbf2 	bl	45726 <memset>
   44f42:	612c      	str	r4, [r5, #16]
	return 0;
   44f44:	2000      	movs	r0, #0
}
   44f46:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   44f48:	f06f 0015 	mvn.w	r0, #21
   44f4c:	e7fb      	b.n	44f46 <onoff_manager_init+0x1e>

00044f4e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   44f4e:	b570      	push	{r4, r5, r6, lr}
   44f50:	4605      	mov	r5, r0
   44f52:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   44f54:	f7ff ffb4 	bl	44ec0 <validate_args>

	if (rv < 0) {
   44f58:	1e04      	subs	r4, r0, #0
   44f5a:	db15      	blt.n	44f88 <onoff_request+0x3a>
   44f5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   44f60:	f3ef 8211 	mrs	r2, BASEPRI
   44f64:	f383 8812 	msr	BASEPRI_MAX, r3
   44f68:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   44f6c:	8b6b      	ldrh	r3, [r5, #26]
   44f6e:	8b2c      	ldrh	r4, [r5, #24]
   44f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   44f74:	428b      	cmp	r3, r1
   44f76:	f004 0407 	and.w	r4, r4, #7
   44f7a:	d107      	bne.n	44f8c <onoff_request+0x3e>
	__asm__ volatile(
   44f7c:	f382 8811 	msr	BASEPRI, r2
   44f80:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   44f84:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   44f88:	4620      	mov	r0, r4
   44f8a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   44f8c:	2c02      	cmp	r4, #2
   44f8e:	d10c      	bne.n	44faa <onoff_request+0x5c>
		mgr->refs += 1U;
   44f90:	3301      	adds	r3, #1
   44f92:	836b      	strh	r3, [r5, #26]
   44f94:	f382 8811 	msr	BASEPRI, r2
   44f98:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   44f9c:	2300      	movs	r3, #0
   44f9e:	4622      	mov	r2, r4
   44fa0:	4631      	mov	r1, r6
   44fa2:	4628      	mov	r0, r5
   44fa4:	f7ff ff9c 	bl	44ee0 <notify_one>
   44fa8:	e7ee      	b.n	44f88 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   44faa:	2c06      	cmp	r4, #6
   44fac:	d814      	bhi.n	44fd8 <onoff_request+0x8a>
   44fae:	e8df f004 	tbb	[pc, r4]
   44fb2:	1304      	.short	0x1304
   44fb4:	1a041313 	.word	0x1a041313
   44fb8:	04          	.byte	0x04
   44fb9:	00          	.byte	0x00
	parent->next = child;
   44fba:	2300      	movs	r3, #0
   44fbc:	6033      	str	r3, [r6, #0]
	return list->tail;
   44fbe:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   44fc0:	b93b      	cbnz	r3, 44fd2 <onoff_request+0x84>
	list->head = node;
   44fc2:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   44fc6:	b9ac      	cbnz	r4, 44ff4 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   44fc8:	2102      	movs	r1, #2
   44fca:	4628      	mov	r0, r5
   44fcc:	f7f2 fd5a 	bl	37a84 <process_event>
   44fd0:	e7da      	b.n	44f88 <onoff_request+0x3a>
	parent->next = child;
   44fd2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   44fd4:	606e      	str	r6, [r5, #4]
}
   44fd6:	e7f6      	b.n	44fc6 <onoff_request+0x78>
   44fd8:	f382 8811 	msr	BASEPRI, r2
   44fdc:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   44fe0:	f06f 0404 	mvn.w	r4, #4
   44fe4:	e7d0      	b.n	44f88 <onoff_request+0x3a>
   44fe6:	f382 8811 	msr	BASEPRI, r2
   44fea:	f3bf 8f6f 	isb	sy
   44fee:	f06f 0485 	mvn.w	r4, #133	; 0x85
   44ff2:	e7c9      	b.n	44f88 <onoff_request+0x3a>
   44ff4:	f382 8811 	msr	BASEPRI, r2
   44ff8:	f3bf 8f6f 	isb	sy
		if (notify) {
   44ffc:	e7c4      	b.n	44f88 <onoff_request+0x3a>

00044ffe <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   44ffe:	4603      	mov	r3, r0
   45000:	b140      	cbz	r0, 45014 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   45002:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   45004:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   45008:	2a02      	cmp	r2, #2
   4500a:	d006      	beq.n	4501a <sys_notify_validate+0x1c>
   4500c:	2a03      	cmp	r2, #3
   4500e:	d004      	beq.n	4501a <sys_notify_validate+0x1c>
   45010:	2a01      	cmp	r2, #1
   45012:	d005      	beq.n	45020 <sys_notify_validate+0x22>
   45014:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   45018:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4501a:	681a      	ldr	r2, [r3, #0]
   4501c:	2a00      	cmp	r2, #0
   4501e:	d0f9      	beq.n	45014 <sys_notify_validate+0x16>
		notify->result = 0;
   45020:	2000      	movs	r0, #0
   45022:	6098      	str	r0, [r3, #8]
   45024:	4770      	bx	lr

00045026 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   45026:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   45028:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   4502a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   4502c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   45030:	2a02      	cmp	r2, #2
{
   45032:	4603      	mov	r3, r0
	switch (method) {
   45034:	f04f 0400 	mov.w	r4, #0
   45038:	d007      	beq.n	4504a <sys_notify_finalize+0x24>
   4503a:	2a03      	cmp	r2, #3
   4503c:	d002      	beq.n	45044 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   4503e:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   45040:	2000      	movs	r0, #0
   45042:	e001      	b.n	45048 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   45044:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   45046:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   45048:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   4504a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   4504c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   4504e:	2800      	cmp	r0, #0
   45050:	d0f6      	beq.n	45040 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   45052:	f7fc fd0b 	bl	41a6c <z_impl_k_poll_signal_raise>
   45056:	e7f3      	b.n	45040 <sys_notify_finalize+0x1a>

00045058 <encode_uint>:
{
   45058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4505c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   4505e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   45060:	2b6f      	cmp	r3, #111	; 0x6f
{
   45062:	4680      	mov	r8, r0
   45064:	460f      	mov	r7, r1
   45066:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   45068:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   4506c:	d029      	beq.n	450c2 <encode_uint+0x6a>
   4506e:	d824      	bhi.n	450ba <encode_uint+0x62>
		return 10;
   45070:	2b58      	cmp	r3, #88	; 0x58
   45072:	bf0c      	ite	eq
   45074:	2610      	moveq	r6, #16
   45076:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   45078:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   4507c:	4632      	mov	r2, r6
   4507e:	2300      	movs	r3, #0
   45080:	4640      	mov	r0, r8
   45082:	4639      	mov	r1, r7
   45084:	f7e2 f88c 	bl	271a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   45088:	2a09      	cmp	r2, #9
   4508a:	b2d4      	uxtb	r4, r2
   4508c:	d81e      	bhi.n	450cc <encode_uint+0x74>
   4508e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   45090:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   45092:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   45094:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   45098:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   4509c:	d301      	bcc.n	450a2 <encode_uint+0x4a>
   4509e:	45d1      	cmp	r9, sl
   450a0:	d811      	bhi.n	450c6 <encode_uint+0x6e>
	if (conv->flag_hash) {
   450a2:	782b      	ldrb	r3, [r5, #0]
   450a4:	069b      	lsls	r3, r3, #26
   450a6:	d505      	bpl.n	450b4 <encode_uint+0x5c>
		if (radix == 8) {
   450a8:	2e08      	cmp	r6, #8
   450aa:	d115      	bne.n	450d8 <encode_uint+0x80>
			conv->altform_0 = true;
   450ac:	78ab      	ldrb	r3, [r5, #2]
   450ae:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   450b2:	70ab      	strb	r3, [r5, #2]
}
   450b4:	4648      	mov	r0, r9
   450b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   450ba:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   450be:	2b70      	cmp	r3, #112	; 0x70
   450c0:	e7d7      	b.n	45072 <encode_uint+0x1a>
	switch (specifier) {
   450c2:	2608      	movs	r6, #8
   450c4:	e7d8      	b.n	45078 <encode_uint+0x20>
		value /= radix;
   450c6:	4680      	mov	r8, r0
   450c8:	460f      	mov	r7, r1
   450ca:	e7d7      	b.n	4507c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   450cc:	f1bb 0f19 	cmp.w	fp, #25
   450d0:	bf94      	ite	ls
   450d2:	3437      	addls	r4, #55	; 0x37
   450d4:	3457      	addhi	r4, #87	; 0x57
   450d6:	e7db      	b.n	45090 <encode_uint+0x38>
		} else if (radix == 16) {
   450d8:	2e10      	cmp	r6, #16
   450da:	d1eb      	bne.n	450b4 <encode_uint+0x5c>
			conv->altform_0c = true;
   450dc:	78ab      	ldrb	r3, [r5, #2]
   450de:	f043 0310 	orr.w	r3, r3, #16
   450e2:	e7e6      	b.n	450b2 <encode_uint+0x5a>

000450e4 <outs>:
{
   450e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   450e8:	4607      	mov	r7, r0
   450ea:	4688      	mov	r8, r1
   450ec:	4615      	mov	r5, r2
   450ee:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   450f0:	4614      	mov	r4, r2
   450f2:	42b4      	cmp	r4, r6
   450f4:	d305      	bcc.n	45102 <outs+0x1e>
   450f6:	b10e      	cbz	r6, 450fc <outs+0x18>
	return (int)count;
   450f8:	1b60      	subs	r0, r4, r5
   450fa:	e008      	b.n	4510e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   450fc:	7823      	ldrb	r3, [r4, #0]
   450fe:	2b00      	cmp	r3, #0
   45100:	d0fa      	beq.n	450f8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   45102:	f814 0b01 	ldrb.w	r0, [r4], #1
   45106:	4641      	mov	r1, r8
   45108:	47b8      	blx	r7
		if (rc < 0) {
   4510a:	2800      	cmp	r0, #0
   4510c:	daf1      	bge.n	450f2 <outs+0xe>
}
   4510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045112 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   45112:	b40f      	push	{r0, r1, r2, r3}
   45114:	b507      	push	{r0, r1, r2, lr}
   45116:	a904      	add	r1, sp, #16
   45118:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   4511c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   4511e:	f7f2 fca3 	bl	37a68 <vprintk>

	va_end(ap);
}
   45122:	b003      	add	sp, #12
   45124:	f85d eb04 	ldr.w	lr, [sp], #4
   45128:	b004      	add	sp, #16
   4512a:	4770      	bx	lr

0004512c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   4512c:	4770      	bx	lr

0004512e <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   4512e:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   45130:	b123      	cbz	r3, 4513c <pm_device_state_get+0xe>
		return -ENOSYS;
	}

	*state = pm->state;
   45132:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
   45136:	700b      	strb	r3, [r1, #0]

	return 0;
   45138:	2000      	movs	r0, #0
   4513a:	4770      	bx	lr
		return -ENOSYS;
   4513c:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   45140:	4770      	bx	lr

00045142 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   45142:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   45144:	b130      	cbz	r0, 45154 <pm_device_state_is_locked+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45146:	f3bf 8f5b 	dmb	ish
   4514a:	6e40      	ldr	r0, [r0, #100]	; 0x64
   4514c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   45150:	f3c0 1080 	ubfx	r0, r0, #6, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   45154:	4770      	bx	lr

00045156 <atomic_test_bit>:
   45156:	f3bf 8f5b 	dmb	ish
   4515a:	6800      	ldr	r0, [r0, #0]
   4515c:	f3bf 8f5b 	dmb	ish
   45160:	4108      	asrs	r0, r1
}
   45162:	f000 0001 	and.w	r0, r0, #1
   45166:	4770      	bx	lr

00045168 <k_sem_take>:
	return z_impl_k_sem_take(sem, timeout);
   45168:	f7fb bcdc 	b.w	40b24 <z_impl_k_sem_take>

0004516c <k_sem_give>:
	z_impl_k_sem_give(sem);
   4516c:	f7fb bcb4 	b.w	40ad8 <z_impl_k_sem_give>

00045170 <pm_device_runtime_put>:
{
   45170:	b510      	push	{r4, lr}
   45172:	4604      	mov	r4, r0
	if (dev->pm == NULL) {
   45174:	69a0      	ldr	r0, [r4, #24]
   45176:	b1b0      	cbz	r0, 451a6 <pm_device_runtime_put+0x36>
	ret = runtime_suspend(dev, false);
   45178:	2100      	movs	r1, #0
   4517a:	f7f3 fa95 	bl	386a8 <runtime_suspend.isra.0>
	if ((ret == 0) &&
   4517e:	b998      	cbnz	r0, 451a8 <pm_device_runtime_put+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45180:	69a3      	ldr	r3, [r4, #24]
   45182:	f3bf 8f5b 	dmb	ish
   45186:	3364      	adds	r3, #100	; 0x64
   45188:	e853 2f00 	ldrex	r2, [r3]
   4518c:	f022 0104 	bic.w	r1, r2, #4
   45190:	e843 1000 	strex	r0, r1, [r3]
   45194:	2800      	cmp	r0, #0
   45196:	d1f7      	bne.n	45188 <pm_device_runtime_put+0x18>
   45198:	f3bf 8f5b 	dmb	ish
   4519c:	0753      	lsls	r3, r2, #29
   4519e:	d502      	bpl.n	451a6 <pm_device_runtime_put+0x36>
		ret = pm_device_runtime_put(PM_DOMAIN(dev->pm));
   451a0:	69a3      	ldr	r3, [r4, #24]
   451a2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   451a4:	e7e6      	b.n	45174 <pm_device_runtime_put+0x4>
		return 0;
   451a6:	2000      	movs	r0, #0
}
   451a8:	bd10      	pop	{r4, pc}

000451aa <runtime_suspend_work>:
{
   451aa:	b570      	push	{r4, r5, r6, lr}
	ret = pm->action_cb(pm->dev, PM_DEVICE_ACTION_SUSPEND);
   451ac:	2100      	movs	r1, #0
{
   451ae:	4604      	mov	r4, r0
	ret = pm->action_cb(pm->dev, PM_DEVICE_ACTION_SUSPEND);
   451b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   451b2:	f850 0c30 	ldr.w	r0, [r0, #-48]
   451b6:	4798      	blx	r3
	(void)k_sem_take(&pm->lock, K_FOREVER);
   451b8:	f1a4 062c 	sub.w	r6, r4, #44	; 0x2c
   451bc:	f04f 33ff 	mov.w	r3, #4294967295
	ret = pm->action_cb(pm->dev, PM_DEVICE_ACTION_SUSPEND);
   451c0:	4605      	mov	r5, r0
	(void)k_sem_take(&pm->lock, K_FOREVER);
   451c2:	f04f 32ff 	mov.w	r2, #4294967295
   451c6:	4630      	mov	r0, r6
   451c8:	f7ff ffce 	bl	45168 <k_sem_take>
	if (ret < 0) {
   451cc:	2d00      	cmp	r5, #0
		pm->usage++;
   451ce:	bfbd      	ittte	lt
   451d0:	f854 3c08 	ldrlt.w	r3, [r4, #-8]
   451d4:	3301      	addlt	r3, #1
   451d6:	f844 3c08 	strlt.w	r3, [r4, #-8]
		pm->state = PM_DEVICE_STATE_ACTIVE;
   451da:	2301      	movge	r3, #1
   451dc:	bfb8      	it	lt
   451de:	2300      	movlt	r3, #0
   451e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	z_impl_k_event_set(event, events);
   451e4:	2101      	movs	r1, #1
   451e6:	4099      	lsls	r1, r3
   451e8:	f1a4 0014 	sub.w	r0, r4, #20
   451ec:	f003 fcf8 	bl	48be0 <z_impl_k_event_set>
	k_sem_give(&pm->lock);
   451f0:	4630      	mov	r0, r6
   451f2:	f7ff ffbb 	bl	4516c <k_sem_give>
	if (PM_DOMAIN(pm) != NULL) {
   451f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   451f8:	b118      	cbz	r0, 45202 <runtime_suspend_work+0x58>
}
   451fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)pm_device_runtime_put(PM_DOMAIN(pm));
   451fe:	f7ff bfb7 	b.w	45170 <pm_device_runtime_put>
}
   45202:	bd70      	pop	{r4, r5, r6, pc}

00045204 <pm_device_runtime_auto_enable>:
{
   45204:	b508      	push	{r3, lr}
   45206:	4603      	mov	r3, r0
	struct pm_device *pm = dev->pm;
   45208:	6980      	ldr	r0, [r0, #24]
	if (!pm || !atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_RUNTIME_AUTO)) {
   4520a:	b148      	cbz	r0, 45220 <pm_device_runtime_auto_enable+0x1c>
   4520c:	2108      	movs	r1, #8
   4520e:	3064      	adds	r0, #100	; 0x64
   45210:	f7ff ffa1 	bl	45156 <atomic_test_bit>
   45214:	b120      	cbz	r0, 45220 <pm_device_runtime_auto_enable+0x1c>
	return pm_device_runtime_enable(dev);
   45216:	4618      	mov	r0, r3
}
   45218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return pm_device_runtime_enable(dev);
   4521c:	f7f3 ba8e 	b.w	3873c <pm_device_runtime_enable>
}
   45220:	2000      	movs	r0, #0
   45222:	bd08      	pop	{r3, pc}

00045224 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   45224:	b538      	push	{r3, r4, r5, lr}
   45226:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   45228:	42ab      	cmp	r3, r5
{
   4522a:	4611      	mov	r1, r2
   4522c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4522e:	d804      	bhi.n	4523a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   45230:	461a      	mov	r2, r3
   45232:	f000 fa6d 	bl	45710 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   45236:	4620      	mov	r0, r4
   45238:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4523a:	2400      	movs	r4, #0
   4523c:	e7fb      	b.n	45236 <_copy+0x12>

0004523e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4523e:	f000 ba72 	b.w	45726 <memset>

00045242 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   45242:	09c3      	lsrs	r3, r0, #7
   45244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   45248:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4524c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   45250:	b2c0      	uxtb	r0, r0
   45252:	4770      	bx	lr

00045254 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   45254:	78cb      	ldrb	r3, [r1, #3]
   45256:	7802      	ldrb	r2, [r0, #0]
   45258:	4053      	eors	r3, r2
   4525a:	7003      	strb	r3, [r0, #0]
   4525c:	884b      	ldrh	r3, [r1, #2]
   4525e:	7842      	ldrb	r2, [r0, #1]
   45260:	4053      	eors	r3, r2
   45262:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   45264:	680a      	ldr	r2, [r1, #0]
   45266:	7883      	ldrb	r3, [r0, #2]
   45268:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4526c:	7083      	strb	r3, [r0, #2]
   4526e:	680a      	ldr	r2, [r1, #0]
   45270:	78c3      	ldrb	r3, [r0, #3]
   45272:	4053      	eors	r3, r2
   45274:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   45276:	79cb      	ldrb	r3, [r1, #7]
   45278:	7902      	ldrb	r2, [r0, #4]
   4527a:	4053      	eors	r3, r2
   4527c:	7103      	strb	r3, [r0, #4]
   4527e:	88cb      	ldrh	r3, [r1, #6]
   45280:	7942      	ldrb	r2, [r0, #5]
   45282:	4053      	eors	r3, r2
   45284:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   45286:	684a      	ldr	r2, [r1, #4]
   45288:	7983      	ldrb	r3, [r0, #6]
   4528a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4528e:	7183      	strb	r3, [r0, #6]
   45290:	684a      	ldr	r2, [r1, #4]
   45292:	79c3      	ldrb	r3, [r0, #7]
   45294:	4053      	eors	r3, r2
   45296:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   45298:	7acb      	ldrb	r3, [r1, #11]
   4529a:	7a02      	ldrb	r2, [r0, #8]
   4529c:	4053      	eors	r3, r2
   4529e:	7203      	strb	r3, [r0, #8]
   452a0:	7a42      	ldrb	r2, [r0, #9]
   452a2:	894b      	ldrh	r3, [r1, #10]
   452a4:	4053      	eors	r3, r2
   452a6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   452a8:	688a      	ldr	r2, [r1, #8]
   452aa:	7a83      	ldrb	r3, [r0, #10]
   452ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   452b0:	7283      	strb	r3, [r0, #10]
   452b2:	688a      	ldr	r2, [r1, #8]
   452b4:	7ac3      	ldrb	r3, [r0, #11]
   452b6:	4053      	eors	r3, r2
   452b8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   452ba:	7bcb      	ldrb	r3, [r1, #15]
   452bc:	7b02      	ldrb	r2, [r0, #12]
   452be:	4053      	eors	r3, r2
   452c0:	7303      	strb	r3, [r0, #12]
   452c2:	89cb      	ldrh	r3, [r1, #14]
   452c4:	7b42      	ldrb	r2, [r0, #13]
   452c6:	4053      	eors	r3, r2
   452c8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   452ca:	68ca      	ldr	r2, [r1, #12]
   452cc:	7b83      	ldrb	r3, [r0, #14]
   452ce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   452d2:	7383      	strb	r3, [r0, #14]
   452d4:	68ca      	ldr	r2, [r1, #12]
   452d6:	7bc3      	ldrb	r3, [r0, #15]
   452d8:	4053      	eors	r3, r2
   452da:	73c3      	strb	r3, [r0, #15]
}
   452dc:	4770      	bx	lr

000452de <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   452de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   452e0:	7802      	ldrb	r2, [r0, #0]
   452e2:	f88d 2000 	strb.w	r2, [sp]
   452e6:	7942      	ldrb	r2, [r0, #5]
   452e8:	f88d 2001 	strb.w	r2, [sp, #1]
   452ec:	7a82      	ldrb	r2, [r0, #10]
   452ee:	f88d 2002 	strb.w	r2, [sp, #2]
   452f2:	7bc2      	ldrb	r2, [r0, #15]
   452f4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   452f8:	7902      	ldrb	r2, [r0, #4]
   452fa:	f88d 2004 	strb.w	r2, [sp, #4]
   452fe:	7a42      	ldrb	r2, [r0, #9]
   45300:	f88d 2005 	strb.w	r2, [sp, #5]
   45304:	7b82      	ldrb	r2, [r0, #14]
   45306:	f88d 2006 	strb.w	r2, [sp, #6]
   4530a:	78c2      	ldrb	r2, [r0, #3]
   4530c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   45310:	7a02      	ldrb	r2, [r0, #8]
   45312:	f88d 2008 	strb.w	r2, [sp, #8]
   45316:	7b42      	ldrb	r2, [r0, #13]
   45318:	f88d 2009 	strb.w	r2, [sp, #9]
   4531c:	7882      	ldrb	r2, [r0, #2]
   4531e:	f88d 200a 	strb.w	r2, [sp, #10]
   45322:	79c2      	ldrb	r2, [r0, #7]
   45324:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   45328:	7b02      	ldrb	r2, [r0, #12]
   4532a:	f88d 200c 	strb.w	r2, [sp, #12]
   4532e:	7842      	ldrb	r2, [r0, #1]
   45330:	7ac3      	ldrb	r3, [r0, #11]
   45332:	f88d 200d 	strb.w	r2, [sp, #13]
   45336:	7982      	ldrb	r2, [r0, #6]
   45338:	f88d 200e 	strb.w	r2, [sp, #14]
   4533c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   45340:	2310      	movs	r3, #16
   45342:	466a      	mov	r2, sp
   45344:	4619      	mov	r1, r3
   45346:	f7ff ff6d 	bl	45224 <_copy>
}
   4534a:	b005      	add	sp, #20
   4534c:	f85d fb04 	ldr.w	pc, [sp], #4

00045350 <mult_row_column>:
{
   45350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45352:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   45354:	7808      	ldrb	r0, [r1, #0]
{
   45356:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   45358:	f7ff ff73 	bl	45242 <_double_byte>
   4535c:	4605      	mov	r5, r0
   4535e:	7860      	ldrb	r0, [r4, #1]
   45360:	f7ff ff6f 	bl	45242 <_double_byte>
   45364:	78a2      	ldrb	r2, [r4, #2]
   45366:	7863      	ldrb	r3, [r4, #1]
   45368:	4053      	eors	r3, r2
   4536a:	78e2      	ldrb	r2, [r4, #3]
   4536c:	4053      	eors	r3, r2
   4536e:	405d      	eors	r5, r3
   45370:	4068      	eors	r0, r5
   45372:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   45374:	7860      	ldrb	r0, [r4, #1]
   45376:	7827      	ldrb	r7, [r4, #0]
   45378:	f7ff ff63 	bl	45242 <_double_byte>
   4537c:	4605      	mov	r5, r0
   4537e:	78a0      	ldrb	r0, [r4, #2]
   45380:	f7ff ff5f 	bl	45242 <_double_byte>
   45384:	78a3      	ldrb	r3, [r4, #2]
   45386:	405f      	eors	r7, r3
   45388:	78e3      	ldrb	r3, [r4, #3]
   4538a:	405f      	eors	r7, r3
   4538c:	407d      	eors	r5, r7
   4538e:	4068      	eors	r0, r5
   45390:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   45392:	7863      	ldrb	r3, [r4, #1]
   45394:	7827      	ldrb	r7, [r4, #0]
   45396:	78a0      	ldrb	r0, [r4, #2]
   45398:	405f      	eors	r7, r3
   4539a:	f7ff ff52 	bl	45242 <_double_byte>
   4539e:	4605      	mov	r5, r0
   453a0:	78e0      	ldrb	r0, [r4, #3]
   453a2:	f7ff ff4e 	bl	45242 <_double_byte>
   453a6:	78e3      	ldrb	r3, [r4, #3]
   453a8:	405f      	eors	r7, r3
   453aa:	407d      	eors	r5, r7
   453ac:	4068      	eors	r0, r5
   453ae:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   453b0:	7820      	ldrb	r0, [r4, #0]
   453b2:	f7ff ff46 	bl	45242 <_double_byte>
   453b6:	7862      	ldrb	r2, [r4, #1]
   453b8:	7823      	ldrb	r3, [r4, #0]
   453ba:	4053      	eors	r3, r2
   453bc:	78a2      	ldrb	r2, [r4, #2]
   453be:	4053      	eors	r3, r2
   453c0:	ea80 0503 	eor.w	r5, r0, r3
   453c4:	78e0      	ldrb	r0, [r4, #3]
   453c6:	f7ff ff3c 	bl	45242 <_double_byte>
   453ca:	b2ed      	uxtb	r5, r5
   453cc:	4045      	eors	r5, r0
   453ce:	70f5      	strb	r5, [r6, #3]
}
   453d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000453d2 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   453d2:	b570      	push	{r4, r5, r6, lr}
   453d4:	4614      	mov	r4, r2
   453d6:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   453d8:	4605      	mov	r5, r0
   453da:	2800      	cmp	r0, #0
   453dc:	d049      	beq.n	45472 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   453de:	2900      	cmp	r1, #0
   453e0:	d049      	beq.n	45476 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   453e2:	2a00      	cmp	r2, #0
   453e4:	d049      	beq.n	4547a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   453e6:	2310      	movs	r3, #16
   453e8:	460a      	mov	r2, r1
   453ea:	4668      	mov	r0, sp
   453ec:	4619      	mov	r1, r3
   453ee:	f7ff ff19 	bl	45224 <_copy>
	add_round_key(state, s->words);
   453f2:	4621      	mov	r1, r4
   453f4:	4668      	mov	r0, sp
   453f6:	f7ff ff2d 	bl	45254 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   453fa:	3410      	adds	r4, #16
   453fc:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   45400:	4668      	mov	r0, sp
   45402:	f7f3 f9eb 	bl	387dc <sub_bytes>
		shift_rows(state);
   45406:	4668      	mov	r0, sp
   45408:	f7ff ff69 	bl	452de <shift_rows>
	mult_row_column(t, s);
   4540c:	4669      	mov	r1, sp
   4540e:	a804      	add	r0, sp, #16
   45410:	f7ff ff9e 	bl	45350 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   45414:	a901      	add	r1, sp, #4
   45416:	a805      	add	r0, sp, #20
   45418:	f7ff ff9a 	bl	45350 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   4541c:	a902      	add	r1, sp, #8
   4541e:	a806      	add	r0, sp, #24
   45420:	f7ff ff96 	bl	45350 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   45424:	a903      	add	r1, sp, #12
   45426:	a807      	add	r0, sp, #28
   45428:	f7ff ff92 	bl	45350 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4542c:	2310      	movs	r3, #16
   4542e:	4619      	mov	r1, r3
   45430:	eb0d 0203 	add.w	r2, sp, r3
   45434:	4668      	mov	r0, sp
   45436:	f7ff fef5 	bl	45224 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   4543a:	4621      	mov	r1, r4
   4543c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   4543e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   45440:	f7ff ff08 	bl	45254 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   45444:	42b4      	cmp	r4, r6
   45446:	d1db      	bne.n	45400 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   45448:	f7f3 f9c8 	bl	387dc <sub_bytes>
	shift_rows(state);
   4544c:	4668      	mov	r0, sp
   4544e:	f7ff ff46 	bl	452de <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   45452:	4621      	mov	r1, r4
   45454:	4668      	mov	r0, sp
   45456:	f7ff fefd 	bl	45254 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   4545a:	2310      	movs	r3, #16
   4545c:	4619      	mov	r1, r3
   4545e:	466a      	mov	r2, sp
   45460:	4628      	mov	r0, r5
   45462:	f7ff fedf 	bl	45224 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   45466:	4668      	mov	r0, sp
   45468:	2210      	movs	r2, #16
   4546a:	2100      	movs	r1, #0
   4546c:	f7ff fee7 	bl	4523e <_set>

	return TC_CRYPTO_SUCCESS;
   45470:	2001      	movs	r0, #1
}
   45472:	b008      	add	sp, #32
   45474:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   45476:	4608      	mov	r0, r1
   45478:	e7fb      	b.n	45472 <tc_aes_encrypt+0xa0>
   4547a:	4610      	mov	r0, r2
   4547c:	e7f9      	b.n	45472 <tc_aes_encrypt+0xa0>

0004547e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4547e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   45480:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   45482:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   45484:	f912 3b10 	ldrsb.w	r3, [r2], #16
   45488:	2b00      	cmp	r3, #0
   4548a:	bfac      	ite	ge
   4548c:	2300      	movge	r3, #0
   4548e:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   45490:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   45494:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   45498:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   4549a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4549e:	d002      	beq.n	454a6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   454a0:	7813      	ldrb	r3, [r2, #0]
   454a2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   454a4:	e7f4      	b.n	45490 <gf_double+0x12>
	}
}
   454a6:	bd10      	pop	{r4, pc}

000454a8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   454a8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   454aa:	b120      	cbz	r0, 454b6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   454ac:	2258      	movs	r2, #88	; 0x58
   454ae:	2100      	movs	r1, #0
   454b0:	f7ff fec5 	bl	4523e <_set>
   454b4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   454b6:	bd08      	pop	{r3, pc}

000454b8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   454b8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   454ba:	4604      	mov	r4, r0
   454bc:	b188      	cbz	r0, 454e2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   454be:	2210      	movs	r2, #16
   454c0:	2100      	movs	r1, #0
   454c2:	f7ff febc 	bl	4523e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   454c6:	2210      	movs	r2, #16
   454c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   454cc:	2100      	movs	r1, #0
   454ce:	f7ff feb6 	bl	4523e <_set>
	s->leftover_offset = 0;
   454d2:	2300      	movs	r3, #0
   454d4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   454d6:	2200      	movs	r2, #0
   454d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   454dc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   454e0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   454e2:	bd10      	pop	{r4, pc}

000454e4 <tc_cmac_setup>:
{
   454e4:	b570      	push	{r4, r5, r6, lr}
   454e6:	4604      	mov	r4, r0
   454e8:	460d      	mov	r5, r1
   454ea:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   454ec:	b310      	cbz	r0, 45534 <tc_cmac_setup+0x50>
   454ee:	b311      	cbz	r1, 45536 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   454f0:	2258      	movs	r2, #88	; 0x58
   454f2:	2100      	movs	r1, #0
   454f4:	f7ff fea3 	bl	4523e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   454f8:	4629      	mov	r1, r5
	s->sched = sched;
   454fa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   454fc:	4630      	mov	r0, r6
   454fe:	f7f3 f979 	bl	387f4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   45502:	2210      	movs	r2, #16
   45504:	2100      	movs	r1, #0
   45506:	4620      	mov	r0, r4
   45508:	f7ff fe99 	bl	4523e <_set>
	gf_double (s->K1, s->iv);
   4550c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   45510:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   45512:	4621      	mov	r1, r4
   45514:	4620      	mov	r0, r4
   45516:	f7ff ff5c 	bl	453d2 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4551a:	4621      	mov	r1, r4
   4551c:	4628      	mov	r0, r5
   4551e:	f7ff ffae 	bl	4547e <gf_double>
	gf_double (s->K2, s->K1);
   45522:	4629      	mov	r1, r5
   45524:	f104 0020 	add.w	r0, r4, #32
   45528:	f7ff ffa9 	bl	4547e <gf_double>
	tc_cmac_init(s);
   4552c:	4620      	mov	r0, r4
   4552e:	f7ff ffc3 	bl	454b8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   45532:	2001      	movs	r0, #1
}
   45534:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   45536:	4608      	mov	r0, r1
   45538:	e7fc      	b.n	45534 <tc_cmac_setup+0x50>

0004553a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4553e:	460e      	mov	r6, r1
   45540:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   45542:	4604      	mov	r4, r0
   45544:	2800      	cmp	r0, #0
   45546:	d060      	beq.n	4560a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   45548:	b1fa      	cbz	r2, 4558a <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   4554a:	2900      	cmp	r1, #0
   4554c:	d05d      	beq.n	4560a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   4554e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   45552:	ea53 0102 	orrs.w	r1, r3, r2
   45556:	d058      	beq.n	4560a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   45558:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   4555a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   4555e:	f142 32ff 	adc.w	r2, r2, #4294967295
   45562:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   45566:	f1b8 0f00 	cmp.w	r8, #0
   4556a:	d02c      	beq.n	455c6 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4556c:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   45570:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   45574:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   45576:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   45578:	d20a      	bcs.n	45590 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4557a:	462b      	mov	r3, r5
   4557c:	4632      	mov	r2, r6
   4557e:	4629      	mov	r1, r5
   45580:	f7ff fe50 	bl	45224 <_copy>
			s->leftover_offset += data_length;
   45584:	6c63      	ldr	r3, [r4, #68]	; 0x44
   45586:	442b      	add	r3, r5
   45588:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   4558a:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   4558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   45590:	463b      	mov	r3, r7
   45592:	4632      	mov	r2, r6
   45594:	4639      	mov	r1, r7
   45596:	f7ff fe45 	bl	45224 <_copy>
		data_length -= remaining_space;
   4559a:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   4559c:	2300      	movs	r3, #0
   4559e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   455a0:	4445      	add	r5, r8
		data += remaining_space;
   455a2:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   455a4:	1e63      	subs	r3, r4, #1
   455a6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   455aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   455ae:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   455b2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   455b4:	ea82 0200 	eor.w	r2, r2, r0
   455b8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   455ba:	d1f6      	bne.n	455aa <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   455bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   455be:	4621      	mov	r1, r4
   455c0:	4620      	mov	r0, r4
   455c2:	f7ff ff06 	bl	453d2 <tc_aes_encrypt>
   455c6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   455ca:	2d10      	cmp	r5, #16
   455cc:	d80a      	bhi.n	455e4 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   455ce:	2d00      	cmp	r5, #0
   455d0:	d0db      	beq.n	4558a <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   455d2:	462b      	mov	r3, r5
   455d4:	4632      	mov	r2, r6
   455d6:	4629      	mov	r1, r5
   455d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   455dc:	f7ff fe22 	bl	45224 <_copy>
		s->leftover_offset = data_length;
   455e0:	6465      	str	r5, [r4, #68]	; 0x44
   455e2:	e7d2      	b.n	4558a <tc_cmac_update+0x50>
   455e4:	1e63      	subs	r3, r4, #1
   455e6:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   455e8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   455ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   455f0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   455f2:	ea82 0200 	eor.w	r2, r2, r0
   455f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   455f8:	d1f6      	bne.n	455e8 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   455fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   455fc:	4621      	mov	r1, r4
   455fe:	4620      	mov	r0, r4
   45600:	f7ff fee7 	bl	453d2 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   45604:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   45606:	3d10      	subs	r5, #16
   45608:	e7df      	b.n	455ca <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   4560a:	2000      	movs	r0, #0
   4560c:	e7be      	b.n	4558c <tc_cmac_update+0x52>

0004560e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4560e:	b570      	push	{r4, r5, r6, lr}
   45610:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   45612:	4605      	mov	r5, r0
   45614:	b1e8      	cbz	r0, 45652 <tc_cmac_final+0x44>
   45616:	b369      	cbz	r1, 45674 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   45618:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4561a:	2a10      	cmp	r2, #16
   4561c:	d11a      	bne.n	45654 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4561e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   45620:	1e63      	subs	r3, r4, #1
   45622:	3901      	subs	r1, #1
   45624:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   45628:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4562c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   45630:	4072      	eors	r2, r6
   45632:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   45636:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   45638:	ea82 0206 	eor.w	r2, r2, r6
   4563c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4563e:	d1f3      	bne.n	45628 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   45640:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   45642:	4621      	mov	r1, r4
   45644:	4628      	mov	r0, r5
   45646:	f7ff fec4 	bl	453d2 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4564a:	4620      	mov	r0, r4
   4564c:	f7ff ff2c 	bl	454a8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   45650:	2001      	movs	r0, #1
}
   45652:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   45654:	f102 0030 	add.w	r0, r2, #48	; 0x30
   45658:	2100      	movs	r1, #0
   4565a:	f1c2 0210 	rsb	r2, r2, #16
   4565e:	4420      	add	r0, r4
   45660:	f7ff fded 	bl	4523e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   45664:	6c63      	ldr	r3, [r4, #68]	; 0x44
   45666:	4423      	add	r3, r4
   45668:	2280      	movs	r2, #128	; 0x80
   4566a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4566e:	f104 0120 	add.w	r1, r4, #32
   45672:	e7d5      	b.n	45620 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   45674:	4608      	mov	r0, r1
   45676:	e7ec      	b.n	45652 <tc_cmac_final+0x44>

00045678 <abort_function>:
{
   45678:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   4567a:	2000      	movs	r0, #0
   4567c:	f7f2 fec2 	bl	38404 <sys_reboot>

00045680 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   45680:	f002 bcd6 	b.w	48030 <z_fatal_error>

00045684 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   45684:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   45686:	6800      	ldr	r0, [r0, #0]
   45688:	f002 bcd2 	b.w	48030 <z_fatal_error>

0004568c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4568c:	2100      	movs	r1, #0
   4568e:	2001      	movs	r0, #1
   45690:	f7ff bff6 	b.w	45680 <z_arm_fatal_error>

00045694 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   45694:	b508      	push	{r3, lr}
	handler();
   45696:	f7f3 fa63 	bl	38b60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4569e:	f7f3 bb3f 	b.w	38d20 <z_arm_exc_exit>

000456a2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   456a2:	4603      	mov	r3, r0
	size_t n = 0;
   456a4:	2000      	movs	r0, #0

	while (*s != '\0') {
   456a6:	5c1a      	ldrb	r2, [r3, r0]
   456a8:	b902      	cbnz	r2, 456ac <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   456aa:	4770      	bx	lr
		n++;
   456ac:	3001      	adds	r0, #1
   456ae:	e7fa      	b.n	456a6 <strlen+0x4>

000456b0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   456b0:	4603      	mov	r3, r0
	size_t n = 0;
   456b2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   456b4:	5c1a      	ldrb	r2, [r3, r0]
   456b6:	b10a      	cbz	r2, 456bc <strnlen+0xc>
   456b8:	4288      	cmp	r0, r1
   456ba:	d100      	bne.n	456be <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   456bc:	4770      	bx	lr
		n++;
   456be:	3001      	adds	r0, #1
   456c0:	e7f8      	b.n	456b4 <strnlen+0x4>

000456c2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   456c2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   456c4:	b15a      	cbz	r2, 456de <memcmp+0x1c>
   456c6:	3901      	subs	r1, #1
   456c8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   456ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   456ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   456d2:	42a0      	cmp	r0, r4
   456d4:	d001      	beq.n	456da <memcmp+0x18>
   456d6:	429a      	cmp	r2, r3
   456d8:	d0f7      	beq.n	456ca <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   456da:	1ad0      	subs	r0, r2, r3
}
   456dc:	bd10      	pop	{r4, pc}
		return 0;
   456de:	4610      	mov	r0, r2
   456e0:	e7fc      	b.n	456dc <memcmp+0x1a>

000456e2 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   456e2:	1a43      	subs	r3, r0, r1
   456e4:	4293      	cmp	r3, r2
{
   456e6:	b510      	push	{r4, lr}
   456e8:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   456ec:	d308      	bcc.n	45700 <memmove+0x1e>
   456ee:	3901      	subs	r1, #1
	char *dest = d;
   456f0:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   456f2:	429a      	cmp	r2, r3
   456f4:	d00b      	beq.n	4570e <memmove+0x2c>
			*dest = *src;
   456f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   456fa:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   456fe:	e7f8      	b.n	456f2 <memmove+0x10>
   45700:	440a      	add	r2, r1
			dest[n] = src[n];
   45702:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   45706:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   4570a:	428a      	cmp	r2, r1
   4570c:	d1f9      	bne.n	45702 <memmove+0x20>
		}
	}

	return d;
}
   4570e:	bd10      	pop	{r4, pc}

00045710 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   45710:	b510      	push	{r4, lr}
   45712:	1e43      	subs	r3, r0, #1
   45714:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   45716:	4291      	cmp	r1, r2
   45718:	d100      	bne.n	4571c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4571a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4571c:	f811 4b01 	ldrb.w	r4, [r1], #1
   45720:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   45724:	e7f7      	b.n	45716 <memcpy+0x6>

00045726 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   45726:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   45728:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4572a:	4603      	mov	r3, r0
	while (n > 0) {
   4572c:	4293      	cmp	r3, r2
   4572e:	d100      	bne.n	45732 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   45730:	4770      	bx	lr
		*(d_byte++) = c_byte;
   45732:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   45736:	e7f9      	b.n	4572c <memset+0x6>

00045738 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   45738:	2806      	cmp	r0, #6
   4573a:	d108      	bne.n	4574e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4573c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45740:	2201      	movs	r2, #1
   45742:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   45746:	f3bf 8f4f 	dsb	sy
        __WFE();
   4574a:	bf20      	wfe
    while (true)
   4574c:	e7fd      	b.n	4574a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   4574e:	4770      	bx	lr

00045750 <pm_state_exit_post_ops>:
   45750:	2300      	movs	r3, #0
   45752:	f383 8811 	msr	BASEPRI, r3
   45756:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4575a:	4770      	bx	lr

0004575c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   4575c:	b510      	push	{r4, lr}
   4575e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   45760:	7801      	ldrb	r1, [r0, #0]
   45762:	7822      	ldrb	r2, [r4, #0]
   45764:	428a      	cmp	r2, r1
{
   45766:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   45768:	d00f      	beq.n	4578a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   4576a:	4669      	mov	r1, sp
   4576c:	f7f3 fe0c 	bl	39388 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   45770:	a905      	add	r1, sp, #20
   45772:	4620      	mov	r0, r4
   45774:	f7f3 fe08 	bl	39388 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   45778:	2210      	movs	r2, #16
   4577a:	f10d 0115 	add.w	r1, sp, #21
   4577e:	f10d 0001 	add.w	r0, sp, #1
   45782:	f7ff ff9e 	bl	456c2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   45786:	b00a      	add	sp, #40	; 0x28
   45788:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4578a:	2a01      	cmp	r2, #1
   4578c:	d006      	beq.n	4579c <bt_uuid_cmp+0x40>
   4578e:	2a02      	cmp	r2, #2
   45790:	d007      	beq.n	457a2 <bt_uuid_cmp+0x46>
   45792:	b972      	cbnz	r2, 457b2 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   45794:	8840      	ldrh	r0, [r0, #2]
   45796:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   45798:	1ac0      	subs	r0, r0, r3
   4579a:	e7f4      	b.n	45786 <bt_uuid_cmp+0x2a>
   4579c:	6840      	ldr	r0, [r0, #4]
   4579e:	6863      	ldr	r3, [r4, #4]
   457a0:	e7fa      	b.n	45798 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   457a2:	2210      	movs	r2, #16
   457a4:	1c61      	adds	r1, r4, #1
   457a6:	3001      	adds	r0, #1
}
   457a8:	b00a      	add	sp, #40	; 0x28
   457aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   457ae:	f7ff bf88 	b.w	456c2 <memcmp>
	switch (u1->type) {
   457b2:	f06f 0015 	mvn.w	r0, #21
   457b6:	e7e6      	b.n	45786 <bt_uuid_cmp+0x2a>

000457b8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   457b8:	2a04      	cmp	r2, #4
{
   457ba:	b510      	push	{r4, lr}
	switch (data_len) {
   457bc:	d00a      	beq.n	457d4 <bt_uuid_create+0x1c>
   457be:	2a10      	cmp	r2, #16
   457c0:	d00d      	beq.n	457de <bt_uuid_create+0x26>
   457c2:	2a02      	cmp	r2, #2
   457c4:	f04f 0300 	mov.w	r3, #0
   457c8:	d10f      	bne.n	457ea <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   457ca:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   457cc:	880b      	ldrh	r3, [r1, #0]
   457ce:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   457d0:	2001      	movs	r0, #1
}
   457d2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   457d4:	2301      	movs	r3, #1
   457d6:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   457d8:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   457da:	6043      	str	r3, [r0, #4]
		break;
   457dc:	e7f8      	b.n	457d0 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   457de:	2302      	movs	r3, #2
   457e0:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   457e4:	f7ff ff94 	bl	45710 <memcpy>
		break;
   457e8:	e7f2      	b.n	457d0 <bt_uuid_create+0x18>
	switch (data_len) {
   457ea:	4618      	mov	r0, r3
   457ec:	e7f1      	b.n	457d2 <bt_uuid_create+0x1a>

000457ee <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   457ee:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   457f0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   457f2:	2106      	movs	r1, #6
{
   457f4:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   457f6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   457fa:	f7f9 fcab 	bl	3f154 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   457fe:	b918      	cbnz	r0, 45808 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   45800:	79a3      	ldrb	r3, [r4, #6]
   45802:	f063 033f 	orn	r3, r3, #63	; 0x3f
   45806:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   45808:	bd10      	pop	{r4, pc}

0004580a <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   4580a:	b510      	push	{r4, lr}
   4580c:	4604      	mov	r4, r0
   4580e:	2207      	movs	r2, #7
   45810:	f7ff ff7e 	bl	45710 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   45814:	7823      	ldrb	r3, [r4, #0]
   45816:	f023 0302 	bic.w	r3, r3, #2
   4581a:	7023      	strb	r3, [r4, #0]
}
   4581c:	bd10      	pop	{r4, pc}

0004581e <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   4581e:	7800      	ldrb	r0, [r0, #0]
}
   45820:	f3c0 0040 	ubfx	r0, r0, #1, #1
   45824:	4770      	bx	lr

00045826 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   45826:	280f      	cmp	r0, #15
   45828:	d807      	bhi.n	4583a <bt_hci_evt_get_flags+0x14>
   4582a:	280d      	cmp	r0, #13
   4582c:	d80b      	bhi.n	45846 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   4582e:	2805      	cmp	r0, #5
   45830:	bf08      	it	eq
   45832:	2003      	moveq	r0, #3
   45834:	bf18      	it	ne
   45836:	2002      	movne	r0, #2
   45838:	4770      	bx	lr
	switch (evt) {
   4583a:	2813      	cmp	r0, #19
   4583c:	d003      	beq.n	45846 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   4583e:	281a      	cmp	r0, #26
   45840:	bf08      	it	eq
   45842:	2001      	moveq	r0, #1
   45844:	e7f6      	b.n	45834 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   45846:	2001      	movs	r0, #1
	}
}
   45848:	4770      	bx	lr

0004584a <hci_data_buf_overflow>:
}
   4584a:	4770      	bx	lr

0004584c <hci_disconn_complete>:
{
   4584c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4584e:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   45850:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   45852:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   45856:	b96e      	cbnz	r6, 45874 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   45858:	f7f5 fc16 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   4585c:	4604      	mov	r4, r0
   4585e:	b148      	cbz	r0, 45874 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   45860:	78eb      	ldrb	r3, [r5, #3]
   45862:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45864:	4631      	mov	r1, r6
   45866:	f7f5 fc17 	bl	3b098 <bt_conn_set_state>
		bt_conn_unref(conn);
   4586a:	4620      	mov	r0, r4
}
   4586c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   45870:	f000 bc62 	b.w	46138 <bt_conn_unref>
}
   45874:	bd70      	pop	{r4, r5, r6, pc}

00045876 <le_phy_update_complete>:
{
   45876:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   45878:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   4587a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   4587e:	f7f5 fc03 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   45882:	b118      	cbz	r0, 4588c <le_phy_update_complete+0x16>
}
   45884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   45888:	f000 bc56 	b.w	46138 <bt_conn_unref>
}
   4588c:	bd08      	pop	{r3, pc}

0004588e <le_data_len_change>:
{
   4588e:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   45890:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   45892:	8818      	ldrh	r0, [r3, #0]
   45894:	f7f5 fbf8 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   45898:	b118      	cbz	r0, 458a2 <le_data_len_change+0x14>
}
   4589a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4589e:	f000 bc4b 	b.w	46138 <bt_conn_unref>
}
   458a2:	bd08      	pop	{r3, pc}

000458a4 <atomic_or>:
{
   458a4:	b510      	push	{r4, lr}
   458a6:	4603      	mov	r3, r0
}
   458a8:	f3bf 8f5b 	dmb	ish
   458ac:	e853 0f00 	ldrex	r0, [r3]
   458b0:	ea40 0201 	orr.w	r2, r0, r1
   458b4:	e843 2400 	strex	r4, r2, [r3]
   458b8:	2c00      	cmp	r4, #0
   458ba:	d1f7      	bne.n	458ac <atomic_or+0x8>
   458bc:	f3bf 8f5b 	dmb	ish
   458c0:	bd10      	pop	{r4, pc}

000458c2 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   458c2:	2101      	movs	r1, #1
   458c4:	300c      	adds	r0, #12
   458c6:	f001 bea3 	b.w	47610 <net_buf_simple_pull_mem>

000458ca <le_remote_feat_complete>:
{
   458ca:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   458cc:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   458ce:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   458d2:	f7f5 fbd9 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   458d6:	4604      	mov	r4, r0
   458d8:	b180      	cbz	r0, 458fc <le_remote_feat_complete+0x32>
	if (!evt->status) {
   458da:	782b      	ldrb	r3, [r5, #0]
   458dc:	b923      	cbnz	r3, 458e8 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   458de:	2208      	movs	r2, #8
   458e0:	1ce9      	adds	r1, r5, #3
   458e2:	30ad      	adds	r0, #173	; 0xad
   458e4:	f7ff ff14 	bl	45710 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   458e8:	1d20      	adds	r0, r4, #4
   458ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   458ee:	f7ff ffd9 	bl	458a4 <atomic_or>
	bt_conn_unref(conn);
   458f2:	4620      	mov	r0, r4
}
   458f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   458f8:	f000 bc1e 	b.w	46138 <bt_conn_unref>
}
   458fc:	bd38      	pop	{r3, r4, r5, pc}

000458fe <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   458fe:	b430      	push	{r4, r5}
   45900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   45904:	4604      	mov	r4, r0
   45906:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   45908:	429a      	cmp	r2, r3
   4590a:	d101      	bne.n	45910 <handle_event_common.isra.0+0x12>
}
   4590c:	bc30      	pop	{r4, r5}
   4590e:	4770      	bx	lr
		if (handler->event != event) {
   45910:	4611      	mov	r1, r2
   45912:	f811 5b08 	ldrb.w	r5, [r1], #8
   45916:	42a5      	cmp	r5, r4
   45918:	d106      	bne.n	45928 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   4591a:	8a01      	ldrh	r1, [r0, #16]
   4591c:	7853      	ldrb	r3, [r2, #1]
   4591e:	4299      	cmp	r1, r3
   45920:	d3f4      	bcc.n	4590c <handle_event_common.isra.0+0xe>
}
   45922:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   45924:	6853      	ldr	r3, [r2, #4]
   45926:	4718      	bx	r3
   45928:	460a      	mov	r2, r1
   4592a:	e7ed      	b.n	45908 <handle_event_common.isra.0+0xa>

0004592c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4592c:	f3bf 8f5b 	dmb	ish
   45930:	e850 3f00 	ldrex	r3, [r0]
   45934:	400b      	ands	r3, r1
   45936:	e840 3200 	strex	r2, r3, [r0]
   4593a:	2a00      	cmp	r2, #0
   4593c:	d1f8      	bne.n	45930 <atomic_and.isra.0+0x4>
   4593e:	f3bf 8f5b 	dmb	ish
}
   45942:	4770      	bx	lr

00045944 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   45944:	4770      	bx	lr

00045946 <hci_num_completed_packets>:
{
   45946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4594a:	68c7      	ldr	r7, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   4594c:	783a      	ldrb	r2, [r7, #0]
   4594e:	2301      	movs	r3, #1
   45950:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   45954:	8a02      	ldrh	r2, [r0, #16]
   45956:	4293      	cmp	r3, r2
   45958:	d95e      	bls.n	45a18 <hci_num_completed_packets+0xd2>
}
   4595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   4595e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   45960:	2b00      	cmp	r3, #0
   45962:	d132      	bne.n	459ca <hci_num_completed_packets+0x84>
   45964:	f382 8811 	msr	BASEPRI, r2
   45968:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   4596c:	4620      	mov	r0, r4
   4596e:	f000 fbe3 	bl	46138 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   45972:	3501      	adds	r5, #1
   45974:	783b      	ldrb	r3, [r7, #0]
   45976:	429d      	cmp	r5, r3
   45978:	daef      	bge.n	4595a <hci_num_completed_packets+0x14>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4597a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4597e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   45982:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   45986:	f7f5 fb7f 	bl	3b088 <bt_conn_lookup_handle>
		if (!conn) {
   4598a:	4604      	mov	r4, r0
   4598c:	2800      	cmp	r0, #0
   4598e:	d0f0      	beq.n	45972 <hci_num_completed_packets+0x2c>
			k_work_submit(&conn->tx_complete_work);
   45990:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   45994:	2e00      	cmp	r6, #0
   45996:	d0e9      	beq.n	4596c <hci_num_completed_packets+0x26>
	__asm__ volatile(
   45998:	f04f 0340 	mov.w	r3, #64	; 0x40
   4599c:	f3ef 8211 	mrs	r2, BASEPRI
   459a0:	f383 8812 	msr	BASEPRI_MAX, r3
   459a4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   459a8:	69e3      	ldr	r3, [r4, #28]
   459aa:	2b00      	cmp	r3, #0
   459ac:	d0d7      	beq.n	4595e <hci_num_completed_packets+0x18>
				conn->pending_no_cb--;
   459ae:	3b01      	subs	r3, #1
   459b0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   459b2:	f382 8811 	msr	BASEPRI, r2
   459b6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   459ba:	4620      	mov	r0, r4
   459bc:	f7f5 fa90 	bl	3aee0 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   459c0:	3e01      	subs	r6, #1
   459c2:	f7fb f889 	bl	40ad8 <z_impl_k_sem_give>
   459c6:	b2b6      	uxth	r6, r6
   459c8:	e7e4      	b.n	45994 <hci_num_completed_packets+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   459ca:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   459cc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   459ce:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   459d0:	428b      	cmp	r3, r1
	list->tail = node;
   459d2:	bf08      	it	eq
   459d4:	61a0      	streq	r0, [r4, #24]
   459d6:	f382 8811 	msr	BASEPRI, r2
   459da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   459de:	f04f 0240 	mov.w	r2, #64	; 0x40
   459e2:	f3ef 8111 	mrs	r1, BASEPRI
   459e6:	f382 8812 	msr	BASEPRI_MAX, r2
   459ea:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   459ee:	68da      	ldr	r2, [r3, #12]
   459f0:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   459f2:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   459f6:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   459fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   459fc:	b94a      	cbnz	r2, 45a12 <hci_num_completed_packets+0xcc>
	list->head = node;
   459fe:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   45a02:	f381 8811 	msr	BASEPRI, r1
   45a06:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   45a0a:	4648      	mov	r0, r9
   45a0c:	f7fb f9e0 	bl	40dd0 <k_work_submit>
   45a10:	e7d3      	b.n	459ba <hci_num_completed_packets+0x74>
	parent->next = child;
   45a12:	6013      	str	r3, [r2, #0]
	list->tail = node;
   45a14:	6263      	str	r3, [r4, #36]	; 0x24
}
   45a16:	e7f4      	b.n	45a02 <hci_num_completed_packets+0xbc>
	for (i = 0; i < evt->num_handles; i++) {
   45a18:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   45a1a:	46a8      	mov	r8, r5
   45a1c:	e7aa      	b.n	45974 <hci_num_completed_packets+0x2e>

00045a1e <le_conn_update_complete>:
{
   45a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   45a20:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle);
   45a22:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   45a26:	f7f5 fb2f 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   45a2a:	4604      	mov	r4, r0
   45a2c:	2800      	cmp	r0, #0
   45a2e:	d04e      	beq.n	45ace <le_conn_update_complete+0xb0>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   45a30:	782b      	ldrb	r3, [r5, #0]
   45a32:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   45a34:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   45a38:	d119      	bne.n	45a6e <le_conn_update_complete+0x50>
   45a3a:	78c3      	ldrb	r3, [r0, #3]
   45a3c:	2b01      	cmp	r3, #1
   45a3e:	d12a      	bne.n	45a96 <le_conn_update_complete+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   45a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
   45a44:	4630      	mov	r0, r6
   45a46:	f7ff ff2d 	bl	458a4 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   45a4a:	0542      	lsls	r2, r0, #21
   45a4c:	d40f      	bmi.n	45a6e <le_conn_update_complete+0x50>
		param.interval_min = conn->le.interval_min;
   45a4e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   45a52:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   45a54:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   45a56:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   45a5a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   45a5c:	4620      	mov	r0, r4
   45a5e:	f7f5 feb7 	bl	3b7d0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   45a62:	4620      	mov	r0, r4
}
   45a64:	b002      	add	sp, #8
   45a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   45a6a:	f000 bb65 	b.w	46138 <bt_conn_unref>
		if (!evt->status) {
   45a6e:	782b      	ldrb	r3, [r5, #0]
   45a70:	b98b      	cbnz	r3, 45a96 <le_conn_update_complete+0x78>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   45a72:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   45a76:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   45a7a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   45a7e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   45a82:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   45a86:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45a8a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   45a8e:	4630      	mov	r0, r6
   45a90:	f7ff ff4c 	bl	4592c <atomic_and.isra.0>
}
   45a94:	e017      	b.n	45ac6 <le_conn_update_complete+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45a96:	f3bf 8f5b 	dmb	ish
   45a9a:	6863      	ldr	r3, [r4, #4]
   45a9c:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   45aa0:	05db      	lsls	r3, r3, #23
   45aa2:	d5f2      	bpl.n	45a8a <le_conn_update_complete+0x6c>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   45aa4:	782b      	ldrb	r3, [r5, #0]
   45aa6:	2b20      	cmp	r3, #32
   45aa8:	d1ef      	bne.n	45a8a <le_conn_update_complete+0x6c>
			   conn->le.conn_param_retry_countdown) {
   45aaa:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   45aae:	2b00      	cmp	r3, #0
   45ab0:	d0eb      	beq.n	45a8a <le_conn_update_complete+0x6c>
			conn->le.conn_param_retry_countdown--;
   45ab2:	3b01      	subs	r3, #1
   45ab4:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   45ab8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   45abc:	2300      	movs	r3, #0
   45abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   45ac2:	f7fb f9ed 	bl	40ea0 <k_work_schedule>
		notify_le_param_updated(conn);
   45ac6:	4620      	mov	r0, r4
   45ac8:	f7f5 fbe2 	bl	3b290 <notify_le_param_updated>
   45acc:	e7c9      	b.n	45a62 <le_conn_update_complete+0x44>
}
   45ace:	b002      	add	sp, #8
   45ad0:	bd70      	pop	{r4, r5, r6, pc}

00045ad2 <hci_le_read_max_data_len>:
{
   45ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   45ad4:	4606      	mov	r6, r0
   45ad6:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   45ad8:	aa01      	add	r2, sp, #4
   45ada:	2100      	movs	r1, #0
   45adc:	f242 002f 	movw	r0, #8239	; 0x202f
   45ae0:	f7f3 fe8c 	bl	397fc <bt_hci_cmd_send_sync>
	if (err) {
   45ae4:	4604      	mov	r4, r0
   45ae6:	b948      	cbnz	r0, 45afc <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   45ae8:	9801      	ldr	r0, [sp, #4]
   45aea:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   45aec:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   45af0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   45af2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   45af6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   45af8:	f7f7 fa98 	bl	3d02c <net_buf_unref>
}
   45afc:	4620      	mov	r0, r4
   45afe:	b002      	add	sp, #8
   45b00:	bd70      	pop	{r4, r5, r6, pc}

00045b02 <bt_hci_disconnect>:
{
   45b02:	b570      	push	{r4, r5, r6, lr}
   45b04:	4606      	mov	r6, r0
   45b06:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   45b08:	f240 4006 	movw	r0, #1030	; 0x406
   45b0c:	2103      	movs	r1, #3
   45b0e:	f7f3 fe3b 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45b12:	4604      	mov	r4, r0
   45b14:	b168      	cbz	r0, 45b32 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   45b16:	2103      	movs	r1, #3
   45b18:	300c      	adds	r0, #12
   45b1a:	f001 fd52 	bl	475c2 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   45b1e:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   45b20:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45b22:	4621      	mov	r1, r4
   45b24:	2200      	movs	r2, #0
}
   45b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45b2a:	f240 4006 	movw	r0, #1030	; 0x406
   45b2e:	f7f3 be65 	b.w	397fc <bt_hci_cmd_send_sync>
}
   45b32:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45b36:	bd70      	pop	{r4, r5, r6, pc}

00045b38 <bt_le_set_data_len>:
{
   45b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45b3a:	4607      	mov	r7, r0
   45b3c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   45b3e:	f242 0022 	movw	r0, #8226	; 0x2022
   45b42:	2106      	movs	r1, #6
{
   45b44:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   45b46:	f7f3 fe1f 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45b4a:	4604      	mov	r4, r0
   45b4c:	b178      	cbz	r0, 45b6e <bt_le_set_data_len+0x36>
   45b4e:	2106      	movs	r1, #6
   45b50:	300c      	adds	r0, #12
   45b52:	f001 fd36 	bl	475c2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   45b56:	883b      	ldrh	r3, [r7, #0]
   45b58:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   45b5a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   45b5c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   45b5e:	4621      	mov	r1, r4
   45b60:	2200      	movs	r2, #0
}
   45b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   45b66:	f242 0022 	movw	r0, #8226	; 0x2022
   45b6a:	f7f3 be47 	b.w	397fc <bt_hci_cmd_send_sync>
}
   45b6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045b74 <bt_le_set_phy>:
{
   45b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45b78:	4681      	mov	r9, r0
   45b7a:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   45b7c:	f242 0032 	movw	r0, #8242	; 0x2032
   45b80:	2107      	movs	r1, #7
{
   45b82:	f89d a020 	ldrb.w	sl, [sp, #32]
   45b86:	4617      	mov	r7, r2
   45b88:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   45b8a:	f7f3 fdfd 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45b8e:	4605      	mov	r5, r0
   45b90:	b1a0      	cbz	r0, 45bbc <bt_le_set_phy+0x48>
   45b92:	2107      	movs	r1, #7
   45b94:	300c      	adds	r0, #12
   45b96:	f001 fd14 	bl	475c2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   45b9a:	f8b9 3000 	ldrh.w	r3, [r9]
   45b9e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   45ba0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   45ba4:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   45ba6:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   45ba8:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   45bac:	4629      	mov	r1, r5
   45bae:	2200      	movs	r2, #0
}
   45bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   45bb4:	f242 0032 	movw	r0, #8242	; 0x2032
   45bb8:	f7f3 be20 	b.w	397fc <bt_hci_cmd_send_sync>
}
   45bbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00045bc4 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   45bc4:	68c0      	ldr	r0, [r0, #12]
   45bc6:	f7f3 bead 	b.w	39924 <bt_hci_le_enh_conn_complete>

00045bca <bt_le_conn_params_valid>:
{
   45bca:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   45bcc:	8803      	ldrh	r3, [r0, #0]
   45bce:	8842      	ldrh	r2, [r0, #2]
   45bd0:	4293      	cmp	r3, r2
   45bd2:	d819      	bhi.n	45c08 <bt_le_conn_params_valid+0x3e>
   45bd4:	2b05      	cmp	r3, #5
   45bd6:	d917      	bls.n	45c08 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   45bd8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   45bdc:	d814      	bhi.n	45c08 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   45bde:	8883      	ldrh	r3, [r0, #4]
   45be0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   45be4:	d210      	bcs.n	45c08 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   45be6:	88c0      	ldrh	r0, [r0, #6]
   45be8:	f1a0 010a 	sub.w	r1, r0, #10
   45bec:	b289      	uxth	r1, r1
   45bee:	f640 4476 	movw	r4, #3190	; 0xc76
   45bf2:	42a1      	cmp	r1, r4
   45bf4:	d808      	bhi.n	45c08 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   45bf6:	3301      	adds	r3, #1
   45bf8:	b29b      	uxth	r3, r3
   45bfa:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   45bfc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   45c00:	bf34      	ite	cc
   45c02:	2001      	movcc	r0, #1
   45c04:	2000      	movcs	r0, #0
}
   45c06:	bd10      	pop	{r4, pc}
		return false;
   45c08:	2000      	movs	r0, #0
   45c0a:	e7fc      	b.n	45c06 <bt_le_conn_params_valid+0x3c>

00045c0c <le_conn_param_neg_reply>:
{
   45c0c:	b570      	push	{r4, r5, r6, lr}
   45c0e:	4606      	mov	r6, r0
   45c10:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   45c12:	f242 0021 	movw	r0, #8225	; 0x2021
   45c16:	2103      	movs	r1, #3
   45c18:	f7f3 fdb6 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45c1c:	4604      	mov	r4, r0
   45c1e:	b160      	cbz	r0, 45c3a <le_conn_param_neg_reply+0x2e>
   45c20:	2103      	movs	r1, #3
   45c22:	300c      	adds	r0, #12
   45c24:	f001 fccd 	bl	475c2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   45c28:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   45c2a:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45c2c:	4621      	mov	r1, r4
   45c2e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   45c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45c36:	f7f3 bfb3 	b.w	39ba0 <bt_hci_cmd_send>
}
   45c3a:	bd70      	pop	{r4, r5, r6, pc}

00045c3c <le_conn_param_req>:
{
   45c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   45c3e:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45c40:	78d9      	ldrb	r1, [r3, #3]
   45c42:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   45c44:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45c4a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   45c4e:	7959      	ldrb	r1, [r3, #5]
   45c50:	791a      	ldrb	r2, [r3, #4]
   45c52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45c56:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   45c5a:	799a      	ldrb	r2, [r3, #6]
   45c5c:	79d9      	ldrb	r1, [r3, #7]
   45c5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45c62:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45c66:	7a1a      	ldrb	r2, [r3, #8]
   45c68:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   45c6a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45c6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   45c70:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   45c72:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   45c76:	f7f5 fa07 	bl	3b088 <bt_conn_lookup_handle>
	if (!conn) {
   45c7a:	4606      	mov	r6, r0
   45c7c:	b928      	cbnz	r0, 45c8a <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   45c7e:	2102      	movs	r1, #2
   45c80:	4620      	mov	r0, r4
   45c82:	f7ff ffc3 	bl	45c0c <le_conn_param_neg_reply>
}
   45c86:	b003      	add	sp, #12
   45c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   45c8a:	4669      	mov	r1, sp
   45c8c:	f7f5 fb4c 	bl	3b328 <le_param_req>
   45c90:	b938      	cbnz	r0, 45ca2 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   45c92:	211e      	movs	r1, #30
   45c94:	4620      	mov	r0, r4
   45c96:	f7ff ffb9 	bl	45c0c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   45c9a:	4630      	mov	r0, r6
   45c9c:	f000 fa4c 	bl	46138 <bt_conn_unref>
   45ca0:	e7f1      	b.n	45c86 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   45ca2:	210e      	movs	r1, #14
   45ca4:	f242 0020 	movw	r0, #8224	; 0x2020
   45ca8:	f7f3 fd6e 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45cac:	4605      	mov	r5, r0
   45cae:	2800      	cmp	r0, #0
   45cb0:	d0f3      	beq.n	45c9a <le_conn_param_req+0x5e>
   45cb2:	210e      	movs	r1, #14
   45cb4:	300c      	adds	r0, #12
   45cb6:	f001 fc84 	bl	475c2 <net_buf_simple_add>
   45cba:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   45cbc:	220e      	movs	r2, #14
   45cbe:	2100      	movs	r1, #0
   45cc0:	f7ff fd31 	bl	45726 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   45cc4:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   45cc6:	f8bd 3000 	ldrh.w	r3, [sp]
   45cca:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   45ccc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   45cd0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   45cd2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   45cd6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   45cd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   45cdc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   45cde:	4629      	mov	r1, r5
   45ce0:	f242 0020 	movw	r0, #8224	; 0x2020
   45ce4:	f7f3 ff5c 	bl	39ba0 <bt_hci_cmd_send>
   45ce8:	e7d7      	b.n	45c9a <le_conn_param_req+0x5e>

00045cea <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   45cea:	2000      	movs	r0, #0
   45cec:	4770      	bx	lr

00045cee <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   45cee:	2000      	movs	r0, #0
   45cf0:	4770      	bx	lr

00045cf2 <bt_addr_le_eq>:
{
   45cf2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   45cf4:	2207      	movs	r2, #7
   45cf6:	f7ff fce4 	bl	456c2 <memcmp>
}
   45cfa:	fab0 f080 	clz	r0, r0
   45cfe:	0940      	lsrs	r0, r0, #5
   45d00:	bd08      	pop	{r3, pc}

00045d02 <bt_lookup_id_addr>:
	return addr;
   45d02:	2800      	cmp	r0, #0
}
   45d04:	bf0c      	ite	eq
   45d06:	4608      	moveq	r0, r1
   45d08:	2000      	movne	r0, #0
   45d0a:	4770      	bx	lr

00045d0c <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   45d0c:	b118      	cbz	r0, 45d16 <bt_id_set_adv_random_addr+0xa>
   45d0e:	b111      	cbz	r1, 45d16 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   45d10:	4608      	mov	r0, r1
   45d12:	f7f4 bb53 	b.w	3a3bc <set_random_address>
}
   45d16:	f06f 0015 	mvn.w	r0, #21
   45d1a:	4770      	bx	lr

00045d1c <bt_id_set_adv_private_addr>:
{
   45d1c:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   45d1e:	4604      	mov	r4, r0
   45d20:	b180      	cbz	r0, 45d44 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   45d22:	2106      	movs	r1, #6
   45d24:	4668      	mov	r0, sp
   45d26:	f7f9 fa15 	bl	3f154 <bt_rand>
	if (err) {
   45d2a:	b948      	cbnz	r0, 45d40 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   45d2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   45d30:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   45d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   45d36:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   45d38:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   45d3c:	f7ff ffe6 	bl	45d0c <bt_id_set_adv_random_addr>
}
   45d40:	b002      	add	sp, #8
   45d42:	bd10      	pop	{r4, pc}
		return -EINVAL;
   45d44:	f06f 0015 	mvn.w	r0, #21
   45d48:	e7fa      	b.n	45d40 <bt_id_set_adv_private_addr+0x24>

00045d4a <bt_id_adv_random_addr_check>:
}
   45d4a:	3800      	subs	r0, #0
   45d4c:	bf18      	it	ne
   45d4e:	2001      	movne	r0, #1
   45d50:	4770      	bx	lr

00045d52 <get_adv_channel_map>:
{
   45d52:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   45d54:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   45d58:	bf0c      	ite	eq
   45d5a:	2007      	moveq	r0, #7
   45d5c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   45d5e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   45d60:	bf48      	it	mi
   45d62:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   45d66:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   45d68:	bf48      	it	mi
   45d6a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   45d6e:	4770      	bx	lr

00045d70 <atomic_get>:
   45d70:	f3bf 8f5b 	dmb	ish
   45d74:	6800      	ldr	r0, [r0, #0]
   45d76:	f3bf 8f5b 	dmb	ish
}
   45d7a:	4770      	bx	lr

00045d7c <atomic_and>:
{
   45d7c:	b510      	push	{r4, lr}
   45d7e:	4603      	mov	r3, r0
}
   45d80:	f3bf 8f5b 	dmb	ish
   45d84:	e853 0f00 	ldrex	r0, [r3]
   45d88:	ea00 0201 	and.w	r2, r0, r1
   45d8c:	e843 2400 	strex	r4, r2, [r3]
   45d90:	2c00      	cmp	r4, #0
   45d92:	d1f7      	bne.n	45d84 <atomic_and+0x8>
   45d94:	f3bf 8f5b 	dmb	ish
   45d98:	bd10      	pop	{r4, pc}

00045d9a <hci_set_ad>:
{
   45d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45d9e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45da0:	2120      	movs	r1, #32
{
   45da2:	9000      	str	r0, [sp, #0]
   45da4:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45da6:	f7f3 fcef 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45daa:	4605      	mov	r5, r0
   45dac:	2800      	cmp	r0, #0
   45dae:	d050      	beq.n	45e52 <hci_set_ad+0xb8>
   45db0:	2120      	movs	r1, #32
   45db2:	300c      	adds	r0, #12
   45db4:	f001 fc05 	bl	475c2 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   45db8:	2220      	movs	r2, #32
   45dba:	2100      	movs	r1, #0
   45dbc:	4681      	mov	r9, r0
   45dbe:	f7ff fcb2 	bl	45726 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   45dc2:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   45dc6:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   45dca:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   45dcc:	f8d4 8000 	ldr.w	r8, [r4]
   45dd0:	2300      	movs	r3, #0
   45dd2:	6862      	ldr	r2, [r4, #4]
   45dd4:	4293      	cmp	r3, r2
   45dd6:	d30c      	bcc.n	45df2 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   45dd8:	3408      	adds	r4, #8
   45dda:	45a2      	cmp	sl, r4
   45ddc:	d1f6      	bne.n	45dcc <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45dde:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   45de0:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45de4:	2200      	movs	r2, #0
   45de6:	4629      	mov	r1, r5
}
   45de8:	b003      	add	sp, #12
   45dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   45dee:	f7f3 bd05 	b.w	397fc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   45df2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   45df6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   45dfa:	1cb0      	adds	r0, r6, #2
   45dfc:	1811      	adds	r1, r2, r0
   45dfe:	291f      	cmp	r1, #31
   45e00:	d908      	bls.n	45e14 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   45e02:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   45e06:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   45e0a:	d11a      	bne.n	45e42 <hci_set_ad+0xa8>
   45e0c:	2a00      	cmp	r2, #0
   45e0e:	dd18      	ble.n	45e42 <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   45e10:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   45e14:	b2d7      	uxtb	r7, r2
   45e16:	1c79      	adds	r1, r7, #1
   45e18:	f80b 1006 	strb.w	r1, [fp, r6]
   45e1c:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   45e1e:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   45e20:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   45e24:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   45e28:	f8d8 1004 	ldr.w	r1, [r8, #4]
   45e2c:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   45e2e:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   45e30:	f7ff fc6e 	bl	45710 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   45e34:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   45e36:	4437      	add	r7, r6
   45e38:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   45e3a:	3301      	adds	r3, #1
   45e3c:	f108 0808 	add.w	r8, r8, #8
   45e40:	e7c7      	b.n	45dd2 <hci_set_ad+0x38>
		net_buf_unref(buf);
   45e42:	4628      	mov	r0, r5
   45e44:	f7f7 f8f2 	bl	3d02c <net_buf_unref>
		return err;
   45e48:	f06f 0015 	mvn.w	r0, #21
}
   45e4c:	b003      	add	sp, #12
   45e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   45e52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45e56:	e7f9      	b.n	45e4c <hci_set_ad+0xb2>

00045e58 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   45e58:	2301      	movs	r3, #1
{
   45e5a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   45e5c:	fa03 f101 	lsl.w	r1, r3, r1
{
   45e60:	4604      	mov	r4, r0
	if (val) {
   45e62:	b162      	cbz	r2, 45e7e <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45e64:	f3bf 8f5b 	dmb	ish
   45e68:	e854 3f00 	ldrex	r3, [r4]
   45e6c:	430b      	orrs	r3, r1
   45e6e:	e844 3200 	strex	r2, r3, [r4]
   45e72:	2a00      	cmp	r2, #0
   45e74:	d1f8      	bne.n	45e68 <atomic_set_bit_to+0x10>
   45e76:	f3bf 8f5b 	dmb	ish
	}
}
   45e7a:	bc10      	pop	{r4}
   45e7c:	4770      	bx	lr
   45e7e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45e80:	43c9      	mvns	r1, r1
   45e82:	f7ff bf7b 	b.w	45d7c <atomic_and>

00045e86 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   45e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45e8a:	b087      	sub	sp, #28
   45e8c:	4605      	mov	r5, r0
   45e8e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   45e92:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   45e96:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   45e9a:	460c      	mov	r4, r1
   45e9c:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   45e9e:	2100      	movs	r1, #0
   45ea0:	2210      	movs	r2, #16
   45ea2:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   45ea4:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   45ea6:	f7ff fc3e 	bl	45726 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   45eaa:	b9ee      	cbnz	r6, 45ee8 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   45eac:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   45eb0:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45eb2:	a902      	add	r1, sp, #8
   45eb4:	f242 0008 	movw	r0, #8200	; 0x2008
   45eb8:	f7ff ff6f 	bl	45d9a <hci_set_ad>
		if (err) {
   45ebc:	4604      	mov	r4, r0
   45ebe:	b978      	cbnz	r0, 45ee0 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   45ec0:	f1ba 0f00 	cmp.w	sl, #0
   45ec4:	d13e      	bne.n	45f44 <le_adv_update.constprop.0+0xbe>
   45ec6:	3510      	adds	r5, #16
   45ec8:	f3bf 8f5b 	dmb	ish
   45ecc:	e855 3f00 	ldrex	r3, [r5]
   45ed0:	f043 0304 	orr.w	r3, r3, #4
   45ed4:	e845 3200 	strex	r2, r3, [r5]
   45ed8:	2a00      	cmp	r2, #0
   45eda:	d1f7      	bne.n	45ecc <le_adv_update.constprop.0+0x46>
   45edc:	f3bf 8f5b 	dmb	ish
}
   45ee0:	4620      	mov	r0, r4
   45ee2:	b007      	add	sp, #28
   45ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   45ee8:	f7f4 fa4c 	bl	3a384 <bt_get_name>
   45eec:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   45eee:	b9e4      	cbnz	r4, 45f2a <le_adv_update.constprop.0+0xa4>
   45ef0:	bb37      	cbnz	r7, 45f40 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   45ef2:	4658      	mov	r0, fp
   45ef4:	f7ff fbd5 	bl	456a2 <strlen>
   45ef8:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   45efa:	2e01      	cmp	r6, #1
		d[0].data = ad;
   45efc:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   45f00:	f88d 3000 	strb.w	r3, [sp]
   45f04:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   45f08:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   45f0c:	d1d0      	bne.n	45eb0 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   45f0e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   45f12:	9605      	str	r6, [sp, #20]
			d_len = 2;
   45f14:	2202      	movs	r2, #2
   45f16:	e7cc      	b.n	45eb2 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45f18:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   45f1c:	3a08      	subs	r2, #8
   45f1e:	2a01      	cmp	r2, #1
   45f20:	d925      	bls.n	45f6e <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45f22:	3301      	adds	r3, #1
   45f24:	4598      	cmp	r8, r3
   45f26:	d1f7      	bne.n	45f18 <le_adv_update.constprop.0+0x92>
   45f28:	e7e2      	b.n	45ef0 <le_adv_update.constprop.0+0x6a>
   45f2a:	2300      	movs	r3, #0
   45f2c:	e7fa      	b.n	45f24 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45f2e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   45f32:	3a08      	subs	r2, #8
   45f34:	2a01      	cmp	r2, #1
   45f36:	d91a      	bls.n	45f6e <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45f38:	3301      	adds	r3, #1
   45f3a:	4599      	cmp	r9, r3
   45f3c:	d1f7      	bne.n	45f2e <le_adv_update.constprop.0+0xa8>
   45f3e:	e7d8      	b.n	45ef2 <le_adv_update.constprop.0+0x6c>
   45f40:	2300      	movs	r3, #0
   45f42:	e7fa      	b.n	45f3a <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   45f44:	2e02      	cmp	r6, #2
   45f46:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   45f4a:	bf08      	it	eq
   45f4c:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45f4e:	a902      	add	r1, sp, #8
			d_len = 2;
   45f50:	bf08      	it	eq
   45f52:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45f54:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   45f58:	bf08      	it	eq
   45f5a:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   45f5e:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45f62:	f7ff ff1a 	bl	45d9a <hci_set_ad>
		if (err) {
   45f66:	2800      	cmp	r0, #0
   45f68:	d0ad      	beq.n	45ec6 <le_adv_update.constprop.0+0x40>
   45f6a:	4604      	mov	r4, r0
   45f6c:	e7b8      	b.n	45ee0 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   45f6e:	f06f 0415 	mvn.w	r4, #21
   45f72:	e7b5      	b.n	45ee0 <le_adv_update.constprop.0+0x5a>

00045f74 <get_adv_name_type>:
{
   45f74:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   45f76:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   45f7a:	4618      	mov	r0, r3
   45f7c:	f7ff fef8 	bl	45d70 <atomic_get>
   45f80:	0582      	lsls	r2, r0, #22
   45f82:	d405      	bmi.n	45f90 <get_adv_name_type+0x1c>
   45f84:	4618      	mov	r0, r3
   45f86:	f7ff fef3 	bl	45d70 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   45f8a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   45f8e:	bd08      	pop	{r3, pc}
		return ADV_NAME_TYPE_SD;
   45f90:	2002      	movs	r0, #2
   45f92:	e7fc      	b.n	45f8e <get_adv_name_type+0x1a>

00045f94 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   45f94:	6843      	ldr	r3, [r0, #4]
   45f96:	f013 0008 	ands.w	r0, r3, #8
   45f9a:	d00a      	beq.n	45fb2 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   45f9c:	035a      	lsls	r2, r3, #13
   45f9e:	d407      	bmi.n	45fb0 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   45fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   45fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   45fa8:	bf14      	ite	ne
   45faa:	2002      	movne	r0, #2
   45fac:	2001      	moveq	r0, #1
   45fae:	4770      	bx	lr
   45fb0:	2001      	movs	r0, #1
}
   45fb2:	4770      	bx	lr

00045fb4 <bt_le_adv_set_enable_legacy>:
{
   45fb4:	b570      	push	{r4, r5, r6, lr}
   45fb6:	4606      	mov	r6, r0
   45fb8:	b086      	sub	sp, #24
   45fba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   45fbc:	f242 000a 	movw	r0, #8202	; 0x200a
   45fc0:	2101      	movs	r1, #1
   45fc2:	f7f3 fbe1 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   45fc6:	4604      	mov	r4, r0
   45fc8:	b1b0      	cbz	r0, 45ff8 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   45fca:	300c      	adds	r0, #12
	if (enable) {
   45fcc:	b195      	cbz	r5, 45ff4 <bt_le_adv_set_enable_legacy+0x40>
   45fce:	2101      	movs	r1, #1
   45fd0:	f001 fb06 	bl	475e0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   45fd4:	f106 0210 	add.w	r2, r6, #16
   45fd8:	a903      	add	r1, sp, #12
   45fda:	4620      	mov	r0, r4
   45fdc:	9500      	str	r5, [sp, #0]
   45fde:	2307      	movs	r3, #7
   45fe0:	f7f3 fbc0 	bl	39764 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   45fe4:	2200      	movs	r2, #0
   45fe6:	4621      	mov	r1, r4
   45fe8:	f242 000a 	movw	r0, #8202	; 0x200a
   45fec:	f7f3 fc06 	bl	397fc <bt_hci_cmd_send_sync>
}
   45ff0:	b006      	add	sp, #24
   45ff2:	bd70      	pop	{r4, r5, r6, pc}
   45ff4:	4629      	mov	r1, r5
   45ff6:	e7eb      	b.n	45fd0 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   45ff8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45ffc:	e7f8      	b.n	45ff0 <bt_le_adv_set_enable_legacy+0x3c>

00045ffe <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   45ffe:	3018      	adds	r0, #24
   46000:	f002 ba83 	b.w	4850a <k_work_cancel_delayable>

00046004 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   46004:	f7f4 bd9e 	b.w	3ab44 <bt_le_adv_stop>

00046008 <tx_complete_work>:
	tx_notify(conn);
   46008:	3828      	subs	r0, #40	; 0x28
   4600a:	f7f4 be5f 	b.w	3accc <tx_notify>

0004600e <bt_conn_reset_rx_state>:
{
   4600e:	b510      	push	{r4, lr}
   46010:	4604      	mov	r4, r0
	if (!conn->rx) {
   46012:	6900      	ldr	r0, [r0, #16]
   46014:	b118      	cbz	r0, 4601e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   46016:	f7f7 f809 	bl	3d02c <net_buf_unref>
	conn->rx = NULL;
   4601a:	2300      	movs	r3, #0
   4601c:	6123      	str	r3, [r4, #16]
}
   4601e:	bd10      	pop	{r4, pc}

00046020 <conn_cleanup>:
{
   46020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46024:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   46026:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   46028:	f104 0638 	add.w	r6, r4, #56	; 0x38
   4602c:	2300      	movs	r3, #0
   4602e:	2200      	movs	r2, #0
   46030:	4630      	mov	r0, r6
   46032:	f001 fa6b 	bl	4750c <net_buf_get>
   46036:	4603      	mov	r3, r0
   46038:	b950      	cbnz	r0, 46050 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   4603a:	4620      	mov	r0, r4
   4603c:	f7ff ffe7 	bl	4600e <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   46040:	f104 0058 	add.w	r0, r4, #88	; 0x58
   46044:	2200      	movs	r2, #0
}
   46046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4604a:	2300      	movs	r3, #0
   4604c:	f7fa bf5c 	b.w	40f08 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   46050:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   46052:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   46054:	f7f6 ffea 	bl	3d02c <net_buf_unref>
		if (tx) {
   46058:	2d00      	cmp	r5, #0
   4605a:	d0e7      	beq.n	4602c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   4605c:	4629      	mov	r1, r5
   4605e:	4620      	mov	r0, r4
   46060:	f7f4 fe64 	bl	3ad2c <conn_tx_destroy>
   46064:	e7e0      	b.n	46028 <conn_cleanup+0x8>

00046066 <bt_conn_recv>:
{
   46066:	b570      	push	{r4, r5, r6, lr}
   46068:	4616      	mov	r6, r2
   4606a:	4604      	mov	r4, r0
   4606c:	460d      	mov	r5, r1
	tx_notify(conn);
   4606e:	f7f4 fe2d 	bl	3accc <tx_notify>
	switch (flags) {
   46072:	2e01      	cmp	r6, #1
   46074:	d017      	beq.n	460a6 <bt_conn_recv+0x40>
   46076:	2e02      	cmp	r6, #2
   46078:	d117      	bne.n	460aa <bt_conn_recv+0x44>
		if (conn->rx) {
   4607a:	6923      	ldr	r3, [r4, #16]
   4607c:	b113      	cbz	r3, 46084 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4607e:	4620      	mov	r0, r4
   46080:	f7ff ffc5 	bl	4600e <bt_conn_reset_rx_state>
		conn->rx = buf;
   46084:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   46086:	6921      	ldr	r1, [r4, #16]
   46088:	8a0a      	ldrh	r2, [r1, #16]
   4608a:	2a01      	cmp	r2, #1
   4608c:	d937      	bls.n	460fe <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4608e:	68cb      	ldr	r3, [r1, #12]
   46090:	881b      	ldrh	r3, [r3, #0]
   46092:	3304      	adds	r3, #4
   46094:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   46096:	429a      	cmp	r2, r3
   46098:	d331      	bcc.n	460fe <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   4609a:	d928      	bls.n	460ee <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   4609c:	4620      	mov	r0, r4
}
   4609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   460a2:	f7ff bfb4 	b.w	4600e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   460a6:	6920      	ldr	r0, [r4, #16]
   460a8:	b918      	cbnz	r0, 460b2 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   460aa:	4620      	mov	r0, r4
   460ac:	f7ff ffaf 	bl	4600e <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   460b0:	e001      	b.n	460b6 <bt_conn_recv+0x50>
		if (!buf->len) {
   460b2:	8a2e      	ldrh	r6, [r5, #16]
   460b4:	b926      	cbnz	r6, 460c0 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   460b6:	4628      	mov	r0, r5
}
   460b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   460bc:	f7f6 bfb6 	b.w	3d02c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   460c0:	300c      	adds	r0, #12
   460c2:	f001 fab9 	bl	47638 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   460c6:	4286      	cmp	r6, r0
   460c8:	d907      	bls.n	460da <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   460ca:	6921      	ldr	r1, [r4, #16]
   460cc:	2200      	movs	r2, #0
   460ce:	4620      	mov	r0, r4
   460d0:	f000 f974 	bl	463bc <bt_l2cap_recv>
			conn->rx = NULL;
   460d4:	2300      	movs	r3, #0
   460d6:	6123      	str	r3, [r4, #16]
   460d8:	e7ed      	b.n	460b6 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   460da:	6920      	ldr	r0, [r4, #16]
   460dc:	8a2a      	ldrh	r2, [r5, #16]
   460de:	68e9      	ldr	r1, [r5, #12]
   460e0:	300c      	adds	r0, #12
   460e2:	f001 fa74 	bl	475ce <net_buf_simple_add_mem>
		net_buf_unref(buf);
   460e6:	4628      	mov	r0, r5
   460e8:	f7f6 ffa0 	bl	3d02c <net_buf_unref>
		break;
   460ec:	e7cb      	b.n	46086 <bt_conn_recv+0x20>
	conn->rx = NULL;
   460ee:	2300      	movs	r3, #0
   460f0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   460f2:	4620      	mov	r0, r4
   460f4:	2201      	movs	r2, #1
}
   460f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   460fa:	f000 b95f 	b.w	463bc <bt_l2cap_recv>
}
   460fe:	bd70      	pop	{r4, r5, r6, pc}

00046100 <bt_conn_ref>:
{
   46100:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   46102:	f3bf 8f5b 	dmb	ish
   46106:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   4610a:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   4610e:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   46112:	b17b      	cbz	r3, 46134 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   46114:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   46118:	1c59      	adds	r1, r3, #1
   4611a:	e852 4f00 	ldrex	r4, [r2]
   4611e:	429c      	cmp	r4, r3
   46120:	d104      	bne.n	4612c <bt_conn_ref+0x2c>
   46122:	e842 1c00 	strex	ip, r1, [r2]
   46126:	f1bc 0f00 	cmp.w	ip, #0
   4612a:	d1f6      	bne.n	4611a <bt_conn_ref+0x1a>
   4612c:	f3bf 8f5b 	dmb	ish
   46130:	d1e7      	bne.n	46102 <bt_conn_ref+0x2>
}
   46132:	bd10      	pop	{r4, pc}
			return NULL;
   46134:	4618      	mov	r0, r3
   46136:	e7fc      	b.n	46132 <bt_conn_ref+0x32>

00046138 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   46138:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4613c:	f3bf 8f5b 	dmb	ish
   46140:	e853 1f00 	ldrex	r1, [r3]
   46144:	3901      	subs	r1, #1
   46146:	e843 1200 	strex	r2, r1, [r3]
   4614a:	2a00      	cmp	r2, #0
   4614c:	d1f8      	bne.n	46140 <bt_conn_unref+0x8>
   4614e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   46152:	8842      	ldrh	r2, [r0, #2]
   46154:	f240 1301 	movw	r3, #257	; 0x101
   46158:	429a      	cmp	r2, r3
   4615a:	d108      	bne.n	4616e <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4615c:	f3bf 8f5b 	dmb	ish
   46160:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   46164:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   46168:	b90b      	cbnz	r3, 4616e <bt_conn_unref+0x36>
		bt_le_adv_resume();
   4616a:	f7f4 bd27 	b.w	3abbc <bt_le_adv_resume>
}
   4616e:	4770      	bx	lr

00046170 <conn_lookup_handle>:
{
   46170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   46174:	4607      	mov	r7, r0
   46176:	460e      	mov	r6, r1
   46178:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   4617a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4617c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   46180:	42b4      	cmp	r4, r6
   46182:	d103      	bne.n	4618c <conn_lookup_handle+0x1c>
	return NULL;
   46184:	2300      	movs	r3, #0
}
   46186:	4618      	mov	r0, r3
   46188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4618c:	fb09 7004 	mla	r0, r9, r4, r7
   46190:	f7ff ffb6 	bl	46100 <bt_conn_ref>
   46194:	4603      	mov	r3, r0
		if (!conn) {
   46196:	b158      	cbz	r0, 461b0 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   46198:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4619a:	2d01      	cmp	r5, #1
   4619c:	d002      	beq.n	461a4 <conn_lookup_handle+0x34>
   4619e:	3d07      	subs	r5, #7
   461a0:	2d01      	cmp	r5, #1
   461a2:	d803      	bhi.n	461ac <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   461a4:	881a      	ldrh	r2, [r3, #0]
   461a6:	4542      	cmp	r2, r8
   461a8:	d0ed      	beq.n	46186 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   461aa:	4618      	mov	r0, r3
   461ac:	f7ff ffc4 	bl	46138 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   461b0:	3401      	adds	r4, #1
   461b2:	e7e5      	b.n	46180 <conn_lookup_handle+0x10>

000461b4 <conn_destroy>:
{
   461b4:	b510      	push	{r4, lr}
	if (conn->state == BT_CONN_CONNECTED ||
   461b6:	7a83      	ldrb	r3, [r0, #10]
   461b8:	3b07      	subs	r3, #7
   461ba:	2b01      	cmp	r3, #1
{
   461bc:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_CONNECTED ||
   461be:	d802      	bhi.n	461c6 <conn_destroy+0x12>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   461c0:	2101      	movs	r1, #1
   461c2:	f7f4 ff69 	bl	3b098 <bt_conn_set_state>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   461c6:	4620      	mov	r0, r4
   461c8:	2100      	movs	r1, #0
}
   461ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   461ce:	f7f4 bf63 	b.w	3b098 <bt_conn_set_state>

000461d2 <bt_conn_connected>:
{
   461d2:	b510      	push	{r4, lr}
   461d4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   461d6:	f7f5 faad 	bl	3b734 <bt_l2cap_connected>
	notify_connected(conn);
   461da:	4620      	mov	r0, r4
}
   461dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   461e0:	f7f4 bd56 	b.w	3ac90 <notify_connected>

000461e4 <bt_conn_is_peer_addr_le>:
{
   461e4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   461e6:	7a03      	ldrb	r3, [r0, #8]
   461e8:	428b      	cmp	r3, r1
{
   461ea:	4604      	mov	r4, r0
   461ec:	4615      	mov	r5, r2
	if (id != conn->id) {
   461ee:	d115      	bne.n	4621c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   461f0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   461f4:	2207      	movs	r2, #7
   461f6:	4628      	mov	r0, r5
   461f8:	f7ff fa63 	bl	456c2 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   461fc:	b180      	cbz	r0, 46220 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   461fe:	78e3      	ldrb	r3, [r4, #3]
   46200:	2207      	movs	r2, #7
   46202:	b943      	cbnz	r3, 46216 <bt_conn_is_peer_addr_le+0x32>
   46204:	f104 0196 	add.w	r1, r4, #150	; 0x96
   46208:	4628      	mov	r0, r5
   4620a:	f7ff fa5a 	bl	456c2 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   4620e:	fab0 f080 	clz	r0, r0
   46212:	0940      	lsrs	r0, r0, #5
}
   46214:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   46216:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4621a:	e7f5      	b.n	46208 <bt_conn_is_peer_addr_le+0x24>
		return false;
   4621c:	2000      	movs	r0, #0
   4621e:	e7f9      	b.n	46214 <bt_conn_is_peer_addr_le+0x30>
		return true;
   46220:	2001      	movs	r0, #1
   46222:	e7f7      	b.n	46214 <bt_conn_is_peer_addr_le+0x30>

00046224 <bt_conn_exists_le>:
{
   46224:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   46226:	f7f5 f8d3 	bl	3b3d0 <bt_conn_lookup_addr_le>
	if (conn) {
   4622a:	b110      	cbz	r0, 46232 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4622c:	f7ff ff84 	bl	46138 <bt_conn_unref>
		return true;
   46230:	2001      	movs	r0, #1
}
   46232:	bd08      	pop	{r3, pc}

00046234 <bt_conn_le_conn_update>:
{
   46234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46236:	4607      	mov	r7, r0
   46238:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4623a:	f242 0013 	movw	r0, #8211	; 0x2013
   4623e:	210e      	movs	r1, #14
   46240:	f7f3 faa2 	bl	39788 <bt_hci_cmd_create>
	if (!buf) {
   46244:	4606      	mov	r6, r0
   46246:	b1d0      	cbz	r0, 4627e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   46248:	210e      	movs	r1, #14
   4624a:	300c      	adds	r0, #12
   4624c:	f001 f9b9 	bl	475c2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   46250:	220e      	movs	r2, #14
   46252:	4604      	mov	r4, r0
   46254:	2100      	movs	r1, #0
   46256:	f7ff fa66 	bl	45726 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4625a:	883b      	ldrh	r3, [r7, #0]
   4625c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4625e:	882b      	ldrh	r3, [r5, #0]
   46260:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   46262:	886b      	ldrh	r3, [r5, #2]
   46264:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   46266:	88ab      	ldrh	r3, [r5, #4]
   46268:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4626a:	88eb      	ldrh	r3, [r5, #6]
   4626c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4626e:	4631      	mov	r1, r6
   46270:	2200      	movs	r2, #0
}
   46272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   46276:	f242 0013 	movw	r0, #8211	; 0x2013
   4627a:	f7f3 babf 	b.w	397fc <bt_hci_cmd_send_sync>
}
   4627e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   46282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00046284 <l2cap_connected>:
}
   46284:	4770      	bx	lr

00046286 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   46286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46288:	4607      	mov	r7, r0
   4628a:	460e      	mov	r6, r1
   4628c:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4628e:	2300      	movs	r3, #0
   46290:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   46294:	2104      	movs	r1, #4
   46296:	2000      	movs	r0, #0
   46298:	f7f4 ffe8 	bl	3b26c <bt_conn_create_pdu_timeout>
	if (!buf) {
   4629c:	4604      	mov	r4, r0
   4629e:	b130      	cbz	r0, 462ae <l2cap_create_le_sig_pdu.constprop.0+0x28>
   462a0:	2104      	movs	r1, #4
   462a2:	300c      	adds	r0, #12
   462a4:	f001 f98d 	bl	475c2 <net_buf_simple_add>
	hdr->code = code;
   462a8:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   462aa:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   462ac:	8045      	strh	r5, [r0, #2]
}
   462ae:	4620      	mov	r0, r4
   462b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000462b2 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   462b2:	4770      	bx	lr

000462b4 <bt_l2cap_chan_del>:
{
   462b4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   462b6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   462ba:	4604      	mov	r4, r0
	if (!chan->conn) {
   462bc:	b123      	cbz	r3, 462c8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   462be:	686b      	ldr	r3, [r5, #4]
   462c0:	b103      	cbz	r3, 462c4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   462c2:	4798      	blx	r3
	chan->conn = NULL;
   462c4:	2300      	movs	r3, #0
   462c6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   462c8:	68e3      	ldr	r3, [r4, #12]
   462ca:	b10b      	cbz	r3, 462d0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   462cc:	4620      	mov	r0, r4
   462ce:	4798      	blx	r3
	if (ops->released) {
   462d0:	6a2b      	ldr	r3, [r5, #32]
   462d2:	b11b      	cbz	r3, 462dc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   462d4:	4620      	mov	r0, r4
}
   462d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   462da:	4718      	bx	r3
}
   462dc:	bd70      	pop	{r4, r5, r6, pc}

000462de <bt_l2cap_disconnected>:
{
   462de:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   462e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   462e2:	b130      	cbz	r0, 462f2 <bt_l2cap_disconnected+0x14>
	return node->next;
   462e4:	f850 4908 	ldr.w	r4, [r0], #-8
   462e8:	b104      	cbz	r4, 462ec <bt_l2cap_disconnected+0xe>
   462ea:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   462ec:	f7ff ffe2 	bl	462b4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   462f0:	b904      	cbnz	r4, 462f4 <bt_l2cap_disconnected+0x16>
}
   462f2:	bd38      	pop	{r3, r4, r5, pc}
   462f4:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   462f6:	b12d      	cbz	r5, 46304 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   462f8:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   462fa:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   462fc:	f7ff ffda 	bl	462b4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   46300:	462c      	mov	r4, r5
   46302:	e7f7      	b.n	462f4 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   46304:	4620      	mov	r0, r4
}
   46306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   4630a:	f7ff bfd3 	b.w	462b4 <bt_l2cap_chan_del>

0004630e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4630e:	3104      	adds	r1, #4
   46310:	f7f4 bfac 	b.w	3b26c <bt_conn_create_pdu_timeout>

00046314 <bt_l2cap_send_cb>:
{
   46314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46318:	4614      	mov	r4, r2
   4631a:	4605      	mov	r5, r0
   4631c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4631e:	f102 000c 	add.w	r0, r2, #12
   46322:	2104      	movs	r1, #4
   46324:	461e      	mov	r6, r3
   46326:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4632a:	f001 f961 	bl	475f0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4632e:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   46330:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   46332:	3a04      	subs	r2, #4
   46334:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   46336:	4643      	mov	r3, r8
   46338:	4632      	mov	r2, r6
   4633a:	4621      	mov	r1, r4
   4633c:	4628      	mov	r0, r5
}
   4633e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   46342:	f7f4 be0b 	b.w	3af5c <bt_conn_send_cb>

00046346 <l2cap_recv>:
{
   46346:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   46348:	8a0b      	ldrh	r3, [r1, #16]
   4634a:	2b03      	cmp	r3, #3
{
   4634c:	4605      	mov	r5, r0
   4634e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   46350:	d927      	bls.n	463a2 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   46352:	2104      	movs	r1, #4
   46354:	f104 000c 	add.w	r0, r4, #12
   46358:	f001 f95a 	bl	47610 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4635c:	8a23      	ldrh	r3, [r4, #16]
   4635e:	8842      	ldrh	r2, [r0, #2]
   46360:	429a      	cmp	r2, r3
   46362:	d11e      	bne.n	463a2 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   46364:	7841      	ldrb	r1, [r0, #1]
   46366:	b1e1      	cbz	r1, 463a2 <l2cap_recv+0x5c>
	switch (hdr->code) {
   46368:	7803      	ldrb	r3, [r0, #0]
   4636a:	2b01      	cmp	r3, #1
   4636c:	d019      	beq.n	463a2 <l2cap_recv+0x5c>
   4636e:	2b13      	cmp	r3, #19
   46370:	d017      	beq.n	463a2 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   46372:	2202      	movs	r2, #2
   46374:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   46376:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   46378:	f7ff ff85 	bl	46286 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4637c:	4604      	mov	r4, r0
   4637e:	b180      	cbz	r0, 463a2 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   46380:	2102      	movs	r1, #2
   46382:	300c      	adds	r0, #12
   46384:	f001 f91d 	bl	475c2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   46388:	2300      	movs	r3, #0
   4638a:	7003      	strb	r3, [r0, #0]
   4638c:	7043      	strb	r3, [r0, #1]
   4638e:	4622      	mov	r2, r4
   46390:	9300      	str	r3, [sp, #0]
   46392:	2105      	movs	r1, #5
   46394:	4628      	mov	r0, r5
   46396:	f7ff ffbd 	bl	46314 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4639a:	b110      	cbz	r0, 463a2 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   4639c:	4620      	mov	r0, r4
   4639e:	f7f6 fe45 	bl	3d02c <net_buf_unref>
}
   463a2:	2000      	movs	r0, #0
   463a4:	b003      	add	sp, #12
   463a6:	bd30      	pop	{r4, r5, pc}

000463a8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   463a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   463aa:	b130      	cbz	r0, 463ba <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   463ac:	8983      	ldrh	r3, [r0, #12]
   463ae:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   463b0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   463b4:	d001      	beq.n	463ba <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   463b6:	6880      	ldr	r0, [r0, #8]
   463b8:	e7f7      	b.n	463aa <bt_l2cap_le_lookup_rx_cid+0x2>
}
   463ba:	4770      	bx	lr

000463bc <bt_l2cap_recv>:
{
   463bc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   463be:	8a0b      	ldrh	r3, [r1, #16]
   463c0:	2b03      	cmp	r3, #3
{
   463c2:	4605      	mov	r5, r0
   463c4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   463c6:	d804      	bhi.n	463d2 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   463c8:	4620      	mov	r0, r4
}
   463ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   463ce:	f7f6 be2d 	b.w	3d02c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   463d2:	2104      	movs	r1, #4
   463d4:	f104 000c 	add.w	r0, r4, #12
   463d8:	f001 f91a 	bl	47610 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   463dc:	8841      	ldrh	r1, [r0, #2]
   463de:	4628      	mov	r0, r5
   463e0:	f7ff ffe2 	bl	463a8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   463e4:	2800      	cmp	r0, #0
   463e6:	d0ef      	beq.n	463c8 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   463e8:	6843      	ldr	r3, [r0, #4]
   463ea:	4621      	mov	r1, r4
   463ec:	695b      	ldr	r3, [r3, #20]
   463ee:	4798      	blx	r3
   463f0:	e7ea      	b.n	463c8 <bt_l2cap_recv+0xc>

000463f2 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   463f2:	4770      	bx	lr

000463f4 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   463f4:	4603      	mov	r3, r0
	return list->head;
   463f6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   463f8:	b128      	cbz	r0, 46406 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   463fa:	6859      	ldr	r1, [r3, #4]
	return node->next;
   463fc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   463fe:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   46400:	4288      	cmp	r0, r1
	list->tail = node;
   46402:	bf08      	it	eq
   46404:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   46406:	4770      	bx	lr

00046408 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   46408:	4603      	mov	r3, r0
	size_t bytes = 0;
   4640a:	2000      	movs	r0, #0

	while (buf) {
   4640c:	b903      	cbnz	r3, 46410 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4640e:	4770      	bx	lr
		bytes += buf->len;
   46410:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   46412:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   46414:	4410      	add	r0, r2
		buf = buf->frags;
   46416:	e7f9      	b.n	4640c <net_buf_frags_len+0x4>

00046418 <attr_read_type_cb>:
{
   46418:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4641a:	68d4      	ldr	r4, [r2, #12]
   4641c:	7823      	ldrb	r3, [r4, #0]
   4641e:	3102      	adds	r1, #2
   46420:	b913      	cbnz	r3, 46428 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   46422:	7021      	strb	r1, [r4, #0]
	return true;
   46424:	2001      	movs	r0, #1
}
   46426:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   46428:	428b      	cmp	r3, r1
   4642a:	d0fb      	beq.n	46424 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4642c:	8a03      	ldrh	r3, [r0, #16]
   4642e:	3b02      	subs	r3, #2
   46430:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   46432:	2000      	movs	r0, #0
   46434:	6110      	str	r0, [r2, #16]
		return false;
   46436:	e7f6      	b.n	46426 <attr_read_type_cb+0xe>

00046438 <att_prepare_write_req>:
}
   46438:	2006      	movs	r0, #6
   4643a:	4770      	bx	lr

0004643c <atomic_test_bit>:
   4643c:	f3bf 8f5b 	dmb	ish
   46440:	6800      	ldr	r0, [r0, #0]
   46442:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   46446:	4108      	asrs	r0, r1
}
   46448:	f000 0001 	and.w	r0, r0, #1
   4644c:	4770      	bx	lr

0004644e <att_get>:
{
   4644e:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   46450:	7a83      	ldrb	r3, [r0, #10]
   46452:	2b07      	cmp	r3, #7
   46454:	d001      	beq.n	4645a <att_get+0xc>
		return NULL;
   46456:	2000      	movs	r0, #0
}
   46458:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4645a:	2104      	movs	r1, #4
   4645c:	f7ff ffa4 	bl	463a8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   46460:	4603      	mov	r3, r0
   46462:	2800      	cmp	r0, #0
   46464:	d0f7      	beq.n	46456 <att_get+0x8>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   46466:	2102      	movs	r1, #2
   46468:	3030      	adds	r0, #48	; 0x30
   4646a:	f7ff ffe7 	bl	4643c <atomic_test_bit>
   4646e:	2800      	cmp	r0, #0
   46470:	d0f1      	beq.n	46456 <att_get+0x8>
	return att_chan->att;
   46472:	f853 0c04 	ldr.w	r0, [r3, #-4]
   46476:	e7ef      	b.n	46458 <att_get+0xa>

00046478 <chan_req_send>:
{
   46478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4647a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4647c:	6888      	ldr	r0, [r1, #8]
   4647e:	f7ff ffc3 	bl	46408 <net_buf_frags_len>
   46482:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   46484:	4283      	cmp	r3, r0
{
   46486:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   46488:	d30b      	bcc.n	464a2 <chan_req_send+0x2a>
	chan->req = req;
   4648a:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   4648c:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   4648e:	2600      	movs	r6, #0
   46490:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   46492:	4628      	mov	r0, r5
   46494:	4639      	mov	r1, r7
   46496:	f7f5 fa21 	bl	3b8dc <chan_send>
	if (err) {
   4649a:	b108      	cbz	r0, 464a0 <chan_req_send+0x28>
		req->buf = buf;
   4649c:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   4649e:	63ae      	str	r6, [r5, #56]	; 0x38
}
   464a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   464a2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   464a6:	e7fb      	b.n	464a0 <chan_req_send+0x28>

000464a8 <write_cb>:
{
   464a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   464aa:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   464ac:	4601      	mov	r1, r0
{
   464ae:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   464b0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   464b4:	6820      	ldr	r0, [r4, #0]
   464b6:	f000 fed5 	bl	47264 <bt_gatt_check_perm>
   464ba:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   464bc:	bb00      	cbnz	r0, 46500 <write_cb+0x58>
	if (!data->req) {
   464be:	7a23      	ldrb	r3, [r4, #8]
   464c0:	b1b3      	cbz	r3, 464f0 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   464c2:	f1a3 0218 	sub.w	r2, r3, #24
   464c6:	4253      	negs	r3, r2
   464c8:	4153      	adcs	r3, r2
   464ca:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   464cc:	9301      	str	r3, [sp, #4]
   464ce:	8a63      	ldrh	r3, [r4, #18]
   464d0:	9300      	str	r3, [sp, #0]
   464d2:	68ae      	ldr	r6, [r5, #8]
   464d4:	8a23      	ldrh	r3, [r4, #16]
   464d6:	68e2      	ldr	r2, [r4, #12]
   464d8:	6820      	ldr	r0, [r4, #0]
   464da:	4629      	mov	r1, r5
   464dc:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   464de:	2800      	cmp	r0, #0
   464e0:	db08      	blt.n	464f4 <write_cb+0x4c>
   464e2:	8a23      	ldrh	r3, [r4, #16]
   464e4:	4298      	cmp	r0, r3
   464e6:	d10e      	bne.n	46506 <write_cb+0x5e>
	data->err = 0U;
   464e8:	2300      	movs	r3, #0
   464ea:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   464ec:	2001      	movs	r0, #1
   464ee:	e008      	b.n	46502 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   464f0:	2302      	movs	r3, #2
   464f2:	e7eb      	b.n	464cc <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   464f4:	f110 0fff 	cmn.w	r0, #255	; 0xff
   464f8:	d305      	bcc.n	46506 <write_cb+0x5e>
		return -err;
   464fa:	4240      	negs	r0, r0
   464fc:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   464fe:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   46500:	2000      	movs	r0, #0
}
   46502:	b002      	add	sp, #8
   46504:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   46506:	200e      	movs	r0, #14
   46508:	e7f9      	b.n	464fe <write_cb+0x56>

0004650a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   4650a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4650c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   46510:	2300      	movs	r3, #0
   46512:	9300      	str	r3, [sp, #0]
   46514:	461a      	mov	r2, r3
   46516:	f7f6 f9af 	bl	3c878 <bt_gatt_foreach_attr_type>
				  user_data);
}
   4651a:	b005      	add	sp, #20
   4651c:	f85d fb04 	ldr.w	pc, [sp], #4

00046520 <bt_att_chan_send_rsp>:
{
   46520:	b538      	push	{r3, r4, r5, lr}
   46522:	4604      	mov	r4, r0
   46524:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   46526:	f7f5 f9d9 	bl	3b8dc <chan_send>
	if (err) {
   4652a:	b130      	cbz	r0, 4653a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4652c:	4629      	mov	r1, r5
   4652e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   46532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   46536:	f001 b818 	b.w	4756a <net_buf_put>
}
   4653a:	bd38      	pop	{r3, r4, r5, pc}

0004653c <find_type_cb>:
{
   4653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46540:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   46542:	f8d2 9000 	ldr.w	r9, [r2]
{
   46546:	4607      	mov	r7, r0
   46548:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4654a:	2500      	movs	r5, #0
   4654c:	f642 0301 	movw	r3, #10241	; 0x2801
   46550:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   46552:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   46556:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4655a:	a90b      	add	r1, sp, #44	; 0x2c
{
   4655c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4655e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   46562:	f7ff f8fb 	bl	4575c <bt_uuid_cmp>
   46566:	2800      	cmp	r0, #0
   46568:	d079      	beq.n	4665e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4656a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4656e:	6838      	ldr	r0, [r7, #0]
   46570:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   46574:	a90b      	add	r1, sp, #44	; 0x2c
   46576:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4657a:	f7ff f8ef 	bl	4575c <bt_uuid_cmp>
   4657e:	b138      	cbz	r0, 46590 <find_type_cb+0x54>
		if (data->group &&
   46580:	68a3      	ldr	r3, [r4, #8]
   46582:	b11b      	cbz	r3, 4658c <find_type_cb+0x50>
   46584:	885a      	ldrh	r2, [r3, #2]
   46586:	42b2      	cmp	r2, r6
   46588:	d200      	bcs.n	4658c <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   4658a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   4658c:	2001      	movs	r0, #1
   4658e:	e009      	b.n	465a4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   46590:	6861      	ldr	r1, [r4, #4]
   46592:	4608      	mov	r0, r1
   46594:	f7ff ff38 	bl	46408 <net_buf_frags_len>
   46598:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   4659c:	1a1b      	subs	r3, r3, r0
   4659e:	2b03      	cmp	r3, #3
   465a0:	d803      	bhi.n	465aa <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   465a2:	2000      	movs	r0, #0
}
   465a4:	b011      	add	sp, #68	; 0x44
   465a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   465aa:	4608      	mov	r0, r1
   465ac:	f000 ffe3 	bl	47576 <net_buf_frag_last>
   465b0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   465b2:	6860      	ldr	r0, [r4, #4]
   465b4:	f7ff ff28 	bl	46408 <net_buf_frags_len>
   465b8:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   465bc:	f105 0b0c 	add.w	fp, r5, #12
   465c0:	ebaa 0a00 	sub.w	sl, sl, r0
   465c4:	4658      	mov	r0, fp
   465c6:	f001 f837 	bl	47638 <net_buf_simple_tailroom>
   465ca:	4582      	cmp	sl, r0
   465cc:	d23f      	bcs.n	4664e <find_type_cb+0x112>
   465ce:	6860      	ldr	r0, [r4, #4]
   465d0:	f7ff ff1a 	bl	46408 <net_buf_frags_len>
   465d4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   465d8:	1a18      	subs	r0, r3, r0
	if (!len) {
   465da:	b970      	cbnz	r0, 465fa <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   465dc:	6863      	ldr	r3, [r4, #4]
   465de:	7a98      	ldrb	r0, [r3, #10]
   465e0:	f7f6 fc62 	bl	3cea8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   465e4:	2200      	movs	r2, #0
   465e6:	2300      	movs	r3, #0
   465e8:	f000 ff8b 	bl	47502 <net_buf_alloc_fixed>
		if (!frag) {
   465ec:	4605      	mov	r5, r0
   465ee:	2800      	cmp	r0, #0
   465f0:	d0d7      	beq.n	465a2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   465f2:	4601      	mov	r1, r0
   465f4:	6860      	ldr	r0, [r4, #4]
   465f6:	f000 ffcf 	bl	47598 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   465fa:	2300      	movs	r3, #0
   465fc:	9300      	str	r3, [sp, #0]
   465fe:	f8d7 9004 	ldr.w	r9, [r7, #4]
   46602:	4639      	mov	r1, r7
   46604:	2310      	movs	r3, #16
   46606:	aa02      	add	r2, sp, #8
   46608:	4640      	mov	r0, r8
   4660a:	47c8      	blx	r9
	if (read < 0) {
   4660c:	1e07      	subs	r7, r0, #0
   4660e:	db26      	blt.n	4665e <find_type_cb+0x122>
	if (read != data->value_len) {
   46610:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   46612:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   46614:	42ba      	cmp	r2, r7
   46616:	d01e      	beq.n	46656 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   46618:	4601      	mov	r1, r0
   4661a:	a80b      	add	r0, sp, #44	; 0x2c
   4661c:	f7ff f8cc 	bl	457b8 <bt_uuid_create>
   46620:	b1e8      	cbz	r0, 4665e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   46622:	b2fa      	uxtb	r2, r7
   46624:	a902      	add	r1, sp, #8
   46626:	a806      	add	r0, sp, #24
   46628:	f7ff f8c6 	bl	457b8 <bt_uuid_create>
   4662c:	b1b8      	cbz	r0, 4665e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4662e:	a906      	add	r1, sp, #24
   46630:	a80b      	add	r0, sp, #44	; 0x2c
   46632:	f7ff f893 	bl	4575c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   46636:	b990      	cbnz	r0, 4665e <find_type_cb+0x122>
	data->err = 0x00;
   46638:	2300      	movs	r3, #0
   4663a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4663c:	2104      	movs	r1, #4
   4663e:	f105 000c 	add.w	r0, r5, #12
   46642:	f000 ffbe 	bl	475c2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   46646:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   46648:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4664a:	68a3      	ldr	r3, [r4, #8]
   4664c:	e79d      	b.n	4658a <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   4664e:	4658      	mov	r0, fp
   46650:	f000 fff2 	bl	47638 <net_buf_simple_tailroom>
   46654:	e7c1      	b.n	465da <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   46656:	a902      	add	r1, sp, #8
   46658:	f7ff f833 	bl	456c2 <memcmp>
   4665c:	e7eb      	b.n	46636 <find_type_cb+0xfa>
	data->group = NULL;
   4665e:	2300      	movs	r3, #0
   46660:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   46662:	e793      	b.n	4658c <find_type_cb+0x50>

00046664 <find_info_cb>:
{
   46664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   46666:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   46668:	6817      	ldr	r7, [r2, #0]
{
   4666a:	4605      	mov	r5, r0
   4666c:	460e      	mov	r6, r1
   4666e:	4614      	mov	r4, r2
	if (!data->rsp) {
   46670:	b963      	cbnz	r3, 4668c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   46672:	6850      	ldr	r0, [r2, #4]
   46674:	2101      	movs	r1, #1
   46676:	300c      	adds	r0, #12
   46678:	f000 ffa3 	bl	475c2 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4667c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4667e:	682b      	ldr	r3, [r5, #0]
   46680:	781b      	ldrb	r3, [r3, #0]
   46682:	2b00      	cmp	r3, #0
   46684:	bf14      	ite	ne
   46686:	2302      	movne	r3, #2
   46688:	2301      	moveq	r3, #1
   4668a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4668c:	68a3      	ldr	r3, [r4, #8]
   4668e:	781b      	ldrb	r3, [r3, #0]
   46690:	2b01      	cmp	r3, #1
   46692:	d003      	beq.n	4669c <find_info_cb+0x38>
   46694:	2b02      	cmp	r3, #2
   46696:	d019      	beq.n	466cc <find_info_cb+0x68>
   46698:	2000      	movs	r0, #0
   4669a:	e016      	b.n	466ca <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4669c:	682b      	ldr	r3, [r5, #0]
   4669e:	781b      	ldrb	r3, [r3, #0]
   466a0:	2b00      	cmp	r3, #0
   466a2:	d1f9      	bne.n	46698 <find_info_cb+0x34>
   466a4:	6860      	ldr	r0, [r4, #4]
   466a6:	2104      	movs	r1, #4
   466a8:	300c      	adds	r0, #12
   466aa:	f000 ff8a 	bl	475c2 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   466ae:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   466b0:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   466b2:	682a      	ldr	r2, [r5, #0]
   466b4:	68e3      	ldr	r3, [r4, #12]
   466b6:	8852      	ldrh	r2, [r2, #2]
   466b8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   466ba:	6863      	ldr	r3, [r4, #4]
   466bc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   466be:	8a1b      	ldrh	r3, [r3, #16]
   466c0:	1ac0      	subs	r0, r0, r3
   466c2:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   466c4:	bf94      	ite	ls
   466c6:	2000      	movls	r0, #0
   466c8:	2001      	movhi	r0, #1
}
   466ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   466cc:	682b      	ldr	r3, [r5, #0]
   466ce:	781b      	ldrb	r3, [r3, #0]
   466d0:	2b02      	cmp	r3, #2
   466d2:	d1e1      	bne.n	46698 <find_info_cb+0x34>
   466d4:	6860      	ldr	r0, [r4, #4]
   466d6:	2112      	movs	r1, #18
   466d8:	300c      	adds	r0, #12
   466da:	f000 ff72 	bl	475c2 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   466de:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   466e0:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   466e2:	6829      	ldr	r1, [r5, #0]
   466e4:	68e0      	ldr	r0, [r4, #12]
   466e6:	2210      	movs	r2, #16
   466e8:	3101      	adds	r1, #1
   466ea:	3002      	adds	r0, #2
   466ec:	f7ff f810 	bl	45710 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   466f0:	6863      	ldr	r3, [r4, #4]
   466f2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   466f4:	8a1b      	ldrh	r3, [r3, #16]
   466f6:	1ac0      	subs	r0, r0, r3
   466f8:	2812      	cmp	r0, #18
   466fa:	e7e3      	b.n	466c4 <find_info_cb+0x60>

000466fc <att_chan_mtu_updated>:
{
   466fc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   466fe:	6805      	ldr	r5, [r0, #0]
	return list->head;
   46700:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46702:	b352      	cbz	r2, 4675a <att_chan_mtu_updated+0x5e>
	return node->next;
   46704:	6813      	ldr	r3, [r2, #0]
   46706:	b103      	cbz	r3, 4670a <att_chan_mtu_updated+0xe>
   46708:	3b88      	subs	r3, #136	; 0x88
   4670a:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   4670e:	2200      	movs	r2, #0
   46710:	4611      	mov	r1, r2
   46712:	e000      	b.n	46716 <att_chan_mtu_updated+0x1a>
   46714:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   46716:	4284      	cmp	r4, r0
   46718:	d007      	beq.n	4672a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4671a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4671c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4671e:	42b1      	cmp	r1, r6
   46720:	bf38      	it	cc
   46722:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   46724:	42a2      	cmp	r2, r4
   46726:	bf38      	it	cc
   46728:	4622      	movcc	r2, r4
   4672a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4672c:	b12b      	cbz	r3, 4673a <att_chan_mtu_updated+0x3e>
   4672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   46732:	2b00      	cmp	r3, #0
   46734:	d1ee      	bne.n	46714 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   46736:	4284      	cmp	r4, r0
   46738:	d1ef      	bne.n	4671a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4673a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4673c:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4673e:	428b      	cmp	r3, r1
   46740:	d801      	bhi.n	46746 <att_chan_mtu_updated+0x4a>
   46742:	4290      	cmp	r0, r2
   46744:	d90b      	bls.n	4675e <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   46746:	4282      	cmp	r2, r0
   46748:	bf38      	it	cc
   4674a:	4602      	movcc	r2, r0
   4674c:	4299      	cmp	r1, r3
   4674e:	6828      	ldr	r0, [r5, #0]
   46750:	bf38      	it	cc
   46752:	4619      	movcc	r1, r3
}
   46754:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   46756:	f7f6 bb61 	b.w	3ce1c <bt_gatt_att_max_mtu_changed>
   4675a:	4611      	mov	r1, r2
   4675c:	e7ed      	b.n	4673a <att_chan_mtu_updated+0x3e>
}
   4675e:	bc70      	pop	{r4, r5, r6}
   46760:	4770      	bx	lr

00046762 <attr_read_group_cb>:
	if (!data->rsp->len) {
   46762:	68d0      	ldr	r0, [r2, #12]
   46764:	7803      	ldrb	r3, [r0, #0]
   46766:	3104      	adds	r1, #4
   46768:	b913      	cbnz	r3, 46770 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4676a:	7001      	strb	r1, [r0, #0]
	return true;
   4676c:	2001      	movs	r0, #1
   4676e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   46770:	428b      	cmp	r3, r1
   46772:	d0fb      	beq.n	4676c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   46774:	6891      	ldr	r1, [r2, #8]
   46776:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   46778:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4677a:	3b04      	subs	r3, #4
   4677c:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   4677e:	6110      	str	r0, [r2, #16]
}
   46780:	4770      	bx	lr

00046782 <process_queue>:
{
   46782:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   46784:	2200      	movs	r2, #0
{
   46786:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   46788:	2300      	movs	r3, #0
   4678a:	4608      	mov	r0, r1
{
   4678c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   4678e:	f000 febd 	bl	4750c <net_buf_get>
	if (buf) {
   46792:	4605      	mov	r5, r0
   46794:	b158      	cbz	r0, 467ae <process_queue+0x2c>
	return chan_send(chan, buf);
   46796:	4601      	mov	r1, r0
   46798:	4620      	mov	r0, r4
   4679a:	f7f5 f89f 	bl	3b8dc <chan_send>
		if (err) {
   4679e:	4604      	mov	r4, r0
   467a0:	b118      	cbz	r0, 467aa <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   467a2:	4629      	mov	r1, r5
   467a4:	4630      	mov	r0, r6
   467a6:	f001 fdcd 	bl	48344 <k_queue_prepend>
}
   467aa:	4620      	mov	r0, r4
   467ac:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   467ae:	f06f 0401 	mvn.w	r4, #1
   467b2:	e7fa      	b.n	467aa <process_queue+0x28>

000467b4 <att_chan_read>:
{
   467b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   467b8:	4680      	mov	r8, r0
   467ba:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   467bc:	4610      	mov	r0, r2
{
   467be:	4699      	mov	r9, r3
   467c0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   467c2:	f7ff fe21 	bl	46408 <net_buf_frags_len>
   467c6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   467ca:	4283      	cmp	r3, r0
{
   467cc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   467ce:	d97a      	bls.n	468c6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   467d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   467d4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   467d6:	4630      	mov	r0, r6
   467d8:	f000 fecd 	bl	47576 <net_buf_frag_last>
	size_t len, total = 0;
   467dc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   467e0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   467e2:	4630      	mov	r0, r6
   467e4:	f7ff fe10 	bl	46408 <net_buf_frags_len>
   467e8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   467ec:	f105 070c 	add.w	r7, r5, #12
   467f0:	1a24      	subs	r4, r4, r0
   467f2:	4638      	mov	r0, r7
   467f4:	f000 ff20 	bl	47638 <net_buf_simple_tailroom>
   467f8:	4284      	cmp	r4, r0
   467fa:	d211      	bcs.n	46820 <att_chan_read+0x6c>
   467fc:	4630      	mov	r0, r6
   467fe:	f7ff fe03 	bl	46408 <net_buf_frags_len>
   46802:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   46806:	1a24      	subs	r4, r4, r0
		if (!len) {
   46808:	bb34      	cbnz	r4, 46858 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4680a:	7ab0      	ldrb	r0, [r6, #10]
   4680c:	f7f6 fb4c 	bl	3cea8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   46810:	2200      	movs	r2, #0
   46812:	2300      	movs	r3, #0
   46814:	f000 fe75 	bl	47502 <net_buf_alloc_fixed>
			if (!frag) {
   46818:	4605      	mov	r5, r0
   4681a:	b930      	cbnz	r0, 4682a <att_chan_read+0x76>
	return total;
   4681c:	4657      	mov	r7, sl
   4681e:	e02c      	b.n	4687a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   46820:	4638      	mov	r0, r7
   46822:	f000 ff09 	bl	47638 <net_buf_simple_tailroom>
   46826:	4604      	mov	r4, r0
   46828:	e7ee      	b.n	46808 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4682a:	4601      	mov	r1, r0
   4682c:	4630      	mov	r0, r6
   4682e:	f000 feb3 	bl	47598 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   46832:	4630      	mov	r0, r6
   46834:	f7ff fde8 	bl	46408 <net_buf_frags_len>
   46838:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   4683c:	f105 070c 	add.w	r7, r5, #12
   46840:	1a24      	subs	r4, r4, r0
   46842:	4638      	mov	r0, r7
   46844:	f000 fef8 	bl	47638 <net_buf_simple_tailroom>
   46848:	4284      	cmp	r4, r0
   4684a:	d21a      	bcs.n	46882 <att_chan_read+0xce>
   4684c:	4630      	mov	r0, r6
   4684e:	f7ff fddb 	bl	46408 <net_buf_frags_len>
   46852:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   46856:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   46858:	68e9      	ldr	r1, [r5, #12]
   4685a:	8a2a      	ldrh	r2, [r5, #16]
   4685c:	f8cd 9000 	str.w	r9, [sp]
   46860:	f8db 7004 	ldr.w	r7, [fp, #4]
   46864:	9803      	ldr	r0, [sp, #12]
   46866:	440a      	add	r2, r1
   46868:	b2a3      	uxth	r3, r4
   4686a:	4659      	mov	r1, fp
   4686c:	47b8      	blx	r7
		if (read < 0) {
   4686e:	1e07      	subs	r7, r0, #0
   46870:	da0c      	bge.n	4688c <att_chan_read+0xd8>
				return total;
   46872:	f1ba 0f00 	cmp.w	sl, #0
   46876:	bf18      	it	ne
   46878:	4657      	movne	r7, sl
}
   4687a:	4638      	mov	r0, r7
   4687c:	b005      	add	sp, #20
   4687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46882:	4638      	mov	r0, r7
   46884:	f000 fed8 	bl	47638 <net_buf_simple_tailroom>
   46888:	4604      	mov	r4, r0
   4688a:	e7e5      	b.n	46858 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4688c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4688e:	b993      	cbnz	r3, 468b6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   46890:	4639      	mov	r1, r7
   46892:	f105 000c 	add.w	r0, r5, #12
   46896:	f000 fe94 	bl	475c2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4689a:	4630      	mov	r0, r6
   4689c:	f7ff fdb4 	bl	46408 <net_buf_frags_len>
   468a0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   468a4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   468a6:	4283      	cmp	r3, r0
		total += read;
   468a8:	44ba      	add	sl, r7
		offset += read;
   468aa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   468ae:	d9b5      	bls.n	4681c <att_chan_read+0x68>
   468b0:	42a7      	cmp	r7, r4
   468b2:	d096      	beq.n	467e2 <att_chan_read+0x2e>
   468b4:	e7b2      	b.n	4681c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   468b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   468b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   468ba:	4639      	mov	r1, r7
   468bc:	4628      	mov	r0, r5
   468be:	4798      	blx	r3
   468c0:	2800      	cmp	r0, #0
   468c2:	d1e5      	bne.n	46890 <att_chan_read+0xdc>
   468c4:	e7aa      	b.n	4681c <att_chan_read+0x68>
		return 0;
   468c6:	2700      	movs	r7, #0
   468c8:	e7d7      	b.n	4687a <att_chan_read+0xc6>

000468ca <sys_slist_find_and_remove.isra.0>:
	return list->head;
   468ca:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   468cc:	2200      	movs	r2, #0
   468ce:	b903      	cbnz	r3, 468d2 <sys_slist_find_and_remove.isra.0+0x8>
   468d0:	4770      	bx	lr
   468d2:	428b      	cmp	r3, r1
   468d4:	d10f      	bne.n	468f6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   468d6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   468d8:	b93a      	cbnz	r2, 468ea <sys_slist_find_and_remove.isra.0+0x20>
   468da:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   468dc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   468de:	4291      	cmp	r1, r2
   468e0:	d100      	bne.n	468e4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   468e2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   468e4:	2300      	movs	r3, #0
   468e6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   468e8:	4770      	bx	lr
	parent->next = child;
   468ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   468ec:	6843      	ldr	r3, [r0, #4]
   468ee:	4299      	cmp	r1, r3
	list->tail = node;
   468f0:	bf08      	it	eq
   468f2:	6042      	streq	r2, [r0, #4]
}
   468f4:	e7f6      	b.n	468e4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   468f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   468f8:	681b      	ldr	r3, [r3, #0]
   468fa:	e7e8      	b.n	468ce <sys_slist_find_and_remove.isra.0+0x4>

000468fc <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   468fc:	2301      	movs	r3, #1
   468fe:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46900:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46902:	f3bf 8f5b 	dmb	ish
   46906:	e850 2f00 	ldrex	r2, [r0]
   4690a:	401a      	ands	r2, r3
   4690c:	e840 2100 	strex	r1, r2, [r0]
   46910:	2900      	cmp	r1, #0
   46912:	d1f8      	bne.n	46906 <atomic_clear_bit+0xa>
   46914:	f3bf 8f5b 	dmb	ish
}
   46918:	4770      	bx	lr

0004691a <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   4691a:	2006      	movs	r0, #6
   4691c:	4770      	bx	lr

0004691e <atomic_test_and_set_bit>:
{
   4691e:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   46920:	2301      	movs	r3, #1
   46922:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   46926:	f3bf 8f5b 	dmb	ish
   4692a:	e850 3f00 	ldrex	r3, [r0]
   4692e:	ea43 0201 	orr.w	r2, r3, r1
   46932:	e840 2400 	strex	r4, r2, [r0]
   46936:	2c00      	cmp	r4, #0
   46938:	d1f7      	bne.n	4692a <atomic_test_and_set_bit+0xc>
   4693a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4693e:	4219      	tst	r1, r3
}
   46940:	bf14      	ite	ne
   46942:	2001      	movne	r0, #1
   46944:	2000      	moveq	r0, #0
   46946:	bd10      	pop	{r4, pc}

00046948 <read_cb>:
{
   46948:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   4694a:	6816      	ldr	r6, [r2, #0]
{
   4694c:	4605      	mov	r5, r0
	data->err = 0x00;
   4694e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   46950:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   46952:	7313      	strb	r3, [r2, #12]
{
   46954:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   46956:	4629      	mov	r1, r5
   46958:	2295      	movs	r2, #149	; 0x95
   4695a:	f000 fc83 	bl	47264 <bt_gatt_check_perm>
   4695e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   46960:	b980      	cbnz	r0, 46984 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   46962:	e9cd 0000 	strd	r0, r0, [sp]
   46966:	4629      	mov	r1, r5
   46968:	88a3      	ldrh	r3, [r4, #4]
   4696a:	68a2      	ldr	r2, [r4, #8]
   4696c:	4630      	mov	r0, r6
   4696e:	f7ff ff21 	bl	467b4 <att_chan_read>
	if (ret < 0) {
   46972:	2800      	cmp	r0, #0
   46974:	da09      	bge.n	4698a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   46976:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   4697a:	bf26      	itte	cs
   4697c:	4240      	negcs	r0, r0
   4697e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   46980:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   46982:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   46984:	2000      	movs	r0, #0
}
   46986:	b002      	add	sp, #8
   46988:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   4698a:	2001      	movs	r0, #1
   4698c:	e7fb      	b.n	46986 <read_cb+0x3e>

0004698e <read_vl_cb>:
{
   4698e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   46992:	f8d2 8000 	ldr.w	r8, [r2]
{
   46996:	4606      	mov	r6, r0
	data->err = 0x00;
   46998:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   4699a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   4699e:	7313      	strb	r3, [r2, #12]
{
   469a0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   469a2:	4631      	mov	r1, r6
   469a4:	2295      	movs	r2, #149	; 0x95
   469a6:	f000 fc5d 	bl	47264 <bt_gatt_check_perm>
   469aa:	4605      	mov	r5, r0
   469ac:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   469ae:	b9e0      	cbnz	r0, 469ea <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   469b0:	68a0      	ldr	r0, [r4, #8]
   469b2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   469b6:	8a02      	ldrh	r2, [r0, #16]
   469b8:	1a9b      	subs	r3, r3, r2
   469ba:	2b01      	cmp	r3, #1
   469bc:	dd15      	ble.n	469ea <read_vl_cb+0x5c>
   469be:	2102      	movs	r1, #2
   469c0:	300c      	adds	r0, #12
   469c2:	f000 fdfe 	bl	475c2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   469c6:	e9cd 5500 	strd	r5, r5, [sp]
   469ca:	4607      	mov	r7, r0
   469cc:	88a3      	ldrh	r3, [r4, #4]
   469ce:	68a2      	ldr	r2, [r4, #8]
   469d0:	4631      	mov	r1, r6
   469d2:	4640      	mov	r0, r8
   469d4:	f7ff feee 	bl	467b4 <att_chan_read>
	if (read < 0) {
   469d8:	1e03      	subs	r3, r0, #0
   469da:	da0a      	bge.n	469f2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   469dc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   469e0:	bf26      	itte	cs
   469e2:	425b      	negcs	r3, r3
   469e4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   469e6:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   469e8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   469ea:	2000      	movs	r0, #0
}
   469ec:	b002      	add	sp, #8
   469ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   469f2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   469f4:	2001      	movs	r0, #1
   469f6:	e7f9      	b.n	469ec <read_vl_cb+0x5e>

000469f8 <bt_att_sent>:
{
   469f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   469fa:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   469fe:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   46a00:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   46a02:	2104      	movs	r1, #4
   46a04:	3030      	adds	r0, #48	; 0x30
   46a06:	f7ff ff79 	bl	468fc <atomic_clear_bit>
	if (!att) {
   46a0a:	b304      	cbz	r4, 46a4e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   46a0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   46a0e:	b98b      	cbnz	r3, 46a34 <bt_att_sent+0x3c>
   46a10:	6863      	ldr	r3, [r4, #4]
   46a12:	b17b      	cbz	r3, 46a34 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   46a14:	1d20      	adds	r0, r4, #4
   46a16:	f7ff fced 	bl	463f4 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46a1a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   46a1c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46a1e:	4638      	mov	r0, r7
   46a20:	f7ff fd2a 	bl	46478 <chan_req_send>
   46a24:	2800      	cmp	r0, #0
   46a26:	da12      	bge.n	46a4e <bt_att_sent+0x56>
	return list->head;
   46a28:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   46a2a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   46a2c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   46a2e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   46a30:	b903      	cbnz	r3, 46a34 <bt_att_sent+0x3c>
	list->tail = node;
   46a32:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   46a34:	f105 0138 	add.w	r1, r5, #56	; 0x38
   46a38:	4638      	mov	r0, r7
   46a3a:	f7ff fea2 	bl	46782 <process_queue>
	if (!err) {
   46a3e:	b130      	cbz	r0, 46a4e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   46a40:	f104 010c 	add.w	r1, r4, #12
   46a44:	4638      	mov	r0, r7
}
   46a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   46a4a:	f7ff be9a 	b.w	46782 <process_queue>
}
   46a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00046a50 <att_req_send_process>:
{
   46a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   46a54:	6a44      	ldr	r4, [r0, #36]	; 0x24
   46a56:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46a58:	2c00      	cmp	r4, #0
   46a5a:	d03a      	beq.n	46ad2 <att_req_send_process+0x82>
	return node->next;
   46a5c:	f854 6988 	ldr.w	r6, [r4], #-136
   46a60:	b106      	cbz	r6, 46a64 <att_req_send_process+0x14>
   46a62:	3e88      	subs	r6, #136	; 0x88
{
   46a64:	2300      	movs	r3, #0
   46a66:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   46a68:	f108 0704 	add.w	r7, r8, #4
   46a6c:	e013      	b.n	46a96 <att_req_send_process+0x46>
		if (!req && prev &&
   46a6e:	b1bb      	cbz	r3, 46aa0 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   46a70:	2103      	movs	r1, #3
   46a72:	f104 0034 	add.w	r0, r4, #52	; 0x34
   46a76:	f7ff fce1 	bl	4643c <atomic_test_bit>
   46a7a:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   46a7c:	f103 0034 	add.w	r0, r3, #52	; 0x34
   46a80:	f7ff fcdc 	bl	4643c <atomic_test_bit>
		if (!req && prev &&
   46a84:	4282      	cmp	r2, r0
   46a86:	d10b      	bne.n	46aa0 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46a88:	b31e      	cbz	r6, 46ad2 <att_req_send_process+0x82>
   46a8a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   46a8e:	b102      	cbz	r2, 46a92 <att_req_send_process+0x42>
   46a90:	3a88      	subs	r2, #136	; 0x88
{
   46a92:	4634      	mov	r4, r6
   46a94:	4616      	mov	r6, r2
		if (chan->req) {
   46a96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   46a98:	2a00      	cmp	r2, #0
   46a9a:	d1f5      	bne.n	46a88 <att_req_send_process+0x38>
		if (!req && prev &&
   46a9c:	2d00      	cmp	r5, #0
   46a9e:	d0e6      	beq.n	46a6e <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   46aa0:	4638      	mov	r0, r7
   46aa2:	f7ff fca7 	bl	463f4 <sys_slist_get>
	if (node) {
   46aa6:	4605      	mov	r5, r0
   46aa8:	b908      	cbnz	r0, 46aae <att_req_send_process+0x5e>
   46aaa:	4623      	mov	r3, r4
   46aac:	e7ec      	b.n	46a88 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   46aae:	4601      	mov	r1, r0
   46ab0:	4620      	mov	r0, r4
   46ab2:	f7ff fce1 	bl	46478 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   46ab6:	2800      	cmp	r0, #0
   46ab8:	da0b      	bge.n	46ad2 <att_req_send_process+0x82>
	return list->head;
   46aba:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   46abe:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   46ac0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   46ac4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   46ac8:	2b00      	cmp	r3, #0
   46aca:	d1ee      	bne.n	46aaa <att_req_send_process+0x5a>
	list->tail = node;
   46acc:	f8c8 5008 	str.w	r5, [r8, #8]
}
   46ad0:	e7eb      	b.n	46aaa <att_req_send_process+0x5a>
}
   46ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046ad6 <bt_att_status>:
{
   46ad6:	b538      	push	{r3, r4, r5, lr}
   46ad8:	4605      	mov	r5, r0
   46ada:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   46adc:	2100      	movs	r1, #0
   46ade:	f7ff fcad 	bl	4643c <atomic_test_bit>
   46ae2:	b1b8      	cbz	r0, 46b14 <bt_att_status+0x3e>
	if (!chan->att) {
   46ae4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   46ae8:	b1a0      	cbz	r0, 46b14 <bt_att_status+0x3e>
	if (chan->req) {
   46aea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   46aec:	b993      	cbnz	r3, 46b14 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   46aee:	3004      	adds	r0, #4
   46af0:	f7ff fc80 	bl	463f4 <sys_slist_get>
	if (!node) {
   46af4:	4604      	mov	r4, r0
   46af6:	b168      	cbz	r0, 46b14 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   46af8:	4601      	mov	r1, r0
   46afa:	1f28      	subs	r0, r5, #4
   46afc:	f7ff fcbc 	bl	46478 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46b00:	2800      	cmp	r0, #0
   46b02:	da07      	bge.n	46b14 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   46b04:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   46b08:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   46b0a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   46b0c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   46b0e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   46b10:	b902      	cbnz	r2, 46b14 <bt_att_status+0x3e>
	list->tail = node;
   46b12:	609c      	str	r4, [r3, #8]
}
   46b14:	bd38      	pop	{r3, r4, r5, pc}

00046b16 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   46b16:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   46b18:	6883      	ldr	r3, [r0, #8]
   46b1a:	699b      	ldr	r3, [r3, #24]
   46b1c:	b10b      	cbz	r3, 46b22 <att_sent+0xc>
		chan->ops->sent(chan);
   46b1e:	3004      	adds	r0, #4
   46b20:	4718      	bx	r3
}
   46b22:	4770      	bx	lr

00046b24 <att_unknown>:
{
   46b24:	b510      	push	{r4, lr}
   46b26:	460c      	mov	r4, r1
	if (!err) {
   46b28:	b90a      	cbnz	r2, 46b2e <att_unknown+0xa>
		att_sent(conn, user_data);
   46b2a:	f7ff fff4 	bl	46b16 <att_sent>
	tx_meta_data_free(user_data);
   46b2e:	4620      	mov	r0, r4
}
   46b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   46b34:	f7f4 bec4 	b.w	3b8c0 <tx_meta_data_free>

00046b38 <att_tx_complete>:
{
   46b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   46b3c:	4606      	mov	r6, r0
   46b3e:	460d      	mov	r5, r1
	if (!err) {
   46b40:	4614      	mov	r4, r2
   46b42:	b122      	cbz	r2, 46b4e <att_tx_complete+0x16>
}
   46b44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   46b48:	4608      	mov	r0, r1
   46b4a:	f7f4 beb9 	b.w	3b8c0 <tx_meta_data_free>
		att_sent(conn, user_data);
   46b4e:	f7ff ffe2 	bl	46b16 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   46b52:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   46b54:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   46b58:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   46b5c:	4628      	mov	r0, r5
   46b5e:	f7f4 feaf 	bl	3b8c0 <tx_meta_data_free>
	if (!err && func) {
   46b62:	b92f      	cbnz	r7, 46b70 <att_tx_complete+0x38>
}
   46b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   46b68:	4649      	mov	r1, r9
   46b6a:	4630      	mov	r0, r6
   46b6c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   46b6e:	3401      	adds	r4, #1
   46b70:	b2a3      	uxth	r3, r4
   46b72:	4543      	cmp	r3, r8
   46b74:	d3f8      	bcc.n	46b68 <att_tx_complete+0x30>
   46b76:	e7f5      	b.n	46b64 <att_tx_complete+0x2c>

00046b78 <att_req_sent>:
{
   46b78:	b510      	push	{r4, lr}
   46b7a:	460c      	mov	r4, r1
	if (!err) {
   46b7c:	b90a      	cbnz	r2, 46b82 <att_req_sent+0xa>
		att_sent(conn, user_data);
   46b7e:	f7ff ffca 	bl	46b16 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   46b82:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   46b84:	6b83      	ldr	r3, [r0, #56]	; 0x38
   46b86:	b12b      	cbz	r3, 46b94 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   46b88:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   46b8c:	2300      	movs	r3, #0
   46b8e:	3058      	adds	r0, #88	; 0x58
   46b90:	f7fa f9ba 	bl	40f08 <k_work_reschedule>
	tx_meta_data_free(user_data);
   46b94:	4620      	mov	r0, r4
}
   46b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   46b9a:	f7f4 be91 	b.w	3b8c0 <tx_meta_data_free>

00046b9e <att_cfm_sent>:
{
   46b9e:	b510      	push	{r4, lr}
   46ba0:	460c      	mov	r4, r1
	if (!err) {
   46ba2:	b90a      	cbnz	r2, 46ba8 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   46ba4:	f7ff ffb7 	bl	46b16 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   46ba8:	6820      	ldr	r0, [r4, #0]
   46baa:	2101      	movs	r1, #1
   46bac:	3034      	adds	r0, #52	; 0x34
   46bae:	f7ff fea5 	bl	468fc <atomic_clear_bit>
	tx_meta_data_free(data);
   46bb2:	4620      	mov	r0, r4
}
   46bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   46bb8:	f7f4 be82 	b.w	3b8c0 <tx_meta_data_free>

00046bbc <att_rsp_sent>:
{
   46bbc:	b510      	push	{r4, lr}
   46bbe:	460c      	mov	r4, r1
	if (!err) {
   46bc0:	b90a      	cbnz	r2, 46bc6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   46bc2:	f7ff ffa8 	bl	46b16 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   46bc6:	6820      	ldr	r0, [r4, #0]
   46bc8:	2100      	movs	r1, #0
   46bca:	3034      	adds	r0, #52	; 0x34
   46bcc:	f7ff fe96 	bl	468fc <atomic_clear_bit>
	tx_meta_data_free(data);
   46bd0:	4620      	mov	r0, r4
}
   46bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   46bd6:	f7f4 be73 	b.w	3b8c0 <tx_meta_data_free>

00046bda <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   46bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46bde:	4688      	mov	r8, r1
   46be0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   46be2:	2101      	movs	r1, #1
   46be4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   46be6:	4605      	mov	r5, r0
   46be8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   46bea:	f7f4 ffed 	bl	3bbc8 <bt_att_chan_create_pdu>
	if (!buf) {
   46bee:	4604      	mov	r4, r0
   46bf0:	b170      	cbz	r0, 46c10 <send_err_rsp.part.0+0x36>
   46bf2:	2104      	movs	r1, #4
   46bf4:	300c      	adds	r0, #12
   46bf6:	f000 fce4 	bl	475c2 <net_buf_simple_add>
	rsp->request = req;
   46bfa:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   46bfe:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   46c02:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   46c04:	4621      	mov	r1, r4
   46c06:	4628      	mov	r0, r5
}
   46c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   46c0c:	f7ff bc88 	b.w	46520 <bt_att_chan_send_rsp>
}
   46c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046c14 <att_write_req>:
{
   46c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46c16:	460c      	mov	r4, r1
   46c18:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   46c1a:	f101 000c 	add.w	r0, r1, #12
   46c1e:	f000 fcff 	bl	47620 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   46c22:	8a22      	ldrh	r2, [r4, #16]
   46c24:	9201      	str	r2, [sp, #4]
   46c26:	68e2      	ldr	r2, [r4, #12]
   46c28:	9200      	str	r2, [sp, #0]
   46c2a:	4603      	mov	r3, r0
   46c2c:	2213      	movs	r2, #19
   46c2e:	2112      	movs	r1, #18
   46c30:	4628      	mov	r0, r5
   46c32:	f7f5 f871 	bl	3bd18 <att_write_rsp.constprop.0>
}
   46c36:	b003      	add	sp, #12
   46c38:	bd30      	pop	{r4, r5, pc}

00046c3a <att_write_cmd>:
{
   46c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46c3c:	460c      	mov	r4, r1
   46c3e:	4605      	mov	r5, r0
   46c40:	f101 000c 	add.w	r0, r1, #12
   46c44:	f000 fcec 	bl	47620 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   46c48:	8a22      	ldrh	r2, [r4, #16]
   46c4a:	9201      	str	r2, [sp, #4]
   46c4c:	68e2      	ldr	r2, [r4, #12]
   46c4e:	9200      	str	r2, [sp, #0]
   46c50:	2200      	movs	r2, #0
   46c52:	4603      	mov	r3, r0
   46c54:	4611      	mov	r1, r2
   46c56:	4628      	mov	r0, r5
   46c58:	f7f5 f85e 	bl	3bd18 <att_write_rsp.constprop.0>
}
   46c5c:	b003      	add	sp, #12
   46c5e:	bd30      	pop	{r4, r5, pc}

00046c60 <bt_att_create_pdu>:
{
   46c60:	b538      	push	{r3, r4, r5, lr}
   46c62:	460d      	mov	r5, r1
   46c64:	4614      	mov	r4, r2
	att = att_get(conn);
   46c66:	f7ff fbf2 	bl	4644e <att_get>
	if (!att) {
   46c6a:	b158      	cbz	r0, 46c84 <bt_att_create_pdu+0x24>
	return list->head;
   46c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46c6e:	b14b      	cbz	r3, 46c84 <bt_att_create_pdu+0x24>
   46c70:	4618      	mov	r0, r3
	return node->next;
   46c72:	f850 3988 	ldr.w	r3, [r0], #-136
   46c76:	b103      	cbz	r3, 46c7a <bt_att_create_pdu+0x1a>
   46c78:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   46c7a:	1c62      	adds	r2, r4, #1
   46c7c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   46c7e:	428a      	cmp	r2, r1
   46c80:	d90c      	bls.n	46c9c <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46c82:	b90b      	cbnz	r3, 46c88 <bt_att_create_pdu+0x28>
}
   46c84:	2000      	movs	r0, #0
   46c86:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46c88:	4618      	mov	r0, r3
   46c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   46c8e:	2b00      	cmp	r3, #0
   46c90:	d0f4      	beq.n	46c7c <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   46c92:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   46c94:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46c96:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   46c9a:	d8f5      	bhi.n	46c88 <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   46c9c:	4622      	mov	r2, r4
   46c9e:	4629      	mov	r1, r5
}
   46ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   46ca4:	f7f4 bf90 	b.w	3bbc8 <bt_att_chan_create_pdu>

00046ca8 <att_read_blob_req>:
{
   46ca8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   46caa:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   46cac:	8813      	ldrh	r3, [r2, #0]
   46cae:	8852      	ldrh	r2, [r2, #2]
   46cb0:	9200      	str	r2, [sp, #0]
   46cb2:	210c      	movs	r1, #12
   46cb4:	220d      	movs	r2, #13
   46cb6:	f7f5 f9b9 	bl	3c02c <att_read_rsp>
}
   46cba:	b003      	add	sp, #12
   46cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00046cc0 <att_read_req>:
{
   46cc0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   46cc2:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   46cc4:	2200      	movs	r2, #0
   46cc6:	881b      	ldrh	r3, [r3, #0]
   46cc8:	9200      	str	r2, [sp, #0]
   46cca:	210a      	movs	r1, #10
   46ccc:	220b      	movs	r2, #11
   46cce:	f7f5 f9ad 	bl	3c02c <att_read_rsp>
}
   46cd2:	b003      	add	sp, #12
   46cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00046cd8 <att_mtu_req>:
{
   46cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46cda:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   46cdc:	f850 2b34 	ldr.w	r2, [r0], #52
{
   46ce0:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   46ce2:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   46ce4:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   46ce6:	f7ff fba9 	bl	4643c <atomic_test_bit>
   46cea:	4604      	mov	r4, r0
   46cec:	b9d8      	cbnz	r0, 46d26 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   46cee:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   46cf0:	881b      	ldrh	r3, [r3, #0]
   46cf2:	2b16      	cmp	r3, #22
   46cf4:	d919      	bls.n	46d2a <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   46cf6:	4630      	mov	r0, r6
   46cf8:	2202      	movs	r2, #2
   46cfa:	f7ff ffb1 	bl	46c60 <bt_att_create_pdu>
	if (!pdu) {
   46cfe:	4606      	mov	r6, r0
   46d00:	b1a8      	cbz	r0, 46d2e <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   46d02:	2102      	movs	r1, #2
   46d04:	300c      	adds	r0, #12
   46d06:	f000 fc5c 	bl	475c2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   46d0a:	2717      	movs	r7, #23
   46d0c:	7007      	strb	r7, [r0, #0]
   46d0e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   46d10:	4631      	mov	r1, r6
   46d12:	4628      	mov	r0, r5
   46d14:	f7ff fc04 	bl	46520 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   46d18:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   46d1a:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   46d1c:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   46d1e:	f7ff fced 	bl	466fc <att_chan_mtu_updated>
	return 0;
   46d22:	4620      	mov	r0, r4
}
   46d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   46d26:	2006      	movs	r0, #6
   46d28:	e7fc      	b.n	46d24 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   46d2a:	2004      	movs	r0, #4
   46d2c:	e7fa      	b.n	46d24 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   46d2e:	200e      	movs	r0, #14
   46d30:	e7f8      	b.n	46d24 <att_mtu_req+0x4c>

00046d32 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   46d32:	8a0a      	ldrh	r2, [r1, #16]
   46d34:	68c9      	ldr	r1, [r1, #12]
   46d36:	2300      	movs	r3, #0
   46d38:	f7f5 bb24 	b.w	3c384 <att_handle_rsp>

00046d3c <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   46d3c:	3854      	subs	r0, #84	; 0x54
   46d3e:	f7f5 bb57 	b.w	3c3f0 <bt_att_disconnected>

00046d42 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   46d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46d44:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   46d46:	f7ff fb82 	bl	4644e <att_get>
	if (!att) {
   46d4a:	4604      	mov	r4, r0
   46d4c:	b940      	cbnz	r0, 46d60 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   46d4e:	69a8      	ldr	r0, [r5, #24]
   46d50:	f7f4 fdb6 	bl	3b8c0 <tx_meta_data_free>
		net_buf_unref(buf);
   46d54:	4628      	mov	r0, r5
   46d56:	f7f6 f969 	bl	3d02c <net_buf_unref>
		return -ENOTCONN;
   46d5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   46d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   46d60:	f100 060c 	add.w	r6, r0, #12
   46d64:	4629      	mov	r1, r5
   46d66:	4630      	mov	r0, r6
   46d68:	f000 fbff 	bl	4756a <net_buf_put>
	return list->head;
   46d6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46d6e:	b14d      	cbz	r5, 46d84 <bt_att_send+0x42>
	return node->next;
   46d70:	f855 4988 	ldr.w	r4, [r5], #-136
   46d74:	b104      	cbz	r4, 46d78 <bt_att_send+0x36>
   46d76:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   46d78:	4631      	mov	r1, r6
   46d7a:	4628      	mov	r0, r5
   46d7c:	f7ff fd01 	bl	46782 <process_queue>
		if (!err) {
   46d80:	4603      	mov	r3, r0
   46d82:	b980      	cbnz	r0, 46da6 <bt_att_send+0x64>
	return 0;
   46d84:	2000      	movs	r0, #0
   46d86:	e7ea      	b.n	46d5e <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   46d88:	2103      	movs	r1, #3
   46d8a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   46d8e:	f7ff fb55 	bl	4643c <atomic_test_bit>
   46d92:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   46d94:	f105 0034 	add.w	r0, r5, #52	; 0x34
   46d98:	f7ff fb50 	bl	4643c <atomic_test_bit>
		if (err == -ENOENT && prev &&
   46d9c:	4287      	cmp	r7, r0
   46d9e:	f06f 0301 	mvn.w	r3, #1
   46da2:	d107      	bne.n	46db4 <bt_att_send+0x72>
   46da4:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46da6:	2c00      	cmp	r4, #0
   46da8:	d0ec      	beq.n	46d84 <bt_att_send+0x42>
   46daa:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   46dae:	b922      	cbnz	r2, 46dba <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   46db0:	3302      	adds	r3, #2
   46db2:	d0e9      	beq.n	46d88 <bt_att_send+0x46>
{
   46db4:	4625      	mov	r5, r4
   46db6:	4614      	mov	r4, r2
   46db8:	e7de      	b.n	46d78 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46dba:	3a88      	subs	r2, #136	; 0x88
   46dbc:	e7f8      	b.n	46db0 <bt_att_send+0x6e>

00046dbe <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   46dbe:	b510      	push	{r4, lr}
   46dc0:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   46dc2:	f7ff fb44 	bl	4644e <att_get>
	if (!att) {
   46dc6:	b160      	cbz	r0, 46de2 <bt_att_req_send+0x24>
	parent->next = child;
   46dc8:	2300      	movs	r3, #0
   46dca:	6023      	str	r3, [r4, #0]
	return list->tail;
   46dcc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   46dce:	b92b      	cbnz	r3, 46ddc <bt_att_req_send+0x1e>
	list->head = node;
   46dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   46dd4:	f7ff fe3c 	bl	46a50 <att_req_send_process>

	return 0;
   46dd8:	2000      	movs	r0, #0
}
   46dda:	bd10      	pop	{r4, pc}
	parent->next = child;
   46ddc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   46dde:	6084      	str	r4, [r0, #8]
}
   46de0:	e7f8      	b.n	46dd4 <bt_att_req_send+0x16>
		return -ENOTCONN;
   46de2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   46de6:	e7f8      	b.n	46dda <bt_att_req_send+0x1c>

00046de8 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   46de8:	2001      	movs	r0, #1
   46dea:	4770      	bx	lr

00046dec <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   46dec:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   46dee:	f7ff fb2e 	bl	4644e <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   46df2:	b150      	cbz	r0, 46e0a <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   46df4:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   46df6:	b144      	cbz	r4, 46e0a <bt_att_clear_out_of_sync_sent+0x1e>
   46df8:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   46dfa:	f104 0034 	add.w	r0, r4, #52	; 0x34
   46dfe:	2105      	movs	r1, #5
   46e00:	f7ff fd7c 	bl	468fc <atomic_clear_bit>
	return node->next;
   46e04:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   46e08:	e7f5      	b.n	46df6 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   46e0a:	bd10      	pop	{r4, pc}

00046e0c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   46e0c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   46e0e:	2104      	movs	r1, #4
   46e10:	f7ff faca 	bl	463a8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   46e14:	b128      	cbz	r0, 46e22 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   46e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   46e1a:	2105      	movs	r1, #5
   46e1c:	3030      	adds	r0, #48	; 0x30
   46e1e:	f7ff bb0d 	b.w	4643c <atomic_test_bit>
}
   46e22:	bd08      	pop	{r3, pc}

00046e24 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   46e24:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   46e26:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   46e2a:	2201      	movs	r2, #1
   46e2c:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   46e2e:	7403      	strb	r3, [r0, #16]
}
   46e30:	4770      	bx	lr

00046e32 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   46e32:	6010      	str	r0, [r2, #0]
}
   46e34:	2000      	movs	r0, #0
   46e36:	4770      	bx	lr

00046e38 <gatt_ccc_changed>:
{
   46e38:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   46e3a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   46e3c:	895a      	ldrh	r2, [r3, #10]
   46e3e:	428a      	cmp	r2, r1
   46e40:	d003      	beq.n	46e4a <gatt_ccc_changed+0x12>
		ccc->value = value;
   46e42:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   46e44:	68db      	ldr	r3, [r3, #12]
   46e46:	b103      	cbz	r3, 46e4a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   46e48:	4718      	bx	r3
}
   46e4a:	4770      	bx	lr

00046e4c <gatt_indicate_rsp>:
{
   46e4c:	b510      	push	{r4, lr}
   46e4e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   46e50:	68a3      	ldr	r3, [r4, #8]
{
   46e52:	460a      	mov	r2, r1
	if (params->func) {
   46e54:	b10b      	cbz	r3, 46e5a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   46e56:	4621      	mov	r1, r4
   46e58:	4798      	blx	r3
	params->_ref--;
   46e5a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46e5c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   46e5e:	3b01      	subs	r3, #1
   46e60:	b2db      	uxtb	r3, r3
   46e62:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46e64:	b122      	cbz	r2, 46e70 <gatt_indicate_rsp+0x24>
   46e66:	b91b      	cbnz	r3, 46e70 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   46e68:	4620      	mov	r0, r4
}
   46e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   46e6e:	4710      	bx	r2
}
   46e70:	bd10      	pop	{r4, pc}

00046e72 <match_uuid>:
	data->attr = attr;
   46e72:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   46e74:	8091      	strh	r1, [r2, #4]
}
   46e76:	2000      	movs	r0, #0
   46e78:	4770      	bx	lr

00046e7a <gen_hash_m>:
{
   46e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46e7c:	6807      	ldr	r7, [r0, #0]
   46e7e:	783d      	ldrb	r5, [r7, #0]
{
   46e80:	b089      	sub	sp, #36	; 0x24
   46e82:	4606      	mov	r6, r0
   46e84:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46e86:	b9dd      	cbnz	r5, 46ec0 <gen_hash_m+0x46>
	switch (u16->val) {
   46e88:	887b      	ldrh	r3, [r7, #2]
   46e8a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   46e8e:	d004      	beq.n	46e9a <gen_hash_m+0x20>
   46e90:	d810      	bhi.n	46eb4 <gen_hash_m+0x3a>
   46e92:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   46e96:	2b03      	cmp	r3, #3
   46e98:	d812      	bhi.n	46ec0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   46e9a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46e9e:	2202      	movs	r2, #2
   46ea0:	f10d 010a 	add.w	r1, sp, #10
   46ea4:	4620      	mov	r0, r4
   46ea6:	f7fe fb48 	bl	4553a <tc_cmac_update>
   46eaa:	b968      	cbnz	r0, 46ec8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   46eac:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   46eb0:	65a2      	str	r2, [r4, #88]	; 0x58
   46eb2:	e006      	b.n	46ec2 <gen_hash_m+0x48>
	switch (u16->val) {
   46eb4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   46eb8:	33ff      	adds	r3, #255	; 0xff
   46eba:	b29b      	uxth	r3, r3
   46ebc:	2b04      	cmp	r3, #4
   46ebe:	d91e      	bls.n	46efe <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   46ec0:	2501      	movs	r5, #1
}
   46ec2:	4628      	mov	r0, r5
   46ec4:	b009      	add	sp, #36	; 0x24
   46ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   46ec8:	887b      	ldrh	r3, [r7, #2]
   46eca:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46ece:	2202      	movs	r2, #2
   46ed0:	f10d 010a 	add.w	r1, sp, #10
   46ed4:	4620      	mov	r0, r4
   46ed6:	f7fe fb30 	bl	4553a <tc_cmac_update>
   46eda:	2800      	cmp	r0, #0
   46edc:	d0e6      	beq.n	46eac <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   46ede:	2000      	movs	r0, #0
   46ee0:	9000      	str	r0, [sp, #0]
   46ee2:	aa03      	add	r2, sp, #12
   46ee4:	6877      	ldr	r7, [r6, #4]
   46ee6:	2313      	movs	r3, #19
   46ee8:	4631      	mov	r1, r6
   46eea:	47b8      	blx	r7
		if (len < 0) {
   46eec:	1e02      	subs	r2, r0, #0
   46eee:	dbdf      	blt.n	46eb0 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   46ef0:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46ef2:	4620      	mov	r0, r4
   46ef4:	f7fe fb21 	bl	4553a <tc_cmac_update>
   46ef8:	2800      	cmp	r0, #0
   46efa:	d1e1      	bne.n	46ec0 <gen_hash_m+0x46>
   46efc:	e7d6      	b.n	46eac <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   46efe:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46f02:	2202      	movs	r2, #2
   46f04:	f10d 010a 	add.w	r1, sp, #10
   46f08:	4620      	mov	r0, r4
   46f0a:	f7fe fb16 	bl	4553a <tc_cmac_update>
   46f0e:	2800      	cmp	r0, #0
   46f10:	d0cc      	beq.n	46eac <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   46f12:	887b      	ldrh	r3, [r7, #2]
   46f14:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46f18:	2202      	movs	r2, #2
   46f1a:	f10d 010a 	add.w	r1, sp, #10
   46f1e:	e7e8      	b.n	46ef2 <gen_hash_m+0x78>

00046f20 <bt_addr_le_eq>:
{
   46f20:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   46f22:	2207      	movs	r2, #7
   46f24:	f7fe fbcd 	bl	456c2 <memcmp>
}
   46f28:	fab0 f080 	clz	r0, r0
   46f2c:	0940      	lsrs	r0, r0, #5
   46f2e:	bd08      	pop	{r3, pc}

00046f30 <atomic_or>:
{
   46f30:	b510      	push	{r4, lr}
   46f32:	4603      	mov	r3, r0
}
   46f34:	f3bf 8f5b 	dmb	ish
   46f38:	e853 0f00 	ldrex	r0, [r3]
   46f3c:	ea40 0201 	orr.w	r2, r0, r1
   46f40:	e843 2400 	strex	r4, r2, [r3]
   46f44:	2c00      	cmp	r4, #0
   46f46:	d1f7      	bne.n	46f38 <atomic_or+0x8>
   46f48:	f3bf 8f5b 	dmb	ish
   46f4c:	bd10      	pop	{r4, pc}

00046f4e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   46f4e:	2207      	movs	r2, #7
   46f50:	f7fe bbde 	b.w	45710 <memcpy>

00046f54 <sc_clear>:
{
   46f54:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46f56:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   46f5a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46f5c:	4631      	mov	r1, r6
   46f5e:	7a00      	ldrb	r0, [r0, #8]
   46f60:	f7fe fec5 	bl	45cee <bt_addr_le_is_bonded>
   46f64:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   46f66:	4631      	mov	r1, r6
   46f68:	f7f5 fac2 	bl	3c4f0 <find_sc_cfg>
	if (!cfg) {
   46f6c:	b128      	cbz	r0, 46f7a <sc_clear+0x26>
}
   46f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   46f72:	220c      	movs	r2, #12
   46f74:	2100      	movs	r1, #0
   46f76:	f7fe bbd6 	b.w	45726 <memset>
}
   46f7a:	bd70      	pop	{r4, r5, r6, pc}

00046f7c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   46f7c:	2a02      	cmp	r2, #2
{
   46f7e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   46f80:	d108      	bne.n	46f94 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   46f82:	2300      	movs	r3, #0
   46f84:	f100 0188 	add.w	r1, r0, #136	; 0x88
   46f88:	461a      	mov	r2, r3
   46f8a:	7a00      	ldrb	r0, [r0, #8]
   46f8c:	f7f5 fb44 	bl	3c618 <sc_save>
}
   46f90:	2002      	movs	r0, #2
   46f92:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   46f94:	f7ff ffde 	bl	46f54 <sc_clear>
   46f98:	e7fa      	b.n	46f90 <sc_ccc_cfg_write+0x14>

00046f9a <read_appearance>:
{
   46f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46f9c:	4615      	mov	r5, r2
   46f9e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   46fa2:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   46fa4:	f7fe fea1 	bl	45cea <bt_get_appearance>
	if (offset > value_len) {
   46fa8:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   46faa:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   46fae:	d80e      	bhi.n	46fce <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   46fb0:	f1c6 0402 	rsb	r4, r6, #2
   46fb4:	42bc      	cmp	r4, r7
   46fb6:	bfa8      	it	ge
   46fb8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46fba:	f10d 0306 	add.w	r3, sp, #6
   46fbe:	4622      	mov	r2, r4
   46fc0:	1999      	adds	r1, r3, r6
   46fc2:	4628      	mov	r0, r5
   46fc4:	f7fe fba4 	bl	45710 <memcpy>
}
   46fc8:	4620      	mov	r0, r4
   46fca:	b003      	add	sp, #12
   46fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46fce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   46fd2:	e7f9      	b.n	46fc8 <read_appearance+0x2e>

00046fd4 <read_name>:
{
   46fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46fd8:	4698      	mov	r8, r3
   46fda:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   46fde:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   46fe0:	f7f3 f9d0 	bl	3a384 <bt_get_name>
   46fe4:	4607      	mov	r7, r0
				 strlen(name));
   46fe6:	f7fe fb5c 	bl	456a2 <strlen>
	if (offset > value_len) {
   46fea:	b283      	uxth	r3, r0
   46fec:	42b3      	cmp	r3, r6
   46fee:	d30c      	bcc.n	4700a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   46ff0:	1b9c      	subs	r4, r3, r6
   46ff2:	4544      	cmp	r4, r8
   46ff4:	bfa8      	it	ge
   46ff6:	4644      	movge	r4, r8
   46ff8:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   46ffa:	4622      	mov	r2, r4
   46ffc:	19b9      	adds	r1, r7, r6
   46ffe:	4628      	mov	r0, r5
   47000:	f7fe fb86 	bl	45710 <memcpy>
}
   47004:	4620      	mov	r0, r4
   47006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4700a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4700e:	e7f9      	b.n	47004 <read_name+0x30>

00047010 <cf_read>:
{
   47010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47012:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   47014:	2300      	movs	r3, #0
{
   47016:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4701a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4701e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   47020:	f7f5 fa4e 	bl	3c4c0 <find_cf_cfg>
	if (cfg) {
   47024:	b128      	cbz	r0, 47032 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   47026:	f100 0108 	add.w	r1, r0, #8
   4702a:	2201      	movs	r2, #1
   4702c:	a801      	add	r0, sp, #4
   4702e:	f7fe fb6f 	bl	45710 <memcpy>
	if (offset > value_len) {
   47032:	2e01      	cmp	r6, #1
   47034:	d80d      	bhi.n	47052 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   47036:	f1c6 0401 	rsb	r4, r6, #1
   4703a:	42bc      	cmp	r4, r7
   4703c:	bfa8      	it	ge
   4703e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   47040:	ab01      	add	r3, sp, #4
   47042:	4622      	mov	r2, r4
   47044:	1999      	adds	r1, r3, r6
   47046:	4628      	mov	r0, r5
   47048:	f7fe fb62 	bl	45710 <memcpy>
}
   4704c:	4620      	mov	r0, r4
   4704e:	b003      	add	sp, #12
   47050:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   47052:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   47056:	e7f9      	b.n	4704c <cf_read+0x3c>

00047058 <bt_gatt_attr_read_service>:
{
   47058:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   4705a:	68c9      	ldr	r1, [r1, #12]
{
   4705c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4705e:	780a      	ldrb	r2, [r1, #0]
{
   47060:	461c      	mov	r4, r3
   47062:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   47066:	b992      	cbnz	r2, 4708e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   47068:	884a      	ldrh	r2, [r1, #2]
   4706a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4706e:	2b02      	cmp	r3, #2
   47070:	d818      	bhi.n	470a4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   47072:	f1c3 0202 	rsb	r2, r3, #2
   47076:	4294      	cmp	r4, r2
   47078:	bfa8      	it	ge
   4707a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4707c:	4622      	mov	r2, r4
   4707e:	f10d 0106 	add.w	r1, sp, #6
   47082:	4419      	add	r1, r3
   47084:	f7fe fb44 	bl	45710 <memcpy>
}
   47088:	4620      	mov	r0, r4
   4708a:	b002      	add	sp, #8
   4708c:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   4708e:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   47090:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   47094:	d806      	bhi.n	470a4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   47096:	f1c3 0210 	rsb	r2, r3, #16
   4709a:	4294      	cmp	r4, r2
   4709c:	bfa8      	it	ge
   4709e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   470a0:	4622      	mov	r2, r4
   470a2:	e7ee      	b.n	47082 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   470a4:	f06f 0406 	mvn.w	r4, #6
   470a8:	e7ee      	b.n	47088 <bt_gatt_attr_read_service+0x30>

000470aa <bt_gatt_attr_read_ccc>:
{
   470aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   470ac:	68c9      	ldr	r1, [r1, #12]
{
   470ae:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   470b2:	4615      	mov	r5, r2
   470b4:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   470b6:	f7f5 fa2b 	bl	3c510 <find_ccc_cfg>
	if (cfg) {
   470ba:	b100      	cbz	r0, 470be <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   470bc:	8900      	ldrh	r0, [r0, #8]
   470be:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   470c2:	2e02      	cmp	r6, #2
   470c4:	d80e      	bhi.n	470e4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   470c6:	f1c6 0402 	rsb	r4, r6, #2
   470ca:	42bc      	cmp	r4, r7
   470cc:	bfa8      	it	ge
   470ce:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   470d0:	f10d 0306 	add.w	r3, sp, #6
   470d4:	4622      	mov	r2, r4
   470d6:	1999      	adds	r1, r3, r6
   470d8:	4628      	mov	r0, r5
   470da:	f7fe fb19 	bl	45710 <memcpy>
}
   470de:	4620      	mov	r0, r4
   470e0:	b003      	add	sp, #12
   470e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   470e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   470e8:	e7f9      	b.n	470de <bt_gatt_attr_read_ccc+0x34>

000470ea <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   470ea:	2101      	movs	r1, #1
   470ec:	300c      	adds	r0, #12
   470ee:	f7ff bf1f 	b.w	46f30 <atomic_or>

000470f2 <cf_write>:
{
   470f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   470f6:	461f      	mov	r7, r3
   470f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   470fc:	2b01      	cmp	r3, #1
{
   470fe:	4606      	mov	r6, r0
   47100:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   47102:	d82c      	bhi.n	4715e <cf_write+0x6c>
	if (offset + len > sizeof(cfg->data)) {
   47104:	443b      	add	r3, r7
   47106:	2b01      	cmp	r3, #1
   47108:	463d      	mov	r5, r7
   4710a:	dc2b      	bgt.n	47164 <cf_write+0x72>
	cfg = find_cf_cfg(conn);
   4710c:	f7f5 f9d8 	bl	3c4c0 <find_cf_cfg>
	if (!cfg) {
   47110:	4604      	mov	r4, r0
   47112:	b918      	cbnz	r0, 4711c <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   47114:	f7f5 f9d4 	bl	3c4c0 <find_cf_cfg>
	if (!cfg) {
   47118:	4604      	mov	r4, r0
   4711a:	b330      	cbz	r0, 4716a <cf_write+0x78>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4711c:	b197      	cbz	r7, 47144 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4711e:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   47120:	f898 2000 	ldrb.w	r2, [r8]
   47124:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   47126:	fa21 f003 	lsr.w	r0, r1, r3
   4712a:	07c7      	lsls	r7, r0, #31
   4712c:	d503      	bpl.n	47136 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   4712e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   47132:	07c0      	lsls	r0, r0, #31
   47134:	d51c      	bpl.n	47170 <cf_write+0x7e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   47136:	3301      	adds	r3, #1
   47138:	2b03      	cmp	r3, #3
   4713a:	d1f4      	bne.n	47126 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4713c:	f002 0207 	and.w	r2, r2, #7
   47140:	4311      	orrs	r1, r2
   47142:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   47144:	1c60      	adds	r0, r4, #1
   47146:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4714a:	f7ff ff00 	bl	46f4e <bt_addr_le_copy>
	cfg->id = conn->id;
   4714e:	7a33      	ldrb	r3, [r6, #8]
   47150:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   47152:	4620      	mov	r0, r4
   47154:	f7ff ffc9 	bl	470ea <set_change_aware_no_store.constprop.0.isra.0>
}
   47158:	4628      	mov	r0, r5
   4715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4715e:	f06f 0506 	mvn.w	r5, #6
   47162:	e7f9      	b.n	47158 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   47164:	f06f 050c 	mvn.w	r5, #12
   47168:	e7f6      	b.n	47158 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4716a:	f06f 0510 	mvn.w	r5, #16
   4716e:	e7f3      	b.n	47158 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   47170:	f06f 0512 	mvn.w	r5, #18
   47174:	e7f0      	b.n	47158 <cf_write+0x66>

00047176 <sc_restore_rsp>:
{
   47176:	b538      	push	{r3, r4, r5, lr}
   47178:	4604      	mov	r4, r0
   4717a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   4717c:	f7ff fe34 	bl	46de8 <bt_att_fixed_chan_only>
   47180:	b140      	cbz	r0, 47194 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   47182:	4620      	mov	r0, r4
   47184:	f7f5 f99c 	bl	3c4c0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   47188:	b120      	cbz	r0, 47194 <sc_restore_rsp+0x1e>
   4718a:	7a03      	ldrb	r3, [r0, #8]
   4718c:	07db      	lsls	r3, r3, #31
   4718e:	d501      	bpl.n	47194 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   47190:	f7ff ffab 	bl	470ea <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   47194:	b965      	cbnz	r5, 471b0 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   47196:	7a20      	ldrb	r0, [r4, #8]
   47198:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4719c:	f7f5 f9a8 	bl	3c4f0 <find_sc_cfg>
		if (sc_cfg) {
   471a0:	b130      	cbz	r0, 471b0 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   471a2:	4629      	mov	r1, r5
   471a4:	2204      	movs	r2, #4
}
   471a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   471aa:	3008      	adds	r0, #8
   471ac:	f7fe babb 	b.w	45726 <memset>
}
   471b0:	bd38      	pop	{r3, r4, r5, pc}

000471b2 <bt_gatt_attr_value_handle>:
{
   471b2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   471b4:	4604      	mov	r4, r0
   471b6:	b910      	cbnz	r0, 471be <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   471b8:	2000      	movs	r0, #0
}
   471ba:	b002      	add	sp, #8
   471bc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   471be:	2300      	movs	r3, #0
   471c0:	f88d 3004 	strb.w	r3, [sp, #4]
   471c4:	6800      	ldr	r0, [r0, #0]
   471c6:	f642 0303 	movw	r3, #10243	; 0x2803
   471ca:	a901      	add	r1, sp, #4
   471cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   471d0:	f7fe fac4 	bl	4575c <bt_uuid_cmp>
   471d4:	2800      	cmp	r0, #0
   471d6:	d1ef      	bne.n	471b8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   471d8:	68e3      	ldr	r3, [r4, #12]
   471da:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   471dc:	2800      	cmp	r0, #0
   471de:	d1ec      	bne.n	471ba <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   471e0:	4620      	mov	r0, r4
   471e2:	f7f5 fb19 	bl	3c818 <bt_gatt_attr_get_handle>
   471e6:	3001      	adds	r0, #1
   471e8:	b280      	uxth	r0, r0
	return handle;
   471ea:	e7e6      	b.n	471ba <bt_gatt_attr_value_handle+0x8>

000471ec <bt_gatt_attr_read_chrc>:
{
   471ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   471ee:	68cc      	ldr	r4, [r1, #12]
{
   471f0:	b087      	sub	sp, #28
   471f2:	4608      	mov	r0, r1
   471f4:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   471f6:	79a3      	ldrb	r3, [r4, #6]
   471f8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   471fc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   47200:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   47202:	f7ff ffd6 	bl	471b2 <bt_gatt_attr_value_handle>
   47206:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4720a:	6821      	ldr	r1, [r4, #0]
   4720c:	780b      	ldrb	r3, [r1, #0]
   4720e:	b99b      	cbnz	r3, 47238 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   47210:	884b      	ldrh	r3, [r1, #2]
   47212:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   47216:	2405      	movs	r4, #5
	if (offset > value_len) {
   47218:	42b4      	cmp	r4, r6
   4721a:	d315      	bcc.n	47248 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4721c:	1ba4      	subs	r4, r4, r6
   4721e:	42bc      	cmp	r4, r7
   47220:	bfa8      	it	ge
   47222:	463c      	movge	r4, r7
   47224:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   47226:	ab01      	add	r3, sp, #4
   47228:	4622      	mov	r2, r4
   4722a:	1999      	adds	r1, r3, r6
   4722c:	4628      	mov	r0, r5
   4722e:	f7fe fa6f 	bl	45710 <memcpy>
}
   47232:	4620      	mov	r0, r4
   47234:	b007      	add	sp, #28
   47236:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   47238:	2210      	movs	r2, #16
   4723a:	3101      	adds	r1, #1
   4723c:	f10d 0007 	add.w	r0, sp, #7
   47240:	f7fe fa66 	bl	45710 <memcpy>
		value_len += 16U;
   47244:	2413      	movs	r4, #19
   47246:	e7e7      	b.n	47218 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   47248:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4724c:	e7f1      	b.n	47232 <bt_gatt_attr_read_chrc+0x46>

0004724e <bt_gatt_foreach_attr>:
{
   4724e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   47250:	e9cd 2301 	strd	r2, r3, [sp, #4]
   47254:	2300      	movs	r3, #0
   47256:	9300      	str	r3, [sp, #0]
   47258:	461a      	mov	r2, r3
   4725a:	f7f5 fb0d 	bl	3c878 <bt_gatt_foreach_attr_type>
}
   4725e:	b005      	add	sp, #20
   47260:	f85d fb04 	ldr.w	pc, [sp], #4

00047264 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   47264:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   47268:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   4726a:	d004      	beq.n	47276 <bt_gatt_check_perm+0x12>
   4726c:	f013 0f95 	tst.w	r3, #149	; 0x95
   47270:	d010      	beq.n	47294 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   47272:	6848      	ldr	r0, [r1, #4]
   47274:	b170      	cbz	r0, 47294 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   47276:	f012 0f02 	tst.w	r2, #2
   4727a:	d004      	beq.n	47286 <bt_gatt_check_perm+0x22>
   4727c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   47280:	d00a      	beq.n	47298 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   47282:	6889      	ldr	r1, [r1, #8]
   47284:	b141      	cbz	r1, 47298 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   47286:	401a      	ands	r2, r3
	return 0;
   47288:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   4728c:	bf14      	ite	ne
   4728e:	2005      	movne	r0, #5
   47290:	2000      	moveq	r0, #0
   47292:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   47294:	2002      	movs	r0, #2
   47296:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   47298:	2003      	movs	r0, #3
}
   4729a:	4770      	bx	lr

0004729c <bt_gatt_is_subscribed>:
{
   4729c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   472a0:	7a83      	ldrb	r3, [r0, #10]
   472a2:	2b07      	cmp	r3, #7
{
   472a4:	4605      	mov	r5, r0
   472a6:	460c      	mov	r4, r1
   472a8:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   472aa:	d110      	bne.n	472ce <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   472ac:	2300      	movs	r3, #0
   472ae:	f88d 300c 	strb.w	r3, [sp, #12]
   472b2:	6820      	ldr	r0, [r4, #0]
   472b4:	f642 0303 	movw	r3, #10243	; 0x2803
   472b8:	a903      	add	r1, sp, #12
   472ba:	f8ad 300e 	strh.w	r3, [sp, #14]
   472be:	f7fe fa4d 	bl	4575c <bt_uuid_cmp>
   472c2:	b960      	cbnz	r0, 472de <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   472c4:	68e3      	ldr	r3, [r4, #12]
   472c6:	799b      	ldrb	r3, [r3, #6]
   472c8:	f013 0f30 	tst.w	r3, #48	; 0x30
   472cc:	d103      	bne.n	472d6 <bt_gatt_is_subscribed+0x3a>
		return false;
   472ce:	2000      	movs	r0, #0
}
   472d0:	b004      	add	sp, #16
   472d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   472d6:	4620      	mov	r0, r4
   472d8:	f7f5 fbaa 	bl	3ca30 <bt_gatt_attr_next>
   472dc:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   472de:	2300      	movs	r3, #0
   472e0:	6820      	ldr	r0, [r4, #0]
   472e2:	f88d 300c 	strb.w	r3, [sp, #12]
   472e6:	a903      	add	r1, sp, #12
   472e8:	f642 1302 	movw	r3, #10498	; 0x2902
   472ec:	f8ad 300e 	strh.w	r3, [sp, #14]
   472f0:	f7fe fa34 	bl	4575c <bt_uuid_cmp>
   472f4:	b118      	cbz	r0, 472fe <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   472f6:	4620      	mov	r0, r4
   472f8:	f7f5 fb9a 	bl	3ca30 <bt_gatt_attr_next>
   472fc:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   472fe:	2600      	movs	r6, #0
   47300:	f642 1802 	movw	r8, #10498	; 0x2902
   47304:	6820      	ldr	r0, [r4, #0]
   47306:	f88d 6000 	strb.w	r6, [sp]
   4730a:	4669      	mov	r1, sp
   4730c:	f8ad 8002 	strh.w	r8, [sp, #2]
   47310:	f7fe fa24 	bl	4575c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   47314:	b9d8      	cbnz	r0, 4734e <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   47316:	2300      	movs	r3, #0
   47318:	6820      	ldr	r0, [r4, #0]
   4731a:	f88d 300c 	strb.w	r3, [sp, #12]
   4731e:	a903      	add	r1, sp, #12
   47320:	f642 1302 	movw	r3, #10498	; 0x2902
   47324:	f8ad 300e 	strh.w	r3, [sp, #14]
   47328:	f7fe fa18 	bl	4575c <bt_uuid_cmp>
   4732c:	2800      	cmp	r0, #0
   4732e:	d1ce      	bne.n	472ce <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   47330:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   47332:	4622      	mov	r2, r4
   47334:	4628      	mov	r0, r5
   47336:	f812 1b01 	ldrb.w	r1, [r2], #1
   4733a:	f7fe ff53 	bl	461e4 <bt_conn_is_peer_addr_le>
   4733e:	2800      	cmp	r0, #0
   47340:	d0c5      	beq.n	472ce <bt_gatt_is_subscribed+0x32>
   47342:	8923      	ldrh	r3, [r4, #8]
   47344:	421f      	tst	r7, r3
   47346:	bf14      	ite	ne
   47348:	2001      	movne	r0, #1
   4734a:	2000      	moveq	r0, #0
   4734c:	e7c0      	b.n	472d0 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   4734e:	6820      	ldr	r0, [r4, #0]
   47350:	f88d 6004 	strb.w	r6, [sp, #4]
   47354:	f642 0303 	movw	r3, #10243	; 0x2803
   47358:	a901      	add	r1, sp, #4
   4735a:	f8ad 3006 	strh.w	r3, [sp, #6]
   4735e:	f7fe f9fd 	bl	4575c <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   47362:	2800      	cmp	r0, #0
   47364:	d0d7      	beq.n	47316 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   47366:	6820      	ldr	r0, [r4, #0]
   47368:	f88d 6008 	strb.w	r6, [sp, #8]
   4736c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   47370:	a902      	add	r1, sp, #8
   47372:	f8ad 300a 	strh.w	r3, [sp, #10]
   47376:	f7fe f9f1 	bl	4575c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   4737a:	2800      	cmp	r0, #0
   4737c:	d0cb      	beq.n	47316 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4737e:	6820      	ldr	r0, [r4, #0]
   47380:	f88d 600c 	strb.w	r6, [sp, #12]
   47384:	f642 0301 	movw	r3, #10241	; 0x2801
   47388:	a903      	add	r1, sp, #12
   4738a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4738e:	f7fe f9e5 	bl	4575c <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   47392:	2800      	cmp	r0, #0
   47394:	d0bf      	beq.n	47316 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   47396:	4620      	mov	r0, r4
   47398:	f7f5 fb4a 	bl	3ca30 <bt_gatt_attr_next>
		if (!attr) {
   4739c:	4604      	mov	r4, r0
   4739e:	2800      	cmp	r0, #0
   473a0:	d1b0      	bne.n	47304 <bt_gatt_is_subscribed+0x68>
   473a2:	e794      	b.n	472ce <bt_gatt_is_subscribed+0x32>

000473a4 <gatt_notify>:
{
   473a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   473a8:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   473aa:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   473ac:	8a4b      	ldrh	r3, [r1, #18]
   473ae:	f003 0314 	and.w	r3, r3, #20
{
   473b2:	4607      	mov	r7, r0
   473b4:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   473b6:	bb4b      	cbnz	r3, 4740c <gatt_notify+0x68>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   473b8:	2201      	movs	r2, #1
   473ba:	f7ff ff6f 	bl	4729c <bt_gatt_is_subscribed>
   473be:	b348      	cbz	r0, 47414 <gatt_notify+0x70>
				sizeof(*nfy) + params->len);
   473c0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   473c2:	211b      	movs	r1, #27
   473c4:	3202      	adds	r2, #2
   473c6:	4638      	mov	r0, r7
   473c8:	f7ff fc4a 	bl	46c60 <bt_att_create_pdu>
	if (!buf) {
   473cc:	4605      	mov	r5, r0
   473ce:	b320      	cbz	r0, 4741a <gatt_notify+0x76>
   473d0:	f100 090c 	add.w	r9, r0, #12
   473d4:	2102      	movs	r1, #2
   473d6:	4648      	mov	r0, r9
   473d8:	f000 f8f3 	bl	475c2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   473dc:	4606      	mov	r6, r0
   473de:	4648      	mov	r0, r9
   473e0:	f826 8b02 	strh.w	r8, [r6], #2
   473e4:	89a1      	ldrh	r1, [r4, #12]
   473e6:	f000 f8ec 	bl	475c2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   473ea:	89a2      	ldrh	r2, [r4, #12]
   473ec:	68a1      	ldr	r1, [r4, #8]
   473ee:	4630      	mov	r0, r6
   473f0:	f7fe f98e 	bl	45710 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   473f4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   473f8:	4628      	mov	r0, r5
   473fa:	2301      	movs	r3, #1
   473fc:	f7ff fd12 	bl	46e24 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   47400:	4629      	mov	r1, r5
   47402:	4638      	mov	r0, r7
}
   47404:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   47408:	f7ff bc9b 	b.w	46d42 <bt_att_send>
		return -EPERM;
   4740c:	f04f 30ff 	mov.w	r0, #4294967295
}
   47410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   47414:	f06f 0015 	mvn.w	r0, #21
   47418:	e7fa      	b.n	47410 <gatt_notify+0x6c>
		return -ENOMEM;
   4741a:	f06f 000b 	mvn.w	r0, #11
   4741e:	e7f7      	b.n	47410 <gatt_notify+0x6c>

00047420 <bt_gatt_change_aware>:
{
   47420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   47424:	4605      	mov	r5, r0
   47426:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   47428:	f7f5 f84a 	bl	3c4c0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4742c:	4604      	mov	r4, r0
   4742e:	b308      	cbz	r0, 47474 <bt_gatt_change_aware+0x54>
   47430:	7a03      	ldrb	r3, [r0, #8]
   47432:	07da      	lsls	r2, r3, #31
   47434:	d51e      	bpl.n	47474 <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   47436:	f3bf 8f5b 	dmb	ish
   4743a:	68c6      	ldr	r6, [r0, #12]
   4743c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   47440:	f016 0601 	ands.w	r6, r6, #1
   47444:	f100 080c 	add.w	r8, r0, #12
   47448:	d114      	bne.n	47474 <bt_gatt_change_aware+0x54>
	if (!req) {
   4744a:	b1a7      	cbz	r7, 47476 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4744c:	f3bf 8f5b 	dmb	ish
   47450:	e858 3f00 	ldrex	r3, [r8]
   47454:	f023 0202 	bic.w	r2, r3, #2
   47458:	e848 2100 	strex	r1, r2, [r8]
   4745c:	2900      	cmp	r1, #0
   4745e:	d1f7      	bne.n	47450 <bt_gatt_change_aware+0x30>
   47460:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   47464:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   47466:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   47468:	d508      	bpl.n	4747c <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   4746a:	f7ff fcbf 	bl	46dec <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   4746e:	4620      	mov	r0, r4
   47470:	f7ff fe3b 	bl	470ea <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   47474:	2601      	movs	r6, #1
}
   47476:	4630      	mov	r0, r6
   47478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   4747c:	f7ff fcb4 	bl	46de8 <bt_att_fixed_chan_only>
   47480:	2800      	cmp	r0, #0
   47482:	d0f8      	beq.n	47476 <bt_gatt_change_aware+0x56>
   47484:	4628      	mov	r0, r5
   47486:	f7ff fcc1 	bl	46e0c <bt_att_out_of_sync_sent_on_fixed>
   4748a:	2800      	cmp	r0, #0
   4748c:	d0f3      	beq.n	47476 <bt_gatt_change_aware+0x56>
   4748e:	f3bf 8f5b 	dmb	ish
   47492:	e858 3f00 	ldrex	r3, [r8]
   47496:	f023 0302 	bic.w	r3, r3, #2
   4749a:	e848 3200 	strex	r2, r3, [r8]
   4749e:	2a00      	cmp	r2, #0
   474a0:	d1f7      	bne.n	47492 <bt_gatt_change_aware+0x72>
   474a2:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   474a6:	4628      	mov	r0, r5
   474a8:	e7df      	b.n	4746a <bt_gatt_change_aware+0x4a>

000474aa <bt_smp_recv>:
{
   474aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   474ac:	2100      	movs	r1, #0
   474ae:	f04f 32ff 	mov.w	r2, #4294967295
   474b2:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   474b6:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   474b8:	4608      	mov	r0, r1
   474ba:	f7fe ff28 	bl	4630e <bt_l2cap_create_pdu_timeout>
   474be:	f100 060c 	add.w	r6, r0, #12
   474c2:	4604      	mov	r4, r0
   474c4:	2101      	movs	r1, #1
   474c6:	4630      	mov	r0, r6
   474c8:	f000 f87b 	bl	475c2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   474cc:	2505      	movs	r5, #5
   474ce:	7005      	strb	r5, [r0, #0]
   474d0:	2101      	movs	r1, #1
   474d2:	4630      	mov	r0, r6
   474d4:	f000 f875 	bl	475c2 <net_buf_simple_add>
   474d8:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   474da:	7005      	strb	r5, [r0, #0]
   474dc:	4622      	mov	r2, r4
   474de:	9300      	str	r3, [sp, #0]
   474e0:	2106      	movs	r1, #6
   474e2:	4638      	mov	r0, r7
   474e4:	f7fe ff16 	bl	46314 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   474e8:	b110      	cbz	r0, 474f0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   474ea:	4620      	mov	r0, r4
   474ec:	f7f5 fd9e 	bl	3d02c <net_buf_unref>
}
   474f0:	2000      	movs	r0, #0
   474f2:	b003      	add	sp, #12
   474f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000474f6 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   474f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   474fa:	4770      	bx	lr

000474fc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   474fc:	2000      	movs	r0, #0
   474fe:	4770      	bx	lr

00047500 <fixed_data_unref>:
}
   47500:	4770      	bx	lr

00047502 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   47502:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   47504:	6849      	ldr	r1, [r1, #4]
   47506:	6809      	ldr	r1, [r1, #0]
   47508:	f7f5 bcfe 	b.w	3cf08 <net_buf_alloc_len>

0004750c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   4750c:	f7f9 bab0 	b.w	40a70 <z_impl_k_queue_get>

00047510 <net_buf_slist_put>:
	__asm__ volatile(
   47510:	f04f 0340 	mov.w	r3, #64	; 0x40
   47514:	f3ef 8211 	mrs	r2, BASEPRI
   47518:	f383 8812 	msr	BASEPRI_MAX, r3
   4751c:	f3bf 8f6f 	isb	sy
	parent->next = child;
   47520:	2300      	movs	r3, #0
   47522:	600b      	str	r3, [r1, #0]
	return list->tail;
   47524:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   47526:	b933      	cbnz	r3, 47536 <net_buf_slist_put+0x26>
	list->head = node;
   47528:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   4752c:	f382 8811 	msr	BASEPRI, r2
   47530:	f3bf 8f6f 	isb	sy
}
   47534:	4770      	bx	lr
	parent->next = child;
   47536:	6019      	str	r1, [r3, #0]
	list->tail = node;
   47538:	6041      	str	r1, [r0, #4]
}
   4753a:	e7f7      	b.n	4752c <net_buf_slist_put+0x1c>

0004753c <net_buf_slist_get>:
{
   4753c:	b510      	push	{r4, lr}
   4753e:	4603      	mov	r3, r0
	__asm__ volatile(
   47540:	f04f 0240 	mov.w	r2, #64	; 0x40
   47544:	f3ef 8111 	mrs	r1, BASEPRI
   47548:	f382 8812 	msr	BASEPRI_MAX, r2
   4754c:	f3bf 8f6f 	isb	sy
	return list->head;
   47550:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   47552:	b128      	cbz	r0, 47560 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47554:	685c      	ldr	r4, [r3, #4]
	return node->next;
   47556:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   47558:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4755a:	42a0      	cmp	r0, r4
	list->tail = node;
   4755c:	bf08      	it	eq
   4755e:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   47560:	f381 8811 	msr	BASEPRI, r1
   47564:	f3bf 8f6f 	isb	sy
}
   47568:	bd10      	pop	{r4, pc}

0004756a <net_buf_put>:
	k_fifo_put(fifo, buf);
   4756a:	f000 bee0 	b.w	4832e <k_queue_append>

0004756e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   4756e:	7a02      	ldrb	r2, [r0, #8]
   47570:	3201      	adds	r2, #1
   47572:	7202      	strb	r2, [r0, #8]
	return buf;
}
   47574:	4770      	bx	lr

00047576 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   47576:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   47578:	4618      	mov	r0, r3
   4757a:	685b      	ldr	r3, [r3, #4]
   4757c:	2b00      	cmp	r3, #0
   4757e:	d1fb      	bne.n	47578 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   47580:	4770      	bx	lr

00047582 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   47582:	6842      	ldr	r2, [r0, #4]
{
   47584:	b510      	push	{r4, lr}
	if (parent->frags) {
   47586:	b12a      	cbz	r2, 47594 <net_buf_frag_insert+0x12>
   47588:	460b      	mov	r3, r1
	while (buf->frags) {
   4758a:	461c      	mov	r4, r3
   4758c:	685b      	ldr	r3, [r3, #4]
   4758e:	2b00      	cmp	r3, #0
   47590:	d1fb      	bne.n	4758a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   47592:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   47594:	6041      	str	r1, [r0, #4]
}
   47596:	bd10      	pop	{r4, pc}

00047598 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   47598:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   4759a:	4604      	mov	r4, r0
   4759c:	b920      	cbnz	r0, 475a8 <net_buf_frag_add+0x10>
	buf->ref++;
   4759e:	7a0b      	ldrb	r3, [r1, #8]
   475a0:	3301      	adds	r3, #1
   475a2:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   475a4:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   475a6:	bd10      	pop	{r4, pc}
   475a8:	4603      	mov	r3, r0
	while (buf->frags) {
   475aa:	4618      	mov	r0, r3
   475ac:	685b      	ldr	r3, [r3, #4]
   475ae:	2b00      	cmp	r3, #0
   475b0:	d1fb      	bne.n	475aa <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   475b2:	f7ff ffe6 	bl	47582 <net_buf_frag_insert>
   475b6:	4620      	mov	r0, r4
   475b8:	e7f5      	b.n	475a6 <net_buf_frag_add+0xe>

000475ba <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   475ba:	6883      	ldr	r3, [r0, #8]
   475bc:	440b      	add	r3, r1
   475be:	6003      	str	r3, [r0, #0]
}
   475c0:	4770      	bx	lr

000475c2 <net_buf_simple_add>:
	return buf->data + buf->len;
   475c2:	8883      	ldrh	r3, [r0, #4]
   475c4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   475c6:	4419      	add	r1, r3
   475c8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   475ca:	18d0      	adds	r0, r2, r3
   475cc:	4770      	bx	lr

000475ce <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   475ce:	b430      	push	{r4, r5}
   475d0:	8884      	ldrh	r4, [r0, #4]
   475d2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   475d4:	18a3      	adds	r3, r4, r2
   475d6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   475d8:	1928      	adds	r0, r5, r4
}
   475da:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   475dc:	f7fe b898 	b.w	45710 <memcpy>

000475e0 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   475e0:	b510      	push	{r4, lr}
   475e2:	8883      	ldrh	r3, [r0, #4]
   475e4:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   475e6:	1c5c      	adds	r4, r3, #1
   475e8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   475ea:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   475ec:	18d0      	adds	r0, r2, r3
   475ee:	bd10      	pop	{r4, pc}

000475f0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   475f0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   475f2:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   475f4:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   475f6:	1a40      	subs	r0, r0, r1
	buf->len += len;
   475f8:	4411      	add	r1, r2
	buf->data -= len;
   475fa:	6018      	str	r0, [r3, #0]
	buf->len += len;
   475fc:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   475fe:	4770      	bx	lr

00047600 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47600:	8882      	ldrh	r2, [r0, #4]
   47602:	1a52      	subs	r2, r2, r1
{
   47604:	4603      	mov	r3, r0
	buf->len -= len;
   47606:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   47608:	6800      	ldr	r0, [r0, #0]
   4760a:	4408      	add	r0, r1
   4760c:	6018      	str	r0, [r3, #0]
}
   4760e:	4770      	bx	lr

00047610 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   47610:	4603      	mov	r3, r0
	void *data = buf->data;
   47612:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47614:	889a      	ldrh	r2, [r3, #4]
   47616:	1a52      	subs	r2, r2, r1
	buf->data += len;
   47618:	4401      	add	r1, r0
	buf->len -= len;
   4761a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   4761c:	6019      	str	r1, [r3, #0]

	return data;
}
   4761e:	4770      	bx	lr

00047620 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   47620:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   47622:	6803      	ldr	r3, [r0, #0]
   47624:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   47626:	2102      	movs	r1, #2
   47628:	f7ff ffea 	bl	47600 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   4762c:	4620      	mov	r0, r4
   4762e:	bd10      	pop	{r4, pc}

00047630 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   47630:	6802      	ldr	r2, [r0, #0]
   47632:	6880      	ldr	r0, [r0, #8]
}
   47634:	1a10      	subs	r0, r2, r0
   47636:	4770      	bx	lr

00047638 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   47638:	8883      	ldrh	r3, [r0, #4]
   4763a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   4763c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4763e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   47640:	6803      	ldr	r3, [r0, #0]
   47642:	1a5b      	subs	r3, r3, r1
}
   47644:	1ad0      	subs	r0, r2, r3
   47646:	4770      	bx	lr

00047648 <adc_context_on_timer_expired>:
{
   47648:	b410      	push	{r4}
   4764a:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4764c:	3808      	subs	r0, #8
   4764e:	f3bf 8f5b 	dmb	ish
   47652:	e850 2f00 	ldrex	r2, [r0]
   47656:	1c51      	adds	r1, r2, #1
   47658:	e840 1400 	strex	r4, r1, [r0]
   4765c:	2c00      	cmp	r4, #0
   4765e:	d1f8      	bne.n	47652 <adc_context_on_timer_expired+0xa>
   47660:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   47664:	b912      	cbnz	r2, 4766c <adc_context_on_timer_expired+0x24>
}
   47666:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   47668:	f7f5 bd28 	b.w	3d0bc <adc_context_start_sampling>
		ctx->status = -EBUSY;
   4766c:	f06f 020f 	mvn.w	r2, #15
}
   47670:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   47672:	669a      	str	r2, [r3, #104]	; 0x68
}
   47674:	4770      	bx	lr

00047676 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   47676:	6903      	ldr	r3, [r0, #16]
   47678:	b2c9      	uxtb	r1, r1
   4767a:	220c      	movs	r2, #12
   4767c:	fb01 3302 	mla	r3, r1, r2, r3
   47680:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   47682:	f000 0007 	and.w	r0, r0, #7
   47686:	4770      	bx	lr

00047688 <set_on_state>:
	__asm__ volatile(
   47688:	f04f 0340 	mov.w	r3, #64	; 0x40
   4768c:	f3ef 8211 	mrs	r2, BASEPRI
   47690:	f383 8812 	msr	BASEPRI_MAX, r3
   47694:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   47698:	6803      	ldr	r3, [r0, #0]
   4769a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4769e:	f043 0302 	orr.w	r3, r3, #2
   476a2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   476a4:	f382 8811 	msr	BASEPRI, r2
   476a8:	f3bf 8f6f 	isb	sy
}
   476ac:	4770      	bx	lr

000476ae <stop>:
{
   476ae:	b570      	push	{r4, r5, r6, lr}
   476b0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   476b2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   476b4:	f04f 0440 	mov.w	r4, #64	; 0x40
   476b8:	f3ef 8511 	mrs	r5, BASEPRI
   476bc:	f384 8812 	msr	BASEPRI_MAX, r4
   476c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   476c4:	260c      	movs	r6, #12
   476c6:	fb06 3401 	mla	r4, r6, r1, r3
   476ca:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   476cc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   476d0:	d008      	beq.n	476e4 <stop+0x36>
   476d2:	42a2      	cmp	r2, r4
   476d4:	d006      	beq.n	476e4 <stop+0x36>
	__asm__ volatile(
   476d6:	f385 8811 	msr	BASEPRI, r5
   476da:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   476de:	f04f 30ff 	mov.w	r0, #4294967295
}
   476e2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   476e4:	fb06 3301 	mla	r3, r6, r1, r3
   476e8:	2201      	movs	r2, #1
   476ea:	641a      	str	r2, [r3, #64]	; 0x40
   476ec:	f385 8811 	msr	BASEPRI, r5
   476f0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   476f4:	6843      	ldr	r3, [r0, #4]
   476f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   476fa:	685b      	ldr	r3, [r3, #4]
   476fc:	4798      	blx	r3
	return 0;
   476fe:	2000      	movs	r0, #0
   47700:	e7ef      	b.n	476e2 <stop+0x34>

00047702 <api_stop>:
	return stop(dev, subsys, CTX_API);
   47702:	2280      	movs	r2, #128	; 0x80
   47704:	f7ff bfd3 	b.w	476ae <stop>

00047708 <async_start>:
{
   47708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4770a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   4770c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   4770e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47710:	f04f 0540 	mov.w	r5, #64	; 0x40
   47714:	f3ef 8611 	mrs	r6, BASEPRI
   47718:	f385 8812 	msr	BASEPRI_MAX, r5
   4771c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47720:	250c      	movs	r5, #12
   47722:	fb05 4401 	mla	r4, r5, r1, r4
   47726:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   47728:	f005 0c07 	and.w	ip, r5, #7
   4772c:	f1bc 0f01 	cmp.w	ip, #1
   47730:	d10c      	bne.n	4774c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   47732:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   47734:	f386 8811 	msr	BASEPRI, r6
   47738:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   4773c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   47740:	6843      	ldr	r3, [r0, #4]
   47742:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   47746:	4798      	blx	r3
	return 0;
   47748:	2000      	movs	r0, #0
}
   4774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   4774c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   47750:	42af      	cmp	r7, r5
   47752:	f386 8811 	msr	BASEPRI, r6
   47756:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   4775a:	bf0c      	ite	eq
   4775c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   47760:	f04f 30ff 	movne.w	r0, #4294967295
   47764:	e7f1      	b.n	4774a <async_start+0x42>

00047766 <api_start>:
{
   47766:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   47768:	2480      	movs	r4, #128	; 0x80
   4776a:	9400      	str	r4, [sp, #0]
   4776c:	f7ff ffcc 	bl	47708 <async_start>
}
   47770:	b002      	add	sp, #8
   47772:	bd10      	pop	{r4, pc}

00047774 <onoff_started_callback>:
{
   47774:	b410      	push	{r4}
	return &data->mgr[type];
   47776:	6900      	ldr	r0, [r0, #16]
   47778:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   4777a:	241c      	movs	r4, #28
   4777c:	fb03 0004 	mla	r0, r3, r4, r0
   47780:	2100      	movs	r1, #0
}
   47782:	bc10      	pop	{r4}
	notify(mgr, 0);
   47784:	4710      	bx	r2

00047786 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   47786:	2000      	movs	r0, #0
   47788:	f7f7 beae 	b.w	3f4e8 <nrfx_clock_start>

0004778c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4778c:	2000      	movs	r0, #0
   4778e:	f000 bb20 	b.w	47dd2 <nrfx_clock_stop>

00047792 <blocking_start_callback>:
{
   47792:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   47794:	f7f9 b9a0 	b.w	40ad8 <z_impl_k_sem_give>

00047798 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   47798:	2000      	movs	r0, #0
   4779a:	4770      	bx	lr

0004779c <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   4779c:	b538      	push	{r3, r4, r5, lr}
   4779e:	460c      	mov	r4, r1
   477a0:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   477a2:	f7f2 fde3 	bl	3a36c <bt_is_ready>
   477a6:	b128      	cbz	r0, 477b4 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   477a8:	4629      	mov	r1, r5
   477aa:	4620      	mov	r0, r4
}
   477ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   477b0:	f7f2 b88c 	b.w	398cc <bt_hci_le_rand>
}
   477b4:	f06f 000a 	mvn.w	r0, #10
   477b8:	bd38      	pop	{r3, r4, r5, pc}

000477ba <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   477ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   477bc:	460f      	mov	r7, r1
   477be:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   477c0:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   477c4:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   477c6:	42a6      	cmp	r6, r4
   477c8:	d803      	bhi.n	477d2 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   477ca:	d016      	beq.n	477fa <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   477cc:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   477ce:	b003      	add	sp, #12
   477d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   477d2:	1b33      	subs	r3, r6, r4
   477d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   477d8:	bf38      	it	cc
   477da:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   477dc:	462a      	mov	r2, r5
   477de:	ab01      	add	r3, sp, #4
   477e0:	1939      	adds	r1, r7, r4
   477e2:	2000      	movs	r0, #0
   477e4:	f7fa fda8 	bl	42338 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   477e8:	b920      	cbnz	r0, 477f4 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   477ea:	9b01      	ldr	r3, [sp, #4]
   477ec:	42ab      	cmp	r3, r5
   477ee:	d101      	bne.n	477f4 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   477f0:	442c      	add	r4, r5
   477f2:	e7e8      	b.n	477c6 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   477f4:	f06f 0015 	mvn.w	r0, #21
   477f8:	e7e9      	b.n	477ce <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   477fa:	2000      	movs	r0, #0
   477fc:	e7e7      	b.n	477ce <entropy_cc3xx_rng_get_entropy+0x14>

000477fe <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   477fe:	2200      	movs	r2, #0
{
   47800:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   47802:	4611      	mov	r1, r2
   47804:	4610      	mov	r0, r2
   47806:	f7fa fd67 	bl	422d8 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   4780a:	2800      	cmp	r0, #0
	}

	return 0;
}
   4780c:	bf18      	it	ne
   4780e:	f06f 0015 	mvnne.w	r0, #21
   47812:	bd08      	pop	{r3, pc}

00047814 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47814:	6843      	ldr	r3, [r0, #4]
   47816:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   47818:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   4781c:	600b      	str	r3, [r1, #0]
}
   4781e:	2000      	movs	r0, #0
   47820:	4770      	bx	lr

00047822 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47822:	6843      	ldr	r3, [r0, #4]
   47824:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   47826:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   4782a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   4782e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   47832:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   47836:	2000      	movs	r0, #0
   47838:	4770      	bx	lr

0004783a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4783a:	6843      	ldr	r3, [r0, #4]
   4783c:	685b      	ldr	r3, [r3, #4]
}
   4783e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   47840:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   47844:	4770      	bx	lr

00047846 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47846:	6843      	ldr	r3, [r0, #4]
   47848:	685b      	ldr	r3, [r3, #4]
}
   4784a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   4784c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   47850:	4770      	bx	lr

00047852 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47852:	6843      	ldr	r3, [r0, #4]
   47854:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   47856:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   4785a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   4785e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   47860:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   47864:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   47868:	2000      	movs	r0, #0
   4786a:	4770      	bx	lr

0004786c <gpio_nrfx_manage_callback>:
{
   4786c:	b510      	push	{r4, lr}
	return port->data;
   4786e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   47870:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   47872:	b1f8      	cbz	r0, 478b4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47874:	4288      	cmp	r0, r1
   47876:	d119      	bne.n	478ac <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   47878:	689c      	ldr	r4, [r3, #8]
	return node->next;
   4787a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   4787c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   4787e:	42a1      	cmp	r1, r4
   47880:	d100      	bne.n	47884 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   47882:	6098      	str	r0, [r3, #8]
	parent->next = child;
   47884:	2000      	movs	r0, #0
   47886:	6008      	str	r0, [r1, #0]
	if (set) {
   47888:	b12a      	cbz	r2, 47896 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   4788a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   4788c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   4788e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   47890:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   47892:	b902      	cbnz	r2, 47896 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   47894:	6099      	str	r1, [r3, #8]
	return 0;
   47896:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   47898:	e010      	b.n	478bc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4789a:	4281      	cmp	r1, r0
   4789c:	d106      	bne.n	478ac <gpio_nrfx_manage_callback+0x40>
	return node->next;
   4789e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   478a0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   478a2:	6898      	ldr	r0, [r3, #8]
   478a4:	4281      	cmp	r1, r0
   478a6:	d1ed      	bne.n	47884 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   478a8:	609c      	str	r4, [r3, #8]
}
   478aa:	e7eb      	b.n	47884 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   478ac:	4604      	mov	r4, r0
   478ae:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   478b0:	2800      	cmp	r0, #0
   478b2:	d1f2      	bne.n	4789a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   478b4:	2a00      	cmp	r2, #0
   478b6:	d1e8      	bne.n	4788a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   478b8:	f06f 0015 	mvn.w	r0, #21
}
   478bc:	bd10      	pop	{r4, pc}

000478be <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   478be:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
   478c0:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   478c2:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   478c4:	d405      	bmi.n	478d2 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   478c6:	f3c1 0242 	ubfx	r2, r1, #1, #3
   478ca:	2a01      	cmp	r2, #1
   478cc:	d004      	beq.n	478d8 <i2c_nrfx_twi_configure+0x1a>
   478ce:	2a02      	cmp	r2, #2
   478d0:	d00a      	beq.n	478e8 <i2c_nrfx_twi_configure+0x2a>
   478d2:	f06f 0015 	mvn.w	r0, #21
}
   478d6:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   478d8:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   478da:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   478de:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   478e2:	6341      	str	r1, [r0, #52]	; 0x34
	return 0;
   478e4:	2000      	movs	r0, #0
   478e6:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   478e8:	681b      	ldr	r3, [r3, #0]
   478ea:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   478ee:	e7f6      	b.n	478de <i2c_nrfx_twi_configure+0x20>

000478f0 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   478f0:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   478f2:	aa01      	add	r2, sp, #4
{
   478f4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   478f6:	f000 f80a 	bl	4790e <pinctrl_lookup_state>
	if (ret < 0) {
   478fa:	2800      	cmp	r0, #0
   478fc:	db05      	blt.n	4790a <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   478fe:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   47900:	6822      	ldr	r2, [r4, #0]
   47902:	7919      	ldrb	r1, [r3, #4]
   47904:	6818      	ldr	r0, [r3, #0]
   47906:	f7f6 faa1 	bl	3de4c <pinctrl_configure_pins>
}
   4790a:	b002      	add	sp, #8
   4790c:	bd10      	pop	{r4, pc}

0004790e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   4790e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   47910:	6843      	ldr	r3, [r0, #4]
   47912:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   47914:	7a05      	ldrb	r5, [r0, #8]
   47916:	6844      	ldr	r4, [r0, #4]
   47918:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   4791c:	42a3      	cmp	r3, r4
   4791e:	d302      	bcc.n	47926 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   47920:	f06f 0001 	mvn.w	r0, #1
}
   47924:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   47926:	795c      	ldrb	r4, [r3, #5]
   47928:	428c      	cmp	r4, r1
   4792a:	d001      	beq.n	47930 <pinctrl_lookup_state+0x22>
		(*state)++;
   4792c:	3308      	adds	r3, #8
   4792e:	e7f0      	b.n	47912 <pinctrl_lookup_state+0x4>
			return 0;
   47930:	2000      	movs	r0, #0
   47932:	e7f7      	b.n	47924 <pinctrl_lookup_state+0x16>

00047934 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
   47934:	6883      	ldr	r3, [r0, #8]
   47936:	689b      	ldr	r3, [r3, #8]
   47938:	4718      	bx	r3

0004793a <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
   4793a:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   4793c:	6884      	ldr	r4, [r0, #8]
   4793e:	6864      	ldr	r4, [r4, #4]
   47940:	46a4      	mov	ip, r4
}
   47942:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
   47944:	4760      	bx	ip

00047946 <bme280_wait_until_ready>:
{
   47946:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
   47948:	2300      	movs	r3, #0
{
   4794a:	4604      	mov	r4, r0
	uint8_t status = 0;
   4794c:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
   47950:	2100      	movs	r1, #0
   47952:	2063      	movs	r0, #99	; 0x63
   47954:	f7f9 fda0 	bl	41498 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
   47958:	6860      	ldr	r0, [r4, #4]
   4795a:	2301      	movs	r3, #1
   4795c:	f10d 0207 	add.w	r2, sp, #7
   47960:	21f3      	movs	r1, #243	; 0xf3
   47962:	f7ff ffea 	bl	4793a <bme280_reg_read.isra.0>
		if (ret < 0) {
   47966:	2800      	cmp	r0, #0
   47968:	db04      	blt.n	47974 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
   4796a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4796e:	f013 0009 	ands.w	r0, r3, #9
   47972:	d1ed      	bne.n	47950 <bme280_wait_until_ready+0xa>
}
   47974:	b002      	add	sp, #8
   47976:	bd10      	pop	{r4, pc}

00047978 <bme280_pm_action>:
static int bme280_pm_action(const struct device *dev,
			    enum pm_device_action action)
{
	int ret = 0;

	switch (action) {
   47978:	b119      	cbz	r1, 47982 <bme280_pm_action+0xa>
   4797a:	2901      	cmp	r1, #1
   4797c:	d106      	bne.n	4798c <bme280_pm_action+0x14>
	case PM_DEVICE_ACTION_RESUME:
		/* Re-initialize the chip */
		ret = bme280_chip_init(dev);
   4797e:	f7f6 bb59 	b.w	3e034 <bme280_chip_init>
		break;
	case PM_DEVICE_ACTION_SUSPEND:
		/* Put the chip into sleep mode */
		ret = bme280_reg_write(dev,
   47982:	6840      	ldr	r0, [r0, #4]
   47984:	22a8      	movs	r2, #168	; 0xa8
   47986:	21f4      	movs	r1, #244	; 0xf4
   47988:	f7ff bfd4 	b.w	47934 <bme280_reg_write.isra.0>
	default:
		return -ENOTSUP;
	}

	return ret;
}
   4798c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   47990:	4770      	bx	lr

00047992 <bme280_sample_fetch>:
{
   47992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47996:	b087      	sub	sp, #28
	(void)pm_device_state_get(dev, &state);
   47998:	f10d 010f 	add.w	r1, sp, #15
	struct bme280_data *data = dev->data;
   4799c:	6906      	ldr	r6, [r0, #16]
{
   4799e:	4604      	mov	r4, r0
	(void)pm_device_state_get(dev, &state);
   479a0:	f7fd fbc5 	bl	4512e <pm_device_state_get>
	if (state == PM_DEVICE_STATE_SUSPENDED)
   479a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   479a8:	2b01      	cmp	r3, #1
   479aa:	f000 8117 	beq.w	47bdc <bme280_sample_fetch+0x24a>
	ret = bme280_wait_until_ready(dev);
   479ae:	4620      	mov	r0, r4
   479b0:	f7ff ffc9 	bl	47946 <bme280_wait_until_ready>
	if (ret < 0) {
   479b4:	2800      	cmp	r0, #0
   479b6:	f2c0 80d9 	blt.w	47b6c <bme280_sample_fetch+0x1da>
	if (data->chip_id == BME280_CHIP_ID) {
   479ba:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   479be:	6860      	ldr	r0, [r4, #4]
	int size = 6;
   479c0:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
   479c2:	bf0c      	ite	eq
   479c4:	2308      	moveq	r3, #8
   479c6:	2306      	movne	r3, #6
   479c8:	aa04      	add	r2, sp, #16
   479ca:	21f7      	movs	r1, #247	; 0xf7
   479cc:	f7ff ffb5 	bl	4793a <bme280_reg_read.isra.0>
	if (ret < 0) {
   479d0:	2800      	cmp	r0, #0
   479d2:	f2c0 80cb 	blt.w	47b6c <bme280_sample_fetch+0x1da>
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   479d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   479da:	f89d 5014 	ldrb.w	r5, [sp, #20]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   479de:	9300      	str	r3, [sp, #0]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   479e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   479e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   479e8:	f89d a011 	ldrb.w	sl, [sp, #17]
   479ec:	f89d 1012 	ldrb.w	r1, [sp, #18]
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   479f0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   479f4:	f9b6 000e 	ldrsh.w	r0, [r6, #14]
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   479f8:	f9b6 b00c 	ldrsh.w	fp, [r6, #12]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   479fc:	012d      	lsls	r5, r5, #4
   479fe:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   47a02:	8833      	ldrh	r3, [r6, #0]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
   47a04:	ea45 1212 	orr.w	r2, r5, r2, lsr #4
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   47a08:	ebc3 1515 	rsb	r5, r3, r5, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   47a0c:	005b      	lsls	r3, r3, #1
   47a0e:	ebc3 03d2 	rsb	r3, r3, r2, lsr #3
		((int32_t)data->dig_t2)) >> 11;
   47a12:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   47a16:	436d      	muls	r5, r5
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
   47a18:	4353      	muls	r3, r2
		((int32_t)data->dig_t3)) >> 14;
   47a1a:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
   47a1e:	132d      	asrs	r5, r5, #12
   47a20:	4355      	muls	r5, r2
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
   47a22:	13ad      	asrs	r5, r5, #14
	data->t_fine = var1 + var2;
   47a24:	eb05 25e3 	add.w	r5, r5, r3, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
   47a28:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   47a2c:	3380      	adds	r3, #128	; 0x80
   47a2e:	121b      	asrs	r3, r3, #8
   47a30:	f5a5 37fa 	sub.w	r7, r5, #128000	; 0x1f400
   47a34:	6273      	str	r3, [r6, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   47a36:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
	data->t_fine = var1 + var2;
   47a3a:	6335      	str	r5, [r6, #48]	; 0x30
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   47a3c:	fb87 e807 	smull	lr, r8, r7, r7
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   47a40:	17da      	asrs	r2, r3, #31
   47a42:	fb03 f408 	mul.w	r4, r3, r8
   47a46:	fb0e 4402 	mla	r4, lr, r2, r4
   47a4a:	fba3 320e 	umull	r3, r2, r3, lr
   47a4e:	4414      	add	r4, r2
		((var1 * (int64_t)data->dig_p2) << 12);
   47a50:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
   47a54:	fb82 9207 	smull	r9, r2, r2, r7
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   47a58:	0a1b      	lsrs	r3, r3, #8
		((var1 * (int64_t)data->dig_p2) << 12);
   47a5a:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   47a5c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
		((var1 * (int64_t)data->dig_p2) << 12);
   47a60:	ea42 5219 	orr.w	r2, r2, r9, lsr #20
   47a64:	ea4f 3909 	mov.w	r9, r9, lsl #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
   47a68:	eb13 0309 	adds.w	r3, r3, r9
   47a6c:	eb42 2224 	adc.w	r2, r2, r4, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   47a70:	f8b6 9006 	ldrh.w	r9, [r6, #6]
   47a74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   47a78:	9201      	str	r2, [sp, #4]
   47a7a:	fba3 2309 	umull	r2, r3, r3, r9
   47a7e:	9a01      	ldr	r2, [sp, #4]
   47a80:	fb09 3902 	mla	r9, r9, r2, r3
   47a84:	ea4f 73e9 	mov.w	r3, r9, asr #31
   47a88:	ea4f 0269 	mov.w	r2, r9, asr #1
	if (var1 == 0) {
   47a8c:	ea53 0969 	orrs.w	r9, r3, r9, asr #1
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
   47a90:	f04f 0400 	mov.w	r4, #0
	if (var1 == 0) {
   47a94:	d064      	beq.n	47b60 <bme280_sample_fetch+0x1ce>
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   47a96:	ea4f 79ec 	mov.w	r9, ip, asr #31
   47a9a:	fb0c f808 	mul.w	r8, ip, r8
   47a9e:	fb0e 8809 	mla	r8, lr, r9, r8
   47aa2:	fbac 9c0e 	umull	r9, ip, ip, lr
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   47aa6:	fb80 e707 	smull	lr, r7, r0, r7
   47aaa:	047f      	lsls	r7, r7, #17
   47aac:	ea47 37de 	orr.w	r7, r7, lr, lsr #15
   47ab0:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
   47ab4:	eb1e 0e09 	adds.w	lr, lr, r9
	var2 = var1 * var1 * (int64_t)data->dig_p6;
   47ab8:	44c4      	add	ip, r8
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
   47aba:	eb4c 0c07 	adc.w	ip, ip, r7
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
   47abe:	090f      	lsrs	r7, r1, #4
   47ac0:	9900      	ldr	r1, [sp, #0]
   47ac2:	ea47 170a 	orr.w	r7, r7, sl, lsl #4
   47ac6:	ea47 3701 	orr.w	r7, r7, r1, lsl #12
	p = 1048576 - adc_press;
   47aca:	f5c7 1780 	rsb	r7, r7, #1048576	; 0x100000
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   47ace:	eb14 0e0e 	adds.w	lr, r4, lr
	p = (((p << 31) - var2) * 3125) / var1;
   47ad2:	f007 4100 	and.w	r1, r7, #2147483648	; 0x80000000
   47ad6:	07f8      	lsls	r0, r7, #31
   47ad8:	ebb0 000e 	subs.w	r0, r0, lr
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
   47adc:	eb0c 0ccb 	add.w	ip, ip, fp, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
   47ae0:	f640 4435 	movw	r4, #3125	; 0xc35
   47ae4:	ea41 0157 	orr.w	r1, r1, r7, lsr #1
   47ae8:	eb61 010c 	sbc.w	r1, r1, ip
   47aec:	fba0 0704 	umull	r0, r7, r0, r4
   47af0:	fb04 7101 	mla	r1, r4, r1, r7
   47af4:	f7df fb04 	bl	27100 <__aeabi_ldivmod>
   47af8:	4607      	mov	r7, r0
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   47afa:	f9b6 4016 	ldrsh.w	r4, [r6, #22]
   47afe:	0b7b      	lsrs	r3, r7, #13
   47b00:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
	p = (((p << 31) - var2) * 3125) / var1;
   47b04:	4608      	mov	r0, r1
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
   47b06:	1349      	asrs	r1, r1, #13
   47b08:	fb04 fc01 	mul.w	ip, r4, r1
   47b0c:	ea4f 7ee4 	mov.w	lr, r4, asr #31
   47b10:	fb03 cc0e 	mla	ip, r3, lr, ip
   47b14:	fba4 4e03 	umull	r4, lr, r4, r3
   47b18:	44f4      	add	ip, lr
   47b1a:	4361      	muls	r1, r4
   47b1c:	fb03 110c 	mla	r1, r3, ip, r1
   47b20:	fba4 4303 	umull	r4, r3, r4, r3
   47b24:	440b      	add	r3, r1
   47b26:	0e64      	lsrs	r4, r4, #25
   47b28:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   47b2c:	19e4      	adds	r4, r4, r7
   47b2e:	eb40 6163 	adc.w	r1, r0, r3, asr #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
   47b32:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
   47b36:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   47b3a:	4358      	muls	r0, r3
   47b3c:	fb0c 0007 	mla	r0, ip, r7, r0
   47b40:	fba3 3207 	umull	r3, r2, r3, r7
   47b44:	4410      	add	r0, r2
   47b46:	0cdb      	lsrs	r3, r3, #19
   47b48:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
   47b4c:	18e4      	adds	r4, r4, r3
   47b4e:	eb41 43e0 	adc.w	r3, r1, r0, asr #19
   47b52:	0a24      	lsrs	r4, r4, #8
   47b54:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
   47b58:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
	data->comp_press = (uint32_t)p;
   47b5c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
	if (data->chip_id == BME280_CHIP_ID) {
   47b60:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
   47b64:	62b4      	str	r4, [r6, #40]	; 0x28
   47b66:	2b60      	cmp	r3, #96	; 0x60
   47b68:	d003      	beq.n	47b72 <bme280_sample_fetch+0x1e0>
	return 0;
   47b6a:	2000      	movs	r0, #0
}
   47b6c:	b007      	add	sp, #28
   47b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   47b72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   47b76:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   47b7a:	f996 1022 	ldrsb.w	r1, [r6, #34]	; 0x22
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   47b7e:	ba52      	rev16	r2, r2
   47b80:	b292      	uxth	r2, r2
   47b82:	051b      	lsls	r3, r3, #20
   47b84:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   47b88:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
	h = (data->t_fine - ((int32_t)76800));
   47b8c:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   47b90:	fb05 3312 	mls	r3, r5, r2, r3
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
   47b94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   47b98:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   47b9a:	7f33      	ldrb	r3, [r6, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   47b9c:	436b      	muls	r3, r5
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   47b9e:	12db      	asrs	r3, r3, #11
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   47ba0:	4369      	muls	r1, r5
   47ba2:	1289      	asrs	r1, r1, #10
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   47ba4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
   47ba8:	434b      	muls	r3, r1
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   47baa:	129b      	asrs	r3, r3, #10
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   47bac:	f9b6 101a 	ldrsh.w	r1, [r6, #26]
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
   47bb0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
   47bb4:	434b      	muls	r3, r1
   47bb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   47bba:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
   47bbc:	4353      	muls	r3, r2
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   47bbe:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
   47bc0:	7e31      	ldrb	r1, [r6, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
   47bc2:	4352      	muls	r2, r2
   47bc4:	11d2      	asrs	r2, r2, #7
   47bc6:	434a      	muls	r2, r1
   47bc8:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
   47bcc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   47bd0:	bfa8      	it	ge
   47bd2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
   47bd6:	131b      	asrs	r3, r3, #12
   47bd8:	62f3      	str	r3, [r6, #44]	; 0x2c
}
   47bda:	e7c6      	b.n	47b6a <bme280_sample_fetch+0x1d8>
		return -EIO;
   47bdc:	f06f 0004 	mvn.w	r0, #4
   47be0:	e7c4      	b.n	47b6c <bme280_sample_fetch+0x1da>

00047be2 <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
   47be2:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
   47be4:	6800      	ldr	r0, [r0, #0]
   47be6:	f000 fa18 	bl	4801a <z_device_is_ready>
   47bea:	2800      	cmp	r0, #0
}
   47bec:	bf0c      	ite	eq
   47bee:	f06f 0012 	mvneq.w	r0, #18
   47bf2:	2000      	movne	r0, #0
   47bf4:	bd08      	pop	{r3, pc}

00047bf6 <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
   47bf6:	b530      	push	{r4, r5, lr}
   47bf8:	b089      	sub	sp, #36	; 0x24
   47bfa:	4604      	mov	r4, r0
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
   47bfc:	f88d 1007 	strb.w	r1, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   47c00:	f10d 0107 	add.w	r1, sp, #7
{
   47c04:	461d      	mov	r5, r3
   47c06:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   47c08:	2101      	movs	r1, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   47c0a:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
   47c0e:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   47c10:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   47c12:	2100      	movs	r1, #0
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
   47c14:	6800      	ldr	r0, [r0, #0]
   47c16:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   47c18:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   47c1c:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   47c20:	6882      	ldr	r2, [r0, #8]
   47c22:	a902      	add	r1, sp, #8
   47c24:	6894      	ldr	r4, [r2, #8]
   47c26:	2202      	movs	r2, #2
   47c28:	47a0      	blx	r4
}
   47c2a:	b009      	add	sp, #36	; 0x24
   47c2c:	bd30      	pop	{r4, r5, pc}

00047c2e <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
   47c2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   47c30:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   47c32:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   47c36:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   47c38:	6800      	ldr	r0, [r0, #0]
   47c3a:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   47c3c:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
   47c40:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   47c44:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   47c46:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   47c4a:	6882      	ldr	r2, [r0, #8]
   47c4c:	a901      	add	r1, sp, #4
   47c4e:	6894      	ldr	r4, [r2, #8]
   47c50:	2201      	movs	r2, #1
   47c52:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
   47c54:	b004      	add	sp, #16
   47c56:	bd10      	pop	{r4, pc}

00047c58 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   47c58:	4770      	bx	lr

00047c5a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   47c5a:	f100 0350 	add.w	r3, r0, #80	; 0x50
   47c5e:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   47c60:	b29b      	uxth	r3, r3
   47c62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47c66:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   47c6a:	2200      	movs	r2, #0
   47c6c:	601a      	str	r2, [r3, #0]
   47c6e:	681b      	ldr	r3, [r3, #0]
}
   47c70:	4770      	bx	lr

00047c72 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   47c72:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   47c74:	2000      	movs	r0, #0
   47c76:	f7f1 fb39 	bl	392ec <sys_arch_reboot>

00047c7a <sdc_assertion_handler>:
	k_oops();
   47c7a:	4040      	eors	r0, r0
   47c7c:	f380 8811 	msr	BASEPRI, r0
   47c80:	f04f 0003 	mov.w	r0, #3
   47c84:	df02      	svc	2
}
   47c86:	4770      	bx	lr

00047c88 <hci_driver_close>:
{
   47c88:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   47c8a:	f7f7 fb81 	bl	3f390 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   47c8e:	f04f 30ff 	mov.w	r0, #4294967295
   47c92:	f04f 31ff 	mov.w	r1, #4294967295
   47c96:	f7f6 fc9d 	bl	3e5d4 <multithreading_lock_acquire>
	if (err) {
   47c9a:	4604      	mov	r4, r0
   47c9c:	b920      	cbnz	r0, 47ca8 <hci_driver_close+0x20>
	err = sdc_disable();
   47c9e:	f7df fe55 	bl	2794c <sdc_disable>
	if (err) {
   47ca2:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   47ca4:	f7f6 fc9e 	bl	3e5e4 <multithreading_lock_release>
}
   47ca8:	4620      	mov	r0, r4
   47caa:	bd10      	pop	{r4, pc}

00047cac <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   47cac:	f7f6 bd48 	b.w	3e740 <rand_prio_low_vector_get>

00047cb0 <hci_driver_send>:
{
   47cb0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   47cb2:	8a03      	ldrh	r3, [r0, #16]
{
   47cb4:	4605      	mov	r5, r0
	if (!buf->len) {
   47cb6:	b373      	cbz	r3, 47d16 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   47cb8:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   47cba:	b1a3      	cbz	r3, 47ce6 <hci_driver_send+0x36>
   47cbc:	2b02      	cmp	r3, #2
   47cbe:	d12a      	bne.n	47d16 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   47cc0:	f04f 30ff 	mov.w	r0, #4294967295
   47cc4:	f04f 31ff 	mov.w	r1, #4294967295
   47cc8:	f7f6 fc84 	bl	3e5d4 <multithreading_lock_acquire>
	if (!errcode) {
   47ccc:	4604      	mov	r4, r0
   47cce:	b940      	cbnz	r0, 47ce2 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   47cd0:	68e8      	ldr	r0, [r5, #12]
   47cd2:	f7eb ff94 	bl	33bfe <sdc_hci_data_put>
   47cd6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   47cd8:	f7f6 fc84 	bl	3e5e4 <multithreading_lock_release>
		if (errcode) {
   47cdc:	b1b4      	cbz	r4, 47d0c <hci_driver_send+0x5c>
			receive_signal_raise();
   47cde:	f7f6 fd43 	bl	3e768 <receive_signal_raise>
}
   47ce2:	4620      	mov	r0, r4
   47ce4:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   47ce6:	f04f 30ff 	mov.w	r0, #4294967295
   47cea:	f04f 31ff 	mov.w	r1, #4294967295
   47cee:	f7f6 fc71 	bl	3e5d4 <multithreading_lock_acquire>
	if (!errcode) {
   47cf2:	4604      	mov	r4, r0
   47cf4:	2800      	cmp	r0, #0
   47cf6:	d1f4      	bne.n	47ce2 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   47cf8:	68e8      	ldr	r0, [r5, #12]
   47cfa:	f7f6 fd9d 	bl	3e838 <hci_internal_cmd_put>
   47cfe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   47d00:	f7f6 fc70 	bl	3e5e4 <multithreading_lock_release>
	if (errcode) {
   47d04:	2c00      	cmp	r4, #0
   47d06:	d1ec      	bne.n	47ce2 <hci_driver_send+0x32>
	receive_signal_raise();
   47d08:	f7f6 fd2e 	bl	3e768 <receive_signal_raise>
		net_buf_unref(buf);
   47d0c:	4628      	mov	r0, r5
   47d0e:	f7f5 f98d 	bl	3d02c <net_buf_unref>
   47d12:	2400      	movs	r4, #0
   47d14:	e7e5      	b.n	47ce2 <hci_driver_send+0x32>
	switch (type) {
   47d16:	f06f 0415 	mvn.w	r4, #21
   47d1a:	e7e2      	b.n	47ce2 <hci_driver_send+0x32>

00047d1c <receive_work_handler>:
	hci_driver_receive_process();
   47d1c:	f7f6 bd38 	b.w	3e790 <hci_driver_receive_process>

00047d20 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   47d20:	f101 0320 	add.w	r3, r1, #32
   47d24:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   47d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   47d2a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   47d2e:	428b      	cmp	r3, r1
   47d30:	d1f9      	bne.n	47d26 <sys_memcpy_swap.constprop.0+0x6>
}
   47d32:	4770      	bx	lr

00047d34 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   47d34:	2100      	movs	r1, #0
   47d36:	f7f7 bb4d 	b.w	3f3d4 <cmd_le_generate_dhkey>

00047d3a <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   47d3a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   47d3e:	2901      	cmp	r1, #1
   47d40:	d801      	bhi.n	47d46 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   47d42:	f7f7 bb47 	b.w	3f3d4 <cmd_le_generate_dhkey>
}
   47d46:	2012      	movs	r0, #18
   47d48:	4770      	bx	lr

00047d4a <m_assert_handler>:
	k_oops();
   47d4a:	4040      	eors	r0, r0
   47d4c:	f380 8811 	msr	BASEPRI, r0
   47d50:	f04f 0003 	mov.w	r0, #3
   47d54:	df02      	svc	2
}
   47d56:	4770      	bx	lr

00047d58 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   47d58:	4668      	mov	r0, sp
   47d5a:	f020 0107 	bic.w	r1, r0, #7
   47d5e:	468d      	mov	sp, r1
   47d60:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   47d62:	f7ea f8fd 	bl	31f60 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   47d66:	f7f0 feed 	bl	38b44 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   47d6a:	f7f0 ffd9 	bl	38d20 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   47d6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   47d72:	4685      	mov	sp, r0
   47d74:	4770      	bx	lr

00047d76 <mpsl_low_prio_work_handler>:
{
   47d76:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   47d78:	f04f 31ff 	mov.w	r1, #4294967295
   47d7c:	f04f 30ff 	mov.w	r0, #4294967295
   47d80:	f7f6 fc28 	bl	3e5d4 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   47d84:	f7ef fb4a 	bl	3741c <mpsl_low_priority_process>
}
   47d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   47d8c:	f7f6 bc2a 	b.w	3e5e4 <multithreading_lock_release>

00047d90 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   47d90:	4668      	mov	r0, sp
   47d92:	f020 0107 	bic.w	r1, r0, #7
   47d96:	468d      	mov	sp, r1
   47d98:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   47d9a:	f7ea f897 	bl	31ecc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   47d9e:	f7f0 fed1 	bl	38b44 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   47da2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   47da6:	4685      	mov	sp, r0
   47da8:	4770      	bx	lr

00047daa <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   47daa:	4668      	mov	r0, sp
   47dac:	f020 0107 	bic.w	r1, r0, #7
   47db0:	468d      	mov	sp, r1
   47db2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   47db4:	f7e7 fd2a 	bl	2f80c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   47db8:	f7f0 fec4 	bl	38b44 <_arch_isr_direct_pm>
   47dbc:	f7f0 ffb0 	bl	38d20 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   47dc0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   47dc4:	4685      	mov	sp, r0
   47dc6:	4770      	bx	lr

00047dc8 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   47dc8:	b508      	push	{r3, lr}

	mpsl_fem_init();
   47dca:	f7ef fcfd 	bl	377c8 <mpsl_fem_init>

	return 0;
}
   47dce:	2000      	movs	r0, #0
   47dd0:	bd08      	pop	{r3, pc}

00047dd2 <nrfx_clock_stop>:
	switch (domain) {
   47dd2:	2801      	cmp	r0, #1
   47dd4:	d101      	bne.n	47dda <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   47dd6:	f7ea bf57 	b.w	32c88 <mpsl_clock_hfclk_release>
}
   47dda:	4770      	bx	lr

00047ddc <nrfx_clock_enable>:
}
   47ddc:	4770      	bx	lr

00047dde <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   47dde:	f7ea bd5d 	b.w	3289c <MPSL_IRQ_CLOCK_Handler>

00047de2 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   47de2:	2000      	movs	r0, #0
   47de4:	4770      	bx	lr

00047de6 <temp_nrf5_mpsl_sample_fetch>:
{
   47de6:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   47de8:	2939      	cmp	r1, #57	; 0x39
	struct temp_nrf5_mpsl_data *data = dev->data;
   47dea:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   47dec:	d001      	beq.n	47df2 <temp_nrf5_mpsl_sample_fetch+0xc>
   47dee:	290c      	cmp	r1, #12
   47df0:	d104      	bne.n	47dfc <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   47df2:	f7eb f945 	bl	33080 <mpsl_temperature_get>
   47df6:	6020      	str	r0, [r4, #0]
	return 0;
   47df8:	2000      	movs	r0, #0
}
   47dfa:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   47dfc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   47e00:	e7fb      	b.n	47dfa <temp_nrf5_mpsl_sample_fetch+0x14>

00047e02 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   47e02:	f7fa ba13 	b.w	4222c <nrf_cc3xx_platform_init>

00047e06 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   47e06:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   47e08:	f7f0 fd46 	bl	38898 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   47e0c:	f7f0 fe1a 	bl	38a44 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   47e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   47e14:	f7fa ba0a 	b.w	4222c <nrf_cc3xx_platform_init>

00047e18 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   47e18:	4700      	bx	r0

00047e1a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   47e1a:	f000 bd30 	b.w	4887e <z_impl_k_busy_wait>

00047e1e <nrf_gpio_reconfigure>:
{
   47e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47e20:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   47e22:	a801      	add	r0, sp, #4
{
   47e24:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   47e28:	4616      	mov	r6, r2
   47e2a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   47e2c:	f7f7 fcc8 	bl	3f7c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   47e30:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   47e32:	f1b6 0c00 	subs.w	ip, r6, #0
   47e36:	bf18      	it	ne
   47e38:	f04f 0c01 	movne.w	ip, #1
   47e3c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e40:	1e0b      	subs	r3, r1, #0
   47e42:	bf18      	it	ne
   47e44:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e46:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e48:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e4c:	bf14      	ite	ne
   47e4e:	f04f 0c0c 	movne.w	ip, #12
   47e52:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   47e56:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   47e58:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   47e5c:	bf14      	ite	ne
   47e5e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   47e62:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   47e66:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   47e68:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   47e6c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   47e70:	bf14      	ite	ne
   47e72:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   47e76:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   47e7a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   47e7e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47e82:	b101      	cbz	r1, 47e86 <nrf_gpio_reconfigure+0x68>
   47e84:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   47e86:	b10e      	cbz	r6, 47e8c <nrf_gpio_reconfigure+0x6e>
   47e88:	7836      	ldrb	r6, [r6, #0]
   47e8a:	0076      	lsls	r6, r6, #1
   47e8c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   47e8e:	b10d      	cbz	r5, 47e94 <nrf_gpio_reconfigure+0x76>
   47e90:	782d      	ldrb	r5, [r5, #0]
   47e92:	00ad      	lsls	r5, r5, #2
   47e94:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   47e96:	b10c      	cbz	r4, 47e9c <nrf_gpio_reconfigure+0x7e>
   47e98:	7824      	ldrb	r4, [r4, #0]
   47e9a:	0224      	lsls	r4, r4, #8
   47e9c:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   47e9e:	b10f      	cbz	r7, 47ea4 <nrf_gpio_reconfigure+0x86>
   47ea0:	783f      	ldrb	r7, [r7, #0]
   47ea2:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47ea4:	430c      	orrs	r4, r1
   47ea6:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   47ea8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   47eac:	b003      	add	sp, #12
   47eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047eb0 <nrf_gpio_cfg_sense_set>:
{
   47eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47eb2:	f10d 030f 	add.w	r3, sp, #15
   47eb6:	9301      	str	r3, [sp, #4]
   47eb8:	2300      	movs	r3, #0
{
   47eba:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47ebe:	9300      	str	r3, [sp, #0]
   47ec0:	461a      	mov	r2, r3
   47ec2:	4619      	mov	r1, r3
   47ec4:	f7ff ffab 	bl	47e1e <nrf_gpio_reconfigure>
}
   47ec8:	b005      	add	sp, #20
   47eca:	f85d fb04 	ldr.w	pc, [sp], #4

00047ece <twi_transfer>:
{
   47ece:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47ed0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   47ed4:	b12b      	cbz	r3, 47ee2 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47ed6:	2300      	movs	r3, #0
   47ed8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   47edc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   47ee0:	2301      	movs	r3, #1
    if (p_cb->error)
   47ee2:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   47ee6:	b322      	cbz	r2, 47f32 <twi_transfer+0x64>
   47ee8:	2200      	movs	r2, #0
   47eea:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   47eee:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
   47ef2:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
   47ef6:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
   47efa:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   47efe:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
   47f02:	2b00      	cmp	r3, #0
   47f04:	d079      	beq.n	47ffa <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   47f06:	2200      	movs	r2, #0
   47f08:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
   47f0c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   47f10:	2a00      	cmp	r2, #0
   47f12:	d137      	bne.n	47f84 <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   47f14:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   47f16:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   47f18:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   47f1a:	bf1f      	itttt	ne
   47f1c:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   47f1e:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   47f22:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
   47f26:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   47f28:	f083 0301 	eor.w	r3, r3, #1
   47f2c:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
   47f30:	e028      	b.n	47f84 <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47f32:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   47f36:	b114      	cbz	r4, 47f3e <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47f38:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   47f3c:	e00e      	b.n	47f5c <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47f3e:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   47f42:	b36a      	cbz	r2, 47fa0 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47f44:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
   47f48:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   47f4c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   47f4e:	3201      	adds	r2, #1
   47f50:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47f52:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   47f56:	b145      	cbz	r5, 47f6a <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47f58:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
   47f5c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47f60:	2201      	movs	r2, #1
   47f62:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
   47f64:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
   47f68:	e7cb      	b.n	47f02 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   47f6a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   47f6c:	42a2      	cmp	r2, r4
   47f6e:	d204      	bcs.n	47f7a <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   47f70:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
   47f72:	5ca2      	ldrb	r2, [r4, r2]
   47f74:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   47f78:	e7c3      	b.n	47f02 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
   47f7a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   47f7e:	b11a      	cbz	r2, 47f88 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47f80:	2301      	movs	r3, #1
   47f82:	61c3      	str	r3, [r0, #28]
                    return false;
   47f84:	2000      	movs	r0, #0
}
   47f86:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   47f88:	6a0a      	ldr	r2, [r1, #32]
   47f8a:	f012 0f40 	tst.w	r2, #64	; 0x40
   47f8e:	f04f 0201 	mov.w	r2, #1
   47f92:	d003      	beq.n	47f9c <twi_transfer+0xce>
   47f94:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   47f96:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   47f9a:	e7f3      	b.n	47f84 <twi_transfer+0xb6>
   47f9c:	6142      	str	r2, [r0, #20]
   47f9e:	e7b0      	b.n	47f02 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47fa0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   47fa4:	2c00      	cmp	r4, #0
   47fa6:	d0ac      	beq.n	47f02 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47fa8:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   47fac:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   47fb0:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   47fb4:	2c00      	cmp	r4, #0
   47fb6:	d1bf      	bne.n	47f38 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   47fb8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   47fba:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   47fbc:	42a2      	cmp	r2, r4
   47fbe:	d2a0      	bcs.n	47f02 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   47fc0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   47fc2:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
   47fc6:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
   47fc8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   47fca:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   47fcc:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   47fce:	1e65      	subs	r5, r4, #1
   47fd0:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
   47fd2:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   47fd4:	d108      	bne.n	47fe8 <twi_transfer+0x11a>
   47fd6:	6a0a      	ldr	r2, [r1, #32]
   47fd8:	0654      	lsls	r4, r2, #25
   47fda:	d402      	bmi.n	47fe2 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
   47fdc:	2202      	movs	r2, #2
   47fde:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47fe2:	2201      	movs	r2, #1
   47fe4:	6202      	str	r2, [r0, #32]
   47fe6:	e78c      	b.n	47f02 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   47fe8:	42a2      	cmp	r2, r4
   47fea:	d1fa      	bne.n	47fe2 <twi_transfer+0x114>
   47fec:	6a0a      	ldr	r2, [r1, #32]
   47fee:	0652      	lsls	r2, r2, #25
   47ff0:	d587      	bpl.n	47f02 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   47ff2:	2302      	movs	r3, #2
   47ff4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   47ff8:	e7c4      	b.n	47f84 <twi_transfer+0xb6>
    return true;
   47ffa:	2001      	movs	r0, #1
   47ffc:	e7c3      	b.n	47f86 <twi_transfer+0xb8>

00047ffe <nrf_gpio_pin_set>:
{
   47ffe:	b507      	push	{r0, r1, r2, lr}
   48000:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   48002:	a801      	add	r0, sp, #4
   48004:	f7f8 f9e4 	bl	403d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   48008:	9a01      	ldr	r2, [sp, #4]
   4800a:	2301      	movs	r3, #1
   4800c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   4800e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   48012:	b003      	add	sp, #12
   48014:	f85d fb04 	ldr.w	pc, [sp], #4

00048018 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   48018:	4770      	bx	lr

0004801a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   4801a:	b140      	cbz	r0, 4802e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   4801c:	68c3      	ldr	r3, [r0, #12]
   4801e:	7858      	ldrb	r0, [r3, #1]
   48020:	f010 0001 	ands.w	r0, r0, #1
   48024:	bf1e      	ittt	ne
   48026:	7818      	ldrbne	r0, [r3, #0]
   48028:	fab0 f080 	clzne	r0, r0
   4802c:	0940      	lsrne	r0, r0, #5
}
   4802e:	4770      	bx	lr

00048030 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   48030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48032:	4605      	mov	r5, r0
   48034:	460e      	mov	r6, r1
	__asm__ volatile(
   48036:	f04f 0340 	mov.w	r3, #64	; 0x40
   4803a:	f3ef 8711 	mrs	r7, BASEPRI
   4803e:	f383 8812 	msr	BASEPRI_MAX, r3
   48042:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   48046:	f7f9 fa41 	bl	414cc <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   4804a:	4631      	mov	r1, r6
   4804c:	4604      	mov	r4, r0
   4804e:	4628      	mov	r0, r5
   48050:	f7ff fe0f 	bl	47c72 <k_sys_fatal_error_handler>
	__asm__ volatile(
   48054:	f387 8811 	msr	BASEPRI, r7
   48058:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   4805c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   4805e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   48062:	f7f1 b835 	b.w	390d0 <z_impl_k_thread_abort>

00048066 <z_early_memset>:
	(void) memset(dst, c, n);
   48066:	f7fd bb5e 	b.w	45726 <memset>

0004806a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   4806a:	f7fd bb51 	b.w	45710 <memcpy>

0004806e <k_heap_init>:
{
   4806e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   48070:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   48074:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   48078:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   4807a:	f7fc becd 	b.w	44e18 <sys_heap_init>

0004807e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   4807e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48082:	b085      	sub	sp, #20
   48084:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   48088:	4607      	mov	r7, r0
   4808a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   4808c:	4650      	mov	r0, sl
   4808e:	4621      	mov	r1, r4
{
   48090:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48092:	f000 fbf8 	bl	48886 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   48096:	f1b4 3fff 	cmp.w	r4, #4294967295
   4809a:	bf08      	it	eq
   4809c:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   480a0:	4605      	mov	r5, r0
   480a2:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   480a4:	bf04      	itt	eq
   480a6:	f04f 35ff 	moveq.w	r5, #4294967295
   480aa:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   480ae:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   480b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   480b6:	f3ef 8411 	mrs	r4, BASEPRI
   480ba:	f383 8812 	msr	BASEPRI_MAX, r3
   480be:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   480c2:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   480c6:	464a      	mov	r2, r9
   480c8:	4641      	mov	r1, r8
   480ca:	4638      	mov	r0, r7
   480cc:	f7fc fe3d 	bl	44d4a <sys_heap_aligned_alloc>
   480d0:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   480d2:	f7f9 fbb3 	bl	4183c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   480d6:	9b03      	ldr	r3, [sp, #12]
   480d8:	b13b      	cbz	r3, 480ea <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   480da:	f384 8811 	msr	BASEPRI, r4
   480de:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   480e2:	4618      	mov	r0, r3
   480e4:	b005      	add	sp, #20
   480e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   480ea:	1a28      	subs	r0, r5, r0
   480ec:	eb66 0101 	sbc.w	r1, r6, r1
   480f0:	2801      	cmp	r0, #1
   480f2:	f171 0200 	sbcs.w	r2, r1, #0
   480f6:	dbf0      	blt.n	480da <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   480f8:	e9cd 0100 	strd	r0, r1, [sp]
   480fc:	465a      	mov	r2, fp
   480fe:	4621      	mov	r1, r4
   48100:	4650      	mov	r0, sl
   48102:	f7f9 f849 	bl	41198 <z_pend_curr>
	__asm__ volatile(
   48106:	f04f 0340 	mov.w	r3, #64	; 0x40
   4810a:	f3ef 8411 	mrs	r4, BASEPRI
   4810e:	f383 8812 	msr	BASEPRI_MAX, r3
   48112:	f3bf 8f6f 	isb	sy
	return k;
   48116:	e7d6      	b.n	480c6 <k_heap_aligned_alloc+0x48>

00048118 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   48118:	b538      	push	{r3, r4, r5, lr}
   4811a:	4604      	mov	r4, r0
   4811c:	f04f 0340 	mov.w	r3, #64	; 0x40
   48120:	f3ef 8511 	mrs	r5, BASEPRI
   48124:	f383 8812 	msr	BASEPRI_MAX, r3
   48128:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   4812c:	f7fc fdd5 	bl	44cda <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   48130:	f104 000c 	add.w	r0, r4, #12
   48134:	f000 fb20 	bl	48778 <z_unpend_all>
   48138:	b130      	cbz	r0, 48148 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   4813a:	4629      	mov	r1, r5
   4813c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   48140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   48144:	f7f9 b88c 	b.w	41260 <z_reschedule>
	__asm__ volatile(
   48148:	f385 8811 	msr	BASEPRI, r5
   4814c:	f3bf 8f6f 	isb	sy
}
   48150:	bd38      	pop	{r3, r4, r5, pc}

00048152 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   48152:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   48156:	4313      	orrs	r3, r2
   48158:	f013 0303 	ands.w	r3, r3, #3
   4815c:	d10c      	bne.n	48178 <create_free_list+0x26>
	slab->free_list = NULL;
   4815e:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   48160:	6881      	ldr	r1, [r0, #8]
   48162:	4299      	cmp	r1, r3
   48164:	d801      	bhi.n	4816a <create_free_list+0x18>
	return 0;
   48166:	2000      	movs	r0, #0
   48168:	4770      	bx	lr
		*(char **)p = slab->free_list;
   4816a:	6941      	ldr	r1, [r0, #20]
   4816c:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   4816e:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   48170:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   48172:	3301      	adds	r3, #1
		p += slab->block_size;
   48174:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   48176:	e7f3      	b.n	48160 <create_free_list+0xe>
		return -EINVAL;
   48178:	f06f 0015 	mvn.w	r0, #21
}
   4817c:	4770      	bx	lr

0004817e <k_mem_slab_init>:
{
   4817e:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   48180:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   48184:	2300      	movs	r3, #0
	slab->buffer = buffer;
   48186:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   48188:	6183      	str	r3, [r0, #24]
{
   4818a:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   4818c:	f7ff ffe1 	bl	48152 <create_free_list>
	if (rc < 0) {
   48190:	2800      	cmp	r0, #0
   48192:	bfa8      	it	ge
   48194:	e9c4 4400 	strdge	r4, r4, [r4]
}
   48198:	bd10      	pop	{r4, pc}

0004819a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   4819a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4819c:	4604      	mov	r4, r0
   4819e:	460d      	mov	r5, r1
	__asm__ volatile(
   481a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   481a4:	f3ef 8611 	mrs	r6, BASEPRI
   481a8:	f383 8812 	msr	BASEPRI_MAX, r3
   481ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   481b0:	6947      	ldr	r7, [r0, #20]
   481b2:	b97f      	cbnz	r7, 481d4 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   481b4:	f000 fa96 	bl	486e4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   481b8:	b160      	cbz	r0, 481d4 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   481ba:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   481bc:	6142      	str	r2, [r0, #20]
   481be:	f8c0 708c 	str.w	r7, [r0, #140]	; 0x8c
			z_ready_thread(pending_thread);
   481c2:	f000 fa2a 	bl	4861a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   481c6:	4631      	mov	r1, r6
   481c8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   481cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   481d0:	f7f9 b846 	b.w	41260 <z_reschedule>
	**(char ***) mem = slab->free_list;
   481d4:	682b      	ldr	r3, [r5, #0]
   481d6:	6962      	ldr	r2, [r4, #20]
   481d8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   481da:	682b      	ldr	r3, [r5, #0]
   481dc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   481de:	69a3      	ldr	r3, [r4, #24]
   481e0:	3b01      	subs	r3, #1
   481e2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   481e4:	f386 8811 	msr	BASEPRI, r6
   481e8:	f3bf 8f6f 	isb	sy
}
   481ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000481ee <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   481ee:	f3ef 8005 	mrs	r0, IPSR
}
   481f2:	3800      	subs	r0, #0
   481f4:	bf18      	it	ne
   481f6:	2001      	movne	r0, #1
   481f8:	4770      	bx	lr

000481fa <z_impl_k_thread_name_set>:
}
   481fa:	f06f 0057 	mvn.w	r0, #87	; 0x57
   481fe:	4770      	bx	lr

00048200 <z_impl_k_thread_start>:
	z_sched_start(thread);
   48200:	f7f9 b840 	b.w	41284 <z_sched_start>

00048204 <z_pm_save_idle_exit>:
{
   48204:	b508      	push	{r3, lr}
	pm_system_resume();
   48206:	f7f0 f945 	bl	38494 <pm_system_resume>
}
   4820a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   4820e:	f7ff bd23 	b.w	47c58 <sys_clock_idle_exit>

00048212 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   48212:	f990 300e 	ldrsb.w	r3, [r0, #14]
   48216:	428b      	cmp	r3, r1
   48218:	d001      	beq.n	4821e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   4821a:	f7f8 bfdb 	b.w	411d4 <z_set_prio>
}
   4821e:	2000      	movs	r0, #0
   48220:	4770      	bx	lr

00048222 <z_impl_k_mutex_init>:
{
   48222:	4603      	mov	r3, r0
	mutex->owner = NULL;
   48224:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   48226:	e9c3 0002 	strd	r0, r0, [r3, #8]
   4822a:	e9c3 3300 	strd	r3, r3, [r3]
}
   4822e:	4770      	bx	lr

00048230 <queue_insert>:
{
   48230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48234:	4699      	mov	r9, r3
   48236:	4604      	mov	r4, r0
   48238:	f89d 3020 	ldrb.w	r3, [sp, #32]
   4823c:	460d      	mov	r5, r1
   4823e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48240:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   48244:	f04f 0240 	mov.w	r2, #64	; 0x40
   48248:	f3ef 8711 	mrs	r7, BASEPRI
   4824c:	f382 8812 	msr	BASEPRI_MAX, r2
   48250:	f3bf 8f6f 	isb	sy
	if (is_append) {
   48254:	b103      	cbz	r3, 48258 <queue_insert+0x28>
	return list->tail;
   48256:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   48258:	4630      	mov	r0, r6
   4825a:	f000 fa43 	bl	486e4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   4825e:	b160      	cbz	r0, 4827a <queue_insert+0x4a>
   48260:	2300      	movs	r3, #0
   48262:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   48266:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   4826a:	f000 f9d6 	bl	4861a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   4826e:	4630      	mov	r0, r6
   48270:	4639      	mov	r1, r7
   48272:	f7f8 fff5 	bl	41260 <z_reschedule>
		return 0;
   48276:	2000      	movs	r0, #0
   48278:	e00c      	b.n	48294 <queue_insert+0x64>
	if (alloc) {
   4827a:	f1b9 0f00 	cmp.w	r9, #0
   4827e:	d01b      	beq.n	482b8 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   48280:	2108      	movs	r1, #8
   48282:	f7f9 fc47 	bl	41b14 <z_thread_aligned_alloc>
		if (anode == NULL) {
   48286:	b938      	cbnz	r0, 48298 <queue_insert+0x68>
	__asm__ volatile(
   48288:	f387 8811 	msr	BASEPRI, r7
   4828c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   48290:	f06f 000b 	mvn.w	r0, #11
}
   48294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   48298:	2201      	movs	r2, #1
		anode->data = data;
   4829a:	f8c0 8004 	str.w	r8, [r0, #4]
   4829e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   482a0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   482a2:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   482a6:	b95d      	cbnz	r5, 482c0 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   482a8:	6822      	ldr	r2, [r4, #0]
   482aa:	430a      	orrs	r2, r1
   482ac:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   482ae:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   482b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   482b2:	b96a      	cbnz	r2, 482d0 <queue_insert+0xa0>
	list->tail = node;
   482b4:	6060      	str	r0, [r4, #4]
}
   482b6:	e00b      	b.n	482d0 <queue_insert+0xa0>
	node->next_and_flags = flags;
   482b8:	f8c8 9000 	str.w	r9, [r8]
}
   482bc:	4640      	mov	r0, r8
   482be:	e7ef      	b.n	482a0 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   482c0:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   482c2:	2a03      	cmp	r2, #3
   482c4:	d810      	bhi.n	482e8 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   482c6:	6001      	str	r1, [r0, #0]
	return list->tail;
   482c8:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   482ca:	b939      	cbnz	r1, 482dc <queue_insert+0xac>
	list->head = node;
   482cc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   482d0:	2104      	movs	r1, #4
   482d2:	f104 0010 	add.w	r0, r4, #16
   482d6:	f000 fc55 	bl	48b84 <z_handle_obj_poll_events>
   482da:	e7c8      	b.n	4826e <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   482dc:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   482de:	f002 0203 	and.w	r2, r2, #3
   482e2:	4302      	orrs	r2, r0
   482e4:	600a      	str	r2, [r1, #0]
   482e6:	e7e5      	b.n	482b4 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   482e8:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   482ec:	430a      	orrs	r2, r1
   482ee:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   482f0:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   482f2:	f002 0203 	and.w	r2, r2, #3
   482f6:	ea40 0302 	orr.w	r3, r0, r2
   482fa:	602b      	str	r3, [r5, #0]
}
   482fc:	e7e8      	b.n	482d0 <queue_insert+0xa0>

000482fe <z_queue_node_peek>:
{
   482fe:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   48300:	4604      	mov	r4, r0
   48302:	b130      	cbz	r0, 48312 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48304:	6802      	ldr	r2, [r0, #0]
   48306:	0793      	lsls	r3, r2, #30
   48308:	d003      	beq.n	48312 <z_queue_node_peek+0x14>
		ret = anode->data;
   4830a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   4830c:	b109      	cbz	r1, 48312 <z_queue_node_peek+0x14>
			k_free(anode);
   4830e:	f000 fc6b 	bl	48be8 <k_free>
}
   48312:	4620      	mov	r0, r4
   48314:	bd10      	pop	{r4, pc}

00048316 <z_impl_k_queue_init>:
	list->head = NULL;
   48316:	2300      	movs	r3, #0
	list->tail = NULL;
   48318:	e9c0 3300 	strd	r3, r3, [r0]
   4831c:	f100 0308 	add.w	r3, r0, #8
   48320:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   48324:	f100 0310 	add.w	r3, r0, #16
   48328:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   4832c:	4770      	bx	lr

0004832e <k_queue_append>:
{
   4832e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   48330:	2301      	movs	r3, #1
   48332:	9300      	str	r3, [sp, #0]
   48334:	2300      	movs	r3, #0
{
   48336:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   48338:	4619      	mov	r1, r3
   4833a:	f7ff ff79 	bl	48230 <queue_insert>
}
   4833e:	b003      	add	sp, #12
   48340:	f85d fb04 	ldr.w	pc, [sp], #4

00048344 <k_queue_prepend>:
{
   48344:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   48346:	2300      	movs	r3, #0
{
   48348:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   4834a:	9300      	str	r3, [sp, #0]
   4834c:	4619      	mov	r1, r3
   4834e:	f7ff ff6f 	bl	48230 <queue_insert>
}
   48352:	b003      	add	sp, #12
   48354:	f85d fb04 	ldr.w	pc, [sp], #4

00048358 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   48358:	6800      	ldr	r0, [r0, #0]
   4835a:	2100      	movs	r1, #0
   4835c:	f7ff bfcf 	b.w	482fe <z_queue_node_peek>

00048360 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   48360:	b15a      	cbz	r2, 4837a <z_impl_k_sem_init+0x1a>
   48362:	428a      	cmp	r2, r1
   48364:	d309      	bcc.n	4837a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   48366:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   4836a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   4836e:	e9c0 0000 	strd	r0, r0, [r0]
   48372:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   48376:	2000      	movs	r0, #0
   48378:	4770      	bx	lr
		return -EINVAL;
   4837a:	f06f 0015 	mvn.w	r0, #21
}
   4837e:	4770      	bx	lr

00048380 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   48380:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   48382:	2301      	movs	r3, #1
   48384:	408b      	lsls	r3, r1
   48386:	ea22 0303 	bic.w	r3, r2, r3
   4838a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   4838c:	fa22 f001 	lsr.w	r0, r2, r1
}
   48390:	f000 0001 	and.w	r0, r0, #1
   48394:	4770      	bx	lr

00048396 <unschedule_locked>:
{
   48396:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48398:	2103      	movs	r1, #3
{
   4839a:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   4839c:	300c      	adds	r0, #12
   4839e:	f7ff ffef 	bl	48380 <flag_test_and_clear>
   483a2:	b130      	cbz	r0, 483b2 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   483a4:	f104 0010 	add.w	r0, r4, #16
   483a8:	f000 fa3d 	bl	48826 <z_abort_timeout>
   483ac:	fab0 f080 	clz	r0, r0
   483b0:	0940      	lsrs	r0, r0, #5
}
   483b2:	bd10      	pop	{r4, pc}

000483b4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   483b4:	b120      	cbz	r0, 483c0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   483b6:	2200      	movs	r2, #0
   483b8:	4611      	mov	r1, r2
   483ba:	3098      	adds	r0, #152	; 0x98
   483bc:	f000 b9ec 	b.w	48798 <z_sched_wake>
}
   483c0:	4770      	bx	lr

000483c2 <cancel_async_locked>:
{
   483c2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   483c4:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   483c6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   483ca:	079b      	lsls	r3, r3, #30
{
   483cc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   483ce:	d416      	bmi.n	483fe <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   483d0:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   483d2:	2102      	movs	r1, #2
   483d4:	300c      	adds	r0, #12
   483d6:	f7ff ffd3 	bl	48380 <flag_test_and_clear>
   483da:	b180      	cbz	r0, 483fe <cancel_async_locked+0x3c>
	return list->head;
   483dc:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   483e0:	b16a      	cbz	r2, 483fe <cancel_async_locked+0x3c>
   483e2:	4294      	cmp	r4, r2
   483e4:	d11d      	bne.n	48422 <cancel_async_locked+0x60>
	return node->next;
   483e6:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   483e8:	b99e      	cbnz	r6, 48412 <cancel_async_locked+0x50>
   483ea:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
	list->head = node;
   483ee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
Z_GENLIST_REMOVE(slist, snode)
   483f2:	429c      	cmp	r4, r3
   483f4:	d101      	bne.n	483fa <cancel_async_locked+0x38>
	list->tail = node;
   483f6:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
	parent->next = child;
   483fa:	2300      	movs	r3, #0
   483fc:	6023      	str	r3, [r4, #0]
	return *flagp;
   483fe:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   48400:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   48404:	bf1e      	ittt	ne
   48406:	f043 0302 	orrne.w	r3, r3, #2
   4840a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   4840c:	f040 0002 	orrne.w	r0, r0, #2
}
   48410:	bd70      	pop	{r4, r5, r6, pc}
   48412:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   48414:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
   48418:	4294      	cmp	r4, r2
	list->tail = node;
   4841a:	bf08      	it	eq
   4841c:	f8c5 6094 	streq.w	r6, [r5, #148]	; 0x94
}
   48420:	e7eb      	b.n	483fa <cancel_async_locked+0x38>
	return node->next;
   48422:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48424:	6812      	ldr	r2, [r2, #0]
   48426:	e7db      	b.n	483e0 <cancel_async_locked+0x1e>

00048428 <work_timeout>:
{
   48428:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4842a:	4604      	mov	r4, r0
	__asm__ volatile(
   4842c:	f04f 0340 	mov.w	r3, #64	; 0x40
   48430:	f3ef 8511 	mrs	r5, BASEPRI
   48434:	f383 8812 	msr	BASEPRI_MAX, r3
   48438:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   4843c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   4843e:	f1a0 0610 	sub.w	r6, r0, #16
   48442:	2103      	movs	r1, #3
   48444:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   48446:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48448:	f7ff ff9a 	bl	48380 <flag_test_and_clear>
   4844c:	b128      	cbz	r0, 4845a <work_timeout+0x32>
		queue = dw->queue;
   4844e:	69a3      	ldr	r3, [r4, #24]
   48450:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   48452:	a901      	add	r1, sp, #4
   48454:	4630      	mov	r0, r6
   48456:	f7f8 fc61 	bl	40d1c <submit_to_queue_locked>
	__asm__ volatile(
   4845a:	f385 8811 	msr	BASEPRI, r5
   4845e:	f3bf 8f6f 	isb	sy
}
   48462:	b002      	add	sp, #8
   48464:	bd70      	pop	{r4, r5, r6, pc}

00048466 <k_work_init>:
{
   48466:	b538      	push	{r3, r4, r5, lr}
   48468:	4604      	mov	r4, r0
   4846a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   4846c:	2210      	movs	r2, #16
   4846e:	2100      	movs	r1, #0
   48470:	f7fd f959 	bl	45726 <memset>
   48474:	6065      	str	r5, [r4, #4]
}
   48476:	bd38      	pop	{r3, r4, r5, pc}

00048478 <k_work_busy_get>:
	__asm__ volatile(
   48478:	f04f 0240 	mov.w	r2, #64	; 0x40
   4847c:	f3ef 8311 	mrs	r3, BASEPRI
   48480:	f382 8812 	msr	BASEPRI_MAX, r2
   48484:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   48488:	68c0      	ldr	r0, [r0, #12]
   4848a:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   4848e:	f383 8811 	msr	BASEPRI, r3
   48492:	f3bf 8f6f 	isb	sy
}
   48496:	4770      	bx	lr

00048498 <z_work_submit_to_queue>:
{
   48498:	b513      	push	{r0, r1, r4, lr}
   4849a:	9001      	str	r0, [sp, #4]
   4849c:	4608      	mov	r0, r1
	__asm__ volatile(
   4849e:	f04f 0340 	mov.w	r3, #64	; 0x40
   484a2:	f3ef 8411 	mrs	r4, BASEPRI
   484a6:	f383 8812 	msr	BASEPRI_MAX, r3
   484aa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   484ae:	a901      	add	r1, sp, #4
   484b0:	f7f8 fc34 	bl	40d1c <submit_to_queue_locked>
	__asm__ volatile(
   484b4:	f384 8811 	msr	BASEPRI, r4
   484b8:	f3bf 8f6f 	isb	sy
}
   484bc:	b002      	add	sp, #8
   484be:	bd10      	pop	{r4, pc}

000484c0 <k_work_submit_to_queue>:
{
   484c0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   484c2:	f7ff ffe9 	bl	48498 <z_work_submit_to_queue>
	if (ret > 0) {
   484c6:	1e04      	subs	r4, r0, #0
   484c8:	dd09      	ble.n	484de <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   484ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   484ce:	f3ef 8011 	mrs	r0, BASEPRI
   484d2:	f383 8812 	msr	BASEPRI_MAX, r3
   484d6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   484da:	f000 f937 	bl	4874c <z_reschedule_irqlock>
}
   484de:	4620      	mov	r0, r4
   484e0:	bd10      	pop	{r4, pc}

000484e2 <k_work_queue_init>:
{
   484e2:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   484e4:	22b0      	movs	r2, #176	; 0xb0
   484e6:	2100      	movs	r1, #0
   484e8:	f7fd f91d 	bl	45726 <memset>
}
   484ec:	bd08      	pop	{r3, pc}

000484ee <k_work_init_delayable>:
{
   484ee:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   484f0:	2230      	movs	r2, #48	; 0x30
{
   484f2:	4604      	mov	r4, r0
   484f4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   484f6:	2100      	movs	r1, #0
   484f8:	f7fd f915 	bl	45726 <memset>
   484fc:	f44f 7380 	mov.w	r3, #256	; 0x100
   48500:	6065      	str	r5, [r4, #4]
   48502:	60e3      	str	r3, [r4, #12]
}
   48504:	bd38      	pop	{r3, r4, r5, pc}

00048506 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   48506:	f7ff bfb7 	b.w	48478 <k_work_busy_get>

0004850a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   4850a:	b538      	push	{r3, r4, r5, lr}
   4850c:	4604      	mov	r4, r0
   4850e:	f04f 0340 	mov.w	r3, #64	; 0x40
   48512:	f3ef 8511 	mrs	r5, BASEPRI
   48516:	f383 8812 	msr	BASEPRI_MAX, r3
   4851a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   4851e:	f7ff ff3a 	bl	48396 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48522:	4620      	mov	r0, r4
   48524:	f7ff ff4d 	bl	483c2 <cancel_async_locked>
	__asm__ volatile(
   48528:	f385 8811 	msr	BASEPRI, r5
   4852c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   48530:	bd38      	pop	{r3, r4, r5, pc}

00048532 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   48532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48534:	4604      	mov	r4, r0
   48536:	460d      	mov	r5, r1
	__asm__ volatile(
   48538:	f04f 0340 	mov.w	r3, #64	; 0x40
   4853c:	f3ef 8611 	mrs	r6, BASEPRI
   48540:	f383 8812 	msr	BASEPRI_MAX, r3
   48544:	f3bf 8f6f 	isb	sy
	return *flagp;
   48548:	68c3      	ldr	r3, [r0, #12]
   4854a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   4854e:	2b00      	cmp	r3, #0
   48550:	bf14      	ite	ne
   48552:	2701      	movne	r7, #1
   48554:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   48556:	d105      	bne.n	48564 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   48558:	f386 8811 	msr	BASEPRI, r6
   4855c:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   48560:	4638      	mov	r0, r7
   48562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   48564:	f7ff ff17 	bl	48396 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48568:	4620      	mov	r0, r4
   4856a:	f7ff ff2a 	bl	483c2 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   4856e:	4629      	mov	r1, r5
   48570:	4620      	mov	r0, r4
   48572:	f7f8 fbb5 	bl	40ce0 <cancel_sync_locked>
   48576:	f386 8811 	msr	BASEPRI, r6
   4857a:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   4857e:	2800      	cmp	r0, #0
   48580:	d0ee      	beq.n	48560 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   48582:	f04f 32ff 	mov.w	r2, #4294967295
   48586:	f04f 33ff 	mov.w	r3, #4294967295
   4858a:	f105 0008 	add.w	r0, r5, #8
   4858e:	f7f8 fac9 	bl	40b24 <z_impl_k_sem_take>
   48592:	e7e5      	b.n	48560 <k_work_cancel_delayable_sync+0x2e>

00048594 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   48594:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48598:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4859a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4859c:	2300      	movs	r3, #0
	node->prev = NULL;
   4859e:	e9c0 3300 	strd	r3, r3, [r0]
}
   485a2:	4770      	bx	lr

000485a4 <unpend_thread_no_timeout>:
{
   485a4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   485a6:	f7ff fff5 	bl	48594 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   485aa:	7b43      	ldrb	r3, [r0, #13]
   485ac:	f023 0302 	bic.w	r3, r3, #2
   485b0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   485b2:	2300      	movs	r3, #0
   485b4:	6083      	str	r3, [r0, #8]
}
   485b6:	bd08      	pop	{r3, pc}

000485b8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   485b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   485bc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   485c0:	4283      	cmp	r3, r0
		return b2 - b1;
   485c2:	bf14      	ite	ne
   485c4:	1ac0      	subne	r0, r0, r3
	return 0;
   485c6:	2000      	moveq	r0, #0
}
   485c8:	4770      	bx	lr

000485ca <add_to_waitq_locked>:
{
   485ca:	b538      	push	{r3, r4, r5, lr}
   485cc:	4604      	mov	r4, r0
   485ce:	460d      	mov	r5, r1
	unready_thread(thread);
   485d0:	f7f8 fd82 	bl	410d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   485d4:	7b63      	ldrb	r3, [r4, #13]
   485d6:	f043 0302 	orr.w	r3, r3, #2
   485da:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   485dc:	b1e5      	cbz	r5, 48618 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   485de:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   485e0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   485e2:	429d      	cmp	r5, r3
   485e4:	d109      	bne.n	485fa <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   485e6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   485e8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   485ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   485ee:	606c      	str	r4, [r5, #4]
}
   485f0:	e012      	b.n	48618 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   485f2:	686a      	ldr	r2, [r5, #4]
   485f4:	4293      	cmp	r3, r2
   485f6:	d0f6      	beq.n	485e6 <add_to_waitq_locked+0x1c>
   485f8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   485fa:	2b00      	cmp	r3, #0
   485fc:	d0f3      	beq.n	485e6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   485fe:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   48602:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   48606:	428a      	cmp	r2, r1
   48608:	d0f3      	beq.n	485f2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4860a:	4291      	cmp	r1, r2
   4860c:	ddf1      	ble.n	485f2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   4860e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48610:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   48614:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   48616:	605c      	str	r4, [r3, #4]
}
   48618:	bd38      	pop	{r3, r4, r5, pc}

0004861a <z_ready_thread>:
{
   4861a:	b510      	push	{r4, lr}
	__asm__ volatile(
   4861c:	f04f 0340 	mov.w	r3, #64	; 0x40
   48620:	f3ef 8411 	mrs	r4, BASEPRI
   48624:	f383 8812 	msr	BASEPRI_MAX, r3
   48628:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   4862c:	f7f8 fd20 	bl	41070 <ready_thread>
	__asm__ volatile(
   48630:	f384 8811 	msr	BASEPRI, r4
   48634:	f3bf 8f6f 	isb	sy
}
   48638:	bd10      	pop	{r4, pc}

0004863a <z_unpend_thread_no_timeout>:
{
   4863a:	b508      	push	{r3, lr}
	__asm__ volatile(
   4863c:	f04f 0240 	mov.w	r2, #64	; 0x40
   48640:	f3ef 8111 	mrs	r1, BASEPRI
   48644:	f382 8812 	msr	BASEPRI_MAX, r2
   48648:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   4864c:	6883      	ldr	r3, [r0, #8]
   4864e:	b10b      	cbz	r3, 48654 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   48650:	f7ff ffa8 	bl	485a4 <unpend_thread_no_timeout>
	__asm__ volatile(
   48654:	f381 8811 	msr	BASEPRI, r1
   48658:	f3bf 8f6f 	isb	sy
}
   4865c:	bd08      	pop	{r3, pc}

0004865e <z_sched_wake_thread>:
{
   4865e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   48660:	f04f 0340 	mov.w	r3, #64	; 0x40
   48664:	f3ef 8411 	mrs	r4, BASEPRI
   48668:	f383 8812 	msr	BASEPRI_MAX, r3
   4866c:	f3bf 8f6f 	isb	sy
		bool do_nothing = thread->no_wake_on_timeout && is_timeout;
   48670:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   48674:	7b42      	ldrb	r2, [r0, #13]
		bool do_nothing = thread->no_wake_on_timeout && is_timeout;
   48676:	2300      	movs	r3, #0
		thread->no_wake_on_timeout = false;
   48678:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
		bool do_nothing = thread->no_wake_on_timeout && is_timeout;
   4867c:	b12d      	cbz	r5, 4868a <z_sched_wake_thread+0x2c>
   4867e:	b121      	cbz	r1, 4868a <z_sched_wake_thread+0x2c>
	__asm__ volatile(
   48680:	f384 8811 	msr	BASEPRI, r4
   48684:	f3bf 8f6f 	isb	sy
}
   48688:	bd38      	pop	{r3, r4, r5, pc}
		if (!killed) {
   4868a:	f012 0f28 	tst.w	r2, #40	; 0x28
   4868e:	d1f7      	bne.n	48680 <z_sched_wake_thread+0x22>
			if (thread->base.pended_on != NULL) {
   48690:	6883      	ldr	r3, [r0, #8]
   48692:	b10b      	cbz	r3, 48698 <z_sched_wake_thread+0x3a>
				unpend_thread_no_timeout(thread);
   48694:	f7ff ff86 	bl	485a4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   48698:	7b43      	ldrb	r3, [r0, #13]
			if (is_timeout) {
   4869a:	b929      	cbnz	r1, 486a8 <z_sched_wake_thread+0x4a>
   4869c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   486a0:	7343      	strb	r3, [r0, #13]
			ready_thread(thread);
   486a2:	f7f8 fce5 	bl	41070 <ready_thread>
   486a6:	e7eb      	b.n	48680 <z_sched_wake_thread+0x22>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   486a8:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   486ac:	e7f8      	b.n	486a0 <z_sched_wake_thread+0x42>

000486ae <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   486ae:	2101      	movs	r1, #1
   486b0:	3818      	subs	r0, #24
   486b2:	f7ff bfd4 	b.w	4865e <z_sched_wake_thread>

000486b6 <z_unpend1_no_timeout>:
{
   486b6:	b508      	push	{r3, lr}
   486b8:	4603      	mov	r3, r0
	__asm__ volatile(
   486ba:	f04f 0240 	mov.w	r2, #64	; 0x40
   486be:	f3ef 8111 	mrs	r1, BASEPRI
   486c2:	f382 8812 	msr	BASEPRI_MAX, r2
   486c6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   486ca:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   486cc:	4283      	cmp	r3, r0
   486ce:	d007      	beq.n	486e0 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   486d0:	b108      	cbz	r0, 486d6 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   486d2:	f7ff ff67 	bl	485a4 <unpend_thread_no_timeout>
	__asm__ volatile(
   486d6:	f381 8811 	msr	BASEPRI, r1
   486da:	f3bf 8f6f 	isb	sy
}
   486de:	bd08      	pop	{r3, pc}
   486e0:	2000      	movs	r0, #0
   486e2:	e7f8      	b.n	486d6 <z_unpend1_no_timeout+0x20>

000486e4 <z_unpend_first_thread>:
{
   486e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   486e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   486ea:	f3ef 8511 	mrs	r5, BASEPRI
   486ee:	f383 8812 	msr	BASEPRI_MAX, r3
   486f2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   486f6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   486f8:	42a0      	cmp	r0, r4
   486fa:	d00d      	beq.n	48718 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   486fc:	b134      	cbz	r4, 4870c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   486fe:	4620      	mov	r0, r4
   48700:	f7ff ff50 	bl	485a4 <unpend_thread_no_timeout>
   48704:	f104 0018 	add.w	r0, r4, #24
   48708:	f000 f88d 	bl	48826 <z_abort_timeout>
	__asm__ volatile(
   4870c:	f385 8811 	msr	BASEPRI, r5
   48710:	f3bf 8f6f 	isb	sy
}
   48714:	4620      	mov	r0, r4
   48716:	bd38      	pop	{r3, r4, r5, pc}
   48718:	2400      	movs	r4, #0
   4871a:	e7f7      	b.n	4870c <z_unpend_first_thread+0x28>

0004871c <z_unpend_thread>:
{
   4871c:	b510      	push	{r4, lr}
   4871e:	4601      	mov	r1, r0
	__asm__ volatile(
   48720:	f04f 0340 	mov.w	r3, #64	; 0x40
   48724:	f3ef 8411 	mrs	r4, BASEPRI
   48728:	f383 8812 	msr	BASEPRI_MAX, r3
   4872c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   48730:	6883      	ldr	r3, [r0, #8]
   48732:	b10b      	cbz	r3, 48738 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   48734:	f7ff ff36 	bl	485a4 <unpend_thread_no_timeout>
	__asm__ volatile(
   48738:	f384 8811 	msr	BASEPRI, r4
   4873c:	f3bf 8f6f 	isb	sy
}
   48740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48744:	f101 0018 	add.w	r0, r1, #24
   48748:	f000 b86d 	b.w	48826 <z_abort_timeout>

0004874c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   4874c:	4603      	mov	r3, r0
   4874e:	b920      	cbnz	r0, 4875a <z_reschedule_irqlock+0xe>
   48750:	f3ef 8205 	mrs	r2, IPSR
   48754:	b90a      	cbnz	r2, 4875a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   48756:	f7f0 ba23 	b.w	38ba0 <arch_swap>
   4875a:	f383 8811 	msr	BASEPRI, r3
   4875e:	f3bf 8f6f 	isb	sy
}
   48762:	4770      	bx	lr

00048764 <z_reschedule_unlocked>:
	__asm__ volatile(
   48764:	f04f 0340 	mov.w	r3, #64	; 0x40
   48768:	f3ef 8011 	mrs	r0, BASEPRI
   4876c:	f383 8812 	msr	BASEPRI_MAX, r3
   48770:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   48774:	f7ff bfea 	b.w	4874c <z_reschedule_irqlock>

00048778 <z_unpend_all>:
{
   48778:	b538      	push	{r3, r4, r5, lr}
   4877a:	4605      	mov	r5, r0
	int need_sched = 0;
   4877c:	2000      	movs	r0, #0
	return list->head == list;
   4877e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48780:	42a5      	cmp	r5, r4
   48782:	d000      	beq.n	48786 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48784:	b904      	cbnz	r4, 48788 <z_unpend_all+0x10>
}
   48786:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   48788:	4620      	mov	r0, r4
   4878a:	f7ff ffc7 	bl	4871c <z_unpend_thread>
		z_ready_thread(thread);
   4878e:	4620      	mov	r0, r4
   48790:	f7ff ff43 	bl	4861a <z_ready_thread>
		need_sched = 1;
   48794:	2001      	movs	r0, #1
   48796:	e7f2      	b.n	4877e <z_unpend_all+0x6>

00048798 <z_sched_wake>:
{
   48798:	b538      	push	{r3, r4, r5, lr}
   4879a:	f04f 0340 	mov.w	r3, #64	; 0x40
   4879e:	f3ef 8511 	mrs	r5, BASEPRI
   487a2:	f383 8812 	msr	BASEPRI_MAX, r3
   487a6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   487aa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   487ac:	42a0      	cmp	r0, r4
   487ae:	d013      	beq.n	487d8 <z_sched_wake+0x40>
		if (thread != NULL) {
   487b0:	b1a4      	cbz	r4, 487dc <z_sched_wake+0x44>
   487b2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	thread->base.swap_data = data;
   487b6:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   487b8:	4620      	mov	r0, r4
   487ba:	f7ff fef3 	bl	485a4 <unpend_thread_no_timeout>
   487be:	f104 0018 	add.w	r0, r4, #24
   487c2:	f000 f830 	bl	48826 <z_abort_timeout>
			ready_thread(thread);
   487c6:	4620      	mov	r0, r4
   487c8:	f7f8 fc52 	bl	41070 <ready_thread>
			ret = true;
   487cc:	2001      	movs	r0, #1
	__asm__ volatile(
   487ce:	f385 8811 	msr	BASEPRI, r5
   487d2:	f3bf 8f6f 	isb	sy
}
   487d6:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   487d8:	2000      	movs	r0, #0
   487da:	e7f8      	b.n	487ce <z_sched_wake+0x36>
   487dc:	4620      	mov	r0, r4
   487de:	e7f6      	b.n	487ce <z_sched_wake+0x36>

000487e0 <z_sched_waitq_walk>:

int z_sched_waitq_walk(_wait_q_t  *wait_q,
		       int (*func)(struct k_thread *, void *), void *data)
{
   487e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   487e4:	4605      	mov	r5, r0
   487e6:	460e      	mov	r6, r1
   487e8:	4617      	mov	r7, r2
	__asm__ volatile(
   487ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   487ee:	f3ef 8811 	mrs	r8, BASEPRI
   487f2:	f383 8812 	msr	BASEPRI_MAX, r3
   487f6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   487fa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   487fc:	42a0      	cmp	r0, r4
   487fe:	d10f      	bne.n	48820 <z_sched_waitq_walk+0x40>
   48800:	2000      	movs	r0, #0
	__asm__ volatile(
   48802:	f388 8811 	msr	BASEPRI, r8
   48806:	f3bf 8f6f 	isb	sy
			}
		}
	}

	return status;
}
   4880a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			status = func(thread, data);
   4880e:	4639      	mov	r1, r7
   48810:	4620      	mov	r0, r4
   48812:	47b0      	blx	r6
			if (status != 0) {
   48814:	2800      	cmp	r0, #0
   48816:	d1f4      	bne.n	48802 <z_sched_waitq_walk+0x22>
	return (node == list->tail) ? NULL : node->next;
   48818:	686b      	ldr	r3, [r5, #4]
   4881a:	42a3      	cmp	r3, r4
   4881c:	d0f0      	beq.n	48800 <z_sched_waitq_walk+0x20>
   4881e:	6824      	ldr	r4, [r4, #0]
		_WAIT_Q_FOR_EACH(wait_q, thread) {
   48820:	2c00      	cmp	r4, #0
   48822:	d1f4      	bne.n	4880e <z_sched_waitq_walk+0x2e>
   48824:	e7ec      	b.n	48800 <z_sched_waitq_walk+0x20>

00048826 <z_abort_timeout>:
{
   48826:	b510      	push	{r4, lr}
	__asm__ volatile(
   48828:	f04f 0240 	mov.w	r2, #64	; 0x40
   4882c:	f3ef 8411 	mrs	r4, BASEPRI
   48830:	f382 8812 	msr	BASEPRI_MAX, r2
   48834:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   48838:	6803      	ldr	r3, [r0, #0]
   4883a:	b13b      	cbz	r3, 4884c <z_abort_timeout+0x26>
			remove_timeout(to);
   4883c:	f7f8 ff02 	bl	41644 <remove_timeout>
			ret = 0;
   48840:	2000      	movs	r0, #0
	__asm__ volatile(
   48842:	f384 8811 	msr	BASEPRI, r4
   48846:	f3bf 8f6f 	isb	sy
}
   4884a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   4884c:	f06f 0015 	mvn.w	r0, #21
   48850:	e7f7      	b.n	48842 <z_abort_timeout+0x1c>

00048852 <z_get_next_timeout_expiry>:
{
   48852:	b510      	push	{r4, lr}
	__asm__ volatile(
   48854:	f04f 0340 	mov.w	r3, #64	; 0x40
   48858:	f3ef 8411 	mrs	r4, BASEPRI
   4885c:	f383 8812 	msr	BASEPRI_MAX, r3
   48860:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   48864:	f7f8 fece 	bl	41604 <next_timeout>
	__asm__ volatile(
   48868:	f384 8811 	msr	BASEPRI, r4
   4886c:	f3bf 8f6f 	isb	sy
}
   48870:	bd10      	pop	{r4, pc}

00048872 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   48872:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   48874:	f7f8 ffe2 	bl	4183c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   48878:	bd08      	pop	{r3, pc}

0004887a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   4887a:	f7f8 bfdf 	b.w	4183c <sys_clock_tick_get>

0004887e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   4887e:	b108      	cbz	r0, 48884 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   48880:	f7f0 bd4a 	b.w	39318 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   48884:	4770      	bx	lr

00048886 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48886:	f1b1 3fff 	cmp.w	r1, #4294967295
   4888a:	bf08      	it	eq
   4888c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   48890:	b538      	push	{r3, r4, r5, lr}
   48892:	460c      	mov	r4, r1
   48894:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48896:	d014      	beq.n	488c2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48898:	4308      	orrs	r0, r1
   4889a:	d103      	bne.n	488a4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   4889c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   488a0:	f7f8 bfcc 	b.w	4183c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   488a4:	f06f 0001 	mvn.w	r0, #1
   488a8:	1b40      	subs	r0, r0, r5
   488aa:	f04f 33ff 	mov.w	r3, #4294967295
   488ae:	eb63 0101 	sbc.w	r1, r3, r1
   488b2:	2900      	cmp	r1, #0
   488b4:	da04      	bge.n	488c0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   488b6:	f7f8 ffc1 	bl	4183c <sys_clock_tick_get>
   488ba:	1940      	adds	r0, r0, r5
   488bc:	eb41 0104 	adc.w	r1, r1, r4
}
   488c0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   488c2:	f04f 30ff 	mov.w	r0, #4294967295
   488c6:	4601      	mov	r1, r0
   488c8:	e7fa      	b.n	488c0 <sys_clock_timeout_end_calc+0x3a>

000488ca <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   488ca:	b510      	push	{r4, lr}
   488cc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   488ce:	f7ff ffaa 	bl	48826 <z_abort_timeout>

	if (inactive) {
   488d2:	b9b0      	cbnz	r0, 48902 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   488d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   488d6:	b10b      	cbz	r3, 488dc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   488d8:	4620      	mov	r0, r4
   488da:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   488dc:	f104 0018 	add.w	r0, r4, #24
   488e0:	f7ff fee9 	bl	486b6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   488e4:	b168      	cbz	r0, 48902 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   488e6:	f7ff fe98 	bl	4861a <z_ready_thread>
	__asm__ volatile(
   488ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   488ee:	f3ef 8011 	mrs	r0, BASEPRI
   488f2:	f383 8812 	msr	BASEPRI_MAX, r3
   488f6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   488fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   488fe:	f7ff bf25 	b.w	4874c <z_reschedule_irqlock>
   48902:	bd10      	pop	{r4, pc}

00048904 <add_event>:
{
   48904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48906:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   48908:	e9d0 1300 	ldrd	r1, r3, [r0]
   4890c:	4288      	cmp	r0, r1
   4890e:	4604      	mov	r4, r0
   48910:	d105      	bne.n	4891e <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   48912:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   48914:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   48918:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4891a:	6065      	str	r5, [r4, #4]
   4891c:	e01d      	b.n	4895a <add_event+0x56>
	if ((pending == NULL) ||
   4891e:	2b00      	cmp	r3, #0
   48920:	d0f7      	beq.n	48912 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   48922:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48924:	b100      	cbz	r0, 48928 <add_event+0x24>
   48926:	3860      	subs	r0, #96	; 0x60
   48928:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   4892c:	4639      	mov	r1, r7
   4892e:	f7ff fe43 	bl	485b8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   48932:	2800      	cmp	r0, #0
   48934:	dced      	bgt.n	48912 <add_event+0xe>
	return list->head == list;
   48936:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48938:	42b4      	cmp	r4, r6
   4893a:	d0ea      	beq.n	48912 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   4893c:	2e00      	cmp	r6, #0
   4893e:	d0e8      	beq.n	48912 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   48940:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48942:	b101      	cbz	r1, 48946 <add_event+0x42>
   48944:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   48946:	4638      	mov	r0, r7
   48948:	f7ff fe36 	bl	485b8 <z_sched_prio_cmp>
   4894c:	2800      	cmp	r0, #0
   4894e:	dd05      	ble.n	4895c <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   48950:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   48952:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   48956:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   48958:	6075      	str	r5, [r6, #4]
}
   4895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   4895c:	6863      	ldr	r3, [r4, #4]
   4895e:	429e      	cmp	r6, r3
   48960:	d0d7      	beq.n	48912 <add_event+0xe>
   48962:	6836      	ldr	r6, [r6, #0]
   48964:	e7ea      	b.n	4893c <add_event+0x38>

00048966 <register_events>:
{
   48966:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   4896a:	2500      	movs	r5, #0
{
   4896c:	468b      	mov	fp, r1
   4896e:	4614      	mov	r4, r2
   48970:	461f      	mov	r7, r3
   48972:	4682      	mov	sl, r0
	int events_registered = 0;
   48974:	462e      	mov	r6, r5
	event->poller = NULL;
   48976:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   48978:	455d      	cmp	r5, fp
   4897a:	db02      	blt.n	48982 <register_events+0x1c>
}
   4897c:	4630      	mov	r0, r6
   4897e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48982:	f04f 0340 	mov.w	r3, #64	; 0x40
   48986:	f3ef 8911 	mrs	r9, BASEPRI
   4898a:	f383 8812 	msr	BASEPRI_MAX, r3
   4898e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   48992:	f89a 300d 	ldrb.w	r3, [sl, #13]
   48996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4899a:	3b01      	subs	r3, #1
   4899c:	2b07      	cmp	r3, #7
   4899e:	d80f      	bhi.n	489c0 <register_events+0x5a>
   489a0:	e8df f003 	tbb	[pc, r3]
   489a4:	0a0e041e 	.word	0x0a0e041e
   489a8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   489ac:	f8da 3010 	ldr.w	r3, [sl, #16]
   489b0:	689b      	ldr	r3, [r3, #8]
   489b2:	b12b      	cbz	r3, 489c0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   489b4:	2302      	movs	r3, #2
   489b6:	e020      	b.n	489fa <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   489b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   489bc:	681b      	ldr	r3, [r3, #0]
   489be:	bb8b      	cbnz	r3, 48a24 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   489c0:	bb47      	cbnz	r7, 48a14 <register_events+0xae>
   489c2:	7823      	ldrb	r3, [r4, #0]
   489c4:	b333      	cbz	r3, 48a14 <register_events+0xae>
	switch (event->type) {
   489c6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   489ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   489ce:	3b01      	subs	r3, #1
   489d0:	2b07      	cmp	r3, #7
   489d2:	d830      	bhi.n	48a36 <register_events+0xd0>
   489d4:	e8df f003 	tbb	[pc, r3]
   489d8:	282f2833 	.word	0x282f2833
   489dc:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   489e0:	f8da 3010 	ldr.w	r3, [sl, #16]
   489e4:	689b      	ldr	r3, [r3, #8]
   489e6:	2b00      	cmp	r3, #0
   489e8:	d0ea      	beq.n	489c0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   489ea:	2301      	movs	r3, #1
   489ec:	e005      	b.n	489fa <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   489ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   489f2:	6a1b      	ldr	r3, [r3, #32]
   489f4:	2b00      	cmp	r3, #0
   489f6:	d0e3      	beq.n	489c0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   489f8:	2310      	movs	r3, #16
	event->state |= state;
   489fa:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   489fe:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   48a02:	f3c2 3186 	ubfx	r1, r2, #14, #7
   48a06:	430b      	orrs	r3, r1
   48a08:	f363 3294 	bfi	r2, r3, #14, #7
   48a0c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   48a10:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   48a14:	f389 8811 	msr	BASEPRI, r9
   48a18:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   48a1c:	3501      	adds	r5, #1
   48a1e:	f10a 0a14 	add.w	sl, sl, #20
   48a22:	e7a9      	b.n	48978 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   48a24:	2304      	movs	r3, #4
   48a26:	e7e8      	b.n	489fa <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   48a28:	f8da 0010 	ldr.w	r0, [sl, #16]
   48a2c:	4622      	mov	r2, r4
   48a2e:	4651      	mov	r1, sl
   48a30:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   48a32:	f7ff ff67 	bl	48904 <add_event>
	event->poller = poller;
   48a36:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   48a3a:	3601      	adds	r6, #1
   48a3c:	e7ea      	b.n	48a14 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   48a3e:	f8da 0010 	ldr.w	r0, [sl, #16]
   48a42:	4622      	mov	r2, r4
   48a44:	4651      	mov	r1, sl
   48a46:	e7f4      	b.n	48a32 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   48a48:	f8da 0010 	ldr.w	r0, [sl, #16]
   48a4c:	4622      	mov	r2, r4
   48a4e:	4651      	mov	r1, sl
   48a50:	3024      	adds	r0, #36	; 0x24
   48a52:	e7ee      	b.n	48a32 <register_events+0xcc>

00048a54 <signal_poll_event>:
{
   48a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   48a58:	6884      	ldr	r4, [r0, #8]
{
   48a5a:	4605      	mov	r5, r0
   48a5c:	460e      	mov	r6, r1
	if (poller != NULL) {
   48a5e:	b144      	cbz	r4, 48a72 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   48a60:	7863      	ldrb	r3, [r4, #1]
   48a62:	2b01      	cmp	r3, #1
   48a64:	d12e      	bne.n	48ac4 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   48a66:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   48a6a:	f013 0302 	ands.w	r3, r3, #2
   48a6e:	d10a      	bne.n	48a86 <signal_poll_event+0x32>
		poller->is_polling = false;
   48a70:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   48a72:	68eb      	ldr	r3, [r5, #12]
   48a74:	f3c3 3286 	ubfx	r2, r3, #14, #7
   48a78:	4316      	orrs	r6, r2
	event->poller = NULL;
   48a7a:	2000      	movs	r0, #0
	event->state |= state;
   48a7c:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   48a80:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   48a82:	60eb      	str	r3, [r5, #12]
	return retcode;
   48a84:	e03e      	b.n	48b04 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   48a86:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   48a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   48a8e:	bf08      	it	eq
   48a90:	f112 0f02 	cmneq.w	r2, #2
   48a94:	d032      	beq.n	48afc <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   48a96:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   48a9a:	4640      	mov	r0, r8
   48a9c:	f7ff fe3e 	bl	4871c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   48aa0:	2e08      	cmp	r6, #8
   48aa2:	bf0c      	ite	eq
   48aa4:	f06f 0303 	mvneq.w	r3, #3
   48aa8:	2300      	movne	r3, #0
   48aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48aac:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   48ab0:	06db      	lsls	r3, r3, #27
   48ab2:	d109      	bne.n	48ac8 <signal_poll_event+0x74>
   48ab4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   48ab8:	b937      	cbnz	r7, 48ac8 <signal_poll_event+0x74>
	z_ready_thread(thread);
   48aba:	4640      	mov	r0, r8
   48abc:	f7ff fdad 	bl	4861a <z_ready_thread>
		poller->is_polling = false;
   48ac0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   48ac2:	e7d6      	b.n	48a72 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   48ac4:	2b02      	cmp	r3, #2
   48ac6:	d001      	beq.n	48acc <signal_poll_event+0x78>
		poller->is_polling = false;
   48ac8:	2300      	movs	r3, #0
   48aca:	e7d1      	b.n	48a70 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   48acc:	7823      	ldrb	r3, [r4, #0]
   48ace:	2b00      	cmp	r3, #0
   48ad0:	d0cf      	beq.n	48a72 <signal_poll_event+0x1e>
   48ad2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   48ad6:	2f00      	cmp	r7, #0
   48ad8:	d0f2      	beq.n	48ac0 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   48ada:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   48ade:	f1a4 0914 	sub.w	r9, r4, #20
   48ae2:	f104 0014 	add.w	r0, r4, #20
   48ae6:	f7ff fe9e 	bl	48826 <z_abort_timeout>
		twork->poll_result = 0;
   48aea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   48aee:	4649      	mov	r1, r9
   48af0:	4638      	mov	r0, r7
   48af2:	f7ff fcd1 	bl	48498 <z_work_submit_to_queue>
		poller->is_polling = false;
   48af6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   48afa:	e7ba      	b.n	48a72 <signal_poll_event+0x1e>
		poller->is_polling = false;
   48afc:	2300      	movs	r3, #0
   48afe:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   48b00:	f06f 000a 	mvn.w	r0, #10
}
   48b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00048b08 <clear_event_registrations>:
	while (num_events--) {
   48b08:	2314      	movs	r3, #20
{
   48b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   48b0c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   48b10:	2400      	movs	r4, #0
	switch (event->type) {
   48b12:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   48b16:	b901      	cbnz	r1, 48b1a <clear_event_registrations+0x12>
}
   48b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   48b1a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   48b1e:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   48b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   48b26:	2b08      	cmp	r3, #8
   48b28:	f1a0 0714 	sub.w	r7, r0, #20
   48b2c:	d80c      	bhi.n	48b48 <clear_event_registrations+0x40>
   48b2e:	fa26 f303 	lsr.w	r3, r6, r3
   48b32:	07db      	lsls	r3, r3, #31
   48b34:	d508      	bpl.n	48b48 <clear_event_registrations+0x40>
	return node->next != NULL;
   48b36:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   48b3a:	b12b      	cbz	r3, 48b48 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   48b3c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   48b40:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   48b42:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   48b44:	e940 4405 	strd	r4, r4, [r0, #-20]
   48b48:	f382 8811 	msr	BASEPRI, r2
   48b4c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   48b50:	f04f 0340 	mov.w	r3, #64	; 0x40
   48b54:	f3ef 8211 	mrs	r2, BASEPRI
   48b58:	f383 8812 	msr	BASEPRI_MAX, r3
   48b5c:	f3bf 8f6f 	isb	sy
   48b60:	3901      	subs	r1, #1
   48b62:	4638      	mov	r0, r7
   48b64:	e7d7      	b.n	48b16 <clear_event_registrations+0xe>

00048b66 <k_poll_event_init>:
{
   48b66:	b510      	push	{r4, lr}
	event->type = type;
   48b68:	0552      	lsls	r2, r2, #21
   48b6a:	0209      	lsls	r1, r1, #8
   48b6c:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   48b70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   48b74:	430a      	orrs	r2, r1
   48b76:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   48b78:	2400      	movs	r4, #0
	event->type = type;
   48b7a:	430a      	orrs	r2, r1
	event->obj = obj;
   48b7c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   48b80:	6084      	str	r4, [r0, #8]
}
   48b82:	bd10      	pop	{r4, pc}

00048b84 <z_handle_obj_poll_events>:
{
   48b84:	4603      	mov	r3, r0
	return list->head == list;
   48b86:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   48b88:	4283      	cmp	r3, r0
   48b8a:	d008      	beq.n	48b9e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   48b8c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48b90:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48b92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48b94:	2300      	movs	r3, #0
	node->prev = NULL;
   48b96:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   48b9a:	f7ff bf5b 	b.w	48a54 <signal_poll_event>
}
   48b9e:	4770      	bx	lr

00048ba0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   48ba0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   48ba2:	e9c0 0000 	strd	r0, r0, [r0]
   48ba6:	6083      	str	r3, [r0, #8]
}
   48ba8:	4770      	bx	lr

00048baa <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   48baa:	2300      	movs	r3, #0
   48bac:	6083      	str	r3, [r0, #8]
}
   48bae:	4770      	bx	lr

00048bb0 <event_walk_op>:
{
   48bb0:	b510      	push	{r4, lr}
	wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   48bb2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	if (are_wait_conditions_met(thread->events, event_data->events,
   48bb4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	uint32_t  match = current & desired;
   48bb6:	684b      	ldr	r3, [r1, #4]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   48bb8:	07e4      	lsls	r4, r4, #31
	uint32_t  match = current & desired;
   48bba:	ea03 0302 	and.w	r3, r3, r2
	if (wait_condition == K_EVENT_WAIT_ALL) {
   48bbe:	d50b      	bpl.n	48bd8 <event_walk_op+0x28>
	if (are_wait_conditions_met(thread->events, event_data->events,
   48bc0:	429a      	cmp	r2, r3
   48bc2:	d10b      	bne.n	48bdc <event_walk_op+0x2c>
		thread->no_wake_on_timeout = true;
   48bc4:	2301      	movs	r3, #1
   48bc6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
		thread->next_event_link = event_data->head;
   48bca:	680b      	ldr	r3, [r1, #0]
   48bcc:	6643      	str	r3, [r0, #100]	; 0x64
		event_data->head = thread;
   48bce:	6008      	str	r0, [r1, #0]
		z_abort_timeout(&thread->base.timeout);
   48bd0:	3018      	adds	r0, #24
   48bd2:	f7ff fe28 	bl	48826 <z_abort_timeout>
   48bd6:	e001      	b.n	48bdc <event_walk_op+0x2c>
	if (are_wait_conditions_met(thread->events, event_data->events,
   48bd8:	2b00      	cmp	r3, #0
   48bda:	d1f3      	bne.n	48bc4 <event_walk_op+0x14>
}
   48bdc:	2000      	movs	r0, #0
   48bde:	bd10      	pop	{r4, pc}

00048be0 <z_impl_k_event_set>:
#include <syscalls/k_event_post_mrsh.c>
#endif

void z_impl_k_event_set(struct k_event *event, uint32_t events)
{
	k_event_post_internal(event, events, ~0);
   48be0:	f04f 32ff 	mov.w	r2, #4294967295
   48be4:	f7f8 bf6a 	b.w	41abc <k_event_post_internal>

00048be8 <k_free>:
	if (ptr != NULL) {
   48be8:	b120      	cbz	r0, 48bf4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   48bea:	1f01      	subs	r1, r0, #4
   48bec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   48bf0:	f7ff ba92 	b.w	48118 <k_heap_free>
}
   48bf4:	4770      	bx	lr

00048bf6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   48bf6:	4770      	bx	lr
